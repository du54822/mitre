
/Users/dorisulysse/Desktop/mitre/application_processor/build/max78000.elf:     file format elf32-littlearm


Disassembly of section .text:

1000e000 <__isr_vector>:
1000e000:	20020000 	.word	0x20020000
1000e004:	10012c99 	.word	0x10012c99
1000e008:	10012ac5 	.word	0x10012ac5
1000e00c:	10012cd7 	.word	0x10012cd7
1000e010:	10012cd9 	.word	0x10012cd9
1000e014:	10012cdb 	.word	0x10012cdb
1000e018:	10012cdd 	.word	0x10012cdd
	...
1000e02c:	10012cdf 	.word	0x10012cdf
1000e030:	10012ce1 	.word	0x10012ce1
1000e034:	00000000 	.word	0x00000000
1000e038:	10012ce3 	.word	0x10012ce3
1000e03c:	10012ce5 	.word	0x10012ce5
1000e040:	10012ce9 	.word	0x10012ce9
1000e044:	10012ceb 	.word	0x10012ceb
1000e048:	10012ced 	.word	0x10012ced
1000e04c:	10012cef 	.word	0x10012cef
1000e050:	10012cf1 	.word	0x10012cf1
1000e054:	10012cf3 	.word	0x10012cf3
1000e058:	10012cf5 	.word	0x10012cf5
1000e05c:	10012cf7 	.word	0x10012cf7
1000e060:	10012cf9 	.word	0x10012cf9
1000e064:	10012cfb 	.word	0x10012cfb
1000e068:	10012cfd 	.word	0x10012cfd
1000e06c:	10012cff 	.word	0x10012cff
1000e070:	10012d01 	.word	0x10012d01
1000e074:	10012d03 	.word	0x10012d03
1000e078:	10012d05 	.word	0x10012d05
1000e07c:	10012d07 	.word	0x10012d07
1000e080:	10012d09 	.word	0x10012d09
1000e084:	10012d0b 	.word	0x10012d0b
1000e088:	10012d0d 	.word	0x10012d0d
1000e08c:	10012d0f 	.word	0x10012d0f
1000e090:	10012d11 	.word	0x10012d11
1000e094:	10012d13 	.word	0x10012d13
1000e098:	10012d15 	.word	0x10012d15
1000e09c:	10012d17 	.word	0x10012d17
1000e0a0:	10012a49 	.word	0x10012a49
1000e0a4:	10012a51 	.word	0x10012a51
1000e0a8:	10012d1d 	.word	0x10012d1d
1000e0ac:	10012d1f 	.word	0x10012d1f
1000e0b0:	10012d21 	.word	0x10012d21
1000e0b4:	10012d23 	.word	0x10012d23
1000e0b8:	10012d25 	.word	0x10012d25
1000e0bc:	10012d27 	.word	0x10012d27
1000e0c0:	10012d29 	.word	0x10012d29
1000e0c4:	10012d2b 	.word	0x10012d2b
1000e0c8:	10012d2d 	.word	0x10012d2d
1000e0cc:	10012d2f 	.word	0x10012d2f
1000e0d0:	10012d31 	.word	0x10012d31
1000e0d4:	10012d33 	.word	0x10012d33
1000e0d8:	10012d35 	.word	0x10012d35
1000e0dc:	10012d37 	.word	0x10012d37
1000e0e0:	10012d39 	.word	0x10012d39
1000e0e4:	10012d3b 	.word	0x10012d3b
1000e0e8:	10012d3d 	.word	0x10012d3d
1000e0ec:	10012d3f 	.word	0x10012d3f
1000e0f0:	10012d41 	.word	0x10012d41
1000e0f4:	10012d43 	.word	0x10012d43
1000e0f8:	10012d45 	.word	0x10012d45
1000e0fc:	10012d47 	.word	0x10012d47
1000e100:	10012d49 	.word	0x10012d49
1000e104:	10012d4b 	.word	0x10012d4b
1000e108:	10012d4d 	.word	0x10012d4d
1000e10c:	10012d4f 	.word	0x10012d4f
1000e110:	10012d51 	.word	0x10012d51
1000e114:	10012d53 	.word	0x10012d53
1000e118:	10012d55 	.word	0x10012d55
1000e11c:	10012d57 	.word	0x10012d57
1000e120:	10012d59 	.word	0x10012d59
1000e124:	10012d5b 	.word	0x10012d5b
1000e128:	10012d5d 	.word	0x10012d5d
1000e12c:	10012d5f 	.word	0x10012d5f
1000e130:	10012d61 	.word	0x10012d61
1000e134:	10012d63 	.word	0x10012d63
1000e138:	10012d65 	.word	0x10012d65
1000e13c:	10012d67 	.word	0x10012d67
1000e140:	10012d69 	.word	0x10012d69
1000e144:	10012d6b 	.word	0x10012d6b
1000e148:	10012d6d 	.word	0x10012d6d
1000e14c:	10012d6f 	.word	0x10012d6f
1000e150:	10012d71 	.word	0x10012d71
1000e154:	10012d73 	.word	0x10012d73
1000e158:	10012d75 	.word	0x10012d75
1000e15c:	10012d77 	.word	0x10012d77
1000e160:	10012d79 	.word	0x10012d79
1000e164:	10012d7b 	.word	0x10012d7b
1000e168:	10012d7d 	.word	0x10012d7d
1000e16c:	10012d7f 	.word	0x10012d7f
1000e170:	10012d81 	.word	0x10012d81
1000e174:	10012d83 	.word	0x10012d83
1000e178:	10012d85 	.word	0x10012d85
1000e17c:	10012d87 	.word	0x10012d87
1000e180:	10012d89 	.word	0x10012d89
1000e184:	10012d8b 	.word	0x10012d8b
1000e188:	10012d8d 	.word	0x10012d8d
1000e18c:	10012d8f 	.word	0x10012d8f
1000e190:	10012d91 	.word	0x10012d91
1000e194:	10012d93 	.word	0x10012d93
1000e198:	10012d95 	.word	0x10012d95
1000e19c:	10012d97 	.word	0x10012d97
1000e1a0:	10012d99 	.word	0x10012d99
1000e1a4:	10012d9b 	.word	0x10012d9b
1000e1a8:	10012d9d 	.word	0x10012d9d
1000e1ac:	10012d9f 	.word	0x10012d9f
1000e1b0:	10012da1 	.word	0x10012da1
1000e1b4:	10012da3 	.word	0x10012da3
1000e1b8:	10012da5 	.word	0x10012da5
1000e1bc:	10012da7 	.word	0x10012da7
1000e1c0:	10012da9 	.word	0x10012da9
1000e1c4:	10012dab 	.word	0x10012dab
1000e1c8:	10012dad 	.word	0x10012dad
1000e1cc:	10012daf 	.word	0x10012daf
1000e1d0:	10012db1 	.word	0x10012db1
1000e1d4:	10012db3 	.word	0x10012db3
1000e1d8:	10012db5 	.word	0x10012db5
1000e1dc:	10012db7 	.word	0x10012db7
	...

1000e200 <firmware_startup>:
1000e200:	4800      	ldr	r0, [pc, #0]	@ (1000e204 <firmware_startup+0x4>)
1000e202:	4780      	blx	r0
1000e204:	10012c99 	.word	0x10012c99

1000e208 <deregister_tm_clones>:
1000e208:	4803      	ldr	r0, [pc, #12]	@ (1000e218 <deregister_tm_clones+0x10>)
1000e20a:	4b04      	ldr	r3, [pc, #16]	@ (1000e21c <deregister_tm_clones+0x14>)
1000e20c:	4283      	cmp	r3, r0
1000e20e:	d002      	beq.n	1000e216 <deregister_tm_clones+0xe>
1000e210:	4b03      	ldr	r3, [pc, #12]	@ (1000e220 <deregister_tm_clones+0x18>)
1000e212:	b103      	cbz	r3, 1000e216 <deregister_tm_clones+0xe>
1000e214:	4718      	bx	r3
1000e216:	4770      	bx	lr
1000e218:	20000bcc 	.word	0x20000bcc
1000e21c:	20000bcc 	.word	0x20000bcc
1000e220:	00000000 	.word	0x00000000

1000e224 <register_tm_clones>:
1000e224:	4805      	ldr	r0, [pc, #20]	@ (1000e23c <register_tm_clones+0x18>)
1000e226:	4b06      	ldr	r3, [pc, #24]	@ (1000e240 <register_tm_clones+0x1c>)
1000e228:	1a1b      	subs	r3, r3, r0
1000e22a:	0fd9      	lsrs	r1, r3, #31
1000e22c:	eb01 01a3 	add.w	r1, r1, r3, asr #2
1000e230:	1049      	asrs	r1, r1, #1
1000e232:	d002      	beq.n	1000e23a <register_tm_clones+0x16>
1000e234:	4b03      	ldr	r3, [pc, #12]	@ (1000e244 <register_tm_clones+0x20>)
1000e236:	b103      	cbz	r3, 1000e23a <register_tm_clones+0x16>
1000e238:	4718      	bx	r3
1000e23a:	4770      	bx	lr
1000e23c:	20000bcc 	.word	0x20000bcc
1000e240:	20000bcc 	.word	0x20000bcc
1000e244:	00000000 	.word	0x00000000

1000e248 <__do_global_dtors_aux>:
1000e248:	b510      	push	{r4, lr}
1000e24a:	4c06      	ldr	r4, [pc, #24]	@ (1000e264 <__do_global_dtors_aux+0x1c>)
1000e24c:	7823      	ldrb	r3, [r4, #0]
1000e24e:	b943      	cbnz	r3, 1000e262 <__do_global_dtors_aux+0x1a>
1000e250:	f7ff ffda 	bl	1000e208 <deregister_tm_clones>
1000e254:	4b04      	ldr	r3, [pc, #16]	@ (1000e268 <__do_global_dtors_aux+0x20>)
1000e256:	b113      	cbz	r3, 1000e25e <__do_global_dtors_aux+0x16>
1000e258:	4804      	ldr	r0, [pc, #16]	@ (1000e26c <__do_global_dtors_aux+0x24>)
1000e25a:	f3af 8000 	nop.w
1000e25e:	2301      	movs	r3, #1
1000e260:	7023      	strb	r3, [r4, #0]
1000e262:	bd10      	pop	{r4, pc}
1000e264:	20000c00 	.word	0x20000c00
1000e268:	00000000 	.word	0x00000000
1000e26c:	1002c580 	.word	0x1002c580

1000e270 <frame_dummy>:
1000e270:	b508      	push	{r3, lr}
1000e272:	4b05      	ldr	r3, [pc, #20]	@ (1000e288 <frame_dummy+0x18>)
1000e274:	b11b      	cbz	r3, 1000e27e <frame_dummy+0xe>
1000e276:	4905      	ldr	r1, [pc, #20]	@ (1000e28c <frame_dummy+0x1c>)
1000e278:	4805      	ldr	r0, [pc, #20]	@ (1000e290 <frame_dummy+0x20>)
1000e27a:	f3af 8000 	nop.w
1000e27e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1000e282:	f7ff bfcf 	b.w	1000e224 <register_tm_clones>
1000e286:	bf00      	nop
1000e288:	00000000 	.word	0x00000000
1000e28c:	20000c04 	.word	0x20000c04
1000e290:	1002c580 	.word	0x1002c580
1000e294:	00000000 	.word	0x00000000

1000e298 <init>:

/********************************* UTILITIES **********************************/

// Initialize the device
// This must be called on startup to initialize the flash and i2c interfaces
void init() {
1000e298:	b510      	push	{r4, lr}
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
1000e29a:	b662      	cpsie	i

    // Setup Flash
    flash_simple_init();

    // Test application has been booted before
    flash_simple_read(FLASH_ADDR, (uint32_t*)&flash_status, sizeof(flash_entry));
1000e29c:	4c1a      	ldr	r4, [pc, #104]	@ (1000e308 <init+0x70>)
    flash_simple_init();
1000e29e:	f000 fe1d 	bl	1000eedc <flash_simple_init>
    flash_simple_read(FLASH_ADDR, (uint32_t*)&flash_status, sizeof(flash_entry));
1000e2a2:	2288      	movs	r2, #136	@ 0x88
1000e2a4:	4819      	ldr	r0, [pc, #100]	@ (1000e30c <init+0x74>)
1000e2a6:	4621      	mov	r1, r4
1000e2a8:	f000 fe32 	bl	1000ef10 <flash_simple_read>

    // Write Component IDs from flash if first boot e.g. flash unwritten
    if (flash_status.flash_magic != FLASH_MAGIC) {
1000e2ac:	4b18      	ldr	r3, [pc, #96]	@ (1000e310 <init+0x78>)
1000e2ae:	6822      	ldr	r2, [r4, #0]
1000e2b0:	429a      	cmp	r2, r3
1000e2b2:	d01c      	beq.n	1000e2ee <init+0x56>
        print_debug("First boot, setting flash!\n");
1000e2b4:	4817      	ldr	r0, [pc, #92]	@ (1000e314 <init+0x7c>)
1000e2b6:	f006 ff29 	bl	1001510c <printf>
1000e2ba:	4817      	ldr	r0, [pc, #92]	@ (1000e318 <init+0x80>)
1000e2bc:	f009 fe5a 	bl	10017f74 <puts>
1000e2c0:	4816      	ldr	r0, [pc, #88]	@ (1000e31c <init+0x84>)
1000e2c2:	f006 ff23 	bl	1001510c <printf>
1000e2c6:	4b16      	ldr	r3, [pc, #88]	@ (1000e320 <init+0x88>)
1000e2c8:	681b      	ldr	r3, [r3, #0]
1000e2ca:	6898      	ldr	r0, [r3, #8]
1000e2cc:	f00a f92e 	bl	1001852c <fflush>

        flash_status.flash_magic = FLASH_MAGIC;
1000e2d0:	a109      	add	r1, pc, #36	@ (adr r1, 1000e2f8 <init+0x60>)
1000e2d2:	e9d1 0100 	ldrd	r0, r1, [r1]
1000e2d6:	a30a      	add	r3, pc, #40	@ (adr r3, 1000e300 <init+0x68>)
1000e2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
1000e2dc:	e9c4 0100 	strd	r0, r1, [r4]
1000e2e0:	e9c4 2302 	strd	r2, r3, [r4, #8]
        flash_status.component_cnt = COMPONENT_CNT;
        uint32_t component_ids[COMPONENT_CNT] = {COMPONENT_IDS};
        memcpy(flash_status.component_ids, component_ids, 
            COMPONENT_CNT*sizeof(uint32_t));

        flash_simple_write(FLASH_ADDR, (uint32_t*)&flash_status, sizeof(flash_entry));
1000e2e4:	4809      	ldr	r0, [pc, #36]	@ (1000e30c <init+0x74>)
1000e2e6:	2288      	movs	r2, #136	@ 0x88
1000e2e8:	4621      	mov	r1, r4
1000e2ea:	f000 fe13 	bl	1000ef14 <flash_simple_write>
    }
    
    // Initialize board link interface
    board_link_init();
}
1000e2ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    board_link_init();
1000e2f2:	f000 bcf7 	b.w	1000ece4 <board_link_init>
1000e2f6:	bf00      	nop
1000e2f8:	deadbeef 	.word	0xdeadbeef
1000e2fc:	00000002 	.word	0x00000002
1000e300:	99887720 	.word	0x99887720
1000e304:	99887721 	.word	0x99887721
1000e308:	20000c20 	.word	0x20000c20
1000e30c:	1007c000 	.word	0x1007c000
1000e310:	deadbeef 	.word	0xdeadbeef
1000e314:	100229c0 	.word	0x100229c0
1000e318:	100229cc 	.word	0x100229cc
1000e31c:	100229e8 	.word	0x100229e8
1000e320:	20000598 	.word	0x20000598

1000e324 <scan_components>:
    return len;
}

/******************************** COMPONENT COMMS ********************************/

int scan_components() {
1000e324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // Print out provisioned component IDs
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1000e328:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 1000e408 <scan_components+0xe4>
1000e32c:	4e37      	ldr	r6, [pc, #220]	@ (1000e40c <scan_components+0xe8>)
1000e32e:	f8da 3004 	ldr.w	r3, [sl, #4]
int scan_components() {
1000e332:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1000e336:	b1db      	cbz	r3, 1000e370 <scan_components+0x4c>
        print_info("P>0x%08x\n", flash_status.component_ids[i]);
1000e338:	f8df 90d4 	ldr.w	r9, [pc, #212]	@ 1000e410 <scan_components+0xec>
1000e33c:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 1000e414 <scan_components+0xf0>
1000e340:	4f35      	ldr	r7, [pc, #212]	@ (1000e418 <scan_components+0xf4>)
1000e342:	f10a 0504 	add.w	r5, sl, #4
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1000e346:	2400      	movs	r4, #0
        print_info("P>0x%08x\n", flash_status.component_ids[i]);
1000e348:	4648      	mov	r0, r9
1000e34a:	f006 fedf 	bl	1001510c <printf>
1000e34e:	f855 1f04 	ldr.w	r1, [r5, #4]!
1000e352:	4640      	mov	r0, r8
1000e354:	f006 feda 	bl	1001510c <printf>
1000e358:	4638      	mov	r0, r7
1000e35a:	f006 fed7 	bl	1001510c <printf>
1000e35e:	6833      	ldr	r3, [r6, #0]
1000e360:	6898      	ldr	r0, [r3, #8]
1000e362:	f00a f8e3 	bl	1001852c <fflush>
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1000e366:	f8da 3004 	ldr.w	r3, [sl, #4]
1000e36a:	3401      	adds	r4, #1
1000e36c:	42a3      	cmp	r3, r4
1000e36e:	d8eb      	bhi.n	1000e348 <scan_components+0x24>
        int len = issue_cmd(addr, transmit_buffer, receive_buffer);

        // Success, device is present
        if (len > 0) {
            scan_message* scan = (scan_message*) receive_buffer;
            print_info("F>0x%08x\n", scan->component_id);
1000e370:	4d27      	ldr	r5, [pc, #156]	@ (1000e410 <scan_components+0xec>)
1000e372:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 1000e41c <scan_components+0xf8>
1000e376:	4f28      	ldr	r7, [pc, #160]	@ (1000e418 <scan_components+0xf4>)
    for (i2c_addr_t addr = 0x8; addr < 0x78; addr++) {
1000e378:	2408      	movs	r4, #8
1000e37a:	e01f      	b.n	1000e3bc <scan_components+0x98>
        command->opcode = COMPONENT_CMD_SCAN;
1000e37c:	f88d e100 	strb.w	lr, [sp, #256]	@ 0x100
    int result = send_packet(addr, sizeof(uint8_t), transmit);
1000e380:	f000 fcb4 	bl	1000ecec <send_packet>
1000e384:	4603      	mov	r3, r0
    if (result == ERROR_RETURN) {
1000e386:	3301      	adds	r3, #1
    int len = poll_and_receive_packet(addr, receive);
1000e388:	4669      	mov	r1, sp
1000e38a:	4620      	mov	r0, r4
    if (result == ERROR_RETURN) {
1000e38c:	d012      	beq.n	1000e3b4 <scan_components+0x90>
    int len = poll_and_receive_packet(addr, receive);
1000e38e:	f000 fcc7 	bl	1000ed20 <poll_and_receive_packet>
1000e392:	4603      	mov	r3, r0
        if (len > 0) {
1000e394:	2b00      	cmp	r3, #0
            print_info("F>0x%08x\n", scan->component_id);
1000e396:	4628      	mov	r0, r5
        if (len > 0) {
1000e398:	dd0c      	ble.n	1000e3b4 <scan_components+0x90>
            print_info("F>0x%08x\n", scan->component_id);
1000e39a:	f006 feb7 	bl	1001510c <printf>
1000e39e:	9900      	ldr	r1, [sp, #0]
1000e3a0:	4640      	mov	r0, r8
1000e3a2:	f006 feb3 	bl	1001510c <printf>
1000e3a6:	4638      	mov	r0, r7
1000e3a8:	f006 feb0 	bl	1001510c <printf>
1000e3ac:	6833      	ldr	r3, [r6, #0]
1000e3ae:	6898      	ldr	r0, [r3, #8]
1000e3b0:	f00a f8bc 	bl	1001852c <fflush>
    for (i2c_addr_t addr = 0x8; addr < 0x78; addr++) {
1000e3b4:	3401      	adds	r4, #1
1000e3b6:	b2e4      	uxtb	r4, r4
1000e3b8:	2c78      	cmp	r4, #120	@ 0x78
1000e3ba:	d013      	beq.n	1000e3e4 <scan_components+0xc0>
        command->opcode = COMPONENT_CMD_SCAN;
1000e3bc:	f1a4 0318 	sub.w	r3, r4, #24
1000e3c0:	b2db      	uxtb	r3, r3
1000e3c2:	f8df c05c 	ldr.w	ip, [pc, #92]	@ 1000e420 <scan_components+0xfc>
1000e3c6:	f04f 0e01 	mov.w	lr, #1
1000e3ca:	2b1e      	cmp	r3, #30
    int result = send_packet(addr, sizeof(uint8_t), transmit);
1000e3cc:	aa40      	add	r2, sp, #256	@ 0x100
1000e3ce:	4671      	mov	r1, lr
1000e3d0:	4620      	mov	r0, r4
1000e3d2:	fa2c fc03 	lsr.w	ip, ip, r3
1000e3d6:	d8d1      	bhi.n	1000e37c <scan_components+0x58>
1000e3d8:	f01c 0f01 	tst.w	ip, #1
1000e3dc:	d0ce      	beq.n	1000e37c <scan_components+0x58>
    for (i2c_addr_t addr = 0x8; addr < 0x78; addr++) {
1000e3de:	4474      	add	r4, lr
1000e3e0:	b2e4      	uxtb	r4, r4
1000e3e2:	e7eb      	b.n	1000e3bc <scan_components+0x98>
        }
    }
    print_success("List\n");
1000e3e4:	480f      	ldr	r0, [pc, #60]	@ (1000e424 <scan_components+0x100>)
1000e3e6:	f006 fe91 	bl	1001510c <printf>
1000e3ea:	480f      	ldr	r0, [pc, #60]	@ (1000e428 <scan_components+0x104>)
1000e3ec:	f009 fdc2 	bl	10017f74 <puts>
1000e3f0:	4809      	ldr	r0, [pc, #36]	@ (1000e418 <scan_components+0xf4>)
1000e3f2:	f006 fe8b 	bl	1001510c <printf>
1000e3f6:	6833      	ldr	r3, [r6, #0]
1000e3f8:	6898      	ldr	r0, [r3, #8]
1000e3fa:	f00a f897 	bl	1001852c <fflush>
    return SUCCESS_RETURN;
}
1000e3fe:	2000      	movs	r0, #0
1000e400:	f50d 7d00 	add.w	sp, sp, #512	@ 0x200
1000e404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000e408:	20000c20 	.word	0x20000c20
1000e40c:	20000598 	.word	0x20000598
1000e410:	100229ec 	.word	0x100229ec
1000e414:	100229f8 	.word	0x100229f8
1000e418:	100229e8 	.word	0x100229e8
1000e41c:	10022a04 	.word	0x10022a04
1000e420:	40010001 	.word	0x40010001
1000e424:	10022a10 	.word	0x10022a10
1000e428:	10022a1c 	.word	0x10022a1c

1000e42c <validate_components>:

int validate_components() {
1000e42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // Buffers for board link communication
    uint8_t receive_buffer[MAX_I2C_MESSAGE_LEN];
    uint8_t transmit_buffer[MAX_I2C_MESSAGE_LEN];

    // Send validate command to each component
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1000e430:	4f24      	ldr	r7, [pc, #144]	@ (1000e4c4 <validate_components+0x98>)
1000e432:	687b      	ldr	r3, [r7, #4]
int validate_components() {
1000e434:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1000e438:	2b00      	cmp	r3, #0
1000e43a:	d037      	beq.n	1000e4ac <validate_components+0x80>
1000e43c:	1d3d      	adds	r5, r7, #4
1000e43e:	2600      	movs	r6, #0
        // Set the I2C address of the component
        i2c_addr_t addr = component_id_to_i2c_addr(flash_status.component_ids[i]);

        // Create command message
        command_message* command = (command_message*) transmit_buffer;
        command->opcode = COMPONENT_CMD_VALIDATE;
1000e440:	f04f 0802 	mov.w	r8, #2
1000e444:	e003      	b.n	1000e44e <validate_components+0x22>
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1000e446:	687b      	ldr	r3, [r7, #4]
1000e448:	3601      	adds	r6, #1
1000e44a:	42b3      	cmp	r3, r6
1000e44c:	d92e      	bls.n	1000e4ac <validate_components+0x80>
        i2c_addr_t addr = component_id_to_i2c_addr(flash_status.component_ids[i]);
1000e44e:	f855 0f04 	ldr.w	r0, [r5, #4]!
1000e452:	f000 fc49 	bl	1000ece8 <component_id_to_i2c_addr>
    int result = send_packet(addr, sizeof(uint8_t), transmit);
1000e456:	2101      	movs	r1, #1
1000e458:	aa40      	add	r2, sp, #256	@ 0x100
        i2c_addr_t addr = component_id_to_i2c_addr(flash_status.component_ids[i]);
1000e45a:	4604      	mov	r4, r0
        command->opcode = COMPONENT_CMD_VALIDATE;
1000e45c:	f88d 8100 	strb.w	r8, [sp, #256]	@ 0x100
    int result = send_packet(addr, sizeof(uint8_t), transmit);
1000e460:	f000 fc44 	bl	1000ecec <send_packet>
1000e464:	4603      	mov	r3, r0
    if (result == ERROR_RETURN) {
1000e466:	3301      	adds	r3, #1
    int len = poll_and_receive_packet(addr, receive);
1000e468:	4669      	mov	r1, sp
1000e46a:	4620      	mov	r0, r4
    if (result == ERROR_RETURN) {
1000e46c:	d023      	beq.n	1000e4b6 <validate_components+0x8a>
    int len = poll_and_receive_packet(addr, receive);
1000e46e:	f000 fc57 	bl	1000ed20 <poll_and_receive_packet>
    if (len == ERROR_RETURN) {
1000e472:	3001      	adds	r0, #1
1000e474:	d01f      	beq.n	1000e4b6 <validate_components+0x8a>
            return ERROR_RETURN;
        }

        validate_message* validate = (validate_message*) receive_buffer;
        // Check that the result is correct
        if (validate->component_id != flash_status.component_ids[i]) {
1000e476:	9a00      	ldr	r2, [sp, #0]
1000e478:	682b      	ldr	r3, [r5, #0]
1000e47a:	429a      	cmp	r2, r3
1000e47c:	d0e3      	beq.n	1000e446 <validate_components+0x1a>
            print_error("Component ID: 0x%08x invalid\n", flash_status.component_ids[i]);
1000e47e:	3602      	adds	r6, #2
1000e480:	4811      	ldr	r0, [pc, #68]	@ (1000e4c8 <validate_components+0x9c>)
1000e482:	f006 fe43 	bl	1001510c <printf>
1000e486:	4811      	ldr	r0, [pc, #68]	@ (1000e4cc <validate_components+0xa0>)
1000e488:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
1000e48c:	f006 fe3e 	bl	1001510c <printf>
1000e490:	480f      	ldr	r0, [pc, #60]	@ (1000e4d0 <validate_components+0xa4>)
1000e492:	f006 fe3b 	bl	1001510c <printf>
1000e496:	4b0f      	ldr	r3, [pc, #60]	@ (1000e4d4 <validate_components+0xa8>)
1000e498:	681b      	ldr	r3, [r3, #0]
1000e49a:	6898      	ldr	r0, [r3, #8]
1000e49c:	f00a f846 	bl	1001852c <fflush>
            return ERROR_RETURN;
1000e4a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
            return ERROR_RETURN;
        }
    }
    return SUCCESS_RETURN;
}
1000e4a4:	f50d 7d00 	add.w	sp, sp, #512	@ 0x200
1000e4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return SUCCESS_RETURN;
1000e4ac:	2000      	movs	r0, #0
}
1000e4ae:	f50d 7d00 	add.w	sp, sp, #512	@ 0x200
1000e4b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            print_error("Could not validate component\n");
1000e4b6:	4804      	ldr	r0, [pc, #16]	@ (1000e4c8 <validate_components+0x9c>)
1000e4b8:	f006 fe28 	bl	1001510c <printf>
1000e4bc:	4806      	ldr	r0, [pc, #24]	@ (1000e4d8 <validate_components+0xac>)
1000e4be:	f009 fd59 	bl	10017f74 <puts>
1000e4c2:	e7e5      	b.n	1000e490 <validate_components+0x64>
1000e4c4:	20000c20 	.word	0x20000c20
1000e4c8:	10022a24 	.word	0x10022a24
1000e4cc:	10022a50 	.word	0x10022a50
1000e4d0:	100229e8 	.word	0x100229e8
1000e4d4:	20000598 	.word	0x20000598
1000e4d8:	10022a30 	.word	0x10022a30

1000e4dc <boot_components>:

int boot_components() {
1000e4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // Buffers for board link communication
    uint8_t receive_buffer[MAX_I2C_MESSAGE_LEN];
    uint8_t transmit_buffer[MAX_I2C_MESSAGE_LEN];

    // Send boot command to each component
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1000e4e0:	4f29      	ldr	r7, [pc, #164]	@ (1000e588 <boot_components+0xac>)
1000e4e2:	687b      	ldr	r3, [r7, #4]
int boot_components() {
1000e4e4:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1000e4e8:	b3a3      	cbz	r3, 1000e554 <boot_components+0x78>
1000e4ea:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 1000e58c <boot_components+0xb0>
            print_error("Could not boot component\n");
            return ERROR_RETURN;
        }

        // Print boot message from component
        print_info("0x%08x>%s\n", flash_status.component_ids[i], receive_buffer);
1000e4ee:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 1000e590 <boot_components+0xb4>
1000e4f2:	f8df b0a0 	ldr.w	fp, [pc, #160]	@ 1000e594 <boot_components+0xb8>
1000e4f6:	f8df a0a0 	ldr.w	sl, [pc, #160]	@ 1000e598 <boot_components+0xbc>
1000e4fa:	1d3e      	adds	r6, r7, #4
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1000e4fc:	2500      	movs	r5, #0
        i2c_addr_t addr = component_id_to_i2c_addr(flash_status.component_ids[i]);
1000e4fe:	f856 0f04 	ldr.w	r0, [r6, #4]!
1000e502:	f000 fbf1 	bl	1000ece8 <component_id_to_i2c_addr>
        command->opcode = COMPONENT_CMD_BOOT;
1000e506:	2303      	movs	r3, #3
    int result = send_packet(addr, sizeof(uint8_t), transmit);
1000e508:	2101      	movs	r1, #1
1000e50a:	aa40      	add	r2, sp, #256	@ 0x100
        i2c_addr_t addr = component_id_to_i2c_addr(flash_status.component_ids[i]);
1000e50c:	4604      	mov	r4, r0
        command->opcode = COMPONENT_CMD_BOOT;
1000e50e:	f88d 3100 	strb.w	r3, [sp, #256]	@ 0x100
    int result = send_packet(addr, sizeof(uint8_t), transmit);
1000e512:	f000 fbeb 	bl	1000ecec <send_packet>
1000e516:	4603      	mov	r3, r0
    if (result == ERROR_RETURN) {
1000e518:	3301      	adds	r3, #1
    int len = poll_and_receive_packet(addr, receive);
1000e51a:	4669      	mov	r1, sp
1000e51c:	4620      	mov	r0, r4
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1000e51e:	f105 0501 	add.w	r5, r5, #1
    if (result == ERROR_RETURN) {
1000e522:	d01c      	beq.n	1000e55e <boot_components+0x82>
    int len = poll_and_receive_packet(addr, receive);
1000e524:	f000 fbfc 	bl	1000ed20 <poll_and_receive_packet>
1000e528:	4603      	mov	r3, r0
    if (len == ERROR_RETURN) {
1000e52a:	3301      	adds	r3, #1
        print_info("0x%08x>%s\n", flash_status.component_ids[i], receive_buffer);
1000e52c:	4648      	mov	r0, r9
    if (len == ERROR_RETURN) {
1000e52e:	d016      	beq.n	1000e55e <boot_components+0x82>
        print_info("0x%08x>%s\n", flash_status.component_ids[i], receive_buffer);
1000e530:	f006 fdec 	bl	1001510c <printf>
1000e534:	6831      	ldr	r1, [r6, #0]
1000e536:	466a      	mov	r2, sp
1000e538:	4658      	mov	r0, fp
1000e53a:	f006 fde7 	bl	1001510c <printf>
1000e53e:	4650      	mov	r0, sl
1000e540:	f006 fde4 	bl	1001510c <printf>
1000e544:	f8d8 3000 	ldr.w	r3, [r8]
1000e548:	6898      	ldr	r0, [r3, #8]
1000e54a:	f009 ffef 	bl	1001852c <fflush>
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1000e54e:	687b      	ldr	r3, [r7, #4]
1000e550:	42ab      	cmp	r3, r5
1000e552:	d8d4      	bhi.n	1000e4fe <boot_components+0x22>
    }
    return SUCCESS_RETURN;
1000e554:	2000      	movs	r0, #0
}
1000e556:	f50d 7d01 	add.w	sp, sp, #516	@ 0x204
1000e55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            print_error("Could not boot component\n");
1000e55e:	480f      	ldr	r0, [pc, #60]	@ (1000e59c <boot_components+0xc0>)
1000e560:	f006 fdd4 	bl	1001510c <printf>
1000e564:	480e      	ldr	r0, [pc, #56]	@ (1000e5a0 <boot_components+0xc4>)
1000e566:	f009 fd05 	bl	10017f74 <puts>
1000e56a:	480b      	ldr	r0, [pc, #44]	@ (1000e598 <boot_components+0xbc>)
1000e56c:	f006 fdce 	bl	1001510c <printf>
1000e570:	f8d8 3000 	ldr.w	r3, [r8]
1000e574:	6898      	ldr	r0, [r3, #8]
1000e576:	f009 ffd9 	bl	1001852c <fflush>
            return ERROR_RETURN;
1000e57a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
1000e57e:	f50d 7d01 	add.w	sp, sp, #516	@ 0x204
1000e582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000e586:	bf00      	nop
1000e588:	20000c20 	.word	0x20000c20
1000e58c:	20000598 	.word	0x20000598
1000e590:	100229ec 	.word	0x100229ec
1000e594:	10022a70 	.word	0x10022a70
1000e598:	100229e8 	.word	0x100229e8
1000e59c:	10022a24 	.word	0x10022a24
1000e5a0:	10022a7c 	.word	0x10022a7c

1000e5a4 <attest_component>:

int attest_component(uint32_t component_id) {
1000e5a4:	b530      	push	{r4, r5, lr}
1000e5a6:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
1000e5aa:	4604      	mov	r4, r0
    // Buffers for board link communication
    uint8_t receive_buffer[MAX_I2C_MESSAGE_LEN];
    uint8_t transmit_buffer[MAX_I2C_MESSAGE_LEN];

    // Set the I2C address of the component
    i2c_addr_t addr = component_id_to_i2c_addr(component_id);
1000e5ac:	f000 fb9c 	bl	1000ece8 <component_id_to_i2c_addr>

    // Create command message
    command_message* command = (command_message*) transmit_buffer;
    command->opcode = COMPONENT_CMD_ATTEST;
1000e5b0:	2304      	movs	r3, #4
    int result = send_packet(addr, sizeof(uint8_t), transmit);
1000e5b2:	aa40      	add	r2, sp, #256	@ 0x100
1000e5b4:	2101      	movs	r1, #1
    i2c_addr_t addr = component_id_to_i2c_addr(component_id);
1000e5b6:	4605      	mov	r5, r0
    command->opcode = COMPONENT_CMD_ATTEST;
1000e5b8:	f88d 3100 	strb.w	r3, [sp, #256]	@ 0x100
    int result = send_packet(addr, sizeof(uint8_t), transmit);
1000e5bc:	f000 fb96 	bl	1000ecec <send_packet>
    if (result == ERROR_RETURN) {
1000e5c0:	3001      	adds	r0, #1
1000e5c2:	d026      	beq.n	1000e612 <attest_component+0x6e>
    int len = poll_and_receive_packet(addr, receive);
1000e5c4:	4669      	mov	r1, sp
1000e5c6:	4628      	mov	r0, r5
1000e5c8:	f000 fbaa 	bl	1000ed20 <poll_and_receive_packet>
    if (len == ERROR_RETURN) {
1000e5cc:	3001      	adds	r0, #1
1000e5ce:	d020      	beq.n	1000e612 <attest_component+0x6e>
        print_error("Could not attest component\n");
        return ERROR_RETURN;
    }

    // Print out attestation data 
    print_info("C>0x%08x\n", component_id);
1000e5d0:	4818      	ldr	r0, [pc, #96]	@ (1000e634 <attest_component+0x90>)
1000e5d2:	f006 fd9b 	bl	1001510c <printf>
1000e5d6:	4621      	mov	r1, r4
1000e5d8:	4817      	ldr	r0, [pc, #92]	@ (1000e638 <attest_component+0x94>)
1000e5da:	4c18      	ldr	r4, [pc, #96]	@ (1000e63c <attest_component+0x98>)
1000e5dc:	f006 fd96 	bl	1001510c <printf>
1000e5e0:	4817      	ldr	r0, [pc, #92]	@ (1000e640 <attest_component+0x9c>)
1000e5e2:	f006 fd93 	bl	1001510c <printf>
1000e5e6:	6823      	ldr	r3, [r4, #0]
1000e5e8:	6898      	ldr	r0, [r3, #8]
1000e5ea:	f009 ff9f 	bl	1001852c <fflush>
    print_info("%s", receive_buffer);
1000e5ee:	4811      	ldr	r0, [pc, #68]	@ (1000e634 <attest_component+0x90>)
1000e5f0:	f006 fd8c 	bl	1001510c <printf>
1000e5f4:	4669      	mov	r1, sp
1000e5f6:	4813      	ldr	r0, [pc, #76]	@ (1000e644 <attest_component+0xa0>)
1000e5f8:	f006 fd88 	bl	1001510c <printf>
1000e5fc:	4810      	ldr	r0, [pc, #64]	@ (1000e640 <attest_component+0x9c>)
1000e5fe:	f006 fd85 	bl	1001510c <printf>
1000e602:	6823      	ldr	r3, [r4, #0]
1000e604:	6898      	ldr	r0, [r3, #8]
1000e606:	f009 ff91 	bl	1001852c <fflush>
    return SUCCESS_RETURN;
1000e60a:	2000      	movs	r0, #0
}
1000e60c:	f50d 7d01 	add.w	sp, sp, #516	@ 0x204
1000e610:	bd30      	pop	{r4, r5, pc}
        print_error("Could not attest component\n");
1000e612:	480d      	ldr	r0, [pc, #52]	@ (1000e648 <attest_component+0xa4>)
1000e614:	f006 fd7a 	bl	1001510c <printf>
1000e618:	480c      	ldr	r0, [pc, #48]	@ (1000e64c <attest_component+0xa8>)
1000e61a:	f009 fcab 	bl	10017f74 <puts>
1000e61e:	4808      	ldr	r0, [pc, #32]	@ (1000e640 <attest_component+0x9c>)
1000e620:	f006 fd74 	bl	1001510c <printf>
1000e624:	4b05      	ldr	r3, [pc, #20]	@ (1000e63c <attest_component+0x98>)
1000e626:	681b      	ldr	r3, [r3, #0]
1000e628:	6898      	ldr	r0, [r3, #8]
1000e62a:	f009 ff7f 	bl	1001852c <fflush>
        return ERROR_RETURN;
1000e62e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1000e632:	e7eb      	b.n	1000e60c <attest_component+0x68>
1000e634:	100229ec 	.word	0x100229ec
1000e638:	10022a98 	.word	0x10022a98
1000e63c:	20000598 	.word	0x20000598
1000e640:	100229e8 	.word	0x100229e8
1000e644:	10022aa4 	.word	0x10022aa4
1000e648:	10022a24 	.word	0x10022a24
1000e64c:	10022aa8 	.word	0x10022aa8

1000e650 <boot>:
/********************************* AP LOGIC ***********************************/

// Boot sequence
// YOUR DESIGN MUST NOT CHANGE THIS FUNCTION
// Boot message is customized through the AP_BOOT_MSG macro
void boot() {
1000e650:	b510      	push	{r4, lr}
    char* data = "Crypto Example!";
    uint8_t ciphertext[BLOCK_SIZE];
    uint8_t key[KEY_SIZE];
    
    // Zero out the key
    bzero(key, BLOCK_SIZE);
1000e652:	2000      	movs	r0, #0
void boot() {
1000e654:	b090      	sub	sp, #64	@ 0x40

    // Encrypt example data and print out
    encrypt_sym((uint8_t*)data, BLOCK_SIZE, key, ciphertext); 
1000e656:	aa04      	add	r2, sp, #16
1000e658:	2110      	movs	r1, #16
1000e65a:	466b      	mov	r3, sp
    bzero(key, BLOCK_SIZE);
1000e65c:	e9cd 0004 	strd	r0, r0, [sp, #16]
1000e660:	e9cd 0006 	strd	r0, r0, [sp, #24]
    encrypt_sym((uint8_t*)data, BLOCK_SIZE, key, ciphertext); 
1000e664:	483c      	ldr	r0, [pc, #240]	@ (1000e758 <boot+0x108>)
    print_debug("Encrypted data: ");
1000e666:	4c3d      	ldr	r4, [pc, #244]	@ (1000e75c <boot+0x10c>)
    encrypt_sym((uint8_t*)data, BLOCK_SIZE, key, ciphertext); 
1000e668:	f000 fbc8 	bl	1000edfc <encrypt_sym>
    print_debug("Encrypted data: ");
1000e66c:	483c      	ldr	r0, [pc, #240]	@ (1000e760 <boot+0x110>)
1000e66e:	f006 fd4d 	bl	1001510c <printf>
1000e672:	483c      	ldr	r0, [pc, #240]	@ (1000e764 <boot+0x114>)
1000e674:	f006 fd4a 	bl	1001510c <printf>
1000e678:	483b      	ldr	r0, [pc, #236]	@ (1000e768 <boot+0x118>)
1000e67a:	f006 fd47 	bl	1001510c <printf>
1000e67e:	6823      	ldr	r3, [r4, #0]
1000e680:	6898      	ldr	r0, [r3, #8]
1000e682:	f009 ff53 	bl	1001852c <fflush>
    print_hex_debug(ciphertext, BLOCK_SIZE);
1000e686:	4836      	ldr	r0, [pc, #216]	@ (1000e760 <boot+0x110>)
1000e688:	f006 fd40 	bl	1001510c <printf>
1000e68c:	2110      	movs	r1, #16
1000e68e:	4668      	mov	r0, sp
1000e690:	f000 fb9c 	bl	1000edcc <print_hex>
1000e694:	4834      	ldr	r0, [pc, #208]	@ (1000e768 <boot+0x118>)
1000e696:	f006 fd39 	bl	1001510c <printf>
1000e69a:	6823      	ldr	r3, [r4, #0]
1000e69c:	6898      	ldr	r0, [r3, #8]
1000e69e:	f009 ff45 	bl	1001852c <fflush>

    // Hash example encryption results 
    uint8_t hash_out[HASH_SIZE];
    hash(ciphertext, BLOCK_SIZE, hash_out);
1000e6a2:	aa08      	add	r2, sp, #32
1000e6a4:	2110      	movs	r1, #16
1000e6a6:	4668      	mov	r0, sp
1000e6a8:	f000 fbfe 	bl	1000eea8 <hash>

    // Output hash result
    print_debug("Hash result: ");
1000e6ac:	482c      	ldr	r0, [pc, #176]	@ (1000e760 <boot+0x110>)
1000e6ae:	f006 fd2d 	bl	1001510c <printf>
1000e6b2:	482e      	ldr	r0, [pc, #184]	@ (1000e76c <boot+0x11c>)
1000e6b4:	f006 fd2a 	bl	1001510c <printf>
1000e6b8:	482b      	ldr	r0, [pc, #172]	@ (1000e768 <boot+0x118>)
1000e6ba:	f006 fd27 	bl	1001510c <printf>
1000e6be:	6823      	ldr	r3, [r4, #0]
1000e6c0:	6898      	ldr	r0, [r3, #8]
1000e6c2:	f009 ff33 	bl	1001852c <fflush>
    print_hex_debug(hash_out, HASH_SIZE);
1000e6c6:	4826      	ldr	r0, [pc, #152]	@ (1000e760 <boot+0x110>)
1000e6c8:	f006 fd20 	bl	1001510c <printf>
1000e6cc:	2110      	movs	r1, #16
1000e6ce:	a808      	add	r0, sp, #32
1000e6d0:	f000 fb7c 	bl	1000edcc <print_hex>
1000e6d4:	4824      	ldr	r0, [pc, #144]	@ (1000e768 <boot+0x118>)
1000e6d6:	f006 fd19 	bl	1001510c <printf>
1000e6da:	6823      	ldr	r3, [r4, #0]
1000e6dc:	6898      	ldr	r0, [r3, #8]
1000e6de:	f009 ff25 	bl	1001852c <fflush>
    
    // Decrypt the encrypted message and print out
    uint8_t decrypted[BLOCK_SIZE];
    decrypt_sym(ciphertext, BLOCK_SIZE, key, decrypted);
1000e6e2:	ab0c      	add	r3, sp, #48	@ 0x30
1000e6e4:	aa04      	add	r2, sp, #16
1000e6e6:	2110      	movs	r1, #16
1000e6e8:	4668      	mov	r0, sp
1000e6ea:	f000 fbb1 	bl	1000ee50 <decrypt_sym>
    print_debug("Decrypted message: %s\r\n", decrypted);
1000e6ee:	481c      	ldr	r0, [pc, #112]	@ (1000e760 <boot+0x110>)
1000e6f0:	f006 fd0c 	bl	1001510c <printf>
1000e6f4:	a90c      	add	r1, sp, #48	@ 0x30
1000e6f6:	481e      	ldr	r0, [pc, #120]	@ (1000e770 <boot+0x120>)
1000e6f8:	f006 fd08 	bl	1001510c <printf>
1000e6fc:	481a      	ldr	r0, [pc, #104]	@ (1000e768 <boot+0x118>)
1000e6fe:	f006 fd05 	bl	1001510c <printf>
1000e702:	6823      	ldr	r3, [r4, #0]
    #else
    // Everything after this point is modifiable in your design
    // LED loop to show that boot occurred
    while (1) {
        LED_On(LED1);
        MXC_Delay(500000);
1000e704:	4c1b      	ldr	r4, [pc, #108]	@ (1000e774 <boot+0x124>)
    print_debug("Decrypted message: %s\r\n", decrypted);
1000e706:	6898      	ldr	r0, [r3, #8]
1000e708:	f009 ff10 	bl	1001852c <fflush>
        LED_On(LED1);
1000e70c:	2000      	movs	r0, #0
1000e70e:	f004 fa67 	bl	10012be0 <LED_On>
        MXC_Delay(500000);
1000e712:	4620      	mov	r0, r4
1000e714:	f004 fc82 	bl	1001301c <MXC_Delay>
        LED_On(LED2);
1000e718:	2001      	movs	r0, #1
1000e71a:	f004 fa61 	bl	10012be0 <LED_On>
        MXC_Delay(500000);
1000e71e:	4620      	mov	r0, r4
1000e720:	f004 fc7c 	bl	1001301c <MXC_Delay>
        LED_On(LED3);
1000e724:	2002      	movs	r0, #2
1000e726:	f004 fa5b 	bl	10012be0 <LED_On>
        MXC_Delay(500000);
1000e72a:	4620      	mov	r0, r4
1000e72c:	f004 fc76 	bl	1001301c <MXC_Delay>
        LED_Off(LED1);
1000e730:	2000      	movs	r0, #0
1000e732:	f004 fa75 	bl	10012c20 <LED_Off>
        MXC_Delay(500000);
1000e736:	4620      	mov	r0, r4
1000e738:	f004 fc70 	bl	1001301c <MXC_Delay>
        LED_Off(LED2);
1000e73c:	2001      	movs	r0, #1
1000e73e:	f004 fa6f 	bl	10012c20 <LED_Off>
        MXC_Delay(500000);
1000e742:	4620      	mov	r0, r4
1000e744:	f004 fc6a 	bl	1001301c <MXC_Delay>
        LED_Off(LED3);
1000e748:	2002      	movs	r0, #2
1000e74a:	f004 fa69 	bl	10012c20 <LED_Off>
        MXC_Delay(500000);
1000e74e:	4620      	mov	r0, r4
1000e750:	f004 fc64 	bl	1001301c <MXC_Delay>
    while (1) {
1000e754:	e7da      	b.n	1000e70c <boot+0xbc>
1000e756:	bf00      	nop
1000e758:	10022ac4 	.word	0x10022ac4
1000e75c:	20000598 	.word	0x20000598
1000e760:	100229c0 	.word	0x100229c0
1000e764:	10022ad4 	.word	0x10022ad4
1000e768:	100229e8 	.word	0x100229e8
1000e76c:	10022ae8 	.word	0x10022ae8
1000e770:	10022af8 	.word	0x10022af8
1000e774:	0007a120 	.word	0x0007a120

1000e778 <validate_pin>:
    }
    #endif
}

// Compare the entered PIN to the correct PIN
int validate_pin() {
1000e778:	b510      	push	{r4, lr}
1000e77a:	b08e      	sub	sp, #56	@ 0x38
    char buf[50];
    recv_input("Enter pin: ", buf);
1000e77c:	4819      	ldr	r0, [pc, #100]	@ (1000e7e4 <validate_pin+0x6c>)
1000e77e:	a901      	add	r1, sp, #4
1000e780:	f000 faf6 	bl	1000ed70 <recv_input>
    if (!strcmp(buf, AP_PIN)) {
1000e784:	4b18      	ldr	r3, [pc, #96]	@ (1000e7e8 <validate_pin+0x70>)
1000e786:	9a01      	ldr	r2, [sp, #4]
1000e788:	429a      	cmp	r2, r3
1000e78a:	d012      	beq.n	1000e7b2 <validate_pin+0x3a>
        print_debug("Pin Accepted!\n");
        return SUCCESS_RETURN;
    }
    print_error("Invalid PIN!\n");
1000e78c:	4817      	ldr	r0, [pc, #92]	@ (1000e7ec <validate_pin+0x74>)
1000e78e:	f006 fcbd 	bl	1001510c <printf>
1000e792:	4817      	ldr	r0, [pc, #92]	@ (1000e7f0 <validate_pin+0x78>)
1000e794:	f009 fbee 	bl	10017f74 <puts>
1000e798:	4816      	ldr	r0, [pc, #88]	@ (1000e7f4 <validate_pin+0x7c>)
1000e79a:	f006 fcb7 	bl	1001510c <printf>
1000e79e:	4b16      	ldr	r3, [pc, #88]	@ (1000e7f8 <validate_pin+0x80>)
1000e7a0:	681b      	ldr	r3, [r3, #0]
1000e7a2:	6898      	ldr	r0, [r3, #8]
1000e7a4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
1000e7a8:	f009 fec0 	bl	1001852c <fflush>
    return ERROR_RETURN;
}
1000e7ac:	4620      	mov	r0, r4
1000e7ae:	b00e      	add	sp, #56	@ 0x38
1000e7b0:	bd10      	pop	{r4, pc}
    if (!strcmp(buf, AP_PIN)) {
1000e7b2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
1000e7b6:	f243 3333 	movw	r3, #13107	@ 0x3333
1000e7ba:	429a      	cmp	r2, r3
1000e7bc:	d1e6      	bne.n	1000e78c <validate_pin+0x14>
1000e7be:	f89d 400a 	ldrb.w	r4, [sp, #10]
1000e7c2:	2c00      	cmp	r4, #0
1000e7c4:	d1e2      	bne.n	1000e78c <validate_pin+0x14>
        print_debug("Pin Accepted!\n");
1000e7c6:	480d      	ldr	r0, [pc, #52]	@ (1000e7fc <validate_pin+0x84>)
1000e7c8:	f006 fca0 	bl	1001510c <printf>
1000e7cc:	480c      	ldr	r0, [pc, #48]	@ (1000e800 <validate_pin+0x88>)
1000e7ce:	f009 fbd1 	bl	10017f74 <puts>
1000e7d2:	4808      	ldr	r0, [pc, #32]	@ (1000e7f4 <validate_pin+0x7c>)
1000e7d4:	f006 fc9a 	bl	1001510c <printf>
1000e7d8:	4b07      	ldr	r3, [pc, #28]	@ (1000e7f8 <validate_pin+0x80>)
1000e7da:	681b      	ldr	r3, [r3, #0]
1000e7dc:	6898      	ldr	r0, [r3, #8]
1000e7de:	f009 fea5 	bl	1001852c <fflush>
        return SUCCESS_RETURN;
1000e7e2:	e7e3      	b.n	1000e7ac <validate_pin+0x34>
1000e7e4:	10022b10 	.word	0x10022b10
1000e7e8:	32343935 	.word	0x32343935
1000e7ec:	10022a24 	.word	0x10022a24
1000e7f0:	10022b34 	.word	0x10022b34
1000e7f4:	100229e8 	.word	0x100229e8
1000e7f8:	20000598 	.word	0x20000598
1000e7fc:	100229c0 	.word	0x100229c0
1000e800:	10022b24 	.word	0x10022b24

1000e804 <validate_token>:

// Function to validate the replacement token
int validate_token() {
1000e804:	b510      	push	{r4, lr}
1000e806:	b08e      	sub	sp, #56	@ 0x38
    char buf[50];
    recv_input("Enter token: ", buf);
1000e808:	4815      	ldr	r0, [pc, #84]	@ (1000e860 <validate_token+0x5c>)
1000e80a:	a901      	add	r1, sp, #4
1000e80c:	f000 fab0 	bl	1000ed70 <recv_input>
    if (!strcmp(buf, AP_TOKEN)) {
1000e810:	4914      	ldr	r1, [pc, #80]	@ (1000e864 <validate_token+0x60>)
1000e812:	a801      	add	r0, sp, #4
1000e814:	f00b f814 	bl	10019840 <strcmp>
1000e818:	b988      	cbnz	r0, 1000e83e <validate_token+0x3a>
        print_debug("Token Accepted!\n");
1000e81a:	4604      	mov	r4, r0
1000e81c:	4812      	ldr	r0, [pc, #72]	@ (1000e868 <validate_token+0x64>)
1000e81e:	f006 fc75 	bl	1001510c <printf>
1000e822:	4812      	ldr	r0, [pc, #72]	@ (1000e86c <validate_token+0x68>)
1000e824:	f009 fba6 	bl	10017f74 <puts>
1000e828:	4811      	ldr	r0, [pc, #68]	@ (1000e870 <validate_token+0x6c>)
1000e82a:	f006 fc6f 	bl	1001510c <printf>
1000e82e:	4b11      	ldr	r3, [pc, #68]	@ (1000e874 <validate_token+0x70>)
1000e830:	681b      	ldr	r3, [r3, #0]
1000e832:	6898      	ldr	r0, [r3, #8]
1000e834:	f009 fe7a 	bl	1001852c <fflush>
        return SUCCESS_RETURN;
    }
    print_error("Invalid Token!\n");
    return ERROR_RETURN;
}
1000e838:	4620      	mov	r0, r4
1000e83a:	b00e      	add	sp, #56	@ 0x38
1000e83c:	bd10      	pop	{r4, pc}
    print_error("Invalid Token!\n");
1000e83e:	480e      	ldr	r0, [pc, #56]	@ (1000e878 <validate_token+0x74>)
1000e840:	f006 fc64 	bl	1001510c <printf>
1000e844:	480d      	ldr	r0, [pc, #52]	@ (1000e87c <validate_token+0x78>)
1000e846:	f009 fb95 	bl	10017f74 <puts>
1000e84a:	4809      	ldr	r0, [pc, #36]	@ (1000e870 <validate_token+0x6c>)
1000e84c:	f006 fc5e 	bl	1001510c <printf>
1000e850:	4b08      	ldr	r3, [pc, #32]	@ (1000e874 <validate_token+0x70>)
1000e852:	681b      	ldr	r3, [r3, #0]
1000e854:	6898      	ldr	r0, [r3, #8]
1000e856:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
1000e85a:	f009 fe67 	bl	1001852c <fflush>
    return ERROR_RETURN;
1000e85e:	e7eb      	b.n	1000e838 <validate_token+0x34>
1000e860:	10022b44 	.word	0x10022b44
1000e864:	10022b54 	.word	0x10022b54
1000e868:	100229c0 	.word	0x100229c0
1000e86c:	10022b68 	.word	0x10022b68
1000e870:	100229e8 	.word	0x100229e8
1000e874:	20000598 	.word	0x20000598
1000e878:	10022a24 	.word	0x10022a24
1000e87c:	10022b78 	.word	0x10022b78

1000e880 <attempt_boot>:

// Boot the components and board if the components validate
void attempt_boot() {
1000e880:	b510      	push	{r4, lr}
    if (validate_components()) {
1000e882:	f7ff fdd3 	bl	1000e42c <validate_components>
1000e886:	b9f8      	cbnz	r0, 1000e8c8 <attempt_boot+0x48>
        print_error("Components could not be validated\n");
        return;
    }
    print_debug("All Components validated\n");
1000e888:	4826      	ldr	r0, [pc, #152]	@ (1000e924 <attempt_boot+0xa4>)
1000e88a:	4c27      	ldr	r4, [pc, #156]	@ (1000e928 <attempt_boot+0xa8>)
1000e88c:	f006 fc3e 	bl	1001510c <printf>
1000e890:	4826      	ldr	r0, [pc, #152]	@ (1000e92c <attempt_boot+0xac>)
1000e892:	f009 fb6f 	bl	10017f74 <puts>
1000e896:	4826      	ldr	r0, [pc, #152]	@ (1000e930 <attempt_boot+0xb0>)
1000e898:	f006 fc38 	bl	1001510c <printf>
1000e89c:	6823      	ldr	r3, [r4, #0]
1000e89e:	6898      	ldr	r0, [r3, #8]
1000e8a0:	f009 fe44 	bl	1001852c <fflush>
    if (boot_components()) {
1000e8a4:	f7ff fe1a 	bl	1000e4dc <boot_components>
1000e8a8:	b1f0      	cbz	r0, 1000e8e8 <attempt_boot+0x68>
        print_error("Failed to boot all components\n");
1000e8aa:	4822      	ldr	r0, [pc, #136]	@ (1000e934 <attempt_boot+0xb4>)
1000e8ac:	f006 fc2e 	bl	1001510c <printf>
1000e8b0:	4821      	ldr	r0, [pc, #132]	@ (1000e938 <attempt_boot+0xb8>)
1000e8b2:	f009 fb5f 	bl	10017f74 <puts>
1000e8b6:	481e      	ldr	r0, [pc, #120]	@ (1000e930 <attempt_boot+0xb0>)
1000e8b8:	f006 fc28 	bl	1001510c <printf>
1000e8bc:	6823      	ldr	r3, [r4, #0]
    // This always needs to be printed when booting
    print_info("AP>%s\n", AP_BOOT_MSG);
    print_success("Boot\n");
    // Boot
    boot();
}
1000e8be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        print_error("Failed to boot all components\n");
1000e8c2:	6898      	ldr	r0, [r3, #8]
1000e8c4:	f009 be32 	b.w	1001852c <fflush>
        print_error("Components could not be validated\n");
1000e8c8:	481a      	ldr	r0, [pc, #104]	@ (1000e934 <attempt_boot+0xb4>)
1000e8ca:	f006 fc1f 	bl	1001510c <printf>
1000e8ce:	481b      	ldr	r0, [pc, #108]	@ (1000e93c <attempt_boot+0xbc>)
1000e8d0:	f009 fb50 	bl	10017f74 <puts>
1000e8d4:	4816      	ldr	r0, [pc, #88]	@ (1000e930 <attempt_boot+0xb0>)
1000e8d6:	f006 fc19 	bl	1001510c <printf>
1000e8da:	4b13      	ldr	r3, [pc, #76]	@ (1000e928 <attempt_boot+0xa8>)
1000e8dc:	681b      	ldr	r3, [r3, #0]
}
1000e8de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        print_error("Components could not be validated\n");
1000e8e2:	6898      	ldr	r0, [r3, #8]
1000e8e4:	f009 be22 	b.w	1001852c <fflush>
    print_info("AP>%s\n", AP_BOOT_MSG);
1000e8e8:	4815      	ldr	r0, [pc, #84]	@ (1000e940 <attempt_boot+0xc0>)
1000e8ea:	f006 fc0f 	bl	1001510c <printf>
1000e8ee:	4915      	ldr	r1, [pc, #84]	@ (1000e944 <attempt_boot+0xc4>)
1000e8f0:	4815      	ldr	r0, [pc, #84]	@ (1000e948 <attempt_boot+0xc8>)
1000e8f2:	f006 fc0b 	bl	1001510c <printf>
1000e8f6:	480e      	ldr	r0, [pc, #56]	@ (1000e930 <attempt_boot+0xb0>)
1000e8f8:	f006 fc08 	bl	1001510c <printf>
1000e8fc:	6823      	ldr	r3, [r4, #0]
1000e8fe:	6898      	ldr	r0, [r3, #8]
1000e900:	f009 fe14 	bl	1001852c <fflush>
    print_success("Boot\n");
1000e904:	4811      	ldr	r0, [pc, #68]	@ (1000e94c <attempt_boot+0xcc>)
1000e906:	f006 fc01 	bl	1001510c <printf>
1000e90a:	4811      	ldr	r0, [pc, #68]	@ (1000e950 <attempt_boot+0xd0>)
1000e90c:	f009 fb32 	bl	10017f74 <puts>
1000e910:	4807      	ldr	r0, [pc, #28]	@ (1000e930 <attempt_boot+0xb0>)
1000e912:	f006 fbfb 	bl	1001510c <printf>
1000e916:	6823      	ldr	r3, [r4, #0]
1000e918:	6898      	ldr	r0, [r3, #8]
1000e91a:	f009 fe07 	bl	1001852c <fflush>
    boot();
1000e91e:	f7ff fe97 	bl	1000e650 <boot>
1000e922:	bf00      	nop
1000e924:	100229c0 	.word	0x100229c0
1000e928:	20000598 	.word	0x20000598
1000e92c:	10022bac 	.word	0x10022bac
1000e930:	100229e8 	.word	0x100229e8
1000e934:	10022a24 	.word	0x10022a24
1000e938:	10022bc8 	.word	0x10022bc8
1000e93c:	10022b88 	.word	0x10022b88
1000e940:	100229ec 	.word	0x100229ec
1000e944:	10022be8 	.word	0x10022be8
1000e948:	10022bfc 	.word	0x10022bfc
1000e94c:	10022a10 	.word	0x10022a10
1000e950:	10022c04 	.word	0x10022c04

1000e954 <attempt_replace>:

// Replace a component if the PIN is correct
void attempt_replace() {
1000e954:	b570      	push	{r4, r5, r6, lr}
1000e956:	b090      	sub	sp, #64	@ 0x40
    char buf[50];

    if (validate_token()) {
1000e958:	f7ff ff54 	bl	1000e804 <validate_token>
1000e95c:	b108      	cbz	r0, 1000e962 <attempt_replace+0xe>
    }

    // Component Out was not found
    print_error("Component 0x%08x is not provisioned for the system\r\n",
            component_id_out);
}
1000e95e:	b010      	add	sp, #64	@ 0x40
1000e960:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t component_id_in = 0;
1000e962:	4604      	mov	r4, r0
    recv_input("Component ID In: ", buf);
1000e964:	a903      	add	r1, sp, #12
1000e966:	482f      	ldr	r0, [pc, #188]	@ (1000ea24 <attempt_replace+0xd0>)
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1000e968:	4e2f      	ldr	r6, [pc, #188]	@ (1000ea28 <attempt_replace+0xd4>)
    uint32_t component_id_out = 0;
1000e96a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    recv_input("Component ID In: ", buf);
1000e96e:	f000 f9ff 	bl	1000ed70 <recv_input>
    sscanf(buf, "%x", &component_id_in);
1000e972:	aa01      	add	r2, sp, #4
1000e974:	492d      	ldr	r1, [pc, #180]	@ (1000ea2c <attempt_replace+0xd8>)
1000e976:	a803      	add	r0, sp, #12
1000e978:	f009 fe12 	bl	100185a0 <sscanf>
    recv_input("Component ID Out: ", buf);
1000e97c:	482c      	ldr	r0, [pc, #176]	@ (1000ea30 <attempt_replace+0xdc>)
1000e97e:	a903      	add	r1, sp, #12
1000e980:	f000 f9f6 	bl	1000ed70 <recv_input>
    sscanf(buf, "%x", &component_id_out);
1000e984:	4929      	ldr	r1, [pc, #164]	@ (1000ea2c <attempt_replace+0xd8>)
1000e986:	aa02      	add	r2, sp, #8
1000e988:	a803      	add	r0, sp, #12
1000e98a:	f009 fe09 	bl	100185a0 <sscanf>
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1000e98e:	6871      	ldr	r1, [r6, #4]
1000e990:	2900      	cmp	r1, #0
1000e992:	d035      	beq.n	1000ea00 <attempt_replace+0xac>
        if (flash_status.component_ids[i] == component_id_out) {
1000e994:	9d02      	ldr	r5, [sp, #8]
1000e996:	1d33      	adds	r3, r6, #4
    for (unsigned i = 0; i < flash_status.component_cnt; i++) {
1000e998:	4620      	mov	r0, r4
1000e99a:	e002      	b.n	1000e9a2 <attempt_replace+0x4e>
1000e99c:	3001      	adds	r0, #1
1000e99e:	4288      	cmp	r0, r1
1000e9a0:	d02e      	beq.n	1000ea00 <attempt_replace+0xac>
        if (flash_status.component_ids[i] == component_id_out) {
1000e9a2:	f853 2f04 	ldr.w	r2, [r3, #4]!
1000e9a6:	42aa      	cmp	r2, r5
1000e9a8:	d1f8      	bne.n	1000e99c <attempt_replace+0x48>
            flash_status.component_ids[i] = component_id_in;
1000e9aa:	1c83      	adds	r3, r0, #2
1000e9ac:	9a01      	ldr	r2, [sp, #4]
            flash_simple_erase_page(FLASH_ADDR);
1000e9ae:	4821      	ldr	r0, [pc, #132]	@ (1000ea34 <attempt_replace+0xe0>)
            flash_status.component_ids[i] = component_id_in;
1000e9b0:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
            flash_simple_erase_page(FLASH_ADDR);
1000e9b4:	f000 faaa 	bl	1000ef0c <flash_simple_erase_page>
            flash_simple_write(FLASH_ADDR, (uint32_t*)&flash_status, sizeof(flash_entry));
1000e9b8:	491b      	ldr	r1, [pc, #108]	@ (1000ea28 <attempt_replace+0xd4>)
1000e9ba:	481e      	ldr	r0, [pc, #120]	@ (1000ea34 <attempt_replace+0xe0>)
            print_debug("Replaced 0x%08x with 0x%08x\n", component_id_out,
1000e9bc:	4c1e      	ldr	r4, [pc, #120]	@ (1000ea38 <attempt_replace+0xe4>)
            flash_simple_write(FLASH_ADDR, (uint32_t*)&flash_status, sizeof(flash_entry));
1000e9be:	2288      	movs	r2, #136	@ 0x88
1000e9c0:	f000 faa8 	bl	1000ef14 <flash_simple_write>
            print_debug("Replaced 0x%08x with 0x%08x\n", component_id_out,
1000e9c4:	481d      	ldr	r0, [pc, #116]	@ (1000ea3c <attempt_replace+0xe8>)
1000e9c6:	f006 fba1 	bl	1001510c <printf>
1000e9ca:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
1000e9ce:	481c      	ldr	r0, [pc, #112]	@ (1000ea40 <attempt_replace+0xec>)
1000e9d0:	f006 fb9c 	bl	1001510c <printf>
1000e9d4:	481b      	ldr	r0, [pc, #108]	@ (1000ea44 <attempt_replace+0xf0>)
1000e9d6:	f006 fb99 	bl	1001510c <printf>
1000e9da:	6823      	ldr	r3, [r4, #0]
1000e9dc:	6898      	ldr	r0, [r3, #8]
1000e9de:	f009 fda5 	bl	1001852c <fflush>
            print_success("Replace\n");
1000e9e2:	4819      	ldr	r0, [pc, #100]	@ (1000ea48 <attempt_replace+0xf4>)
1000e9e4:	f006 fb92 	bl	1001510c <printf>
1000e9e8:	4818      	ldr	r0, [pc, #96]	@ (1000ea4c <attempt_replace+0xf8>)
1000e9ea:	f009 fac3 	bl	10017f74 <puts>
1000e9ee:	4815      	ldr	r0, [pc, #84]	@ (1000ea44 <attempt_replace+0xf0>)
1000e9f0:	f006 fb8c 	bl	1001510c <printf>
1000e9f4:	6823      	ldr	r3, [r4, #0]
1000e9f6:	6898      	ldr	r0, [r3, #8]
1000e9f8:	f009 fd98 	bl	1001852c <fflush>
}
1000e9fc:	b010      	add	sp, #64	@ 0x40
1000e9fe:	bd70      	pop	{r4, r5, r6, pc}
    print_error("Component 0x%08x is not provisioned for the system\r\n",
1000ea00:	4813      	ldr	r0, [pc, #76]	@ (1000ea50 <attempt_replace+0xfc>)
1000ea02:	f006 fb83 	bl	1001510c <printf>
1000ea06:	9902      	ldr	r1, [sp, #8]
1000ea08:	4812      	ldr	r0, [pc, #72]	@ (1000ea54 <attempt_replace+0x100>)
1000ea0a:	f006 fb7f 	bl	1001510c <printf>
1000ea0e:	480d      	ldr	r0, [pc, #52]	@ (1000ea44 <attempt_replace+0xf0>)
1000ea10:	f006 fb7c 	bl	1001510c <printf>
1000ea14:	4b08      	ldr	r3, [pc, #32]	@ (1000ea38 <attempt_replace+0xe4>)
1000ea16:	681b      	ldr	r3, [r3, #0]
1000ea18:	6898      	ldr	r0, [r3, #8]
1000ea1a:	f009 fd87 	bl	1001852c <fflush>
}
1000ea1e:	b010      	add	sp, #64	@ 0x40
1000ea20:	bd70      	pop	{r4, r5, r6, pc}
1000ea22:	bf00      	nop
1000ea24:	10022c0c 	.word	0x10022c0c
1000ea28:	20000c20 	.word	0x20000c20
1000ea2c:	10022c20 	.word	0x10022c20
1000ea30:	10022c24 	.word	0x10022c24
1000ea34:	1007c000 	.word	0x1007c000
1000ea38:	20000598 	.word	0x20000598
1000ea3c:	100229c0 	.word	0x100229c0
1000ea40:	10022c38 	.word	0x10022c38
1000ea44:	100229e8 	.word	0x100229e8
1000ea48:	10022a10 	.word	0x10022a10
1000ea4c:	10022c58 	.word	0x10022c58
1000ea50:	10022a24 	.word	0x10022a24
1000ea54:	10022c60 	.word	0x10022c60

1000ea58 <attempt_attest>:

// Attest a component if the PIN is correct
void attempt_attest() {
1000ea58:	b500      	push	{lr}
1000ea5a:	b08f      	sub	sp, #60	@ 0x3c
    char buf[50];

    if (validate_pin()) {
1000ea5c:	f7ff fe8c 	bl	1000e778 <validate_pin>
1000ea60:	b110      	cbz	r0, 1000ea68 <attempt_attest+0x10>
    recv_input("Component ID: ", buf);
    sscanf(buf, "%x", &component_id);
    if (attest_component(component_id) == SUCCESS_RETURN) {
        print_success("Attest\n");
    }
}
1000ea62:	b00f      	add	sp, #60	@ 0x3c
1000ea64:	f85d fb04 	ldr.w	pc, [sp], #4
    recv_input("Component ID: ", buf);
1000ea68:	480f      	ldr	r0, [pc, #60]	@ (1000eaa8 <attempt_attest+0x50>)
1000ea6a:	a901      	add	r1, sp, #4
1000ea6c:	f000 f980 	bl	1000ed70 <recv_input>
    sscanf(buf, "%x", &component_id);
1000ea70:	490e      	ldr	r1, [pc, #56]	@ (1000eaac <attempt_attest+0x54>)
1000ea72:	466a      	mov	r2, sp
1000ea74:	a801      	add	r0, sp, #4
1000ea76:	f009 fd93 	bl	100185a0 <sscanf>
    if (attest_component(component_id) == SUCCESS_RETURN) {
1000ea7a:	9800      	ldr	r0, [sp, #0]
1000ea7c:	f7ff fd92 	bl	1000e5a4 <attest_component>
1000ea80:	2800      	cmp	r0, #0
1000ea82:	d1ee      	bne.n	1000ea62 <attempt_attest+0xa>
        print_success("Attest\n");
1000ea84:	480a      	ldr	r0, [pc, #40]	@ (1000eab0 <attempt_attest+0x58>)
1000ea86:	f006 fb41 	bl	1001510c <printf>
1000ea8a:	480a      	ldr	r0, [pc, #40]	@ (1000eab4 <attempt_attest+0x5c>)
1000ea8c:	f009 fa72 	bl	10017f74 <puts>
1000ea90:	4809      	ldr	r0, [pc, #36]	@ (1000eab8 <attempt_attest+0x60>)
1000ea92:	f006 fb3b 	bl	1001510c <printf>
1000ea96:	4b09      	ldr	r3, [pc, #36]	@ (1000eabc <attempt_attest+0x64>)
1000ea98:	681b      	ldr	r3, [r3, #0]
1000ea9a:	6898      	ldr	r0, [r3, #8]
1000ea9c:	f009 fd46 	bl	1001852c <fflush>
}
1000eaa0:	b00f      	add	sp, #60	@ 0x3c
1000eaa2:	f85d fb04 	ldr.w	pc, [sp], #4
1000eaa6:	bf00      	nop
1000eaa8:	10022c98 	.word	0x10022c98
1000eaac:	10022c20 	.word	0x10022c20
1000eab0:	10022a10 	.word	0x10022a10
1000eab4:	10022ca8 	.word	0x10022ca8
1000eab8:	100229e8 	.word	0x100229e8
1000eabc:	20000598 	.word	0x20000598

1000eac0 <encrypt_file>:
    wc_FreeRng(&rng);
}

// Function to encrypt a file
int encrypt_file(const char *input_file, const char *output_file,
                 const unsigned char *key, const unsigned char *iv) {
1000eac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000eac4:	f5ad 5d8b 	sub.w	sp, sp, #4448	@ 0x1160
1000eac8:	b084      	sub	sp, #16
1000eaca:	460c      	mov	r4, r1
    FILE *in_file = fopen(input_file, "rb");
1000eacc:	4929      	ldr	r1, [pc, #164]	@ (1000eb74 <encrypt_file+0xb4>)
                 const unsigned char *key, const unsigned char *iv) {
1000eace:	4617      	mov	r7, r2
1000ead0:	4698      	mov	r8, r3
    FILE *in_file = fopen(input_file, "rb");
1000ead2:	f009 ff65 	bl	100189a0 <fopen>
    if (!in_file) {
1000ead6:	b390      	cbz	r0, 1000eb3e <encrypt_file+0x7e>
        fprintf(stderr, "Error: Unable to open input file\n");
        return 1;
    }

    FILE *out_file = fopen(output_file, "wb");
1000ead8:	4927      	ldr	r1, [pc, #156]	@ (1000eb78 <encrypt_file+0xb8>)
1000eada:	4605      	mov	r5, r0
1000eadc:	4620      	mov	r0, r4
1000eade:	f009 ff5f 	bl	100189a0 <fopen>
    if (!out_file) {
1000eae2:	4606      	mov	r6, r0
1000eae4:	2800      	cmp	r0, #0
1000eae6:	d038      	beq.n	1000eb5a <encrypt_file+0x9a>
        fprintf(stderr, "Error: Unable to open output file\n");
        return 1;
    }

    Aes aes;
    wc_AesSetKey(&aes, key, 256, iv, AES_ENCRYPTION);
1000eae8:	2200      	movs	r2, #0
1000eaea:	9200      	str	r2, [sp, #0]
1000eaec:	4643      	mov	r3, r8
1000eaee:	4639      	mov	r1, r7
1000eaf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
1000eaf4:	a803      	add	r0, sp, #12
1000eaf6:	f002 fb49 	bl	1001118c <wc_AesSetKey>

    unsigned char buffer[BUFFER_SIZE];
    int bytes_read;
    while ((bytes_read = fread(buffer, 1, BUFFER_SIZE, in_file)) > 0) {
1000eafa:	e007      	b.n	1000eb0c <encrypt_file+0x4c>
        wc_AesEncryptDirect(&aes, buffer, buffer);
1000eafc:	f002 fb54 	bl	100111a8 <wc_AesEncryptDirect>
        fwrite(buffer, 1, bytes_read , out_file);
1000eb00:	4633      	mov	r3, r6
1000eb02:	4622      	mov	r2, r4
1000eb04:	2101      	movs	r1, #1
1000eb06:	a85c      	add	r0, sp, #368	@ 0x170
1000eb08:	f00a fa2e 	bl	10018f68 <fwrite>
    while ((bytes_read = fread(buffer, 1, BUFFER_SIZE, in_file)) > 0) {
1000eb0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
1000eb10:	2101      	movs	r1, #1
1000eb12:	462b      	mov	r3, r5
1000eb14:	a85c      	add	r0, sp, #368	@ 0x170
1000eb16:	f00a f825 	bl	10018b64 <fread>
1000eb1a:	4604      	mov	r4, r0
        wc_AesEncryptDirect(&aes, buffer, buffer);
1000eb1c:	a95c      	add	r1, sp, #368	@ 0x170
    while ((bytes_read = fread(buffer, 1, BUFFER_SIZE, in_file)) > 0) {
1000eb1e:	2c00      	cmp	r4, #0
        wc_AesEncryptDirect(&aes, buffer, buffer);
1000eb20:	460a      	mov	r2, r1
1000eb22:	a803      	add	r0, sp, #12
    while ((bytes_read = fread(buffer, 1, BUFFER_SIZE, in_file)) > 0) {
1000eb24:	dcea      	bgt.n	1000eafc <encrypt_file+0x3c>
    }

    fclose(in_file);
1000eb26:	4628      	mov	r0, r5
1000eb28:	f009 fa98 	bl	1001805c <fclose>
    fclose(out_file);
1000eb2c:	4630      	mov	r0, r6
1000eb2e:	f009 fa95 	bl	1001805c <fclose>

    return 0;
1000eb32:	2000      	movs	r0, #0
}
1000eb34:	f50d 5d8b 	add.w	sp, sp, #4448	@ 0x1160
1000eb38:	b004      	add	sp, #16
1000eb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        fprintf(stderr, "Error: Unable to open input file\n");
1000eb3e:	4b0f      	ldr	r3, [pc, #60]	@ (1000eb7c <encrypt_file+0xbc>)
1000eb40:	480f      	ldr	r0, [pc, #60]	@ (1000eb80 <encrypt_file+0xc0>)
1000eb42:	681b      	ldr	r3, [r3, #0]
1000eb44:	2221      	movs	r2, #33	@ 0x21
1000eb46:	68db      	ldr	r3, [r3, #12]
1000eb48:	2101      	movs	r1, #1
1000eb4a:	f00a fa0d 	bl	10018f68 <fwrite>
        return 1;
1000eb4e:	2001      	movs	r0, #1
}
1000eb50:	f50d 5d8b 	add.w	sp, sp, #4448	@ 0x1160
1000eb54:	b004      	add	sp, #16
1000eb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        fclose(in_file);
1000eb5a:	4628      	mov	r0, r5
1000eb5c:	f009 fa7e 	bl	1001805c <fclose>
        fprintf(stderr, "Error: Unable to open output file\n");
1000eb60:	4b06      	ldr	r3, [pc, #24]	@ (1000eb7c <encrypt_file+0xbc>)
1000eb62:	4808      	ldr	r0, [pc, #32]	@ (1000eb84 <encrypt_file+0xc4>)
1000eb64:	681b      	ldr	r3, [r3, #0]
1000eb66:	2222      	movs	r2, #34	@ 0x22
1000eb68:	68db      	ldr	r3, [r3, #12]
1000eb6a:	2101      	movs	r1, #1
1000eb6c:	f00a f9fc 	bl	10018f68 <fwrite>
        return 1;
1000eb70:	e7ed      	b.n	1000eb4e <encrypt_file+0x8e>
1000eb72:	bf00      	nop
1000eb74:	10022cb0 	.word	0x10022cb0
1000eb78:	10022cd8 	.word	0x10022cd8
1000eb7c:	20000598 	.word	0x20000598
1000eb80:	10022cb4 	.word	0x10022cb4
1000eb84:	10022cdc 	.word	0x10022cdc

1000eb88 <main>:

    /*********************************** MAIN *************************************/

    int main() {
1000eb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000eb8c:	b0a3      	sub	sp, #140	@ 0x8c
1000eb8e:	af00      	add	r7, sp, #0
        // Initialize board
        init();
1000eb90:	f7ff fb82 	bl	1000e298 <init>
        // Print the component IDs to be helpful
        // Your design does not need to do this
        print_info("Application Processor Started\n");
1000eb94:	4842      	ldr	r0, [pc, #264]	@ (1000eca0 <main+0x118>)
1000eb96:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 1000eca4 <main+0x11c>

        // Handle commands forever
        char buf[100];
        while (1) {
            recv_input("Enter Command: ", buf);
1000eb9a:	4e43      	ldr	r6, [pc, #268]	@ (1000eca8 <main+0x120>)

            // Execute requested command
            if (!strcmp(buf, "list")) {
1000eb9c:	4d43      	ldr	r5, [pc, #268]	@ (1000ecac <main+0x124>)
                scan_components();
            } else if (!strcmp(buf, "boot")) {
1000eb9e:	f8df 8110 	ldr.w	r8, [pc, #272]	@ 1000ecb0 <main+0x128>
                attempt_boot();
            } else if (!strcmp(buf, "replace")) {
1000eba2:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 1000ecb4 <main+0x12c>
                attempt_replace();
            } else if (!strcmp(buf, "attest")) {
1000eba6:	f8df a110 	ldr.w	sl, [pc, #272]	@ 1000ecb8 <main+0x130>
        print_info("Application Processor Started\n");
1000ebaa:	f006 faaf 	bl	1001510c <printf>
1000ebae:	4843      	ldr	r0, [pc, #268]	@ (1000ecbc <main+0x134>)
1000ebb0:	f009 f9e0 	bl	10017f74 <puts>
1000ebb4:	4842      	ldr	r0, [pc, #264]	@ (1000ecc0 <main+0x138>)
1000ebb6:	f006 faa9 	bl	1001510c <printf>
1000ebba:	f8db 3000 	ldr.w	r3, [fp]
1000ebbe:	6898      	ldr	r0, [r3, #8]
1000ebc0:	f009 fcb4 	bl	1001852c <fflush>
            recv_input("Enter Command: ", buf);
1000ebc4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
1000ebc8:	4630      	mov	r0, r6
1000ebca:	f000 f8d1 	bl	1000ed70 <recv_input>
            if (!strcmp(buf, "list")) {
1000ebce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000ebd0:	42ab      	cmp	r3, r5
        while (1) {
1000ebd2:	466c      	mov	r4, sp
            if (!strcmp(buf, "list")) {
1000ebd4:	d03d      	beq.n	1000ec52 <main+0xca>
            } else if (!strcmp(buf, "boot")) {
1000ebd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000ebd8:	4543      	cmp	r3, r8
1000ebda:	d046      	beq.n	1000ec6a <main+0xe2>
            } else if (!strcmp(buf, "replace")) {
1000ebdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000ebde:	454b      	cmp	r3, r9
1000ebe0:	d04a      	beq.n	1000ec78 <main+0xf0>
            } else if (!strcmp(buf, "attest")) {
1000ebe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000ebe4:	4553      	cmp	r3, sl
1000ebe6:	d04e      	beq.n	1000ec86 <main+0xfe>
                attempt_attest();
            } else {
                print_error("Unrecognized command '%s'\n", buf);
1000ebe8:	4836      	ldr	r0, [pc, #216]	@ (1000ecc4 <main+0x13c>)
1000ebea:	f006 fa8f 	bl	1001510c <printf>
1000ebee:	f107 0124 	add.w	r1, r7, #36	@ 0x24
1000ebf2:	4835      	ldr	r0, [pc, #212]	@ (1000ecc8 <main+0x140>)
1000ebf4:	f006 fa8a 	bl	1001510c <printf>
1000ebf8:	4831      	ldr	r0, [pc, #196]	@ (1000ecc0 <main+0x138>)
1000ebfa:	f006 fa87 	bl	1001510c <printf>
1000ebfe:	f8db 3000 	ldr.w	r3, [fp]
1000ec02:	6898      	ldr	r0, [r3, #8]
1000ec04:	f009 fc92 	bl	1001852c <fflush>
        /********************AES ENCRYPTION***********/
            const char *input_file = "/Users/dorisulysse/Desktop/mitre/application_processor/inc/ectf_Params.h";
    const char *output_file = "/Users/dorisulysse/Desktop/mitre/application_processor/encrypted_params.enc";
    const int key_length = 32; // AES 256-bit key
    unsigned char key[key_length];
    const unsigned char iv[] = "1234567890abcdef"; // 128-bit IV
1000ec08:	f8df e0c0 	ldr.w	lr, [pc, #192]	@ 1000eccc <main+0x144>
1000ec0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
1000ec10:	f107 0c10 	add.w	ip, r7, #16
1000ec14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    unsigned char key[key_length];
1000ec18:	b088      	sub	sp, #32
    const unsigned char iv[] = "1234567890abcdef"; // 128-bit IV
1000ec1a:	f8de 3000 	ldr.w	r3, [lr]
1000ec1e:	f88c 3000 	strb.w	r3, [ip]
    wc_InitRng(&rng);
1000ec22:	4638      	mov	r0, r7
1000ec24:	f003 fbfe 	bl	10012424 <wc_InitRng>
    wc_RNG_GenerateBlock(&rng, key, key_length);
1000ec28:	2220      	movs	r2, #32
1000ec2a:	4669      	mov	r1, sp
1000ec2c:	4638      	mov	r0, r7
1000ec2e:	f003 fac5 	bl	100121bc <wc_RNG_GenerateBlock>
    wc_FreeRng(&rng);
1000ec32:	4638      	mov	r0, r7
1000ec34:	f003 fa14 	bl	10012060 <wc_FreeRng>
    // Generate random key
    generate_random_key(key, key_length);


            // Encrypt file
    if (encrypt_file(input_file, output_file, key, iv) == 0) {
1000ec38:	4925      	ldr	r1, [pc, #148]	@ (1000ecd0 <main+0x148>)
1000ec3a:	4826      	ldr	r0, [pc, #152]	@ (1000ecd4 <main+0x14c>)
1000ec3c:	f107 0310 	add.w	r3, r7, #16
1000ec40:	466a      	mov	r2, sp
1000ec42:	f7ff ff3d 	bl	1000eac0 <encrypt_file>
1000ec46:	b958      	cbnz	r0, 1000ec60 <main+0xd8>
        printf("File encrypted successfully\n");
1000ec48:	4823      	ldr	r0, [pc, #140]	@ (1000ecd8 <main+0x150>)
1000ec4a:	f009 f993 	bl	10017f74 <puts>
1000ec4e:	46a5      	mov	sp, r4
        while (1) {
1000ec50:	e7b8      	b.n	1000ebc4 <main+0x3c>
            if (!strcmp(buf, "list")) {
1000ec52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
1000ec56:	2b00      	cmp	r3, #0
1000ec58:	d1bd      	bne.n	1000ebd6 <main+0x4e>
                scan_components();
1000ec5a:	f7ff fb63 	bl	1000e324 <scan_components>
1000ec5e:	e7d3      	b.n	1000ec08 <main+0x80>
    } else {
        printf("Failed to encrypt file\n");
1000ec60:	481e      	ldr	r0, [pc, #120]	@ (1000ecdc <main+0x154>)
1000ec62:	f009 f987 	bl	10017f74 <puts>
1000ec66:	46a5      	mov	sp, r4
        while (1) {
1000ec68:	e7ac      	b.n	1000ebc4 <main+0x3c>
            } else if (!strcmp(buf, "boot")) {
1000ec6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
1000ec6e:	2b00      	cmp	r3, #0
1000ec70:	d1b4      	bne.n	1000ebdc <main+0x54>
                attempt_boot();
1000ec72:	f7ff fe05 	bl	1000e880 <attempt_boot>
1000ec76:	e7c7      	b.n	1000ec08 <main+0x80>
            } else if (!strcmp(buf, "replace")) {
1000ec78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000ec7a:	4a19      	ldr	r2, [pc, #100]	@ (1000ece0 <main+0x158>)
1000ec7c:	4293      	cmp	r3, r2
1000ec7e:	d1b0      	bne.n	1000ebe2 <main+0x5a>
                attempt_replace();
1000ec80:	f7ff fe68 	bl	1000e954 <attempt_replace>
1000ec84:	e7c0      	b.n	1000ec08 <main+0x80>
            } else if (!strcmp(buf, "attest")) {
1000ec86:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
1000ec88:	f247 4373 	movw	r3, #29811	@ 0x7473
1000ec8c:	429a      	cmp	r2, r3
1000ec8e:	d1ab      	bne.n	1000ebe8 <main+0x60>
1000ec90:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
1000ec94:	2b00      	cmp	r3, #0
1000ec96:	d1a7      	bne.n	1000ebe8 <main+0x60>
                attempt_attest();
1000ec98:	f7ff fede 	bl	1000ea58 <attempt_attest>
1000ec9c:	e7b4      	b.n	1000ec08 <main+0x80>
1000ec9e:	bf00      	nop
1000eca0:	100229ec 	.word	0x100229ec
1000eca4:	20000598 	.word	0x20000598
1000eca8:	10022d20 	.word	0x10022d20
1000ecac:	7473696c 	.word	0x7473696c
1000ecb0:	746f6f62 	.word	0x746f6f62
1000ecb4:	6c706572 	.word	0x6c706572
1000ecb8:	65747461 	.word	0x65747461
1000ecbc:	10022d00 	.word	0x10022d00
1000ecc0:	100229e8 	.word	0x100229e8
1000ecc4:	10022a24 	.word	0x10022a24
1000ecc8:	10022d50 	.word	0x10022d50
1000eccc:	10022e38 	.word	0x10022e38
1000ecd0:	10022d6c 	.word	0x10022d6c
1000ecd4:	10022db8 	.word	0x10022db8
1000ecd8:	10022e04 	.word	0x10022e04
1000ecdc:	10022e20 	.word	0x10022e20
1000ece0:	00656361 	.word	0x00656361

1000ece4 <board_link_init>:
 * @brief Initialize the board link connection
 * 
 * Initiailize the underlying i2c simple interface
*/
void board_link_init(void) {
    i2c_simple_controller_init();
1000ece4:	f000 b922 	b.w	1000ef2c <i2c_simple_controller_init>

1000ece8 <component_id_to_i2c_addr>:
 * 
 * @return i2c_addr_t, i2c address
*/
i2c_addr_t component_id_to_i2c_addr(uint32_t component_id) {
    return (uint8_t) component_id & COMPONENT_ADDR_MASK;
}
1000ece8:	b2c0      	uxtb	r0, r0
1000ecea:	4770      	bx	lr

1000ecec <send_packet>:
 * 
 * @return status: SUCCESS_RETURN if success, ERROR_RETURN if error
 *
 * Function sends an arbitrary packet over i2c to a specified component
*/
int send_packet(i2c_addr_t address, uint8_t len, uint8_t* packet) {
1000ecec:	b570      	push	{r4, r5, r6, lr}
1000ecee:	4604      	mov	r4, r0
1000ecf0:	460d      	mov	r5, r1
1000ecf2:	4616      	mov	r6, r2

    int result;
    result = i2c_simple_write_receive_len(address, len);
1000ecf4:	f000 f99e 	bl	1000f034 <i2c_simple_write_receive_len>
    if (result < SUCCESS_RETURN) {
1000ecf8:	2800      	cmp	r0, #0
1000ecfa:	db0d      	blt.n	1000ed18 <send_packet+0x2c>
        return ERROR_RETURN;
    }
    result = i2c_simple_write_data_generic(address, RECEIVE, len, packet);
1000ecfc:	4633      	mov	r3, r6
1000ecfe:	462a      	mov	r2, r5
1000ed00:	2100      	movs	r1, #0
1000ed02:	4620      	mov	r0, r4
1000ed04:	f000 f9e4 	bl	1000f0d0 <i2c_simple_write_data_generic>
    if (result < SUCCESS_RETURN) {
1000ed08:	2800      	cmp	r0, #0
1000ed0a:	db05      	blt.n	1000ed18 <send_packet+0x2c>
        return ERROR_RETURN;
    }
    result = i2c_simple_write_receive_done(address, true);
1000ed0c:	2101      	movs	r1, #1
1000ed0e:	4620      	mov	r0, r4
1000ed10:	f000 f974 	bl	1000effc <i2c_simple_write_receive_done>
    if (result < SUCCESS_RETURN) {
1000ed14:	17c0      	asrs	r0, r0, #31
        return ERROR_RETURN;
    }

    return SUCCESS_RETURN;
}
1000ed16:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_RETURN;
1000ed18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
1000ed1c:	bd70      	pop	{r4, r5, r6, pc}
1000ed1e:	bf00      	nop

1000ed20 <poll_and_receive_packet>:
 * @param address: i2c_addr_t, i2c address
 * @param packet: uint8_t*, pointer to a buffer where a packet will be received 
 * 
 * @return int: size of data received, ERROR_RETURN if error
*/
int poll_and_receive_packet(i2c_addr_t address, uint8_t* packet) {
1000ed20:	b570      	push	{r4, r5, r6, lr}
1000ed22:	4604      	mov	r4, r0
1000ed24:	460e      	mov	r6, r1

    int result = SUCCESS_RETURN;
1000ed26:	e002      	b.n	1000ed2e <poll_and_receive_packet+0xe>
    while (true) {
        result = i2c_simple_read_transmit_done(address);
        if (result < SUCCESS_RETURN) {
            return ERROR_RETURN;
        }
        else if (result == SUCCESS_RETURN) {
1000ed28:	d00c      	beq.n	1000ed44 <poll_and_receive_packet+0x24>
            break;
        }
        MXC_Delay(50);
1000ed2a:	f004 f977 	bl	1001301c <MXC_Delay>
        result = i2c_simple_read_transmit_done(address);
1000ed2e:	4620      	mov	r0, r4
1000ed30:	f000 f920 	bl	1000ef74 <i2c_simple_read_transmit_done>
        if (result < SUCCESS_RETURN) {
1000ed34:	2800      	cmp	r0, #0
        MXC_Delay(50);
1000ed36:	f04f 0032 	mov.w	r0, #50	@ 0x32
        if (result < SUCCESS_RETURN) {
1000ed3a:	daf5      	bge.n	1000ed28 <poll_and_receive_packet+0x8>
            return ERROR_RETURN;
1000ed3c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
    if (result < SUCCESS_RETURN) {
        return ERROR_RETURN;
    }

    return len;
}
1000ed40:	4628      	mov	r0, r5
1000ed42:	bd70      	pop	{r4, r5, r6, pc}
    int len = i2c_simple_read_transmit_len(address);
1000ed44:	4620      	mov	r0, r4
1000ed46:	f000 f937 	bl	1000efb8 <i2c_simple_read_transmit_len>
    if (len < SUCCESS_RETURN) {
1000ed4a:	1e05      	subs	r5, r0, #0
1000ed4c:	dbf6      	blt.n	1000ed3c <poll_and_receive_packet+0x1c>
    result = i2c_simple_read_data_generic(address, TRANSMIT, (uint8_t)len, packet);
1000ed4e:	4633      	mov	r3, r6
1000ed50:	b2ea      	uxtb	r2, r5
1000ed52:	2103      	movs	r1, #3
1000ed54:	4620      	mov	r0, r4
1000ed56:	f000 f9a3 	bl	1000f0a0 <i2c_simple_read_data_generic>
    if (result < SUCCESS_RETURN) {
1000ed5a:	2800      	cmp	r0, #0
1000ed5c:	dbee      	blt.n	1000ed3c <poll_and_receive_packet+0x1c>
    result = i2c_simple_write_transmit_done(address, true);
1000ed5e:	2101      	movs	r1, #1
1000ed60:	4620      	mov	r0, r4
1000ed62:	f000 f981 	bl	1000f068 <i2c_simple_write_transmit_done>
    if (result < SUCCESS_RETURN) {
1000ed66:	2800      	cmp	r0, #0
1000ed68:	dbe8      	blt.n	1000ed3c <poll_and_receive_packet+0x1c>
}
1000ed6a:	4628      	mov	r0, r5
1000ed6c:	bd70      	pop	{r4, r5, r6, pc}
1000ed6e:	bf00      	nop

1000ed70 <recv_input>:
 */

#include "host_messaging.h"

// Print a message through USB UART and then receive a line over USB UART
void recv_input(const char *msg, char *buf) {
1000ed70:	b570      	push	{r4, r5, r6, lr}
1000ed72:	4605      	mov	r5, r0
    print_debug(msg);
1000ed74:	4810      	ldr	r0, [pc, #64]	@ (1000edb8 <recv_input+0x48>)
1000ed76:	4e11      	ldr	r6, [pc, #68]	@ (1000edbc <recv_input+0x4c>)
void recv_input(const char *msg, char *buf) {
1000ed78:	460c      	mov	r4, r1
    print_debug(msg);
1000ed7a:	f006 f9c7 	bl	1001510c <printf>
1000ed7e:	4628      	mov	r0, r5
1000ed80:	f006 f9c4 	bl	1001510c <printf>
1000ed84:	480e      	ldr	r0, [pc, #56]	@ (1000edc0 <recv_input+0x50>)
1000ed86:	f006 f9c1 	bl	1001510c <printf>
1000ed8a:	6833      	ldr	r3, [r6, #0]
1000ed8c:	6898      	ldr	r0, [r3, #8]
1000ed8e:	f009 fbcd 	bl	1001852c <fflush>
    fflush(0);
1000ed92:	2000      	movs	r0, #0
1000ed94:	f009 fbca 	bl	1001852c <fflush>
    print_ack();
1000ed98:	480a      	ldr	r0, [pc, #40]	@ (1000edc4 <recv_input+0x54>)
1000ed9a:	f006 f9b7 	bl	1001510c <printf>
1000ed9e:	6833      	ldr	r3, [r6, #0]
1000eda0:	6898      	ldr	r0, [r3, #8]
1000eda2:	f009 fbc3 	bl	1001852c <fflush>
    gets(buf);
1000eda6:	4620      	mov	r0, r4
1000eda8:	f00a fb12 	bl	100193d0 <gets>
    puts("");
}
1000edac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    puts("");
1000edb0:	4805      	ldr	r0, [pc, #20]	@ (1000edc8 <recv_input+0x58>)
1000edb2:	f009 b8df 	b.w	10017f74 <puts>
1000edb6:	bf00      	nop
1000edb8:	100229c0 	.word	0x100229c0
1000edbc:	20000598 	.word	0x20000598
1000edc0:	100229e8 	.word	0x100229e8
1000edc4:	10022e4c 	.word	0x10022e4c
1000edc8:	10022c94 	.word	0x10022c94

1000edcc <print_hex>:

// Prints a buffer of bytes as a hex string
void print_hex(uint8_t *buf, size_t len) {
    for (int i = 0; i < len; i++)
1000edcc:	b181      	cbz	r1, 1000edf0 <print_hex+0x24>
void print_hex(uint8_t *buf, size_t len) {
1000edce:	b570      	push	{r4, r5, r6, lr}
1000edd0:	4401      	add	r1, r0
    	printf("%02x", buf[i]);
1000edd2:	4e09      	ldr	r6, [pc, #36]	@ (1000edf8 <print_hex+0x2c>)
1000edd4:	1e44      	subs	r4, r0, #1
1000edd6:	1e4d      	subs	r5, r1, #1
1000edd8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
1000eddc:	4630      	mov	r0, r6
1000edde:	f006 f995 	bl	1001510c <printf>
    for (int i = 0; i < len; i++)
1000ede2:	42ac      	cmp	r4, r5
1000ede4:	d1f8      	bne.n	1000edd8 <print_hex+0xc>
    printf("\n");
}
1000ede6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printf("\n");
1000edea:	200a      	movs	r0, #10
1000edec:	f009 b862 	b.w	10017eb4 <putchar>
1000edf0:	200a      	movs	r0, #10
1000edf2:	f009 b85f 	b.w	10017eb4 <putchar>
1000edf6:	bf00      	nop
1000edf8:	10022e58 	.word	0x10022e58

1000edfc <encrypt_sym>:
 * @param ciphertext A pointer to a buffer of length len where the resulting
 *          ciphertext will be written to
 *
 * @return 0 on success, -1 on bad length, other non-zero for other error
 */
int encrypt_sym(uint8_t *plaintext, size_t len, uint8_t *key, uint8_t *ciphertext) {
1000edfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000ee00:	460c      	mov	r4, r1
1000ee02:	b0dc      	sub	sp, #368	@ 0x170
    Aes ctx; // Context for encryption
    int result; // Library result

    // Ensure valid length
    if (len <= 0 || len % BLOCK_SIZE)
1000ee04:	b309      	cbz	r1, 1000ee4a <encrypt_sym+0x4e>
1000ee06:	461e      	mov	r6, r3
1000ee08:	f011 030f 	ands.w	r3, r1, #15
1000ee0c:	d11d      	bne.n	1000ee4a <encrypt_sym+0x4e>
        return -1;

    // Set the key for encryption
    result = wc_AesSetKey(&ctx, key, 16, NULL, AES_ENCRYPTION);
1000ee0e:	4611      	mov	r1, r2
1000ee10:	4605      	mov	r5, r0
1000ee12:	9300      	str	r3, [sp, #0]
1000ee14:	2210      	movs	r2, #16
1000ee16:	a803      	add	r0, sp, #12
1000ee18:	f002 f9b8 	bl	1001118c <wc_AesSetKey>
    if (result != 0)
1000ee1c:	4680      	mov	r8, r0
1000ee1e:	b980      	cbnz	r0, 1000ee42 <encrypt_sym+0x46>
        return result; // Report error


    // Encrypt each block
    for (int i = 0; i < len - 1; i += BLOCK_SIZE) {
1000ee20:	2c01      	cmp	r4, #1
1000ee22:	f104 37ff 	add.w	r7, r4, #4294967295	@ 0xffffffff
1000ee26:	d00c      	beq.n	1000ee42 <encrypt_sym+0x46>
1000ee28:	4604      	mov	r4, r0
1000ee2a:	e001      	b.n	1000ee30 <encrypt_sym+0x34>
1000ee2c:	42a7      	cmp	r7, r4
1000ee2e:	d908      	bls.n	1000ee42 <encrypt_sym+0x46>
        result = wc_AesEncryptDirect(&ctx, ciphertext + i, plaintext + i);
1000ee30:	192a      	adds	r2, r5, r4
1000ee32:	1931      	adds	r1, r6, r4
1000ee34:	a803      	add	r0, sp, #12
    for (int i = 0; i < len - 1; i += BLOCK_SIZE) {
1000ee36:	3410      	adds	r4, #16
        result = wc_AesEncryptDirect(&ctx, ciphertext + i, plaintext + i);
1000ee38:	f002 f9b6 	bl	100111a8 <wc_AesEncryptDirect>
        if (result != 0)
1000ee3c:	2800      	cmp	r0, #0
1000ee3e:	d0f5      	beq.n	1000ee2c <encrypt_sym+0x30>
        result = wc_AesEncryptDirect(&ctx, ciphertext + i, plaintext + i);
1000ee40:	4680      	mov	r8, r0
            return result; // Report error
    }
    return 0;
}
1000ee42:	4640      	mov	r0, r8
1000ee44:	b05c      	add	sp, #368	@ 0x170
1000ee46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
1000ee4a:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
1000ee4e:	e7f8      	b.n	1000ee42 <encrypt_sym+0x46>

1000ee50 <decrypt_sym>:
 * @param plaintext A pointer to a buffer of length len where the resulting
 *          plaintext will be written to
 *
 * @return 0 on success, -1 on bad length, other non-zero for other error
 */
int decrypt_sym(uint8_t *ciphertext, size_t len, uint8_t *key, uint8_t *plaintext) {
1000ee50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000ee54:	b0dc      	sub	sp, #368	@ 0x170
    Aes ctx; // Context for decryption
    int result; // Library result

    // Ensure valid length
    if (len <= 0 || len % BLOCK_SIZE)
1000ee56:	b319      	cbz	r1, 1000eea0 <decrypt_sym+0x50>
1000ee58:	461e      	mov	r6, r3
1000ee5a:	f011 030f 	ands.w	r3, r1, #15
1000ee5e:	460c      	mov	r4, r1
1000ee60:	d11e      	bne.n	1000eea0 <decrypt_sym+0x50>
        return -1;

    // Set the key for decryption
    result = wc_AesSetKey(&ctx, key, 16, NULL, AES_DECRYPTION);
1000ee62:	4611      	mov	r1, r2
1000ee64:	2201      	movs	r2, #1
1000ee66:	9200      	str	r2, [sp, #0]
1000ee68:	4605      	mov	r5, r0
1000ee6a:	2210      	movs	r2, #16
1000ee6c:	a803      	add	r0, sp, #12
1000ee6e:	f002 f98d 	bl	1001118c <wc_AesSetKey>
    if (result != 0)
1000ee72:	4680      	mov	r8, r0
1000ee74:	b980      	cbnz	r0, 1000ee98 <decrypt_sym+0x48>
        return result; // Report error

    // Decrypt each block
    for (int i = 0; i < len - 1; i += BLOCK_SIZE) {
1000ee76:	2c01      	cmp	r4, #1
1000ee78:	f104 37ff 	add.w	r7, r4, #4294967295	@ 0xffffffff
1000ee7c:	d00c      	beq.n	1000ee98 <decrypt_sym+0x48>
1000ee7e:	4604      	mov	r4, r0
1000ee80:	e001      	b.n	1000ee86 <decrypt_sym+0x36>
1000ee82:	42a7      	cmp	r7, r4
1000ee84:	d908      	bls.n	1000ee98 <decrypt_sym+0x48>
        result = wc_AesDecryptDirect(&ctx, plaintext + i, ciphertext + i);
1000ee86:	192a      	adds	r2, r5, r4
1000ee88:	1931      	adds	r1, r6, r4
1000ee8a:	a803      	add	r0, sp, #12
    for (int i = 0; i < len - 1; i += BLOCK_SIZE) {
1000ee8c:	3410      	adds	r4, #16
        result = wc_AesDecryptDirect(&ctx, plaintext + i, ciphertext + i);
1000ee8e:	f002 f9a3 	bl	100111d8 <wc_AesDecryptDirect>
        if (result != 0)
1000ee92:	2800      	cmp	r0, #0
1000ee94:	d0f5      	beq.n	1000ee82 <decrypt_sym+0x32>
        result = wc_AesDecryptDirect(&ctx, plaintext + i, ciphertext + i);
1000ee96:	4680      	mov	r8, r0
            return result; // Report error
    }
    return 0;
}
1000ee98:	4640      	mov	r0, r8
1000ee9a:	b05c      	add	sp, #368	@ 0x170
1000ee9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
1000eea0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
1000eea4:	e7f8      	b.n	1000ee98 <decrypt_sym+0x48>
1000eea6:	bf00      	nop

1000eea8 <hash>:
 *
 * @return 0 on success, non-zero for other error
 */
int hash(void *data, size_t len, uint8_t *hash_out) {
    // Pass values to hash
    return wc_Md5Hash((uint8_t *)data, len, hash_out);
1000eea8:	f002 b9ae 	b.w	10011208 <wc_Md5Hash>

1000eeac <flash_simple_irq>:
 * 
 * This ISR allows for access to the flash through simple_flash to operate
 */
void flash_simple_irq(void) {
    uint32_t temp;
    temp = MXC_FLC0->intr;
1000eeac:	4a09      	ldr	r2, [pc, #36]	@ (1000eed4 <flash_simple_irq+0x28>)
1000eeae:	6a53      	ldr	r3, [r2, #36]	@ 0x24

    if (temp & MXC_F_FLC_INTR_DONE) {
1000eeb0:	07d9      	lsls	r1, r3, #31
1000eeb2:	d503      	bpl.n	1000eebc <flash_simple_irq+0x10>
        MXC_FLC0->intr &= ~MXC_F_FLC_INTR_DONE;
1000eeb4:	6a51      	ldr	r1, [r2, #36]	@ 0x24
1000eeb6:	f021 0101 	bic.w	r1, r1, #1
1000eeba:	6251      	str	r1, [r2, #36]	@ 0x24
    }

    if (temp & MXC_F_FLC_INTR_AF) {
1000eebc:	079b      	lsls	r3, r3, #30
1000eebe:	d400      	bmi.n	1000eec2 <flash_simple_irq+0x16>
        MXC_FLC0->intr &= ~MXC_F_FLC_INTR_AF;
        printf(" -> Interrupt! (Flash access failure)\n\n");
    }
}
1000eec0:	4770      	bx	lr
        MXC_FLC0->intr &= ~MXC_F_FLC_INTR_AF;
1000eec2:	4a04      	ldr	r2, [pc, #16]	@ (1000eed4 <flash_simple_irq+0x28>)
        printf(" -> Interrupt! (Flash access failure)\n\n");
1000eec4:	4804      	ldr	r0, [pc, #16]	@ (1000eed8 <flash_simple_irq+0x2c>)
        MXC_FLC0->intr &= ~MXC_F_FLC_INTR_AF;
1000eec6:	6a53      	ldr	r3, [r2, #36]	@ 0x24
1000eec8:	f023 0302 	bic.w	r3, r3, #2
1000eecc:	6253      	str	r3, [r2, #36]	@ 0x24
        printf(" -> Interrupt! (Flash access failure)\n\n");
1000eece:	f009 b851 	b.w	10017f74 <puts>
1000eed2:	bf00      	nop
1000eed4:	40029000 	.word	0x40029000
1000eed8:	10022e60 	.word	0x10022e60

1000eedc <flash_simple_init>:
 * @brief Initialize the Simple Flash Interface
 * 
 * This function registers the interrupt for the flash system,
 * enables the interrupt, and disables ICC
*/
void flash_simple_init(void) {
1000eedc:	b508      	push	{r3, lr}
    // Setup Flash
    MXC_NVIC_SetVector(FLC0_IRQn, flash_simple_irq);
1000eede:	4908      	ldr	r1, [pc, #32]	@ (1000ef00 <flash_simple_init+0x24>)
1000eee0:	2017      	movs	r0, #23
1000eee2:	f004 f8d5 	bl	10013090 <MXC_NVIC_SetVector>
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000eee6:	4b07      	ldr	r3, [pc, #28]	@ (1000ef04 <flash_simple_init+0x28>)
1000eee8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
1000eeec:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(FLC0_IRQn);
    MXC_FLC_EnableInt(MXC_F_FLC_INTR_DONEIE | MXC_F_FLC_INTR_AFIE);
1000eeee:	f44f 7040 	mov.w	r0, #768	@ 0x300
1000eef2:	f004 fa19 	bl	10013328 <MXC_FLC_EnableInt>
    MXC_ICC_Disable(MXC_ICC0);
}
1000eef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MXC_ICC_Disable(MXC_ICC0);
1000eefa:	4803      	ldr	r0, [pc, #12]	@ (1000ef08 <flash_simple_init+0x2c>)
1000eefc:	f005 baba 	b.w	10014474 <MXC_ICC_Disable>
1000ef00:	1000eead 	.word	0x1000eead
1000ef04:	e000e100 	.word	0xe000e100
1000ef08:	4002a000 	.word	0x4002a000

1000ef0c <flash_simple_erase_page>:
 * Flash memory can only be erased in a large block size called a page.
 * Once erased, memory can only be written one way e.g. 1->0.
 * In order to be re-written the entire page must be erased.
*/
int flash_simple_erase_page(uint32_t address) {
    return MXC_FLC_PageErase(address);
1000ef0c:	f01d bb34 	b.w	1002c578 <__MXC_FLC_PageErase_veneer>

1000ef10 <flash_simple_read>:
 * 
 * This function reads data from the specified flash page into the buffer
 * with the specified amount of bytes
*/
void flash_simple_read(uint32_t address, uint32_t* buffer, uint32_t size) {
    MXC_FLC_Read(address, buffer, size);
1000ef10:	f004 ba08 	b.w	10013324 <MXC_FLC_Read>

1000ef14 <flash_simple_write>:
 * This function writes data to the specified flash page from the buffer passed
 * with the specified amount of bytes. Flash memory can only be written in one
 * way e.g. 1->0. To rewrite previously written memory see the 
 * flash_simple_erase_page documentation.
*/
int flash_simple_write(uint32_t address, uint32_t* buffer, uint32_t size) {
1000ef14:	460b      	mov	r3, r1
    return MXC_FLC_Write(address, size, buffer);
1000ef16:	4611      	mov	r1, r2
1000ef18:	461a      	mov	r2, r3
1000ef1a:	f004 ba01 	b.w	10013320 <MXC_FLC_Write>
1000ef1e:	bf00      	nop

1000ef20 <I2C_Handler>:
 * @brief Built-In I2C Interrupt Handler
 *
 * Utilize the built-in I2C interrupt handler to allow for the use
 * of MXC_I2C_Master_Transaction() function calls
 */
static void I2C_Handler(void) { MXC_I2C_AsyncHandler(I2C_INTERFACE); }
1000ef20:	4801      	ldr	r0, [pc, #4]	@ (1000ef28 <I2C_Handler+0x8>)
1000ef22:	f004 bc65 	b.w	100137f0 <MXC_I2C_AsyncHandler>
1000ef26:	bf00      	nop
1000ef28:	4001e000 	.word	0x4001e000

1000ef2c <i2c_simple_controller_init>:
 * @brief Initialize the I2C Connection
 * 
 * Initialize the I2C by enabling the module, setting the correct
 * frequency, and enabling the interrupt to our I2C_Handler
*/
int i2c_simple_controller_init(void) {
1000ef2c:	b510      	push	{r4, lr}
    int error;

    // Initialize the I2C Interface
    error = MXC_I2C_Init(I2C_INTERFACE, true, 0);
1000ef2e:	480c      	ldr	r0, [pc, #48]	@ (1000ef60 <i2c_simple_controller_init+0x34>)
1000ef30:	2200      	movs	r2, #0
1000ef32:	2101      	movs	r1, #1
1000ef34:	f004 fbf8 	bl	10013728 <MXC_I2C_Init>
    if (error != E_NO_ERROR) {
1000ef38:	4604      	mov	r4, r0
1000ef3a:	b960      	cbnz	r0, 1000ef56 <i2c_simple_controller_init+0x2a>
        printf("Failed to initialize I2C.\n");
        return error;
    }
    // Set frequency to frequency macro
    MXC_I2C_SetFrequency(I2C_INTERFACE, I2C_FREQ);
1000ef3c:	4909      	ldr	r1, [pc, #36]	@ (1000ef64 <i2c_simple_controller_init+0x38>)
1000ef3e:	4808      	ldr	r0, [pc, #32]	@ (1000ef60 <i2c_simple_controller_init+0x34>)
1000ef40:	f004 fc3c 	bl	100137bc <MXC_I2C_SetFrequency>
    
    // Set up interrupt
    MXC_NVIC_SetVector(MXC_I2C_GET_IRQ(MXC_I2C_GET_IDX(I2C_INTERFACE)), I2C_Handler);
1000ef44:	4908      	ldr	r1, [pc, #32]	@ (1000ef68 <i2c_simple_controller_init+0x3c>)
1000ef46:	2024      	movs	r0, #36	@ 0x24
1000ef48:	f004 f8a2 	bl	10013090 <MXC_NVIC_SetVector>
1000ef4c:	4b07      	ldr	r3, [pc, #28]	@ (1000ef6c <i2c_simple_controller_init+0x40>)
1000ef4e:	2210      	movs	r2, #16
1000ef50:	605a      	str	r2, [r3, #4]
    NVIC_EnableIRQ(MXC_I2C_GET_IRQ(MXC_I2C_GET_IDX(I2C_INTERFACE)));

    return E_NO_ERROR;
}
1000ef52:	4620      	mov	r0, r4
1000ef54:	bd10      	pop	{r4, pc}
        printf("Failed to initialize I2C.\n");
1000ef56:	4806      	ldr	r0, [pc, #24]	@ (1000ef70 <i2c_simple_controller_init+0x44>)
1000ef58:	f009 f80c 	bl	10017f74 <puts>
}
1000ef5c:	4620      	mov	r0, r4
1000ef5e:	bd10      	pop	{r4, pc}
1000ef60:	4001e000 	.word	0x4001e000
1000ef64:	000186a0 	.word	0x000186a0
1000ef68:	1000ef21 	.word	0x1000ef21
1000ef6c:	e000e100 	.word	0xe000e100
1000ef70:	10022e88 	.word	0x10022e88

1000ef74 <i2c_simple_read_transmit_done>:
 * @return int: TRANSMIT_DONE value, negative if error
 *
 * Read the TRANSMIT_DONE for an I2C peripheral
 * and return the value 
*/
int i2c_simple_read_transmit_done(i2c_addr_t addr) {
1000ef74:	b510      	push	{r4, lr}
*/
int i2c_simple_read_status_generic(i2c_addr_t addr, ECTF_I2C_REGS reg) {
    uint8_t value = 0;

    mxc_i2c_req_t request;
    request.i2c = I2C_INTERFACE;
1000ef76:	490f      	ldr	r1, [pc, #60]	@ (1000efb4 <i2c_simple_read_transmit_done+0x40>)
int i2c_simple_read_transmit_done(i2c_addr_t addr) {
1000ef78:	b08a      	sub	sp, #40	@ 0x28
1000ef7a:	2404      	movs	r4, #4
    request.addr = addr;
1000ef7c:	e9cd 1002 	strd	r1, r0, [sp, #8]
    uint8_t value = 0;
1000ef80:	2300      	movs	r3, #0
    request.tx_len = 1;
1000ef82:	2201      	movs	r2, #1
1000ef84:	f88d 4006 	strb.w	r4, [sp, #6]
    request.tx_buf = (uint8_t*)&reg;
    request.rx_len = 1;
    request.rx_buf = (uint8_t*)&value;
1000ef88:	f10d 0107 	add.w	r1, sp, #7
    request.tx_buf = (uint8_t*)&reg;
1000ef8c:	f10d 0406 	add.w	r4, sp, #6
    request.restart = 0;
    request.callback = NULL;

    int result = MXC_I2C_MasterTransaction(&request);
1000ef90:	a802      	add	r0, sp, #8
    request.tx_buf = (uint8_t*)&reg;
1000ef92:	e9cd 4204 	strd	r4, r2, [sp, #16]
    request.rx_buf = (uint8_t*)&value;
1000ef96:	e9cd 1206 	strd	r1, r2, [sp, #24]
    request.callback = NULL;
1000ef9a:	e9cd 3308 	strd	r3, r3, [sp, #32]
    uint8_t value = 0;
1000ef9e:	f88d 3007 	strb.w	r3, [sp, #7]
    int result = MXC_I2C_MasterTransaction(&request);
1000efa2:	f004 fc1f 	bl	100137e4 <MXC_I2C_MasterTransaction>
    if (result < 0) {
1000efa6:	2800      	cmp	r0, #0
        return result;
    }
    return value;
1000efa8:	bfa8      	it	ge
1000efaa:	f89d 0007 	ldrbge.w	r0, [sp, #7]
}
1000efae:	b00a      	add	sp, #40	@ 0x28
1000efb0:	bd10      	pop	{r4, pc}
1000efb2:	bf00      	nop
1000efb4:	4001e000 	.word	0x4001e000

1000efb8 <i2c_simple_read_transmit_len>:
int i2c_simple_read_transmit_len(i2c_addr_t addr) {
1000efb8:	b510      	push	{r4, lr}
    request.i2c = I2C_INTERFACE;
1000efba:	490f      	ldr	r1, [pc, #60]	@ (1000eff8 <i2c_simple_read_transmit_len+0x40>)
int i2c_simple_read_transmit_len(i2c_addr_t addr) {
1000efbc:	b08a      	sub	sp, #40	@ 0x28
1000efbe:	2405      	movs	r4, #5
    request.addr = addr;
1000efc0:	e9cd 1002 	strd	r1, r0, [sp, #8]
    uint8_t value = 0;
1000efc4:	2300      	movs	r3, #0
    request.tx_len = 1;
1000efc6:	2201      	movs	r2, #1
1000efc8:	f88d 4006 	strb.w	r4, [sp, #6]
    request.rx_buf = (uint8_t*)&value;
1000efcc:	f10d 0107 	add.w	r1, sp, #7
    request.tx_buf = (uint8_t*)&reg;
1000efd0:	f10d 0406 	add.w	r4, sp, #6
    int result = MXC_I2C_MasterTransaction(&request);
1000efd4:	a802      	add	r0, sp, #8
    request.tx_buf = (uint8_t*)&reg;
1000efd6:	e9cd 4204 	strd	r4, r2, [sp, #16]
    request.rx_buf = (uint8_t*)&value;
1000efda:	e9cd 1206 	strd	r1, r2, [sp, #24]
    request.callback = NULL;
1000efde:	e9cd 3308 	strd	r3, r3, [sp, #32]
    uint8_t value = 0;
1000efe2:	f88d 3007 	strb.w	r3, [sp, #7]
    int result = MXC_I2C_MasterTransaction(&request);
1000efe6:	f004 fbfd 	bl	100137e4 <MXC_I2C_MasterTransaction>
    if (result < 0) {
1000efea:	2800      	cmp	r0, #0
    return value;
1000efec:	bfa8      	it	ge
1000efee:	f89d 0007 	ldrbge.w	r0, [sp, #7]
}
1000eff2:	b00a      	add	sp, #40	@ 0x28
1000eff4:	bd10      	pop	{r4, pc}
1000eff6:	bf00      	nop
1000eff8:	4001e000 	.word	0x4001e000

1000effc <i2c_simple_write_receive_done>:
int i2c_simple_write_receive_done(i2c_addr_t addr, bool done) {
1000effc:	b530      	push	{r4, r5, lr}
1000effe:	b08b      	sub	sp, #44	@ 0x2c
1000f000:	4605      	mov	r5, r0
    uint8_t packet[2];
    packet[0] = (uint8_t) reg;
    packet[1] = value;
    
    mxc_i2c_req_t request;
    request.i2c = I2C_INTERFACE;
1000f002:	4a0b      	ldr	r2, [pc, #44]	@ (1000f030 <i2c_simple_write_receive_done+0x34>)
1000f004:	9202      	str	r2, [sp, #8]
    packet[0] = (uint8_t) reg;
1000f006:	2001      	movs	r0, #1
    request.addr = addr;
    request.tx_len = 2;
    request.tx_buf = packet;
    request.rx_len = 0;
1000f008:	2300      	movs	r3, #0
    packet[0] = (uint8_t) reg;
1000f00a:	f88d 0004 	strb.w	r0, [sp, #4]
    request.tx_buf = packet;
1000f00e:	aa01      	add	r2, sp, #4
    request.tx_len = 2;
1000f010:	2402      	movs	r4, #2
    request.rx_buf = 0;
    request.restart = 0;
    request.callback = NULL;

    return MXC_I2C_MasterTransaction(&request);
1000f012:	a802      	add	r0, sp, #8
    request.tx_buf = packet;
1000f014:	e9cd 2404 	strd	r2, r4, [sp, #16]
    request.rx_buf = 0;
1000f018:	e9cd 3306 	strd	r3, r3, [sp, #24]
    request.callback = NULL;
1000f01c:	e9cd 3308 	strd	r3, r3, [sp, #32]
    packet[1] = value;
1000f020:	f88d 1005 	strb.w	r1, [sp, #5]
    request.addr = addr;
1000f024:	9503      	str	r5, [sp, #12]
    return MXC_I2C_MasterTransaction(&request);
1000f026:	f004 fbdd 	bl	100137e4 <MXC_I2C_MasterTransaction>
}
1000f02a:	b00b      	add	sp, #44	@ 0x2c
1000f02c:	bd30      	pop	{r4, r5, pc}
1000f02e:	bf00      	nop
1000f030:	4001e000 	.word	0x4001e000

1000f034 <i2c_simple_write_receive_len>:
int i2c_simple_write_receive_len(i2c_addr_t addr, uint8_t len) {
1000f034:	b510      	push	{r4, lr}
1000f036:	b08a      	sub	sp, #40	@ 0x28
1000f038:	4604      	mov	r4, r0
    request.i2c = I2C_INTERFACE;
1000f03a:	480a      	ldr	r0, [pc, #40]	@ (1000f064 <i2c_simple_write_receive_len+0x30>)
    packet[1] = value;
1000f03c:	f88d 1005 	strb.w	r1, [sp, #5]
    request.rx_len = 0;
1000f040:	2300      	movs	r3, #0
    packet[0] = (uint8_t) reg;
1000f042:	2202      	movs	r2, #2
    request.i2c = I2C_INTERFACE;
1000f044:	9002      	str	r0, [sp, #8]
    request.tx_buf = packet;
1000f046:	a901      	add	r1, sp, #4
    return MXC_I2C_MasterTransaction(&request);
1000f048:	a802      	add	r0, sp, #8
    request.tx_buf = packet;
1000f04a:	e9cd 1204 	strd	r1, r2, [sp, #16]
    request.rx_buf = 0;
1000f04e:	e9cd 3306 	strd	r3, r3, [sp, #24]
    request.callback = NULL;
1000f052:	e9cd 3308 	strd	r3, r3, [sp, #32]
    packet[0] = (uint8_t) reg;
1000f056:	f88d 2004 	strb.w	r2, [sp, #4]
    request.addr = addr;
1000f05a:	9403      	str	r4, [sp, #12]
    return MXC_I2C_MasterTransaction(&request);
1000f05c:	f004 fbc2 	bl	100137e4 <MXC_I2C_MasterTransaction>
}
1000f060:	b00a      	add	sp, #40	@ 0x28
1000f062:	bd10      	pop	{r4, pc}
1000f064:	4001e000 	.word	0x4001e000

1000f068 <i2c_simple_write_transmit_done>:
int i2c_simple_write_transmit_done(i2c_addr_t addr, bool done) {
1000f068:	b530      	push	{r4, r5, lr}
1000f06a:	b08b      	sub	sp, #44	@ 0x2c
1000f06c:	4605      	mov	r5, r0
    request.i2c = I2C_INTERFACE;
1000f06e:	4a0b      	ldr	r2, [pc, #44]	@ (1000f09c <i2c_simple_write_transmit_done+0x34>)
1000f070:	9202      	str	r2, [sp, #8]
    packet[0] = (uint8_t) reg;
1000f072:	2004      	movs	r0, #4
    request.rx_len = 0;
1000f074:	2300      	movs	r3, #0
    request.tx_buf = packet;
1000f076:	eb0d 0200 	add.w	r2, sp, r0
    packet[0] = (uint8_t) reg;
1000f07a:	f88d 0004 	strb.w	r0, [sp, #4]
    request.tx_len = 2;
1000f07e:	2402      	movs	r4, #2
    return MXC_I2C_MasterTransaction(&request);
1000f080:	a802      	add	r0, sp, #8
    request.tx_buf = packet;
1000f082:	e9cd 2404 	strd	r2, r4, [sp, #16]
    request.rx_buf = 0;
1000f086:	e9cd 3306 	strd	r3, r3, [sp, #24]
    request.callback = NULL;
1000f08a:	e9cd 3308 	strd	r3, r3, [sp, #32]
    packet[1] = value;
1000f08e:	f88d 1005 	strb.w	r1, [sp, #5]
    request.addr = addr;
1000f092:	9503      	str	r5, [sp, #12]
    return MXC_I2C_MasterTransaction(&request);
1000f094:	f004 fba6 	bl	100137e4 <MXC_I2C_MasterTransaction>
}
1000f098:	b00b      	add	sp, #44	@ 0x2c
1000f09a:	bd30      	pop	{r4, r5, pc}
1000f09c:	4001e000 	.word	0x4001e000

1000f0a0 <i2c_simple_read_data_generic>:
{
1000f0a0:	b530      	push	{r4, r5, lr}
1000f0a2:	b08b      	sub	sp, #44	@ 0x2c
    request.i2c = I2C_INTERFACE;
1000f0a4:	4d09      	ldr	r5, [pc, #36]	@ (1000f0cc <i2c_simple_read_data_generic+0x2c>)
{
1000f0a6:	f88d 1007 	strb.w	r1, [sp, #7]
    request.addr = addr;
1000f0aa:	9003      	str	r0, [sp, #12]
    request.tx_buf = (uint8_t*)&reg;
1000f0ac:	f10d 0107 	add.w	r1, sp, #7
    request.tx_len = 1;
1000f0b0:	2001      	movs	r0, #1
    request.tx_buf = (uint8_t*)&reg;
1000f0b2:	e9cd 1004 	strd	r1, r0, [sp, #16]
    request.restart = 0;
1000f0b6:	2400      	movs	r4, #0
    return MXC_I2C_MasterTransaction(&request);
1000f0b8:	a802      	add	r0, sp, #8
    request.rx_buf = buf;
1000f0ba:	e9cd 3206 	strd	r3, r2, [sp, #24]
    request.callback = NULL;
1000f0be:	e9cd 4408 	strd	r4, r4, [sp, #32]
    request.i2c = I2C_INTERFACE;
1000f0c2:	9502      	str	r5, [sp, #8]
    return MXC_I2C_MasterTransaction(&request);
1000f0c4:	f004 fb8e 	bl	100137e4 <MXC_I2C_MasterTransaction>
}
1000f0c8:	b00b      	add	sp, #44	@ 0x2c
1000f0ca:	bd30      	pop	{r4, r5, pc}
1000f0cc:	4001e000 	.word	0x4001e000

1000f0d0 <i2c_simple_write_data_generic>:
int i2c_simple_write_data_generic(i2c_addr_t addr, ECTF_I2C_REGS reg, uint8_t len, uint8_t* buf) {
1000f0d0:	b570      	push	{r4, r5, r6, lr}
1000f0d2:	b0ca      	sub	sp, #296	@ 0x128
1000f0d4:	468c      	mov	ip, r1
1000f0d6:	4605      	mov	r5, r0
    memcpy(&packet[1], buf, len);
1000f0d8:	4619      	mov	r1, r3
1000f0da:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
int i2c_simple_write_data_generic(i2c_addr_t addr, ECTF_I2C_REGS reg, uint8_t len, uint8_t* buf) {
1000f0de:	4614      	mov	r4, r2
    packet[0] = reg;
1000f0e0:	f88d c024 	strb.w	ip, [sp, #36]	@ 0x24
    memcpy(&packet[1], buf, len);
1000f0e4:	f00a fda4 	bl	10019c30 <memcpy>
    request.i2c = I2C_INTERFACE;
1000f0e8:	4b08      	ldr	r3, [pc, #32]	@ (1000f10c <i2c_simple_write_data_generic+0x3c>)
1000f0ea:	9301      	str	r3, [sp, #4]
    packet[0] = reg;
1000f0ec:	ae09      	add	r6, sp, #36	@ 0x24
    request.rx_len = 0;
1000f0ee:	2300      	movs	r3, #0
    request.tx_len = len+1;
1000f0f0:	3401      	adds	r4, #1
    return MXC_I2C_MasterTransaction(&request);
1000f0f2:	a801      	add	r0, sp, #4
    request.rx_buf = 0;
1000f0f4:	e9cd 3305 	strd	r3, r3, [sp, #20]
    request.callback = NULL;
1000f0f8:	e9cd 3307 	strd	r3, r3, [sp, #28]
    request.addr = addr;
1000f0fc:	9502      	str	r5, [sp, #8]
    request.tx_len = len+1;
1000f0fe:	9404      	str	r4, [sp, #16]
    request.tx_buf = packet;
1000f100:	9603      	str	r6, [sp, #12]
    return MXC_I2C_MasterTransaction(&request);
1000f102:	f004 fb6f 	bl	100137e4 <MXC_I2C_MasterTransaction>
}
1000f106:	b04a      	add	sp, #296	@ 0x128
1000f108:	bd70      	pop	{r4, r5, r6, pc}
1000f10a:	bf00      	nop
1000f10c:	4001e000 	.word	0x4001e000

1000f110 <AesEncrypt_C>:
 * @param [out] outBlock  Encrypted block.
 * @param [in]  r         Rounds divided by 2.
 */
static void AesEncrypt_C(Aes* aes, const byte* inBlock, byte* outBlock,
        word32 r)
{
1000f110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000f114:	b087      	sub	sp, #28
1000f116:	680d      	ldr	r5, [r1, #0]
1000f118:	684f      	ldr	r7, [r1, #4]
1000f11a:	688e      	ldr	r6, [r1, #8]
1000f11c:	68cc      	ldr	r4, [r1, #12]
1000f11e:	e9cd 3200 	strd	r3, r2, [sp]
    s2 = ByteReverseWord32(s2);
    s3 = ByteReverseWord32(s3);
#endif

    /* AddRoundKey */
    s0 ^= rk[0];
1000f122:	6803      	ldr	r3, [r0, #0]
1000f124:	ba2d      	rev	r5, r5
1000f126:	405d      	eors	r5, r3
    s1 ^= rk[1];
1000f128:	6843      	ldr	r3, [r0, #4]
1000f12a:	ba3f      	rev	r7, r7
1000f12c:	405f      	eors	r7, r3
    s2 ^= rk[2];
1000f12e:	6883      	ldr	r3, [r0, #8]
1000f130:	ba36      	rev	r6, r6
1000f132:	405e      	eors	r6, r3
    s3 ^= rk[3];
1000f134:	68c3      	ldr	r3, [r0, #12]
    s0 ^= rk[(o)+0]; s1 ^= rk[(o)+1]; s2 ^= rk[(o)+2]; s3 ^= rk[(o)+3];
#endif

#ifndef WOLFSSL_AES_NO_UNROLL
/* Unroll the loop. */
                       ENC_ROUND_T_S( 0);
1000f136:	b2f9      	uxtb	r1, r7
1000f138:	b2f2      	uxtb	r2, r6
1000f13a:	ba24      	rev	r4, r4
    s3 ^= rk[3];
1000f13c:	405c      	eors	r4, r3
                       ENC_ROUND_T_S( 0);
1000f13e:	f501 7140 	add.w	r1, r1, #768	@ 0x300
1000f142:	4bea      	ldr	r3, [pc, #936]	@ (1000f4ec <AesEncrypt_C+0x3dc>)
1000f144:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000f148:	fa5f fe84 	uxtb.w	lr, r4
1000f14c:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
1000f150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1000f154:	f50e 7e40 	add.w	lr, lr, #768	@ 0x300
1000f158:	0e2a      	lsrs	r2, r5, #24
1000f15a:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
1000f15e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1000f162:	fa5f fc85 	uxtb.w	ip, r5
1000f166:	ea82 020e 	eor.w	r2, r2, lr
1000f16a:	f50c 7c40 	add.w	ip, ip, #768	@ 0x300
1000f16e:	ea4f 6e17 	mov.w	lr, r7, lsr #24
1000f172:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
1000f176:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
1000f17a:	ea8e 0e0c 	eor.w	lr, lr, ip
1000f17e:	ea4f 6c16 	mov.w	ip, r6, lsr #24
1000f182:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
1000f186:	ea8c 0c08 	eor.w	ip, ip, r8
1000f18a:	ea4f 6814 	mov.w	r8, r4, lsr #24
1000f18e:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
1000f192:	ea88 0101 	eor.w	r1, r8, r1
1000f196:	f3c7 4807 	ubfx	r8, r7, #16, #8
1000f19a:	f3c7 2707 	ubfx	r7, r7, #8, #8
1000f19e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
1000f1a2:	9102      	str	r1, [sp, #8]
1000f1a4:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
1000f1a8:	6901      	ldr	r1, [r0, #16]
1000f1aa:	f3c6 4707 	ubfx	r7, r6, #16, #8
1000f1ae:	f3c6 2607 	ubfx	r6, r6, #8, #8
1000f1b2:	f506 7600 	add.w	r6, r6, #512	@ 0x200
1000f1b6:	f508 7880 	add.w	r8, r8, #256	@ 0x100
1000f1ba:	f853 9026 	ldr.w	r9, [r3, r6, lsl #2]
1000f1be:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
1000f1c2:	f3c4 4607 	ubfx	r6, r4, #16, #8
1000f1c6:	f3c4 2407 	ubfx	r4, r4, #8, #8
1000f1ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
1000f1ce:	f504 7400 	add.w	r4, r4, #512	@ 0x200
1000f1d2:	404a      	eors	r2, r1
1000f1d4:	6941      	ldr	r1, [r0, #20]
1000f1d6:	f853 8027 	ldr.w	r8, [r3, r7, lsl #2]
1000f1da:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
1000f1de:	f506 7680 	add.w	r6, r6, #256	@ 0x100
1000f1e2:	f3c5 4407 	ubfx	r4, r5, #16, #8
1000f1e6:	f3c5 2507 	ubfx	r5, r5, #8, #8
1000f1ea:	ea8e 0e01 	eor.w	lr, lr, r1
1000f1ee:	f505 7500 	add.w	r5, r5, #512	@ 0x200
1000f1f2:	6981      	ldr	r1, [r0, #24]
1000f1f4:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1000f1f8:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
1000f1fc:	ea8c 0c01 	eor.w	ip, ip, r1
1000f200:	f504 7480 	add.w	r4, r4, #256	@ 0x100
1000f204:	ea8c 0c06 	eor.w	ip, ip, r6
1000f208:	ea8c 0c05 	eor.w	ip, ip, r5
1000f20c:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
1000f210:	69c5      	ldr	r5, [r0, #28]
1000f212:	9902      	ldr	r1, [sp, #8]
1000f214:	4069      	eors	r1, r5
1000f216:	4061      	eors	r1, r4
1000f218:	ea81 010b 	eor.w	r1, r1, fp
    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
1000f21c:	b2cc      	uxtb	r4, r1
                       ENC_ROUND_T_S( 0);
1000f21e:	ea8e 0e08 	eor.w	lr, lr, r8
    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
1000f222:	f504 7440 	add.w	r4, r4, #768	@ 0x300
                       ENC_ROUND_T_S( 0);
1000f226:	ea8e 0e07 	eor.w	lr, lr, r7
    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
1000f22a:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
1000f22e:	f3ce 4407 	ubfx	r4, lr, #16, #8
1000f232:	f504 7480 	add.w	r4, r4, #256	@ 0x100
                       ENC_ROUND_T_S( 0);
1000f236:	ea82 020a 	eor.w	r2, r2, sl
    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
1000f23a:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
1000f23e:	fa5f f48e 	uxtb.w	r4, lr
1000f242:	f504 7440 	add.w	r4, r4, #768	@ 0x300
                       ENC_ROUND_T_S( 0);
1000f246:	ea82 0209 	eor.w	r2, r2, r9
    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
1000f24a:	9403      	str	r4, [sp, #12]
1000f24c:	fa5f f48c 	uxtb.w	r4, ip
1000f250:	f504 7940 	add.w	r9, r4, #768	@ 0x300
1000f254:	0e14      	lsrs	r4, r2, #24
1000f256:	b2d6      	uxtb	r6, r2
1000f258:	f3c2 4b07 	ubfx	fp, r2, #16, #8
1000f25c:	f3c2 2207 	ubfx	r2, r2, #8, #8
1000f260:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
1000f264:	f8cd 9014 	str.w	r9, [sp, #20]
1000f268:	f502 7200 	add.w	r2, r2, #512	@ 0x200
1000f26c:	9204      	str	r2, [sp, #16]
1000f26e:	f3cc 2807 	ubfx	r8, ip, #8, #8
1000f272:	6a02      	ldr	r2, [r0, #32]
1000f274:	f508 7800 	add.w	r8, r8, #512	@ 0x200
1000f278:	406c      	eors	r4, r5
1000f27a:	4054      	eors	r4, r2
1000f27c:	ea4f 691e 	mov.w	r9, lr, lsr #24
1000f280:	407c      	eors	r4, r7
1000f282:	f506 7640 	add.w	r6, r6, #768	@ 0x300
1000f286:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
1000f28a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1000f28e:	9a03      	ldr	r2, [sp, #12]
1000f290:	f3ce 2e07 	ubfx	lr, lr, #8, #8
1000f294:	4067      	eors	r7, r4
1000f296:	f50e 7a00 	add.w	sl, lr, #512	@ 0x200
1000f29a:	f853 4029 	ldr.w	r4, [r3, r9, lsl #2]
1000f29e:	f8dd 9014 	ldr.w	r9, [sp, #20]
1000f2a2:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
1000f2a6:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
1000f2aa:	f3cc 4c07 	ubfx	ip, ip, #16, #8
1000f2ae:	f50c 7580 	add.w	r5, ip, #256	@ 0x100
1000f2b2:	4074      	eors	r4, r6
1000f2b4:	ea4f 6c11 	mov.w	ip, r1, lsr #24
1000f2b8:	f853 602e 	ldr.w	r6, [r3, lr, lsl #2]
1000f2bc:	f853 e022 	ldr.w	lr, [r3, r2, lsl #2]
1000f2c0:	9502      	str	r5, [sp, #8]
1000f2c2:	9a02      	ldr	r2, [sp, #8]
1000f2c4:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
1000f2c8:	ea86 060e 	eor.w	r6, r6, lr
1000f2cc:	f853 e029 	ldr.w	lr, [r3, r9, lsl #2]
1000f2d0:	f3c1 4507 	ubfx	r5, r1, #16, #8
1000f2d4:	f3c1 2107 	ubfx	r1, r1, #8, #8
1000f2d8:	f501 7100 	add.w	r1, r1, #512	@ 0x200
1000f2dc:	ea8c 0c0e 	eor.w	ip, ip, lr
1000f2e0:	f853 e022 	ldr.w	lr, [r3, r2, lsl #2]
1000f2e4:	9a04      	ldr	r2, [sp, #16]
1000f2e6:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
1000f2ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1000f2ee:	6a42      	ldr	r2, [r0, #36]	@ 0x24
1000f2f0:	f505 7580 	add.w	r5, r5, #256	@ 0x100
1000f2f4:	4054      	eors	r4, r2
1000f2f6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
1000f2f8:	f853 8025 	ldr.w	r8, [r3, r5, lsl #2]
1000f2fc:	4056      	eors	r6, r2
1000f2fe:	f50b 7b80 	add.w	fp, fp, #256	@ 0x100
1000f302:	ea86 0608 	eor.w	r6, r6, r8
1000f306:	404e      	eors	r6, r1
1000f308:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
1000f30a:	f853 502b 	ldr.w	r5, [r3, fp, lsl #2]
1000f30e:	ea8c 0c01 	eor.w	ip, ip, r1
1000f312:	ea8c 0c05 	eor.w	ip, ip, r5
1000f316:	ea8c 0c0a 	eor.w	ip, ip, sl
1000f31a:	fa5f f28c 	uxtb.w	r2, ip
1000f31e:	ea84 040e 	eor.w	r4, r4, lr
1000f322:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000f326:	ea84 0409 	eor.w	r4, r4, r9
1000f32a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1000f32e:	f3c4 4207 	ubfx	r2, r4, #16, #8
1000f332:	f502 7280 	add.w	r2, r2, #256	@ 0x100
1000f336:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
1000f33a:	f3c6 2207 	ubfx	r2, r6, #8, #8
1000f33e:	f502 7200 	add.w	r2, r2, #512	@ 0x200
1000f342:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
1000f346:	9502      	str	r5, [sp, #8]
1000f348:	b2fa      	uxtb	r2, r7
1000f34a:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000f34e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
1000f352:	f3c6 4207 	ubfx	r2, r6, #16, #8
1000f356:	f502 7280 	add.w	r2, r2, #256	@ 0x100
1000f35a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1000f35e:	9203      	str	r2, [sp, #12]
1000f360:	f3cc 2207 	ubfx	r2, ip, #8, #8
1000f364:	f502 7200 	add.w	r2, r2, #512	@ 0x200
1000f368:	f853 e022 	ldr.w	lr, [r3, r2, lsl #2]
1000f36c:	f8cd e010 	str.w	lr, [sp, #16]
1000f370:	b2e2      	uxtb	r2, r4
1000f372:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000f376:	fa5f fe86 	uxtb.w	lr, r6
1000f37a:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
1000f37e:	f3cc 4207 	ubfx	r2, ip, #16, #8
1000f382:	f502 7280 	add.w	r2, r2, #256	@ 0x100
1000f386:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
1000f38a:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
1000f38e:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
1000f392:	f3c7 2c07 	ubfx	ip, r7, #8, #8
1000f396:	f50c 7c00 	add.w	ip, ip, #512	@ 0x200
1000f39a:	0e36      	lsrs	r6, r6, #24
1000f39c:	f853 802c 	ldr.w	r8, [r3, ip, lsl #2]
1000f3a0:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1000f3a4:	ea4f 6c17 	mov.w	ip, r7, lsr #24
1000f3a8:	ea86 060b 	eor.w	r6, r6, fp
1000f3ac:	f853 b02c 	ldr.w	fp, [r3, ip, lsl #2]
1000f3b0:	f3c7 4707 	ubfx	r7, r7, #16, #8
1000f3b4:	ea8b 0b01 	eor.w	fp, fp, r1
1000f3b8:	f507 7180 	add.w	r1, r7, #256	@ 0x100
1000f3bc:	0e27      	lsrs	r7, r4, #24
1000f3be:	f50e 7e40 	add.w	lr, lr, #768	@ 0x300
1000f3c2:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
1000f3c6:	ea87 0c05 	eor.w	ip, r7, r5
1000f3ca:	6b05      	ldr	r5, [r0, #48]	@ 0x30
1000f3cc:	ea8b 0b05 	eor.w	fp, fp, r5
1000f3d0:	9d02      	ldr	r5, [sp, #8]
1000f3d2:	ea8b 070a 	eor.w	r7, fp, sl
1000f3d6:	406f      	eors	r7, r5
1000f3d8:	6b45      	ldr	r5, [r0, #52]	@ 0x34
1000f3da:	ea8c 0c05 	eor.w	ip, ip, r5
1000f3de:	9d03      	ldr	r5, [sp, #12]
1000f3e0:	ea8c 0c05 	eor.w	ip, ip, r5
1000f3e4:	9d04      	ldr	r5, [sp, #16]
1000f3e6:	ea8c 0c05 	eor.w	ip, ip, r5
1000f3ea:	6b85      	ldr	r5, [r0, #56]	@ 0x38
1000f3ec:	406e      	eors	r6, r5
1000f3ee:	f853 502e 	ldr.w	r5, [r3, lr, lsl #2]
1000f3f2:	f3c4 2407 	ubfx	r4, r4, #8, #8
1000f3f6:	ea82 0e05 	eor.w	lr, r2, r5
1000f3fa:	f504 7400 	add.w	r4, r4, #512	@ 0x200
1000f3fe:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
1000f402:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
1000f404:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
1000f408:	ea8e 0e01 	eor.w	lr, lr, r1
1000f40c:	ea8e 0e05 	eor.w	lr, lr, r5
1000f410:	ea8e 0e02 	eor.w	lr, lr, r2
    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
1000f414:	fa5f f28e 	uxtb.w	r2, lr
1000f418:	f502 7240 	add.w	r2, r2, #768	@ 0x300
    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
1000f41c:	ea86 0609 	eor.w	r6, r6, r9
    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
1000f420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1000f424:	b2fa      	uxtb	r2, r7
1000f426:	f502 7240 	add.w	r2, r2, #768	@ 0x300
    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
1000f42a:	ea86 0608 	eor.w	r6, r6, r8
    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
1000f42e:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
1000f432:	fa5f f28c 	uxtb.w	r2, ip
1000f436:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000f43a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
1000f43e:	b2f2      	uxtb	r2, r6
1000f440:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000f444:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
1000f448:	0e3a      	lsrs	r2, r7, #24
1000f44a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1000f44e:	4051      	eors	r1, r2
1000f450:	ea4f 621c 	mov.w	r2, ip, lsr #24
1000f454:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1000f458:	ea82 0208 	eor.w	r2, r2, r8
1000f45c:	ea4f 6816 	mov.w	r8, r6, lsr #24
1000f460:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
1000f464:	ea88 0505 	eor.w	r5, r8, r5
1000f468:	ea4f 681e 	mov.w	r8, lr, lsr #24
1000f46c:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
1000f470:	ea88 0404 	eor.w	r4, r8, r4
1000f474:	f3cc 4807 	ubfx	r8, ip, #16, #8
1000f478:	f3cc 2c07 	ubfx	ip, ip, #8, #8
1000f47c:	f508 7880 	add.w	r8, r8, #256	@ 0x100
1000f480:	f50c 7c00 	add.w	ip, ip, #512	@ 0x200
1000f484:	f853 b028 	ldr.w	fp, [r3, r8, lsl #2]
1000f488:	9402      	str	r4, [sp, #8]
1000f48a:	f853 402c 	ldr.w	r4, [r3, ip, lsl #2]
1000f48e:	9403      	str	r4, [sp, #12]
1000f490:	f3c6 4c07 	ubfx	ip, r6, #16, #8
1000f494:	f50c 7c80 	add.w	ip, ip, #256	@ 0x100
1000f498:	f3c6 2607 	ubfx	r6, r6, #8, #8
1000f49c:	f506 7600 	add.w	r6, r6, #512	@ 0x200
1000f4a0:	f853 902c 	ldr.w	r9, [r3, ip, lsl #2]
1000f4a4:	6c04      	ldr	r4, [r0, #64]	@ 0x40
1000f4a6:	f853 a026 	ldr.w	sl, [r3, r6, lsl #2]
1000f4aa:	f3ce 4c07 	ubfx	ip, lr, #16, #8
1000f4ae:	f3ce 2e07 	ubfx	lr, lr, #8, #8
1000f4b2:	f50e 7600 	add.w	r6, lr, #512	@ 0x200
1000f4b6:	4061      	eors	r1, r4
1000f4b8:	6c44      	ldr	r4, [r0, #68]	@ 0x44
1000f4ba:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
1000f4be:	f50c 7c80 	add.w	ip, ip, #256	@ 0x100
1000f4c2:	f3c7 4607 	ubfx	r6, r7, #16, #8
1000f4c6:	f3c7 2707 	ubfx	r7, r7, #8, #8
1000f4ca:	4062      	eors	r2, r4
1000f4cc:	f507 7700 	add.w	r7, r7, #512	@ 0x200
1000f4d0:	6c84      	ldr	r4, [r0, #72]	@ 0x48
1000f4d2:	f853 e02c 	ldr.w	lr, [r3, ip, lsl #2]
1000f4d6:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
1000f4da:	4065      	eors	r5, r4
1000f4dc:	ea85 050e 	eor.w	r5, r5, lr
1000f4e0:	f506 7680 	add.w	r6, r6, #256	@ 0x100
1000f4e4:	407d      	eors	r5, r7
1000f4e6:	9c02      	ldr	r4, [sp, #8]
1000f4e8:	6cc7      	ldr	r7, [r0, #76]	@ 0x4c
1000f4ea:	e001      	b.n	1000f4f0 <AesEncrypt_C+0x3e0>
1000f4ec:	10023fa4 	.word	0x10023fa4
1000f4f0:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1000f4f4:	407c      	eors	r4, r7
1000f4f6:	9f03      	ldr	r7, [sp, #12]
1000f4f8:	4074      	eors	r4, r6
1000f4fa:	407c      	eors	r4, r7
1000f4fc:	b2e6      	uxtb	r6, r4
1000f4fe:	ea82 0209 	eor.w	r2, r2, r9
1000f502:	f506 7640 	add.w	r6, r6, #768	@ 0x300
1000f506:	ea82 0208 	eor.w	r2, r2, r8
1000f50a:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
1000f50e:	f3c2 4607 	ubfx	r6, r2, #16, #8
1000f512:	f506 7680 	add.w	r6, r6, #256	@ 0x100
1000f516:	ea81 010b 	eor.w	r1, r1, fp
1000f51a:	f853 c026 	ldr.w	ip, [r3, r6, lsl #2]
1000f51e:	f8cd c008 	str.w	ip, [sp, #8]
1000f522:	f3c5 4c07 	ubfx	ip, r5, #16, #8
1000f526:	f50c 7b80 	add.w	fp, ip, #256	@ 0x100
1000f52a:	fa5f fc82 	uxtb.w	ip, r2
1000f52e:	ea81 010a 	eor.w	r1, r1, sl
1000f532:	f3c5 2607 	ubfx	r6, r5, #8, #8
1000f536:	f50c 7940 	add.w	r9, ip, #768	@ 0x300
1000f53a:	fa5f fc85 	uxtb.w	ip, r5
1000f53e:	0e2d      	lsrs	r5, r5, #24
1000f540:	9504      	str	r5, [sp, #16]
1000f542:	0e0d      	lsrs	r5, r1, #24
1000f544:	f506 7600 	add.w	r6, r6, #512	@ 0x200
1000f548:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
1000f54c:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
1000f550:	f8cd e00c 	str.w	lr, [sp, #12]
1000f554:	b2ce      	uxtb	r6, r1
1000f556:	406f      	eors	r7, r5
1000f558:	f506 7640 	add.w	r6, r6, #768	@ 0x300
1000f55c:	0e15      	lsrs	r5, r2, #24
1000f55e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1000f562:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
1000f566:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
1000f56a:	4075      	eors	r5, r6
1000f56c:	6d06      	ldr	r6, [r0, #80]	@ 0x50
1000f56e:	4077      	eors	r7, r6
1000f570:	9e02      	ldr	r6, [sp, #8]
1000f572:	4077      	eors	r7, r6
1000f574:	9e03      	ldr	r6, [sp, #12]
1000f576:	4077      	eors	r7, r6
1000f578:	6d46      	ldr	r6, [r0, #84]	@ 0x54
1000f57a:	4075      	eors	r5, r6
1000f57c:	f853 602b 	ldr.w	r6, [r3, fp, lsl #2]
1000f580:	f8dd b010 	ldr.w	fp, [sp, #16]
1000f584:	ea4f 6814 	mov.w	r8, r4, lsr #24
1000f588:	f3c4 4e07 	ubfx	lr, r4, #16, #8
1000f58c:	f3c4 2407 	ubfx	r4, r4, #8, #8
1000f590:	f50c 7a40 	add.w	sl, ip, #768	@ 0x300
1000f594:	4075      	eors	r5, r6
1000f596:	f504 7400 	add.w	r4, r4, #512	@ 0x200
1000f59a:	f853 602b 	ldr.w	r6, [r3, fp, lsl #2]
1000f59e:	f3c1 4c07 	ubfx	ip, r1, #16, #8
1000f5a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
1000f5a6:	f3c1 2107 	ubfx	r1, r1, #8, #8
1000f5aa:	ea86 0909 	eor.w	r9, r6, r9
1000f5ae:	f502 7200 	add.w	r2, r2, #512	@ 0x200
1000f5b2:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
1000f5b6:	f853 802a 	ldr.w	r8, [r3, sl, lsl #2]
1000f5ba:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
1000f5be:	f50e 7e80 	add.w	lr, lr, #256	@ 0x100
1000f5c2:	f501 7100 	add.w	r1, r1, #512	@ 0x200
1000f5c6:	f853 a02e 	ldr.w	sl, [r3, lr, lsl #2]
1000f5ca:	f50c 7c80 	add.w	ip, ip, #256	@ 0x100
1000f5ce:	ea85 0e04 	eor.w	lr, r5, r4
1000f5d2:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
1000f5d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1000f5da:	6d82      	ldr	r2, [r0, #88]	@ 0x58
1000f5dc:	ea86 0608 	eor.w	r6, r6, r8
1000f5e0:	f853 802c 	ldr.w	r8, [r3, ip, lsl #2]
1000f5e4:	ea89 0c02 	eor.w	ip, r9, r2
1000f5e8:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
1000f5ea:	4056      	eors	r6, r2
1000f5ec:	ea86 0608 	eor.w	r6, r6, r8
1000f5f0:	404e      	eors	r6, r1
    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
1000f5f2:	b2f2      	uxtb	r2, r6
1000f5f4:	f502 7240 	add.w	r2, r2, #768	@ 0x300
    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
1000f5f8:	ea8c 0c0a 	eor.w	ip, ip, sl
    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
1000f5fc:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
1000f600:	b2fa      	uxtb	r2, r7
1000f602:	f502 7240 	add.w	r2, r2, #768	@ 0x300
    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
1000f606:	ea8c 0c04 	eor.w	ip, ip, r4
    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
1000f60a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
1000f60e:	fa5f f28e 	uxtb.w	r2, lr
1000f612:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000f616:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
1000f61a:	fa5f f28c 	uxtb.w	r2, ip
1000f61e:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000f622:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1000f626:	0e3a      	lsrs	r2, r7, #24
1000f628:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1000f62c:	ea82 0208 	eor.w	r2, r2, r8
1000f630:	ea4f 681e 	mov.w	r8, lr, lsr #24
1000f634:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
1000f638:	ea88 0505 	eor.w	r5, r8, r5
1000f63c:	ea4f 681c 	mov.w	r8, ip, lsr #24
1000f640:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
1000f644:	ea88 0404 	eor.w	r4, r8, r4
1000f648:	ea4f 6816 	mov.w	r8, r6, lsr #24
1000f64c:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
1000f650:	ea88 0101 	eor.w	r1, r8, r1
1000f654:	f3ce 4807 	ubfx	r8, lr, #16, #8
1000f658:	f3ce 2e07 	ubfx	lr, lr, #8, #8
1000f65c:	f50e 7e00 	add.w	lr, lr, #512	@ 0x200
1000f660:	9102      	str	r1, [sp, #8]
1000f662:	f853 102e 	ldr.w	r1, [r3, lr, lsl #2]
1000f666:	9103      	str	r1, [sp, #12]
1000f668:	f3cc 4e07 	ubfx	lr, ip, #16, #8
1000f66c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
1000f670:	f50c 7c00 	add.w	ip, ip, #512	@ 0x200
1000f674:	6e01      	ldr	r1, [r0, #96]	@ 0x60
1000f676:	f853 a02c 	ldr.w	sl, [r3, ip, lsl #2]
1000f67a:	f3c6 4c07 	ubfx	ip, r6, #16, #8
1000f67e:	f3c6 2607 	ubfx	r6, r6, #8, #8
1000f682:	f508 7880 	add.w	r8, r8, #256	@ 0x100
1000f686:	f506 7600 	add.w	r6, r6, #512	@ 0x200
1000f68a:	404a      	eors	r2, r1
1000f68c:	6e41      	ldr	r1, [r0, #100]	@ 0x64
1000f68e:	f853 b028 	ldr.w	fp, [r3, r8, lsl #2]
1000f692:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
1000f696:	f50e 7e80 	add.w	lr, lr, #256	@ 0x100
1000f69a:	f50c 7c80 	add.w	ip, ip, #256	@ 0x100
1000f69e:	f3c7 4607 	ubfx	r6, r7, #16, #8
1000f6a2:	f3c7 2707 	ubfx	r7, r7, #8, #8
1000f6a6:	404d      	eors	r5, r1
1000f6a8:	f507 7700 	add.w	r7, r7, #512	@ 0x200
1000f6ac:	6e81      	ldr	r1, [r0, #104]	@ 0x68
1000f6ae:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
1000f6b2:	f853 e02c 	ldr.w	lr, [r3, ip, lsl #2]
1000f6b6:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
1000f6ba:	404c      	eors	r4, r1
1000f6bc:	ea84 040e 	eor.w	r4, r4, lr
1000f6c0:	f506 7680 	add.w	r6, r6, #256	@ 0x100
1000f6c4:	407c      	eors	r4, r7
1000f6c6:	9902      	ldr	r1, [sp, #8]
1000f6c8:	6ec7      	ldr	r7, [r0, #108]	@ 0x6c
1000f6ca:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1000f6ce:	4079      	eors	r1, r7
1000f6d0:	9f03      	ldr	r7, [sp, #12]
1000f6d2:	4071      	eors	r1, r6
1000f6d4:	4079      	eors	r1, r7
1000f6d6:	ea82 020b 	eor.w	r2, r2, fp
1000f6da:	ea85 0509 	eor.w	r5, r5, r9
1000f6de:	ea82 020a 	eor.w	r2, r2, sl
1000f6e2:	ea85 0508 	eor.w	r5, r5, r8
1000f6e6:	fa5f f881 	uxtb.w	r8, r1
1000f6ea:	0e17      	lsrs	r7, r2, #24
1000f6ec:	f508 7840 	add.w	r8, r8, #768	@ 0x300
1000f6f0:	fa5f fe82 	uxtb.w	lr, r2
1000f6f4:	b2e6      	uxtb	r6, r4
1000f6f6:	f853 9027 	ldr.w	r9, [r3, r7, lsl #2]
1000f6fa:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
1000f6fe:	f50e 7e40 	add.w	lr, lr, #768	@ 0x300
1000f702:	fa5f fc85 	uxtb.w	ip, r5
1000f706:	f506 7640 	add.w	r6, r6, #768	@ 0x300
1000f70a:	f50c 7c40 	add.w	ip, ip, #768	@ 0x300
1000f70e:	f853 b026 	ldr.w	fp, [r3, r6, lsl #2]
1000f712:	f853 802c 	ldr.w	r8, [r3, ip, lsl #2]
1000f716:	ea89 0707 	eor.w	r7, r9, r7
1000f71a:	0e2e      	lsrs	r6, r5, #24
1000f71c:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
1000f720:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1000f724:	f3c5 4e07 	ubfx	lr, r5, #16, #8
1000f728:	f3c5 2507 	ubfx	r5, r5, #8, #8
1000f72c:	ea4f 6c14 	mov.w	ip, r4, lsr #24
1000f730:	f50e 7e80 	add.w	lr, lr, #256	@ 0x100
1000f734:	f505 7500 	add.w	r5, r5, #512	@ 0x200
1000f738:	f853 a02e 	ldr.w	sl, [r3, lr, lsl #2]
1000f73c:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
1000f740:	f853 e025 	ldr.w	lr, [r3, r5, lsl #2]
1000f744:	f3c4 4507 	ubfx	r5, r4, #16, #8
1000f748:	f3c4 2407 	ubfx	r4, r4, #8, #8
1000f74c:	f504 7400 	add.w	r4, r4, #512	@ 0x200
1000f750:	ea8c 0c08 	eor.w	ip, ip, r8
1000f754:	ea4f 6811 	mov.w	r8, r1, lsr #24
1000f758:	ea86 0609 	eor.w	r6, r6, r9
1000f75c:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
1000f760:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
1000f764:	f3c1 4407 	ubfx	r4, r1, #16, #8
1000f768:	f3c1 2107 	ubfx	r1, r1, #8, #8
1000f76c:	f505 7580 	add.w	r5, r5, #256	@ 0x100
1000f770:	f504 7480 	add.w	r4, r4, #256	@ 0x100
1000f774:	f501 7100 	add.w	r1, r1, #512	@ 0x200
1000f778:	ea88 0b0b 	eor.w	fp, r8, fp
1000f77c:	f853 8025 	ldr.w	r8, [r3, r5, lsl #2]
1000f780:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
1000f784:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
1000f788:	f3c2 4107 	ubfx	r1, r2, #16, #8
1000f78c:	f3c2 2207 	ubfx	r2, r2, #8, #8
1000f790:	f502 7200 	add.w	r2, r2, #512	@ 0x200
1000f794:	f501 7180 	add.w	r1, r1, #256	@ 0x100
1000f798:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1000f79c:	9202      	str	r2, [sp, #8]
1000f79e:	6f02      	ldr	r2, [r0, #112]	@ 0x70
1000f7a0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1000f7a4:	4057      	eors	r7, r2
1000f7a6:	6f42      	ldr	r2, [r0, #116]	@ 0x74
1000f7a8:	4056      	eors	r6, r2
1000f7aa:	ea86 0608 	eor.w	r6, r6, r8
1000f7ae:	4066      	eors	r6, r4
1000f7b0:	6f84      	ldr	r4, [r0, #120]	@ 0x78
1000f7b2:	9a02      	ldr	r2, [sp, #8]
1000f7b4:	ea8c 0c04 	eor.w	ip, ip, r4
1000f7b8:	6fc4      	ldr	r4, [r0, #124]	@ 0x7c
1000f7ba:	ea8c 0c05 	eor.w	ip, ip, r5
1000f7be:	ea8b 0404 	eor.w	r4, fp, r4
1000f7c2:	ea8c 0c02 	eor.w	ip, ip, r2
1000f7c6:	404c      	eors	r4, r1
1000f7c8:	4672      	mov	r2, lr
1000f7ca:	4054      	eors	r4, r2
    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
1000f7cc:	b2e2      	uxtb	r2, r4
1000f7ce:	f502 7240 	add.w	r2, r2, #768	@ 0x300
    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
1000f7d2:	ea87 070a 	eor.w	r7, r7, sl
    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
1000f7d6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
1000f7da:	f3c6 4207 	ubfx	r2, r6, #16, #8
1000f7de:	f502 7280 	add.w	r2, r2, #256	@ 0x100
    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
1000f7e2:	ea87 0709 	eor.w	r7, r7, r9
    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
1000f7e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1000f7ea:	9202      	str	r2, [sp, #8]
1000f7ec:	f3cc 2207 	ubfx	r2, ip, #8, #8
1000f7f0:	f502 7200 	add.w	r2, r2, #512	@ 0x200
1000f7f4:	f3c7 4907 	ubfx	r9, r7, #16, #8
1000f7f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1000f7fc:	9103      	str	r1, [sp, #12]
1000f7fe:	b2fa      	uxtb	r2, r7
1000f800:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000f804:	f509 7980 	add.w	r9, r9, #256	@ 0x100
1000f808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1000f80c:	f3cc 4207 	ubfx	r2, ip, #16, #8
1000f810:	f502 7280 	add.w	r2, r2, #256	@ 0x100
1000f814:	f853 e022 	ldr.w	lr, [r3, r2, lsl #2]
1000f818:	f8cd e010 	str.w	lr, [sp, #16]
1000f81c:	f3c4 2207 	ubfx	r2, r4, #8, #8
1000f820:	f502 7200 	add.w	r2, r2, #512	@ 0x200
1000f824:	fa5f fe8c 	uxtb.w	lr, ip
1000f828:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
1000f82c:	f8cd 8014 	str.w	r8, [sp, #20]
1000f830:	b2f2      	uxtb	r2, r6
1000f832:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000f836:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
1000f83a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1000f83e:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
1000f842:	ea8c 0202 	eor.w	r2, ip, r2
1000f846:	ea4f 6c17 	mov.w	ip, r7, lsr #24
1000f84a:	f3c7 2707 	ubfx	r7, r7, #8, #8
1000f84e:	f853 b02c 	ldr.w	fp, [r3, ip, lsl #2]
1000f852:	ea8b 0b05 	eor.w	fp, fp, r5
1000f856:	0e35      	lsrs	r5, r6, #24
1000f858:	f507 7c00 	add.w	ip, r7, #512	@ 0x200
1000f85c:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
1000f860:	9f02      	ldr	r7, [sp, #8]
1000f862:	ea85 0a01 	eor.w	sl, r5, r1
1000f866:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
1000f86a:	ea8b 0b05 	eor.w	fp, fp, r5
1000f86e:	9d03      	ldr	r5, [sp, #12]
1000f870:	ea8b 0707 	eor.w	r7, fp, r7
1000f874:	406f      	eors	r7, r5
1000f876:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
1000f87a:	ea8a 0a05 	eor.w	sl, sl, r5
1000f87e:	9d04      	ldr	r5, [sp, #16]
1000f880:	ea4f 6814 	mov.w	r8, r4, lsr #24
1000f884:	ea8a 0a05 	eor.w	sl, sl, r5
1000f888:	f3c4 4407 	ubfx	r4, r4, #16, #8
1000f88c:	9d05      	ldr	r5, [sp, #20]
1000f88e:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
1000f892:	f3c6 2607 	ubfx	r6, r6, #8, #8
1000f896:	f504 7480 	add.w	r4, r4, #256	@ 0x100
1000f89a:	f506 7100 	add.w	r1, r6, #512	@ 0x200
1000f89e:	ea8a 0605 	eor.w	r6, sl, r5
1000f8a2:	f8d0 5088 	ldr.w	r5, [r0, #136]	@ 0x88
1000f8a6:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
1000f8aa:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1000f8ae:	f50e 7e40 	add.w	lr, lr, #768	@ 0x300
1000f8b2:	406a      	eors	r2, r5
1000f8b4:	f853 502e 	ldr.w	r5, [r3, lr, lsl #2]
1000f8b8:	ea82 0e04 	eor.w	lr, r2, r4
1000f8bc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
1000f8c0:	f853 4029 	ldr.w	r4, [r3, r9, lsl #2]
1000f8c4:	ea8e 0e02 	eor.w	lr, lr, r2
1000f8c8:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
1000f8cc:	ea88 0505 	eor.w	r5, r8, r5
1000f8d0:	ea85 0c02 	eor.w	ip, r5, r2
1000f8d4:	ea8c 0c04 	eor.w	ip, ip, r4
1000f8d8:	ea8c 0c01 	eor.w	ip, ip, r1
1000f8dc:	fa5f f28c 	uxtb.w	r2, ip
1000f8e0:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000f8e4:	ea4f 6817 	mov.w	r8, r7, lsr #24
1000f8e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1000f8ec:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
1000f8f0:	b2fa      	uxtb	r2, r7
1000f8f2:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000f8f6:	ea88 0101 	eor.w	r1, r8, r1
1000f8fa:	ea4f 6816 	mov.w	r8, r6, lsr #24
1000f8fe:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
1000f902:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
1000f906:	b2f2      	uxtb	r2, r6
1000f908:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000f90c:	ea88 0505 	eor.w	r5, r8, r5
1000f910:	ea4f 681e 	mov.w	r8, lr, lsr #24
1000f914:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
1000f918:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
1000f91c:	fa5f f28e 	uxtb.w	r2, lr
1000f920:	ea88 0404 	eor.w	r4, r8, r4
1000f924:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000f928:	ea4f 681c 	mov.w	r8, ip, lsr #24
1000f92c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1000f930:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
1000f934:	ea88 0202 	eor.w	r2, r8, r2
1000f938:	f3c6 4807 	ubfx	r8, r6, #16, #8
1000f93c:	f3c6 2607 	ubfx	r6, r6, #8, #8
1000f940:	f506 7600 	add.w	r6, r6, #512	@ 0x200
1000f944:	9202      	str	r2, [sp, #8]
1000f946:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
1000f94a:	9203      	str	r2, [sp, #12]
1000f94c:	f3ce 4607 	ubfx	r6, lr, #16, #8
1000f950:	f506 7680 	add.w	r6, r6, #256	@ 0x100
1000f954:	f3ce 2e07 	ubfx	lr, lr, #8, #8
1000f958:	f853 9026 	ldr.w	r9, [r3, r6, lsl #2]
1000f95c:	f3cc 4607 	ubfx	r6, ip, #16, #8
1000f960:	f508 7880 	add.w	r8, r8, #256	@ 0x100
1000f964:	f50e 7e00 	add.w	lr, lr, #512	@ 0x200
1000f968:	f506 7680 	add.w	r6, r6, #256	@ 0x100
1000f96c:	f853 b028 	ldr.w	fp, [r3, r8, lsl #2]
1000f970:	f853 a02e 	ldr.w	sl, [r3, lr, lsl #2]
1000f974:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
1000f978:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
1000f97c:	4051      	eors	r1, r2
1000f97e:	f8d0 2094 	ldr.w	r2, [r0, #148]	@ 0x94
1000f982:	f3c7 4607 	ubfx	r6, r7, #16, #8
1000f986:	f3c7 2707 	ubfx	r7, r7, #8, #8
1000f98a:	4055      	eors	r5, r2
1000f98c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
1000f990:	f8d0 2098 	ldr.w	r2, [r0, #152]	@ 0x98
1000f994:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
1000f998:	4054      	eors	r4, r2
1000f99a:	f506 7680 	add.w	r6, r6, #256	@ 0x100
1000f99e:	ea84 040e 	eor.w	r4, r4, lr
1000f9a2:	9a02      	ldr	r2, [sp, #8]
1000f9a4:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1000f9a8:	407c      	eors	r4, r7
1000f9aa:	f8d0 709c 	ldr.w	r7, [r0, #156]	@ 0x9c
1000f9ae:	f3cc 2c07 	ubfx	ip, ip, #8, #8
1000f9b2:	407a      	eors	r2, r7
1000f9b4:	f50c 7c00 	add.w	ip, ip, #512	@ 0x200
1000f9b8:	4072      	eors	r2, r6
    if (r > 5) {
1000f9ba:	9e00      	ldr	r6, [sp, #0]
    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
1000f9bc:	f853 802c 	ldr.w	r8, [r3, ip, lsl #2]
1000f9c0:	9f03      	ldr	r7, [sp, #12]
1000f9c2:	ea81 010b 	eor.w	r1, r1, fp
1000f9c6:	ea85 0509 	eor.w	r5, r5, r9
    if (r > 5) {
1000f9ca:	2e05      	cmp	r6, #5
    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
1000f9cc:	ea81 010a 	eor.w	r1, r1, sl
1000f9d0:	ea85 0508 	eor.w	r5, r5, r8
1000f9d4:	ea82 0207 	eor.w	r2, r2, r7
    if (r > 5) {
1000f9d8:	f240 81ed 	bls.w	1000fdb6 <AesEncrypt_C+0xca6>
        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
1000f9dc:	b2d6      	uxtb	r6, r2
1000f9de:	f506 7640 	add.w	r6, r6, #768	@ 0x300
1000f9e2:	f3c5 4e07 	ubfx	lr, r5, #16, #8
1000f9e6:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
1000f9ea:	b2ce      	uxtb	r6, r1
1000f9ec:	f506 7640 	add.w	r6, r6, #768	@ 0x300
1000f9f0:	f50e 7e80 	add.w	lr, lr, #256	@ 0x100
1000f9f4:	f853 c026 	ldr.w	ip, [r3, r6, lsl #2]
1000f9f8:	b2ee      	uxtb	r6, r5
1000f9fa:	f506 7640 	add.w	r6, r6, #768	@ 0x300
1000f9fe:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
1000fa02:	b2e6      	uxtb	r6, r4
1000fa04:	f506 7640 	add.w	r6, r6, #768	@ 0x300
1000fa08:	f853 b026 	ldr.w	fp, [r3, r6, lsl #2]
1000fa0c:	0e0e      	lsrs	r6, r1, #24
1000fa0e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1000fa12:	4077      	eors	r7, r6
1000fa14:	0e2e      	lsrs	r6, r5, #24
1000fa16:	f3c5 2507 	ubfx	r5, r5, #8, #8
1000fa1a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1000fa1e:	f505 7500 	add.w	r5, r5, #512	@ 0x200
1000fa22:	ea86 060c 	eor.w	r6, r6, ip
1000fa26:	ea4f 6c14 	mov.w	ip, r4, lsr #24
1000fa2a:	f853 a025 	ldr.w	sl, [r3, r5, lsl #2]
1000fa2e:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
1000fa32:	f3c4 4507 	ubfx	r5, r4, #16, #8
1000fa36:	f3c4 2407 	ubfx	r4, r4, #8, #8
1000fa3a:	f504 7400 	add.w	r4, r4, #512	@ 0x200
1000fa3e:	ea8c 0c08 	eor.w	ip, ip, r8
1000fa42:	ea4f 6812 	mov.w	r8, r2, lsr #24
1000fa46:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
1000fa4a:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
1000fa4e:	f3c2 4407 	ubfx	r4, r2, #16, #8
1000fa52:	f3c2 2207 	ubfx	r2, r2, #8, #8
1000fa56:	f505 7580 	add.w	r5, r5, #256	@ 0x100
1000fa5a:	f502 7200 	add.w	r2, r2, #512	@ 0x200
1000fa5e:	ea88 0b0b 	eor.w	fp, r8, fp
1000fa62:	f853 802e 	ldr.w	r8, [r3, lr, lsl #2]
1000fa66:	f853 e025 	ldr.w	lr, [r3, r5, lsl #2]
1000fa6a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
1000fa6e:	f3c1 4207 	ubfx	r2, r1, #16, #8
1000fa72:	f502 7280 	add.w	r2, r2, #256	@ 0x100
1000fa76:	f504 7480 	add.w	r4, r4, #256	@ 0x100
1000fa7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1000fa7e:	9202      	str	r2, [sp, #8]
1000fa80:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
1000fa84:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
1000fa88:	4057      	eors	r7, r2
1000fa8a:	f8d0 20a4 	ldr.w	r2, [r0, #164]	@ 0xa4
1000fa8e:	4056      	eors	r6, r2
1000fa90:	ea86 060e 	eor.w	r6, r6, lr
1000fa94:	f3c1 2107 	ubfx	r1, r1, #8, #8
1000fa98:	4075      	eors	r5, r6
1000fa9a:	f501 7100 	add.w	r1, r1, #512	@ 0x200
1000fa9e:	f8d0 60a8 	ldr.w	r6, [r0, #168]	@ 0xa8
1000faa2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1000faa6:	9a02      	ldr	r2, [sp, #8]
1000faa8:	ea8c 0c06 	eor.w	ip, ip, r6
1000faac:	ea8c 0c04 	eor.w	ip, ip, r4
1000fab0:	ea8c 0c01 	eor.w	ip, ip, r1
1000fab4:	f8d0 10ac 	ldr.w	r1, [r0, #172]	@ 0xac
1000fab8:	ea8b 0601 	eor.w	r6, fp, r1
1000fabc:	4056      	eors	r6, r2
1000fabe:	4652      	mov	r2, sl
1000fac0:	4056      	eors	r6, r2
1000fac2:	b2f2      	uxtb	r2, r6
1000fac4:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000fac8:	f3cc 4407 	ubfx	r4, ip, #16, #8
1000facc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1000fad0:	f3c5 4207 	ubfx	r2, r5, #16, #8
1000fad4:	f502 7280 	add.w	r2, r2, #256	@ 0x100
1000fad8:	f504 7480 	add.w	r4, r4, #256	@ 0x100
1000fadc:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
1000fae0:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
1000fae4:	9403      	str	r4, [sp, #12]
1000fae6:	f3cc 2207 	ubfx	r2, ip, #8, #8
1000faea:	f3c6 2407 	ubfx	r4, r6, #8, #8
1000faee:	f502 7200 	add.w	r2, r2, #512	@ 0x200
1000faf2:	ea87 0708 	eor.w	r7, r7, r8
1000faf6:	f504 7400 	add.w	r4, r4, #512	@ 0x200
1000fafa:	ea87 0709 	eor.w	r7, r7, r9
1000fafe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1000fb02:	f853 e024 	ldr.w	lr, [r3, r4, lsl #2]
1000fb06:	9202      	str	r2, [sp, #8]
1000fb08:	b2ec      	uxtb	r4, r5
1000fb0a:	b2fa      	uxtb	r2, r7
1000fb0c:	f8cd e010 	str.w	lr, [sp, #16]
1000fb10:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000fb14:	fa5f fe8c 	uxtb.w	lr, ip
1000fb18:	f504 7440 	add.w	r4, r4, #768	@ 0x300
1000fb1c:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
1000fb20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1000fb24:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
1000fb28:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
1000fb2c:	ea8c 0404 	eor.w	r4, ip, r4
1000fb30:	ea4f 6c17 	mov.w	ip, r7, lsr #24
1000fb34:	ea4f 6816 	mov.w	r8, r6, lsr #24
1000fb38:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
1000fb3c:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
1000fb40:	ea8c 0101 	eor.w	r1, ip, r1
1000fb44:	ea4f 6c15 	mov.w	ip, r5, lsr #24
1000fb48:	f3c6 4607 	ubfx	r6, r6, #16, #8
1000fb4c:	f853 a02c 	ldr.w	sl, [r3, ip, lsl #2]
1000fb50:	ea8a 0a02 	eor.w	sl, sl, r2
1000fb54:	f8d0 20b0 	ldr.w	r2, [r0, #176]	@ 0xb0
1000fb58:	4051      	eors	r1, r2
1000fb5a:	9a02      	ldr	r2, [sp, #8]
1000fb5c:	ea81 010b 	eor.w	r1, r1, fp
1000fb60:	4051      	eors	r1, r2
1000fb62:	f8d0 20b4 	ldr.w	r2, [r0, #180]	@ 0xb4
1000fb66:	ea8a 0a02 	eor.w	sl, sl, r2
1000fb6a:	9a03      	ldr	r2, [sp, #12]
1000fb6c:	ea8a 0a02 	eor.w	sl, sl, r2
1000fb70:	9a04      	ldr	r2, [sp, #16]
1000fb72:	f3c5 2507 	ubfx	r5, r5, #8, #8
1000fb76:	f506 7680 	add.w	r6, r6, #256	@ 0x100
1000fb7a:	f505 7c00 	add.w	ip, r5, #512	@ 0x200
1000fb7e:	f3c7 4907 	ubfx	r9, r7, #16, #8
1000fb82:	ea8a 0502 	eor.w	r5, sl, r2
1000fb86:	f3c7 2707 	ubfx	r7, r7, #8, #8
1000fb8a:	f8d0 20b8 	ldr.w	r2, [r0, #184]	@ 0xb8
1000fb8e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1000fb92:	f507 7700 	add.w	r7, r7, #512	@ 0x200
1000fb96:	f50e 7e40 	add.w	lr, lr, #768	@ 0x300
1000fb9a:	4054      	eors	r4, r2
1000fb9c:	4074      	eors	r4, r6
1000fb9e:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
1000fba2:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
1000fba6:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
1000fbaa:	f509 7980 	add.w	r9, r9, #256	@ 0x100
1000fbae:	4074      	eors	r4, r6
1000fbb0:	f8d0 60bc 	ldr.w	r6, [r0, #188]	@ 0xbc
1000fbb4:	f853 e029 	ldr.w	lr, [r3, r9, lsl #2]
1000fbb8:	ea88 0202 	eor.w	r2, r8, r2
1000fbbc:	4072      	eors	r2, r6
        if (r > 6) {
1000fbbe:	9e00      	ldr	r6, [sp, #0]
        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
1000fbc0:	ea82 020e 	eor.w	r2, r2, lr
        if (r > 6) {
1000fbc4:	2e06      	cmp	r6, #6
        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
1000fbc6:	ea82 0207 	eor.w	r2, r2, r7
        if (r > 6) {
1000fbca:	f000 80f4 	beq.w	1000fdb6 <AesEncrypt_C+0xca6>
            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
1000fbce:	b2d6      	uxtb	r6, r2
1000fbd0:	f506 7640 	add.w	r6, r6, #768	@ 0x300
1000fbd4:	f3c5 4e07 	ubfx	lr, r5, #16, #8
1000fbd8:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
1000fbdc:	b2ce      	uxtb	r6, r1
1000fbde:	f506 7640 	add.w	r6, r6, #768	@ 0x300
1000fbe2:	f50e 7e80 	add.w	lr, lr, #256	@ 0x100
1000fbe6:	f853 c026 	ldr.w	ip, [r3, r6, lsl #2]
1000fbea:	b2ee      	uxtb	r6, r5
1000fbec:	f506 7640 	add.w	r6, r6, #768	@ 0x300
1000fbf0:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
1000fbf4:	b2e6      	uxtb	r6, r4
1000fbf6:	f506 7640 	add.w	r6, r6, #768	@ 0x300
1000fbfa:	f853 b026 	ldr.w	fp, [r3, r6, lsl #2]
1000fbfe:	0e0e      	lsrs	r6, r1, #24
1000fc00:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1000fc04:	4077      	eors	r7, r6
1000fc06:	0e2e      	lsrs	r6, r5, #24
1000fc08:	f3c5 2507 	ubfx	r5, r5, #8, #8
1000fc0c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1000fc10:	f505 7500 	add.w	r5, r5, #512	@ 0x200
1000fc14:	ea86 060c 	eor.w	r6, r6, ip
1000fc18:	ea4f 6c14 	mov.w	ip, r4, lsr #24
1000fc1c:	f853 a025 	ldr.w	sl, [r3, r5, lsl #2]
1000fc20:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
1000fc24:	f3c4 4507 	ubfx	r5, r4, #16, #8
1000fc28:	f3c4 2407 	ubfx	r4, r4, #8, #8
1000fc2c:	f504 7400 	add.w	r4, r4, #512	@ 0x200
1000fc30:	ea8c 0c08 	eor.w	ip, ip, r8
1000fc34:	ea4f 6812 	mov.w	r8, r2, lsr #24
1000fc38:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
1000fc3c:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
1000fc40:	f3c2 4407 	ubfx	r4, r2, #16, #8
1000fc44:	f3c2 2207 	ubfx	r2, r2, #8, #8
1000fc48:	f505 7580 	add.w	r5, r5, #256	@ 0x100
1000fc4c:	f502 7200 	add.w	r2, r2, #512	@ 0x200
1000fc50:	ea88 0b0b 	eor.w	fp, r8, fp
1000fc54:	f853 802e 	ldr.w	r8, [r3, lr, lsl #2]
1000fc58:	f853 e025 	ldr.w	lr, [r3, r5, lsl #2]
1000fc5c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
1000fc60:	f3c1 4207 	ubfx	r2, r1, #16, #8
1000fc64:	f502 7280 	add.w	r2, r2, #256	@ 0x100
1000fc68:	f504 7480 	add.w	r4, r4, #256	@ 0x100
1000fc6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1000fc70:	9202      	str	r2, [sp, #8]
1000fc72:	f8d0 20c0 	ldr.w	r2, [r0, #192]	@ 0xc0
1000fc76:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
1000fc7a:	4057      	eors	r7, r2
1000fc7c:	f8d0 20c4 	ldr.w	r2, [r0, #196]	@ 0xc4
1000fc80:	4056      	eors	r6, r2
1000fc82:	ea86 060e 	eor.w	r6, r6, lr
1000fc86:	f3c1 2107 	ubfx	r1, r1, #8, #8
1000fc8a:	4075      	eors	r5, r6
1000fc8c:	f501 7100 	add.w	r1, r1, #512	@ 0x200
1000fc90:	f8d0 60c8 	ldr.w	r6, [r0, #200]	@ 0xc8
1000fc94:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1000fc98:	9a02      	ldr	r2, [sp, #8]
1000fc9a:	ea8c 0c06 	eor.w	ip, ip, r6
1000fc9e:	ea8c 0c04 	eor.w	ip, ip, r4
1000fca2:	ea8c 0c01 	eor.w	ip, ip, r1
1000fca6:	f8d0 10cc 	ldr.w	r1, [r0, #204]	@ 0xcc
1000fcaa:	ea8b 0601 	eor.w	r6, fp, r1
1000fcae:	4056      	eors	r6, r2
1000fcb0:	4652      	mov	r2, sl
1000fcb2:	4056      	eors	r6, r2
1000fcb4:	b2f2      	uxtb	r2, r6
1000fcb6:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000fcba:	f3cc 4407 	ubfx	r4, ip, #16, #8
1000fcbe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1000fcc2:	f3c5 4207 	ubfx	r2, r5, #16, #8
1000fcc6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
1000fcca:	f504 7480 	add.w	r4, r4, #256	@ 0x100
1000fcce:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
1000fcd2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
1000fcd6:	9403      	str	r4, [sp, #12]
1000fcd8:	f3cc 2207 	ubfx	r2, ip, #8, #8
1000fcdc:	f3c6 2407 	ubfx	r4, r6, #8, #8
1000fce0:	f502 7200 	add.w	r2, r2, #512	@ 0x200
1000fce4:	ea87 0708 	eor.w	r7, r7, r8
1000fce8:	f504 7400 	add.w	r4, r4, #512	@ 0x200
1000fcec:	ea87 0709 	eor.w	r7, r7, r9
1000fcf0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1000fcf4:	f853 e024 	ldr.w	lr, [r3, r4, lsl #2]
1000fcf8:	9202      	str	r2, [sp, #8]
1000fcfa:	b2ec      	uxtb	r4, r5
1000fcfc:	b2fa      	uxtb	r2, r7
1000fcfe:	f8cd e010 	str.w	lr, [sp, #16]
1000fd02:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000fd06:	fa5f fe8c 	uxtb.w	lr, ip
1000fd0a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
1000fd0e:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
1000fd12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1000fd16:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
1000fd1a:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
1000fd1e:	ea8c 0404 	eor.w	r4, ip, r4
1000fd22:	ea4f 6c17 	mov.w	ip, r7, lsr #24
1000fd26:	ea4f 6816 	mov.w	r8, r6, lsr #24
1000fd2a:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
1000fd2e:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
1000fd32:	ea8c 0101 	eor.w	r1, ip, r1
1000fd36:	ea4f 6c15 	mov.w	ip, r5, lsr #24
1000fd3a:	f3c6 4607 	ubfx	r6, r6, #16, #8
1000fd3e:	f853 a02c 	ldr.w	sl, [r3, ip, lsl #2]
1000fd42:	ea8a 0a02 	eor.w	sl, sl, r2
1000fd46:	f8d0 20d0 	ldr.w	r2, [r0, #208]	@ 0xd0
1000fd4a:	4051      	eors	r1, r2
1000fd4c:	9a02      	ldr	r2, [sp, #8]
1000fd4e:	ea81 010b 	eor.w	r1, r1, fp
1000fd52:	4051      	eors	r1, r2
1000fd54:	f8d0 20d4 	ldr.w	r2, [r0, #212]	@ 0xd4
1000fd58:	ea8a 0a02 	eor.w	sl, sl, r2
1000fd5c:	9a03      	ldr	r2, [sp, #12]
1000fd5e:	ea8a 0a02 	eor.w	sl, sl, r2
1000fd62:	9a04      	ldr	r2, [sp, #16]
1000fd64:	f3c5 2507 	ubfx	r5, r5, #8, #8
1000fd68:	f506 7680 	add.w	r6, r6, #256	@ 0x100
1000fd6c:	f505 7c00 	add.w	ip, r5, #512	@ 0x200
1000fd70:	f3c7 4907 	ubfx	r9, r7, #16, #8
1000fd74:	ea8a 0502 	eor.w	r5, sl, r2
1000fd78:	f3c7 2707 	ubfx	r7, r7, #8, #8
1000fd7c:	f8d0 20d8 	ldr.w	r2, [r0, #216]	@ 0xd8
1000fd80:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1000fd84:	f507 7700 	add.w	r7, r7, #512	@ 0x200
1000fd88:	f50e 7e40 	add.w	lr, lr, #768	@ 0x300
1000fd8c:	4054      	eors	r4, r2
1000fd8e:	4074      	eors	r4, r6
1000fd90:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
1000fd94:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
1000fd98:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
1000fd9c:	f509 7980 	add.w	r9, r9, #256	@ 0x100
1000fda0:	4074      	eors	r4, r6
1000fda2:	f8d0 60dc 	ldr.w	r6, [r0, #220]	@ 0xdc
1000fda6:	f853 e029 	ldr.w	lr, [r3, r9, lsl #2]
1000fdaa:	ea88 0202 	eor.w	r2, r8, r2
1000fdae:	4072      	eors	r2, r6
1000fdb0:	ea82 020e 	eor.w	r2, r2, lr
1000fdb4:	407a      	eors	r2, r7
#ifndef WOLFSSL_AES_TOUCH_LINES
    s0 =
        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
1000fdb6:	b2d6      	uxtb	r6, r2
1000fdb8:	f506 7680 	add.w	r6, r6, #256	@ 0x100
        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
        (GetTable(Te[0], GETBYTE(t3, 1)) & 0x0000ff00) ^
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
        rk[1];
    s2 =
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
1000fdbc:	ea4f 6914 	mov.w	r9, r4, lsr #24
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
1000fdc0:	f813 c026 	ldrb.w	ip, [r3, r6, lsl #2]
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
1000fdc4:	f3c5 4607 	ubfx	r6, r5, #16, #8
1000fdc8:	f506 7640 	add.w	r6, r6, #768	@ 0x300
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
1000fdcc:	f509 7900 	add.w	r9, r9, #512	@ 0x200
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
1000fdd0:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
1000fdd4:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
1000fdd8:	f406 087f 	and.w	r8, r6, #16711680	@ 0xff0000
        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
1000fddc:	0e0e      	lsrs	r6, r1, #24
1000fdde:	f506 7600 	add.w	r6, r6, #512	@ 0x200
        rk[2];
    s3 =
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
1000fde2:	fa5f fa84 	uxtb.w	sl, r4
        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
1000fde6:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1000fdea:	f006 467f 	and.w	r6, r6, #4278190080	@ 0xff000000
1000fdee:	ea48 0806 	orr.w	r8, r8, r6
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
1000fdf2:	b2ce      	uxtb	r6, r1
1000fdf4:	f506 7680 	add.w	r6, r6, #256	@ 0x100
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
1000fdf8:	f50a 7a80 	add.w	sl, sl, #256	@ 0x100
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
1000fdfc:	f813 7026 	ldrb.w	r7, [r3, r6, lsl #2]
        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
1000fe00:	f3c4 4607 	ubfx	r6, r4, #16, #8
1000fe04:	f506 7640 	add.w	r6, r6, #768	@ 0x300
        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
1000fe08:	f3c4 2407 	ubfx	r4, r4, #8, #8
        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
1000fe0c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1000fe10:	f406 0e7f 	and.w	lr, r6, #16711680	@ 0xff0000
        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
1000fe14:	0e2e      	lsrs	r6, r5, #24
1000fe16:	f506 7600 	add.w	r6, r6, #512	@ 0x200
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
1000fe1a:	f009 497f 	and.w	r9, r9, #4278190080	@ 0xff000000
        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
1000fe1e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1000fe22:	f006 467f 	and.w	r6, r6, #4278190080	@ 0xff000000
1000fe26:	ea4e 0e06 	orr.w	lr, lr, r6
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
1000fe2a:	b2ee      	uxtb	r6, r5
        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
1000fe2c:	f3c5 2507 	ubfx	r5, r5, #8, #8
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
1000fe30:	ea4f 6b12 	mov.w	fp, r2, lsr #24
        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
1000fe34:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
1000fe38:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
1000fe3c:	9502      	str	r5, [sp, #8]
        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
1000fe3e:	f3c2 4507 	ubfx	r5, r2, #16, #8
1000fe42:	f505 7540 	add.w	r5, r5, #768	@ 0x300
        (GetTable(Te[0], GETBYTE(t3, 1)) & 0x0000ff00) ^
1000fe46:	f3c2 2207 	ubfx	r2, r2, #8, #8
        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
1000fe4a:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
        (GetTable(Te[0], GETBYTE(t3, 1)) & 0x0000ff00) ^
1000fe4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
1000fe52:	f405 057f 	and.w	r5, r5, #16711680	@ 0xff0000
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
1000fe56:	ea45 0509 	orr.w	r5, r5, r9
        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
1000fe5a:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
1000fe5e:	f813 402a 	ldrb.w	r4, [r3, sl, lsl #2]
        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
1000fe62:	f3c1 4a07 	ubfx	sl, r1, #16, #8
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
1000fe66:	f50b 7b00 	add.w	fp, fp, #512	@ 0x200
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
1000fe6a:	f506 7680 	add.w	r6, r6, #256	@ 0x100
        (GetTable(Te[0], GETBYTE(t0, 1)) & 0x0000ff00) ^
1000fe6e:	f3c1 2107 	ubfx	r1, r1, #8, #8
        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
1000fe72:	f50a 7a40 	add.w	sl, sl, #768	@ 0x300
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
1000fe76:	f813 6026 	ldrb.w	r6, [r3, r6, lsl #2]
        (GetTable(Te[0], GETBYTE(t0, 1)) & 0x0000ff00) ^
1000fe7a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
1000fe7e:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
1000fe82:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
        (GetTable(Te[0], GETBYTE(t3, 1)) & 0x0000ff00) ^
1000fe86:	f402 4b7f 	and.w	fp, r2, #65280	@ 0xff00
    rk += r * 8;
1000fe8a:	9a00      	ldr	r2, [sp, #0]
        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
1000fe8c:	f40a 0a7f 	and.w	sl, sl, #16711680	@ 0xff0000
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
1000fe90:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
1000fe94:	ea4a 0303 	orr.w	r3, sl, r3
    rk += r * 8;
1000fe98:	eb00 1a42 	add.w	sl, r0, r2, lsl #5
1000fe9c:	0152      	lsls	r2, r2, #5
        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
1000fe9e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
1000fea2:	5882      	ldr	r2, [r0, r2]
1000fea4:	ea8c 0c02 	eor.w	ip, ip, r2
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
1000fea8:	f8da 2004 	ldr.w	r2, [sl, #4]
1000feac:	4057      	eors	r7, r2
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
1000feae:	f8da 2008 	ldr.w	r2, [sl, #8]
1000feb2:	4056      	eors	r6, r2
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
1000feb4:	f8da 200c 	ldr.w	r2, [sl, #12]
1000feb8:	4054      	eors	r4, r2
1000feba:	9a02      	ldr	r2, [sp, #8]
        (GetTable(Te[0], GETBYTE(t0, 1)) & 0x0000ff00) ^
1000febc:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
1000fec0:	ea8c 0c09 	eor.w	ip, ip, r9
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
1000fec4:	ea87 070b 	eor.w	r7, r7, fp
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
1000fec8:	404e      	eors	r6, r1
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
1000feca:	4054      	eors	r4, r2
    s1 = ByteReverseWord32(s1);
    s2 = ByteReverseWord32(s2);
    s3 = ByteReverseWord32(s3);
#endif

    XMEMCPY(outBlock,                  &s0, sizeof(s0));
1000fecc:	9901      	ldr	r1, [sp, #4]
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
1000fece:	ea8c 0c08 	eor.w	ip, ip, r8
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
1000fed2:	ea87 070e 	eor.w	r7, r7, lr
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
1000fed6:	406e      	eors	r6, r5
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
1000fed8:	405c      	eors	r4, r3
1000feda:	fa9c fc8c 	rev.w	ip, ip
    s1 = ByteReverseWord32(s1);
1000fede:	ba3f      	rev	r7, r7
    s2 = ByteReverseWord32(s2);
1000fee0:	ba36      	rev	r6, r6
    s3 = ByteReverseWord32(s3);
1000fee2:	ba24      	rev	r4, r4
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
1000fee4:	f8c1 c000 	str.w	ip, [r1]
    XMEMCPY(outBlock +     sizeof(s0), &s1, sizeof(s1));
1000fee8:	604f      	str	r7, [r1, #4]
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
1000feea:	608e      	str	r6, [r1, #8]
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
1000feec:	60cc      	str	r4, [r1, #12]
}
1000feee:	b007      	add	sp, #28
1000fef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1000fef4 <AesDecrypt_C>:
 * @param [out] outBlock  Encrypted block.
 * @param [in]  r         Rounds divided by 2.
 */
static void AesDecrypt_C(Aes* aes, const byte* inBlock, byte* outBlock,
    word32 r)
{
1000fef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000fef8:	b087      	sub	sp, #28
1000fefa:	680d      	ldr	r5, [r1, #0]
1000fefc:	684c      	ldr	r4, [r1, #4]
1000fefe:	f8d1 9008 	ldr.w	r9, [r1, #8]
1000ff02:	68ce      	ldr	r6, [r1, #12]
1000ff04:	e9cd 3200 	strd	r3, r2, [sp]
    s1 = ByteReverseWord32(s1);
    s2 = ByteReverseWord32(s2);
    s3 = ByteReverseWord32(s3);
#endif

    s0 ^= rk[0];
1000ff08:	6803      	ldr	r3, [r0, #0]
1000ff0a:	ba2d      	rev	r5, r5
1000ff0c:	405d      	eors	r5, r3
    s1 ^= rk[1];
1000ff0e:	6843      	ldr	r3, [r0, #4]
1000ff10:	ba24      	rev	r4, r4
1000ff12:	405c      	eors	r4, r3
    s2 ^= rk[2];
1000ff14:	6883      	ldr	r3, [r0, #8]
1000ff16:	fa99 f989 	rev.w	r9, r9
1000ff1a:	ea89 0903 	eor.w	r9, r9, r3
    s3 ^= rk[3];
1000ff1e:	68c3      	ldr	r3, [r0, #12]
                          &s2, GETBYTE(t3, 0), &s3, GETBYTE(t0, 0));           \
    s0 ^= rk[(o)+0]; s1 ^= rk[(o)+1]; s2 ^= rk[(o)+2]; s3 ^= rk[(o)+3];
#endif

#ifndef WOLFSSL_AES_NO_UNROLL
                       DEC_ROUND_T_S( 0);
1000ff20:	fa5f fc84 	uxtb.w	ip, r4
1000ff24:	fa5f f789 	uxtb.w	r7, r9
1000ff28:	b2ea      	uxtb	r2, r5
1000ff2a:	ba36      	rev	r6, r6
    s3 ^= rk[3];
1000ff2c:	405e      	eors	r6, r3
                       DEC_ROUND_T_S( 0);
1000ff2e:	f50c 7c40 	add.w	ip, ip, #768	@ 0x300
1000ff32:	4be8      	ldr	r3, [pc, #928]	@ (100102d4 <AesDecrypt_C+0x3e0>)
1000ff34:	f507 7740 	add.w	r7, r7, #768	@ 0x300
1000ff38:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1000ff3c:	b2f1      	uxtb	r1, r6
1000ff3e:	f853 802c 	ldr.w	r8, [r3, ip, lsl #2]
1000ff42:	f853 c027 	ldr.w	ip, [r3, r7, lsl #2]
1000ff46:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
1000ff4a:	f501 7140 	add.w	r1, r1, #768	@ 0x300
1000ff4e:	0e2a      	lsrs	r2, r5, #24
1000ff50:	f853 e021 	ldr.w	lr, [r3, r1, lsl #2]
1000ff54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1000ff58:	0e22      	lsrs	r2, r4, #24
1000ff5a:	ea81 0108 	eor.w	r1, r1, r8
1000ff5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1000ff62:	ea82 020c 	eor.w	r2, r2, ip
1000ff66:	ea4f 6c19 	mov.w	ip, r9, lsr #24
1000ff6a:	9202      	str	r2, [sp, #8]
1000ff6c:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
1000ff70:	ea8c 0c0e 	eor.w	ip, ip, lr
1000ff74:	ea4f 6e16 	mov.w	lr, r6, lsr #24
1000ff78:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
1000ff7c:	ea8b 0b07 	eor.w	fp, fp, r7
1000ff80:	f3c6 4707 	ubfx	r7, r6, #16, #8
1000ff84:	f3c6 2607 	ubfx	r6, r6, #8, #8
1000ff88:	f506 7600 	add.w	r6, r6, #512	@ 0x200
1000ff8c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
1000ff90:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
1000ff94:	f853 a027 	ldr.w	sl, [r3, r7, lsl #2]
1000ff98:	f3c5 4607 	ubfx	r6, r5, #16, #8
1000ff9c:	f3c5 2507 	ubfx	r5, r5, #8, #8
1000ffa0:	f506 7680 	add.w	r6, r6, #256	@ 0x100
1000ffa4:	f505 7500 	add.w	r5, r5, #512	@ 0x200
1000ffa8:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
1000ffac:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1000ffb0:	f3c4 4507 	ubfx	r5, r4, #16, #8
1000ffb4:	f3c4 2407 	ubfx	r4, r4, #8, #8
1000ffb8:	f504 7400 	add.w	r4, r4, #512	@ 0x200
1000ffbc:	f505 7580 	add.w	r5, r5, #256	@ 0x100
1000ffc0:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
1000ffc4:	9203      	str	r2, [sp, #12]
1000ffc6:	6902      	ldr	r2, [r0, #16]
1000ffc8:	9c02      	ldr	r4, [sp, #8]
1000ffca:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
1000ffce:	4051      	eors	r1, r2
1000ffd0:	6942      	ldr	r2, [r0, #20]
1000ffd2:	f3c9 4507 	ubfx	r5, r9, #16, #8
1000ffd6:	f3c9 2907 	ubfx	r9, r9, #8, #8
1000ffda:	4054      	eors	r4, r2
1000ffdc:	f505 7580 	add.w	r5, r5, #256	@ 0x100
1000ffe0:	f509 7900 	add.w	r9, r9, #512	@ 0x200
1000ffe4:	ea84 0208 	eor.w	r2, r4, r8
1000ffe8:	ea82 020e 	eor.w	r2, r2, lr
1000ffec:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
1000fff0:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
1000fff4:	f8d0 e018 	ldr.w	lr, [r0, #24]
1000fff8:	9c03      	ldr	r4, [sp, #12]
1000fffa:	ea8c 0c0e 	eor.w	ip, ip, lr
1000fffe:	ea8c 0c07 	eor.w	ip, ip, r7
10010002:	ea8c 0c06 	eor.w	ip, ip, r6
10010006:	69c6      	ldr	r6, [r0, #28]
10010008:	ea8b 0b06 	eor.w	fp, fp, r6
1001000c:	ea8b 0b05 	eor.w	fp, fp, r5
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
10010010:	b2d5      	uxtb	r5, r2
10010012:	f505 7540 	add.w	r5, r5, #768	@ 0x300
                       DEC_ROUND_T_S( 0);
10010016:	ea8b 0404 	eor.w	r4, fp, r4
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
1001001a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1001001e:	f3c4 4507 	ubfx	r5, r4, #16, #8
10010022:	f505 7580 	add.w	r5, r5, #256	@ 0x100
                       DEC_ROUND_T_S( 0);
10010026:	ea81 010a 	eor.w	r1, r1, sl
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
1001002a:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
1001002e:	9702      	str	r7, [sp, #8]
10010030:	fa5f f58c 	uxtb.w	r5, ip
                       DEC_ROUND_T_S( 0);
10010034:	ea81 0109 	eor.w	r1, r1, r9
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
10010038:	f505 7b40 	add.w	fp, r5, #768	@ 0x300
1001003c:	b2e5      	uxtb	r5, r4
1001003e:	f505 7e40 	add.w	lr, r5, #768	@ 0x300
10010042:	b2cd      	uxtb	r5, r1
10010044:	f505 7940 	add.w	r9, r5, #768	@ 0x300
10010048:	0e0d      	lsrs	r5, r1, #24
1001004a:	ea4f 6812 	mov.w	r8, r2, lsr #24
1001004e:	f3c2 4a07 	ubfx	sl, r2, #16, #8
10010052:	f3c2 2207 	ubfx	r2, r2, #8, #8
10010056:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
1001005a:	f8cd e00c 	str.w	lr, [sp, #12]
1001005e:	f502 7200 	add.w	r2, r2, #512	@ 0x200
10010062:	9205      	str	r2, [sp, #20]
10010064:	f3cc 2707 	ubfx	r7, ip, #8, #8
10010068:	6a02      	ldr	r2, [r0, #32]
1001006a:	4075      	eors	r5, r6
1001006c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
10010070:	4055      	eors	r5, r2
10010072:	9a02      	ldr	r2, [sp, #8]
10010074:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
10010078:	4055      	eors	r5, r2
1001007a:	406f      	eors	r7, r5
1001007c:	9a03      	ldr	r2, [sp, #12]
1001007e:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
10010082:	f853 802b 	ldr.w	r8, [r3, fp, lsl #2]
10010086:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
1001008a:	f3cc 4c07 	ubfx	ip, ip, #16, #8
1001008e:	f50c 7680 	add.w	r6, ip, #256	@ 0x100
10010092:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
10010096:	9604      	str	r6, [sp, #16]
10010098:	ea4f 6c14 	mov.w	ip, r4, lsr #24
1001009c:	ea85 0508 	eor.w	r5, r5, r8
100100a0:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
100100a4:	9a05      	ldr	r2, [sp, #20]
100100a6:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
100100aa:	f3c1 4607 	ubfx	r6, r1, #16, #8
100100ae:	f50a 7a80 	add.w	sl, sl, #256	@ 0x100
100100b2:	f506 7680 	add.w	r6, r6, #256	@ 0x100
100100b6:	ea8e 0e08 	eor.w	lr, lr, r8
100100ba:	f3c4 2407 	ubfx	r4, r4, #8, #8
100100be:	f853 8029 	ldr.w	r8, [r3, r9, lsl #2]
100100c2:	f853 902a 	ldr.w	r9, [r3, sl, lsl #2]
100100c6:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
100100ca:	6a42      	ldr	r2, [r0, #36]	@ 0x24
100100cc:	f504 7400 	add.w	r4, r4, #512	@ 0x200
100100d0:	ea8c 0c08 	eor.w	ip, ip, r8
100100d4:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
100100d8:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
100100dc:	9e04      	ldr	r6, [sp, #16]
100100de:	4055      	eors	r5, r2
100100e0:	ea85 0508 	eor.w	r5, r5, r8
100100e4:	f3c1 2107 	ubfx	r1, r1, #8, #8
100100e8:	4065      	eors	r5, r4
100100ea:	f501 7100 	add.w	r1, r1, #512	@ 0x200
100100ee:	6a84      	ldr	r4, [r0, #40]	@ 0x28
100100f0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
100100f4:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
100100f8:	ea8e 0e04 	eor.w	lr, lr, r4
100100fc:	ea8e 0e09 	eor.w	lr, lr, r9
10010100:	ea8e 0e01 	eor.w	lr, lr, r1
10010104:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
10010106:	b2ea      	uxtb	r2, r5
10010108:	ea8c 0c01 	eor.w	ip, ip, r1
1001010c:	ea8c 0c06 	eor.w	ip, ip, r6
10010110:	f502 7240 	add.w	r2, r2, #768	@ 0x300
10010114:	ea8c 0c0a 	eor.w	ip, ip, sl
10010118:	f3c7 4107 	ubfx	r1, r7, #16, #8
1001011c:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
10010120:	f3cc 4207 	ubfx	r2, ip, #16, #8
10010124:	f502 7280 	add.w	r2, r2, #256	@ 0x100
10010128:	f501 7180 	add.w	r1, r1, #256	@ 0x100
1001012c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
10010130:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
10010134:	9103      	str	r1, [sp, #12]
10010136:	f3cc 2107 	ubfx	r1, ip, #8, #8
1001013a:	f501 7100 	add.w	r1, r1, #512	@ 0x200
1001013e:	9202      	str	r2, [sp, #8]
10010140:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
10010144:	f8cd 8010 	str.w	r8, [sp, #16]
10010148:	fa5f f18c 	uxtb.w	r1, ip
1001014c:	f501 7140 	add.w	r1, r1, #768	@ 0x300
10010150:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
10010154:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
10010158:	f853 b02c 	ldr.w	fp, [r3, ip, lsl #2]
1001015c:	f3c5 4107 	ubfx	r1, r5, #16, #8
10010160:	f501 7180 	add.w	r1, r1, #256	@ 0x100
10010164:	f3ce 2207 	ubfx	r2, lr, #8, #8
10010168:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
1001016c:	f3c7 2107 	ubfx	r1, r7, #8, #8
10010170:	f501 7100 	add.w	r1, r1, #512	@ 0x200
10010174:	f502 7200 	add.w	r2, r2, #512	@ 0x200
10010178:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
1001017c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
10010180:	b2f9      	uxtb	r1, r7
10010182:	0e3f      	lsrs	r7, r7, #24
10010184:	fa5f f28e 	uxtb.w	r2, lr
10010188:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
1001018c:	f502 7240 	add.w	r2, r2, #768	@ 0x300
10010190:	ea87 0a0a 	eor.w	sl, r7, sl
10010194:	0e2f      	lsrs	r7, r5, #24
10010196:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1001019a:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
1001019e:	f3c5 2507 	ubfx	r5, r5, #8, #8
100101a2:	ea87 0902 	eor.w	r9, r7, r2
100101a6:	f505 7200 	add.w	r2, r5, #512	@ 0x200
100101aa:	ea4f 651e 	mov.w	r5, lr, lsr #24
100101ae:	f501 7140 	add.w	r1, r1, #768	@ 0x300
100101b2:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
100101b6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
100101ba:	4067      	eors	r7, r4
100101bc:	6b04      	ldr	r4, [r0, #48]	@ 0x30
100101be:	ea8a 0a04 	eor.w	sl, sl, r4
100101c2:	9c02      	ldr	r4, [sp, #8]
100101c4:	ea8a 0a04 	eor.w	sl, sl, r4
100101c8:	6b44      	ldr	r4, [r0, #52]	@ 0x34
100101ca:	ea89 0904 	eor.w	r9, r9, r4
100101ce:	9c03      	ldr	r4, [sp, #12]
100101d0:	ea89 0904 	eor.w	r9, r9, r4
100101d4:	9c04      	ldr	r4, [sp, #16]
100101d6:	ea8b 0b01 	eor.w	fp, fp, r1
100101da:	ea89 0504 	eor.w	r5, r9, r4
100101de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
100101e2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
100101e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
100101e6:	f3ce 4e07 	ubfx	lr, lr, #16, #8
100101ea:	f50e 7e80 	add.w	lr, lr, #256	@ 0x100
100101ee:	4067      	eors	r7, r4
100101f0:	ea8b 0b02 	eor.w	fp, fp, r2
    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
100101f4:	b2ea      	uxtb	r2, r5
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
100101f6:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
100101fa:	ea87 0708 	eor.w	r7, r7, r8
    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
100101fe:	f502 7240 	add.w	r2, r2, #768	@ 0x300
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
10010202:	ea87 070c 	eor.w	r7, r7, ip
10010206:	ea8b 0b04 	eor.w	fp, fp, r4
    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
1001020a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
1001020e:	b2fa      	uxtb	r2, r7
10010210:	f502 7240 	add.w	r2, r2, #768	@ 0x300
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
10010214:	ea8b 0b01 	eor.w	fp, fp, r1
    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
10010218:	f853 e022 	ldr.w	lr, [r3, r2, lsl #2]
1001021c:	fa5f f28b 	uxtb.w	r2, fp
10010220:	f502 7240 	add.w	r2, r2, #768	@ 0x300
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
10010224:	ea8a 0606 	eor.w	r6, sl, r6
    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
10010228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1001022c:	b2f2      	uxtb	r2, r6
1001022e:	f502 7240 	add.w	r2, r2, #768	@ 0x300
10010232:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
10010236:	0e32      	lsrs	r2, r6, #24
10010238:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1001023c:	4054      	eors	r4, r2
1001023e:	0e2a      	lsrs	r2, r5, #24
10010240:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
10010244:	ea82 020e 	eor.w	r2, r2, lr
10010248:	ea4f 6e17 	mov.w	lr, r7, lsr #24
1001024c:	9202      	str	r2, [sp, #8]
1001024e:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
10010252:	ea8e 0101 	eor.w	r1, lr, r1
10010256:	ea4f 6e1b 	mov.w	lr, fp, lsr #24
1001025a:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
1001025e:	ea8e 0808 	eor.w	r8, lr, r8
10010262:	f3cb 4e07 	ubfx	lr, fp, #16, #8
10010266:	f3cb 2b07 	ubfx	fp, fp, #8, #8
1001026a:	f50b 7c00 	add.w	ip, fp, #512	@ 0x200
1001026e:	f50e 7e80 	add.w	lr, lr, #256	@ 0x100
10010272:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
10010276:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
1001027a:	9203      	str	r2, [sp, #12]
1001027c:	f3c6 4c07 	ubfx	ip, r6, #16, #8
10010280:	f3c6 2607 	ubfx	r6, r6, #8, #8
10010284:	f50c 7c80 	add.w	ip, ip, #256	@ 0x100
10010288:	f506 7600 	add.w	r6, r6, #512	@ 0x200
1001028c:	f853 902c 	ldr.w	r9, [r3, ip, lsl #2]
10010290:	f853 c026 	ldr.w	ip, [r3, r6, lsl #2]
10010294:	6c02      	ldr	r2, [r0, #64]	@ 0x40
10010296:	f3c5 4607 	ubfx	r6, r5, #16, #8
1001029a:	f506 7680 	add.w	r6, r6, #256	@ 0x100
1001029e:	4054      	eors	r4, r2
100102a0:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
100102a4:	9a02      	ldr	r2, [sp, #8]
100102a6:	f3c7 4607 	ubfx	r6, r7, #16, #8
100102aa:	f3c7 2707 	ubfx	r7, r7, #8, #8
100102ae:	f507 7700 	add.w	r7, r7, #512	@ 0x200
100102b2:	ea84 040b 	eor.w	r4, r4, fp
100102b6:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
100102ba:	ea84 0a07 	eor.w	sl, r4, r7
100102be:	6c47      	ldr	r7, [r0, #68]	@ 0x44
100102c0:	9c03      	ldr	r4, [sp, #12]
100102c2:	407a      	eors	r2, r7
100102c4:	6c87      	ldr	r7, [r0, #72]	@ 0x48
100102c6:	ea82 0209 	eor.w	r2, r2, r9
100102ca:	f3c5 2507 	ubfx	r5, r5, #8, #8
100102ce:	f506 7680 	add.w	r6, r6, #256	@ 0x100
100102d2:	e001      	b.n	100102d8 <AesDecrypt_C+0x3e4>
100102d4:	10022fa4 	.word	0x10022fa4
100102d8:	4062      	eors	r2, r4
100102da:	f505 7500 	add.w	r5, r5, #512	@ 0x200
100102de:	ea81 0407 	eor.w	r4, r1, r7
100102e2:	6cc7      	ldr	r7, [r0, #76]	@ 0x4c
100102e4:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
100102e8:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
100102ec:	ea88 0107 	eor.w	r1, r8, r7
100102f0:	ea84 040e 	eor.w	r4, r4, lr
100102f4:	ea84 040c 	eor.w	r4, r4, ip
100102f8:	4071      	eors	r1, r6
100102fa:	f3ca 4c07 	ubfx	ip, sl, #16, #8
100102fe:	4069      	eors	r1, r5
10010300:	f50c 7c80 	add.w	ip, ip, #256	@ 0x100
10010304:	f8cd c00c 	str.w	ip, [sp, #12]
10010308:	fa5f fc81 	uxtb.w	ip, r1
1001030c:	f50c 7e40 	add.w	lr, ip, #768	@ 0x300
10010310:	b2d5      	uxtb	r5, r2
10010312:	fa5f fc8a 	uxtb.w	ip, sl
10010316:	f50c 7940 	add.w	r9, ip, #768	@ 0x300
1001031a:	f505 7540 	add.w	r5, r5, #768	@ 0x300
1001031e:	ea4f 6c1a 	mov.w	ip, sl, lsr #24
10010322:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
10010326:	f853 b02c 	ldr.w	fp, [r3, ip, lsl #2]
1001032a:	f8cd e010 	str.w	lr, [sp, #16]
1001032e:	b2e7      	uxtb	r7, r4
10010330:	ea8b 0b05 	eor.w	fp, fp, r5
10010334:	f507 7740 	add.w	r7, r7, #768	@ 0x300
10010338:	0e15      	lsrs	r5, r2, #24
1001033a:	f3c1 4607 	ubfx	r6, r1, #16, #8
1001033e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
10010342:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
10010346:	f506 7680 	add.w	r6, r6, #256	@ 0x100
1001034a:	407d      	eors	r5, r7
1001034c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
10010350:	6d07      	ldr	r7, [r0, #80]	@ 0x50
10010352:	9602      	str	r6, [sp, #8]
10010354:	ea8b 0b07 	eor.w	fp, fp, r7
10010358:	9f02      	ldr	r7, [sp, #8]
1001035a:	ea8b 0b07 	eor.w	fp, fp, r7
1001035e:	6d47      	ldr	r7, [r0, #84]	@ 0x54
10010360:	407d      	eors	r5, r7
10010362:	9f03      	ldr	r7, [sp, #12]
10010364:	f3c4 2607 	ubfx	r6, r4, #8, #8
10010368:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
1001036c:	ea4f 6814 	mov.w	r8, r4, lsr #24
10010370:	ea4f 6e11 	mov.w	lr, r1, lsr #24
10010374:	f506 7600 	add.w	r6, r6, #512	@ 0x200
10010378:	f3c1 2107 	ubfx	r1, r1, #8, #8
1001037c:	f501 7100 	add.w	r1, r1, #512	@ 0x200
10010380:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
10010384:	f3c2 4c07 	ubfx	ip, r2, #16, #8
10010388:	407d      	eors	r5, r7
1001038a:	f3c2 2207 	ubfx	r2, r2, #8, #8
1001038e:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
10010392:	f8dd 8010 	ldr.w	r8, [sp, #16]
10010396:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1001039a:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
1001039e:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
100103a2:	f502 7200 	add.w	r2, r2, #512	@ 0x200
100103a6:	404d      	eors	r5, r1
100103a8:	f50c 7c80 	add.w	ip, ip, #256	@ 0x100
100103ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
100103b0:	6d82      	ldr	r2, [r0, #88]	@ 0x58
100103b2:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
100103b6:	ea87 0708 	eor.w	r7, r7, r8
100103ba:	f3ca 2a07 	ubfx	sl, sl, #8, #8
100103be:	f853 8029 	ldr.w	r8, [r3, r9, lsl #2]
100103c2:	f50a 7a00 	add.w	sl, sl, #512	@ 0x200
100103c6:	4057      	eors	r7, r2
100103c8:	f3c4 4407 	ubfx	r4, r4, #16, #8
100103cc:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
100103ce:	ea8e 0e08 	eor.w	lr, lr, r8
100103d2:	f504 7480 	add.w	r4, r4, #256	@ 0x100
100103d6:	f853 802a 	ldr.w	r8, [r3, sl, lsl #2]
100103da:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
100103de:	ea87 070c 	eor.w	r7, r7, ip
100103e2:	ea8e 0c02 	eor.w	ip, lr, r2
    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
100103e6:	b2ea      	uxtb	r2, r5
100103e8:	f502 7240 	add.w	r2, r2, #768	@ 0x300
    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
100103ec:	ea87 0708 	eor.w	r7, r7, r8
100103f0:	ea8c 0c04 	eor.w	ip, ip, r4
    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
100103f4:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
100103f8:	b2fa      	uxtb	r2, r7
100103fa:	f502 7240 	add.w	r2, r2, #768	@ 0x300
    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
100103fe:	ea8c 0c01 	eor.w	ip, ip, r1
    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
10010402:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
10010406:	fa5f f28c 	uxtb.w	r2, ip
1001040a:	f502 7240 	add.w	r2, r2, #768	@ 0x300
    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
1001040e:	ea8b 0606 	eor.w	r6, fp, r6
    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
10010412:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
10010416:	b2f2      	uxtb	r2, r6
10010418:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1001041c:	f853 e022 	ldr.w	lr, [r3, r2, lsl #2]
10010420:	0e32      	lsrs	r2, r6, #24
10010422:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
10010426:	4054      	eors	r4, r2
10010428:	0e2a      	lsrs	r2, r5, #24
1001042a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1001042e:	4051      	eors	r1, r2
10010430:	0e3a      	lsrs	r2, r7, #24
10010432:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
10010436:	ea82 0208 	eor.w	r2, r2, r8
1001043a:	ea4f 681c 	mov.w	r8, ip, lsr #24
1001043e:	9202      	str	r2, [sp, #8]
10010440:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
10010444:	6e02      	ldr	r2, [r0, #96]	@ 0x60
10010446:	ea88 0e0e 	eor.w	lr, r8, lr
1001044a:	f3cc 4807 	ubfx	r8, ip, #16, #8
1001044e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
10010452:	f508 7880 	add.w	r8, r8, #256	@ 0x100
10010456:	f50c 7c00 	add.w	ip, ip, #512	@ 0x200
1001045a:	f853 b028 	ldr.w	fp, [r3, r8, lsl #2]
1001045e:	f853 802c 	ldr.w	r8, [r3, ip, lsl #2]
10010462:	f3c6 4c07 	ubfx	ip, r6, #16, #8
10010466:	f3c6 2607 	ubfx	r6, r6, #8, #8
1001046a:	f50c 7c80 	add.w	ip, ip, #256	@ 0x100
1001046e:	f506 7600 	add.w	r6, r6, #512	@ 0x200
10010472:	f853 902c 	ldr.w	r9, [r3, ip, lsl #2]
10010476:	f853 c026 	ldr.w	ip, [r3, r6, lsl #2]
1001047a:	f3c5 4607 	ubfx	r6, r5, #16, #8
1001047e:	f506 7680 	add.w	r6, r6, #256	@ 0x100
10010482:	4054      	eors	r4, r2
10010484:	f853 a026 	ldr.w	sl, [r3, r6, lsl #2]
10010488:	9a02      	ldr	r2, [sp, #8]
1001048a:	f3c7 4607 	ubfx	r6, r7, #16, #8
1001048e:	f3c7 2707 	ubfx	r7, r7, #8, #8
10010492:	f507 7700 	add.w	r7, r7, #512	@ 0x200
10010496:	ea84 040b 	eor.w	r4, r4, fp
1001049a:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
1001049e:	407c      	eors	r4, r7
100104a0:	6e47      	ldr	r7, [r0, #100]	@ 0x64
100104a2:	f3c5 2507 	ubfx	r5, r5, #8, #8
100104a6:	4079      	eors	r1, r7
100104a8:	f505 7500 	add.w	r5, r5, #512	@ 0x200
100104ac:	6e87      	ldr	r7, [r0, #104]	@ 0x68
100104ae:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
100104b2:	f506 7680 	add.w	r6, r6, #256	@ 0x100
100104b6:	407a      	eors	r2, r7
100104b8:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
100104bc:	6ec7      	ldr	r7, [r0, #108]	@ 0x6c
100104be:	ea82 020a 	eor.w	r2, r2, sl
100104c2:	ea82 020c 	eor.w	r2, r2, ip
100104c6:	ea81 0109 	eor.w	r1, r1, r9
100104ca:	ea8e 0c07 	eor.w	ip, lr, r7
100104ce:	ea81 0108 	eor.w	r1, r1, r8
100104d2:	ea8c 0c06 	eor.w	ip, ip, r6
100104d6:	ea8c 0c05 	eor.w	ip, ip, r5
100104da:	fa5f f881 	uxtb.w	r8, r1
100104de:	fa5f fe82 	uxtb.w	lr, r2
100104e2:	b2e5      	uxtb	r5, r4
100104e4:	0e26      	lsrs	r6, r4, #24
100104e6:	f508 7840 	add.w	r8, r8, #768	@ 0x300
100104ea:	f50e 7e40 	add.w	lr, lr, #768	@ 0x300
100104ee:	f505 7540 	add.w	r5, r5, #768	@ 0x300
100104f2:	f853 9026 	ldr.w	r9, [r3, r6, lsl #2]
100104f6:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
100104fa:	f853 802e 	ldr.w	r8, [r3, lr, lsl #2]
100104fe:	f853 e025 	ldr.w	lr, [r3, r5, lsl #2]
10010502:	0e0d      	lsrs	r5, r1, #24
10010504:	fa5f f78c 	uxtb.w	r7, ip
10010508:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
1001050c:	f507 7740 	add.w	r7, r7, #768	@ 0x300
10010510:	ea85 0508 	eor.w	r5, r5, r8
10010514:	ea4f 6812 	mov.w	r8, r2, lsr #24
10010518:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
1001051c:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
10010520:	ea88 0707 	eor.w	r7, r8, r7
10010524:	ea4f 681c 	mov.w	r8, ip, lsr #24
10010528:	f3c2 4a07 	ubfx	sl, r2, #16, #8
1001052c:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
10010530:	f3c2 2207 	ubfx	r2, r2, #8, #8
10010534:	f502 7200 	add.w	r2, r2, #512	@ 0x200
10010538:	ea88 080e 	eor.w	r8, r8, lr
1001053c:	f3cc 4e07 	ubfx	lr, ip, #16, #8
10010540:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
10010544:	9202      	str	r2, [sp, #8]
10010546:	f50e 7e80 	add.w	lr, lr, #256	@ 0x100
1001054a:	6f02      	ldr	r2, [r0, #112]	@ 0x70
1001054c:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
10010550:	ea89 0606 	eor.w	r6, r9, r6
10010554:	4056      	eors	r6, r2
10010556:	9a02      	ldr	r2, [sp, #8]
10010558:	f3c4 4e07 	ubfx	lr, r4, #16, #8
1001055c:	ea86 060b 	eor.w	r6, r6, fp
10010560:	4056      	eors	r6, r2
10010562:	f3cc 2c07 	ubfx	ip, ip, #8, #8
10010566:	6f42      	ldr	r2, [r0, #116]	@ 0x74
10010568:	f50e 7e80 	add.w	lr, lr, #256	@ 0x100
1001056c:	f50c 7c00 	add.w	ip, ip, #512	@ 0x200
10010570:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
10010574:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
10010578:	4055      	eors	r5, r2
1001057a:	6f82      	ldr	r2, [r0, #120]	@ 0x78
1001057c:	f3c1 4907 	ubfx	r9, r1, #16, #8
10010580:	f50a 7a80 	add.w	sl, sl, #256	@ 0x100
10010584:	f3c1 2107 	ubfx	r1, r1, #8, #8
10010588:	ea85 050e 	eor.w	r5, r5, lr
1001058c:	4057      	eors	r7, r2
1001058e:	f501 7100 	add.w	r1, r1, #512	@ 0x200
10010592:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
10010594:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
10010598:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
1001059c:	ea85 0c0c 	eor.w	ip, r5, ip
100105a0:	ea88 0e02 	eor.w	lr, r8, r2
    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
100105a4:	fa5f f28c 	uxtb.w	r2, ip
    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
100105a8:	ea8e 0e0a 	eor.w	lr, lr, sl
    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
100105ac:	f502 7240 	add.w	r2, r2, #768	@ 0x300
    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
100105b0:	f3c4 2407 	ubfx	r4, r4, #8, #8
100105b4:	f509 7980 	add.w	r9, r9, #256	@ 0x100
100105b8:	ea8e 0e01 	eor.w	lr, lr, r1
100105bc:	f504 7400 	add.w	r4, r4, #512	@ 0x200
    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
100105c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
100105c4:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
100105c8:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
100105cc:	f3ce 4207 	ubfx	r2, lr, #16, #8
100105d0:	f502 7280 	add.w	r2, r2, #256	@ 0x100
    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
100105d4:	ea87 0709 	eor.w	r7, r7, r9
100105d8:	4067      	eors	r7, r4
    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
100105da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
100105de:	9202      	str	r2, [sp, #8]
100105e0:	f3c7 2207 	ubfx	r2, r7, #8, #8
100105e4:	f502 7200 	add.w	r2, r2, #512	@ 0x200
100105e8:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
100105ec:	f8cd 800c 	str.w	r8, [sp, #12]
100105f0:	b2fa      	uxtb	r2, r7
100105f2:	f502 7240 	add.w	r2, r2, #768	@ 0x300
100105f6:	fa5f f886 	uxtb.w	r8, r6
100105fa:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
100105fe:	f3c6 4207 	ubfx	r2, r6, #16, #8
10010602:	f502 7280 	add.w	r2, r2, #256	@ 0x100
10010606:	f508 7840 	add.w	r8, r8, #768	@ 0x300
1001060a:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
1001060e:	f8cd 9010 	str.w	r9, [sp, #16]
10010612:	f3ce 2207 	ubfx	r2, lr, #8, #8
10010616:	f502 7200 	add.w	r2, r2, #512	@ 0x200
1001061a:	f3cc 4907 	ubfx	r9, ip, #16, #8
1001061e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
10010622:	fa5f f28e 	uxtb.w	r2, lr
10010626:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
1001062a:	f8cd e014 	str.w	lr, [sp, #20]
1001062e:	ea4f 6e16 	mov.w	lr, r6, lsr #24
10010632:	f3c6 2607 	ubfx	r6, r6, #8, #8
10010636:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
1001063a:	ea8b 0b01 	eor.w	fp, fp, r1
1001063e:	f506 7100 	add.w	r1, r6, #512	@ 0x200
10010642:	ea4f 661c 	mov.w	r6, ip, lsr #24
10010646:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1001064a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
1001064e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
10010652:	ea86 0a04 	eor.w	sl, r6, r4
10010656:	0e3c      	lsrs	r4, r7, #24
10010658:	f3c7 4707 	ubfx	r7, r7, #16, #8
1001065c:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
10010660:	ea84 0e02 	eor.w	lr, r4, r2
10010664:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
10010668:	ea8b 0b04 	eor.w	fp, fp, r4
1001066c:	9c02      	ldr	r4, [sp, #8]
1001066e:	ea8b 0b04 	eor.w	fp, fp, r4
10010672:	9c03      	ldr	r4, [sp, #12]
10010674:	ea8b 0604 	eor.w	r6, fp, r4
10010678:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
1001067c:	ea8a 0a04 	eor.w	sl, sl, r4
10010680:	9c04      	ldr	r4, [sp, #16]
10010682:	ea8a 0a04 	eor.w	sl, sl, r4
10010686:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
1001068a:	f507 7280 	add.w	r2, r7, #256	@ 0x100
1001068e:	ea8e 0704 	eor.w	r7, lr, r4
10010692:	f8dd e014 	ldr.w	lr, [sp, #20]
10010696:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
1001069a:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
1001069e:	f509 7980 	add.w	r9, r9, #256	@ 0x100
100106a2:	ea8e 0404 	eor.w	r4, lr, r4
100106a6:	f853 e029 	ldr.w	lr, [r3, r9, lsl #2]
100106aa:	ea87 070e 	eor.w	r7, r7, lr
100106ae:	f853 e022 	ldr.w	lr, [r3, r2, lsl #2]
100106b2:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
100106b6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
100106ba:	4057      	eors	r7, r2
100106bc:	f50c 7c00 	add.w	ip, ip, #512	@ 0x200
100106c0:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
100106c4:	f853 102c 	ldr.w	r1, [r3, ip, lsl #2]
100106c8:	ea8a 0505 	eor.w	r5, sl, r5
100106cc:	ea84 0c02 	eor.w	ip, r4, r2
100106d0:	b2ea      	uxtb	r2, r5
100106d2:	f502 7240 	add.w	r2, r2, #768	@ 0x300
100106d6:	ea8c 0c0e 	eor.w	ip, ip, lr
100106da:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
100106de:	b2fa      	uxtb	r2, r7
100106e0:	f502 7240 	add.w	r2, r2, #768	@ 0x300
100106e4:	ea8c 0c01 	eor.w	ip, ip, r1
100106e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
100106ec:	fa5f f28c 	uxtb.w	r2, ip
100106f0:	f502 7240 	add.w	r2, r2, #768	@ 0x300
100106f4:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
100106f8:	b2f2      	uxtb	r2, r6
100106fa:	f502 7240 	add.w	r2, r2, #768	@ 0x300
100106fe:	f853 e022 	ldr.w	lr, [r3, r2, lsl #2]
10010702:	0e32      	lsrs	r2, r6, #24
10010704:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
10010708:	4054      	eors	r4, r2
1001070a:	0e2a      	lsrs	r2, r5, #24
1001070c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
10010710:	4051      	eors	r1, r2
10010712:	0e3a      	lsrs	r2, r7, #24
10010714:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
10010718:	ea82 0208 	eor.w	r2, r2, r8
1001071c:	ea4f 681c 	mov.w	r8, ip, lsr #24
10010720:	9202      	str	r2, [sp, #8]
10010722:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
10010726:	ea88 080e 	eor.w	r8, r8, lr
1001072a:	f3cc 4e07 	ubfx	lr, ip, #16, #8
1001072e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
10010732:	f50c 7c00 	add.w	ip, ip, #512	@ 0x200
10010736:	f50e 7e80 	add.w	lr, lr, #256	@ 0x100
1001073a:	f853 a02c 	ldr.w	sl, [r3, ip, lsl #2]
1001073e:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
10010742:	f3c6 4c07 	ubfx	ip, r6, #16, #8
10010746:	f3c6 2607 	ubfx	r6, r6, #8, #8
1001074a:	f50c 7c80 	add.w	ip, ip, #256	@ 0x100
1001074e:	f506 7600 	add.w	r6, r6, #512	@ 0x200
10010752:	f853 902c 	ldr.w	r9, [r3, ip, lsl #2]
10010756:	f853 c026 	ldr.w	ip, [r3, r6, lsl #2]
1001075a:	f3c5 4607 	ubfx	r6, r5, #16, #8
1001075e:	f506 7680 	add.w	r6, r6, #256	@ 0x100
10010762:	f3c5 2507 	ubfx	r5, r5, #8, #8
10010766:	f505 7500 	add.w	r5, r5, #512	@ 0x200
1001076a:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
1001076e:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
10010772:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
10010776:	f3c7 4607 	ubfx	r6, r7, #16, #8
1001077a:	f3c7 2707 	ubfx	r7, r7, #8, #8
1001077e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
10010782:	4054      	eors	r4, r2
10010784:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
10010788:	9a02      	ldr	r2, [sp, #8]
1001078a:	ea84 040b 	eor.w	r4, r4, fp
1001078e:	407c      	eors	r4, r7
10010790:	f8d0 7094 	ldr.w	r7, [r0, #148]	@ 0x94
10010794:	4079      	eors	r1, r7
10010796:	f8d0 7098 	ldr.w	r7, [r0, #152]	@ 0x98
1001079a:	f506 7680 	add.w	r6, r6, #256	@ 0x100
1001079e:	407a      	eors	r2, r7
100107a0:	f8d0 709c 	ldr.w	r7, [r0, #156]	@ 0x9c
100107a4:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
100107a8:	ea82 020e 	eor.w	r2, r2, lr
100107ac:	ea82 020c 	eor.w	r2, r2, ip
100107b0:	ea88 0c07 	eor.w	ip, r8, r7
100107b4:	ea8c 0c06 	eor.w	ip, ip, r6
100107b8:	ea8c 0c05 	eor.w	ip, ip, r5
    if (r > 5) {
100107bc:	9d00      	ldr	r5, [sp, #0]
    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
100107be:	ea81 0109 	eor.w	r1, r1, r9
    if (r > 5) {
100107c2:	2d05      	cmp	r5, #5
    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
100107c4:	ea81 010a 	eor.w	r1, r1, sl
    if (r > 5) {
100107c8:	f240 81ee 	bls.w	10010ba8 <AesDecrypt_C+0xcb4>
        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
100107cc:	b2cd      	uxtb	r5, r1
100107ce:	f505 7540 	add.w	r5, r5, #768	@ 0x300
100107d2:	f3c2 4a07 	ubfx	sl, r2, #16, #8
100107d6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
100107da:	b2d5      	uxtb	r5, r2
100107dc:	f505 7540 	add.w	r5, r5, #768	@ 0x300
100107e0:	f3c1 4907 	ubfx	r9, r1, #16, #8
100107e4:	f853 8025 	ldr.w	r8, [r3, r5, lsl #2]
100107e8:	fa5f f58c 	uxtb.w	r5, ip
100107ec:	f505 7540 	add.w	r5, r5, #768	@ 0x300
100107f0:	f50a 7a80 	add.w	sl, sl, #256	@ 0x100
100107f4:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
100107f8:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
100107fc:	b2e5      	uxtb	r5, r4
100107fe:	f505 7540 	add.w	r5, r5, #768	@ 0x300
10010802:	f509 7980 	add.w	r9, r9, #256	@ 0x100
10010806:	f853 e025 	ldr.w	lr, [r3, r5, lsl #2]
1001080a:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
1001080e:	0e25      	lsrs	r5, r4, #24
10010810:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
10010814:	406e      	eors	r6, r5
10010816:	0e0d      	lsrs	r5, r1, #24
10010818:	f3c1 2107 	ubfx	r1, r1, #8, #8
1001081c:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
10010820:	ea85 0508 	eor.w	r5, r5, r8
10010824:	ea4f 6812 	mov.w	r8, r2, lsr #24
10010828:	f3c2 2207 	ubfx	r2, r2, #8, #8
1001082c:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
10010830:	ea88 0707 	eor.w	r7, r8, r7
10010834:	ea4f 681c 	mov.w	r8, ip, lsr #24
10010838:	f502 7200 	add.w	r2, r2, #512	@ 0x200
1001083c:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
10010840:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
10010844:	9202      	str	r2, [sp, #8]
10010846:	ea88 080e 	eor.w	r8, r8, lr
1001084a:	f3cc 4e07 	ubfx	lr, ip, #16, #8
1001084e:	f50e 7e80 	add.w	lr, lr, #256	@ 0x100
10010852:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
10010856:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
1001085a:	4056      	eors	r6, r2
1001085c:	9a02      	ldr	r2, [sp, #8]
1001085e:	f3c4 4e07 	ubfx	lr, r4, #16, #8
10010862:	ea86 060b 	eor.w	r6, r6, fp
10010866:	4056      	eors	r6, r2
10010868:	f3cc 2c07 	ubfx	ip, ip, #8, #8
1001086c:	f8d0 20a4 	ldr.w	r2, [r0, #164]	@ 0xa4
10010870:	f50e 7e80 	add.w	lr, lr, #256	@ 0x100
10010874:	f50c 7c00 	add.w	ip, ip, #512	@ 0x200
10010878:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
1001087c:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
10010880:	4055      	eors	r5, r2
10010882:	f8d0 20a8 	ldr.w	r2, [r0, #168]	@ 0xa8
10010886:	ea85 050e 	eor.w	r5, r5, lr
1001088a:	4057      	eors	r7, r2
1001088c:	f501 7100 	add.w	r1, r1, #512	@ 0x200
10010890:	f8d0 20ac 	ldr.w	r2, [r0, #172]	@ 0xac
10010894:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
10010898:	ea85 050c 	eor.w	r5, r5, ip
1001089c:	f3c4 2407 	ubfx	r4, r4, #8, #8
100108a0:	ea88 0c02 	eor.w	ip, r8, r2
100108a4:	b2ea      	uxtb	r2, r5
100108a6:	ea8c 0c0a 	eor.w	ip, ip, sl
100108aa:	f502 7240 	add.w	r2, r2, #768	@ 0x300
100108ae:	f504 7400 	add.w	r4, r4, #512	@ 0x200
100108b2:	ea8c 0c01 	eor.w	ip, ip, r1
100108b6:	f853 e022 	ldr.w	lr, [r3, r2, lsl #2]
100108ba:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
100108be:	f3cc 4207 	ubfx	r2, ip, #16, #8
100108c2:	ea87 0709 	eor.w	r7, r7, r9
100108c6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
100108ca:	4067      	eors	r7, r4
100108cc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
100108d0:	f3c7 2207 	ubfx	r2, r7, #8, #8
100108d4:	f502 7200 	add.w	r2, r2, #512	@ 0x200
100108d8:	ea4f 6816 	mov.w	r8, r6, lsr #24
100108dc:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
100108e0:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
100108e4:	b2fa      	uxtb	r2, r7
100108e6:	f502 7240 	add.w	r2, r2, #768	@ 0x300
100108ea:	ea4f 6a1c 	mov.w	sl, ip, lsr #24
100108ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
100108f2:	f3c6 4207 	ubfx	r2, r6, #16, #8
100108f6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
100108fa:	ea88 080e 	eor.w	r8, r8, lr
100108fe:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
10010902:	f3cc 2207 	ubfx	r2, ip, #8, #8
10010906:	f502 7200 	add.w	r2, r2, #512	@ 0x200
1001090a:	ea4f 6e15 	mov.w	lr, r5, lsr #24
1001090e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
10010912:	9202      	str	r2, [sp, #8]
10010914:	fa5f f28c 	uxtb.w	r2, ip
10010918:	f502 7240 	add.w	r2, r2, #768	@ 0x300
1001091c:	fa5f fc86 	uxtb.w	ip, r6
10010920:	f3c6 2607 	ubfx	r6, r6, #8, #8
10010924:	f506 7600 	add.w	r6, r6, #512	@ 0x200
10010928:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1001092c:	9603      	str	r6, [sp, #12]
1001092e:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
10010932:	ea8e 0101 	eor.w	r1, lr, r1
10010936:	ea4f 6e17 	mov.w	lr, r7, lsr #24
1001093a:	f50c 7c40 	add.w	ip, ip, #768	@ 0x300
1001093e:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
10010942:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
10010946:	ea8e 0602 	eor.w	r6, lr, r2
1001094a:	f8d0 20b0 	ldr.w	r2, [r0, #176]	@ 0xb0
1001094e:	ea88 0802 	eor.w	r8, r8, r2
10010952:	f8d0 20b4 	ldr.w	r2, [r0, #180]	@ 0xb4
10010956:	f3c5 4e07 	ubfx	lr, r5, #16, #8
1001095a:	4051      	eors	r1, r2
1001095c:	9a02      	ldr	r2, [sp, #8]
1001095e:	f50e 7e80 	add.w	lr, lr, #256	@ 0x100
10010962:	ea81 010b 	eor.w	r1, r1, fp
10010966:	4051      	eors	r1, r2
10010968:	f8d0 20b8 	ldr.w	r2, [r0, #184]	@ 0xb8
1001096c:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
10010970:	4056      	eors	r6, r2
10010972:	ea86 020e 	eor.w	r2, r6, lr
10010976:	9e03      	ldr	r6, [sp, #12]
10010978:	f3c5 2507 	ubfx	r5, r5, #8, #8
1001097c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
10010980:	f505 7500 	add.w	r5, r5, #512	@ 0x200
10010984:	ea88 0804 	eor.w	r8, r8, r4
10010988:	f3c7 4707 	ubfx	r7, r7, #16, #8
1001098c:	ea88 0409 	eor.w	r4, r8, r9
10010990:	f853 902a 	ldr.w	r9, [r3, sl, lsl #2]
10010994:	f507 7780 	add.w	r7, r7, #256	@ 0x100
10010998:	4072      	eors	r2, r6
1001099a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1001099e:	f8d0 50bc 	ldr.w	r5, [r0, #188]	@ 0xbc
100109a2:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
100109a6:	ea89 0c0c 	eor.w	ip, r9, ip
100109aa:	ea8c 0c05 	eor.w	ip, ip, r5
        if (r > 6) {
100109ae:	9d00      	ldr	r5, [sp, #0]
        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
100109b0:	ea8c 0c07 	eor.w	ip, ip, r7
        if (r > 6) {
100109b4:	2d06      	cmp	r5, #6
        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
100109b6:	ea8c 0c06 	eor.w	ip, ip, r6
        if (r > 6) {
100109ba:	f000 80f5 	beq.w	10010ba8 <AesDecrypt_C+0xcb4>
            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
100109be:	b2cd      	uxtb	r5, r1
100109c0:	f505 7540 	add.w	r5, r5, #768	@ 0x300
100109c4:	f3c2 4a07 	ubfx	sl, r2, #16, #8
100109c8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
100109cc:	b2d5      	uxtb	r5, r2
100109ce:	f505 7540 	add.w	r5, r5, #768	@ 0x300
100109d2:	f3c1 4907 	ubfx	r9, r1, #16, #8
100109d6:	f853 8025 	ldr.w	r8, [r3, r5, lsl #2]
100109da:	fa5f f58c 	uxtb.w	r5, ip
100109de:	f505 7540 	add.w	r5, r5, #768	@ 0x300
100109e2:	f50a 7a80 	add.w	sl, sl, #256	@ 0x100
100109e6:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
100109ea:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
100109ee:	b2e5      	uxtb	r5, r4
100109f0:	f505 7540 	add.w	r5, r5, #768	@ 0x300
100109f4:	f509 7980 	add.w	r9, r9, #256	@ 0x100
100109f8:	f853 e025 	ldr.w	lr, [r3, r5, lsl #2]
100109fc:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
10010a00:	0e25      	lsrs	r5, r4, #24
10010a02:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
10010a06:	406e      	eors	r6, r5
10010a08:	0e0d      	lsrs	r5, r1, #24
10010a0a:	f3c1 2107 	ubfx	r1, r1, #8, #8
10010a0e:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
10010a12:	ea85 0508 	eor.w	r5, r5, r8
10010a16:	ea4f 6812 	mov.w	r8, r2, lsr #24
10010a1a:	f3c2 2207 	ubfx	r2, r2, #8, #8
10010a1e:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
10010a22:	ea88 0707 	eor.w	r7, r8, r7
10010a26:	ea4f 681c 	mov.w	r8, ip, lsr #24
10010a2a:	f502 7200 	add.w	r2, r2, #512	@ 0x200
10010a2e:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
10010a32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
10010a36:	9202      	str	r2, [sp, #8]
10010a38:	ea88 080e 	eor.w	r8, r8, lr
10010a3c:	f3cc 4e07 	ubfx	lr, ip, #16, #8
10010a40:	f50e 7e80 	add.w	lr, lr, #256	@ 0x100
10010a44:	f8d0 20c0 	ldr.w	r2, [r0, #192]	@ 0xc0
10010a48:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
10010a4c:	4056      	eors	r6, r2
10010a4e:	9a02      	ldr	r2, [sp, #8]
10010a50:	f3c4 4e07 	ubfx	lr, r4, #16, #8
10010a54:	ea86 060b 	eor.w	r6, r6, fp
10010a58:	4056      	eors	r6, r2
10010a5a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
10010a5e:	f8d0 20c4 	ldr.w	r2, [r0, #196]	@ 0xc4
10010a62:	f50e 7e80 	add.w	lr, lr, #256	@ 0x100
10010a66:	f50c 7c00 	add.w	ip, ip, #512	@ 0x200
10010a6a:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
10010a6e:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
10010a72:	4055      	eors	r5, r2
10010a74:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
10010a78:	ea85 050e 	eor.w	r5, r5, lr
10010a7c:	4057      	eors	r7, r2
10010a7e:	f501 7100 	add.w	r1, r1, #512	@ 0x200
10010a82:	f8d0 20cc 	ldr.w	r2, [r0, #204]	@ 0xcc
10010a86:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
10010a8a:	ea85 050c 	eor.w	r5, r5, ip
10010a8e:	f3c4 2407 	ubfx	r4, r4, #8, #8
10010a92:	ea88 0c02 	eor.w	ip, r8, r2
10010a96:	b2ea      	uxtb	r2, r5
10010a98:	ea8c 0c0a 	eor.w	ip, ip, sl
10010a9c:	f502 7240 	add.w	r2, r2, #768	@ 0x300
10010aa0:	f504 7400 	add.w	r4, r4, #512	@ 0x200
10010aa4:	ea8c 0c01 	eor.w	ip, ip, r1
10010aa8:	f853 e022 	ldr.w	lr, [r3, r2, lsl #2]
10010aac:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
10010ab0:	f3cc 4207 	ubfx	r2, ip, #16, #8
10010ab4:	ea87 0709 	eor.w	r7, r7, r9
10010ab8:	f502 7280 	add.w	r2, r2, #256	@ 0x100
10010abc:	4067      	eors	r7, r4
10010abe:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
10010ac2:	f3c7 2207 	ubfx	r2, r7, #8, #8
10010ac6:	f502 7200 	add.w	r2, r2, #512	@ 0x200
10010aca:	ea4f 6816 	mov.w	r8, r6, lsr #24
10010ace:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
10010ad2:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
10010ad6:	b2fa      	uxtb	r2, r7
10010ad8:	f502 7240 	add.w	r2, r2, #768	@ 0x300
10010adc:	ea4f 6a1c 	mov.w	sl, ip, lsr #24
10010ae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
10010ae4:	f3c6 4207 	ubfx	r2, r6, #16, #8
10010ae8:	f502 7280 	add.w	r2, r2, #256	@ 0x100
10010aec:	ea88 080e 	eor.w	r8, r8, lr
10010af0:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
10010af4:	f3cc 2207 	ubfx	r2, ip, #8, #8
10010af8:	f502 7200 	add.w	r2, r2, #512	@ 0x200
10010afc:	ea4f 6e15 	mov.w	lr, r5, lsr #24
10010b00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
10010b04:	9202      	str	r2, [sp, #8]
10010b06:	fa5f f28c 	uxtb.w	r2, ip
10010b0a:	f502 7240 	add.w	r2, r2, #768	@ 0x300
10010b0e:	fa5f fc86 	uxtb.w	ip, r6
10010b12:	f3c6 2607 	ubfx	r6, r6, #8, #8
10010b16:	f506 7600 	add.w	r6, r6, #512	@ 0x200
10010b1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
10010b1e:	9603      	str	r6, [sp, #12]
10010b20:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
10010b24:	ea8e 0101 	eor.w	r1, lr, r1
10010b28:	ea4f 6e17 	mov.w	lr, r7, lsr #24
10010b2c:	f50c 7c40 	add.w	ip, ip, #768	@ 0x300
10010b30:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
10010b34:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
10010b38:	ea8e 0602 	eor.w	r6, lr, r2
10010b3c:	f8d0 20d0 	ldr.w	r2, [r0, #208]	@ 0xd0
10010b40:	ea88 0802 	eor.w	r8, r8, r2
10010b44:	f8d0 20d4 	ldr.w	r2, [r0, #212]	@ 0xd4
10010b48:	f3c5 4e07 	ubfx	lr, r5, #16, #8
10010b4c:	4051      	eors	r1, r2
10010b4e:	9a02      	ldr	r2, [sp, #8]
10010b50:	f50e 7e80 	add.w	lr, lr, #256	@ 0x100
10010b54:	ea81 010b 	eor.w	r1, r1, fp
10010b58:	4051      	eors	r1, r2
10010b5a:	f8d0 20d8 	ldr.w	r2, [r0, #216]	@ 0xd8
10010b5e:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
10010b62:	4056      	eors	r6, r2
10010b64:	f3c7 4707 	ubfx	r7, r7, #16, #8
10010b68:	f3c5 2507 	ubfx	r5, r5, #8, #8
10010b6c:	ea86 020e 	eor.w	r2, r6, lr
10010b70:	f507 7780 	add.w	r7, r7, #256	@ 0x100
10010b74:	9e03      	ldr	r6, [sp, #12]
10010b76:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
10010b7a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
10010b7e:	f505 7500 	add.w	r5, r5, #512	@ 0x200
10010b82:	ea88 0804 	eor.w	r8, r8, r4
10010b86:	ea88 0409 	eor.w	r4, r8, r9
10010b8a:	f853 902a 	ldr.w	r9, [r3, sl, lsl #2]
10010b8e:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
10010b92:	f8d0 30dc 	ldr.w	r3, [r0, #220]	@ 0xdc
10010b96:	ea89 0c0c 	eor.w	ip, r9, ip
10010b9a:	ea8c 0c03 	eor.w	ip, ip, r3
10010b9e:	ea8c 0c07 	eor.w	ip, ip, r7
10010ba2:	4072      	eors	r2, r6
10010ba4:	ea8c 0c05 	eor.w	ip, ip, r5

#ifndef WC_NO_CACHE_RESISTANT
    t0 |= PreFetchTd4();
#endif

    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
10010ba8:	4b31      	ldr	r3, [pc, #196]	@ (10010c70 <AesDecrypt_C+0xd7c>)
10010baa:	0e25      	lsrs	r5, r4, #24
10010bac:	b2ce      	uxtb	r6, r1
10010bae:	5d5d      	ldrb	r5, [r3, r5]
10010bb0:	5d9e      	ldrb	r6, [r3, r6]
10010bb2:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
                          GETBYTE(t2, 1), GETBYTE(t1, 0)) ^ rk[0];
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
10010bb6:	0e0d      	lsrs	r5, r1, #24
                          GETBYTE(t3, 1), GETBYTE(t2, 0)) ^ rk[1];
    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
10010bb8:	fa5f fe8c 	uxtb.w	lr, ip
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
10010bbc:	5d5f      	ldrb	r7, [r3, r5]
    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
10010bbe:	f813 e00e 	ldrb.w	lr, [r3, lr]
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
10010bc2:	b2d5      	uxtb	r5, r2
10010bc4:	5d5d      	ldrb	r5, [r3, r5]
10010bc6:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
10010bca:	0e17      	lsrs	r7, r2, #24
10010bcc:	5ddf      	ldrb	r7, [r3, r7]
10010bce:	ea4e 6e07 	orr.w	lr, lr, r7, lsl #24
                          GETBYTE(t0, 1), GETBYTE(t3, 0)) ^ rk[2];
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
10010bd2:	ea4f 671c 	mov.w	r7, ip, lsr #24
10010bd6:	f813 8007 	ldrb.w	r8, [r3, r7]
10010bda:	b2e7      	uxtb	r7, r4
10010bdc:	5ddf      	ldrb	r7, [r3, r7]
10010bde:	ea47 6708 	orr.w	r7, r7, r8, lsl #24
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
10010be2:	f3cc 4807 	ubfx	r8, ip, #16, #8
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
10010be6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
10010bea:	f813 8008 	ldrb.w	r8, [r3, r8]
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
10010bee:	f813 c00c 	ldrb.w	ip, [r3, ip]
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
10010bf2:	ea46 4608 	orr.w	r6, r6, r8, lsl #16
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
10010bf6:	f3c4 4807 	ubfx	r8, r4, #16, #8
    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
10010bfa:	f3c4 2407 	ubfx	r4, r4, #8, #8
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
10010bfe:	f813 8008 	ldrb.w	r8, [r3, r8]
10010c02:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
10010c06:	ea45 250c 	orr.w	r5, r5, ip, lsl #8
    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
10010c0a:	f813 c004 	ldrb.w	ip, [r3, r4]
10010c0e:	f3c1 4407 	ubfx	r4, r1, #16, #8
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
10010c12:	f3c1 2107 	ubfx	r1, r1, #8, #8
    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
10010c16:	5d1c      	ldrb	r4, [r3, r4]
10010c18:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
10010c1c:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
10010c20:	f813 c001 	ldrb.w	ip, [r3, r1]
10010c24:	f3c2 4107 	ubfx	r1, r2, #16, #8
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
10010c28:	f3c2 2207 	ubfx	r2, r2, #8, #8
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
10010c2c:	5c59      	ldrb	r1, [r3, r1]
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
10010c2e:	5c9b      	ldrb	r3, [r3, r2]
    rk += r * 8;
10010c30:	9a00      	ldr	r2, [sp, #0]
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
10010c32:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    rk += r * 8;
10010c36:	eb00 1642 	add.w	r6, r0, r2, lsl #5
10010c3a:	0152      	lsls	r2, r2, #5
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
10010c3c:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
                          GETBYTE(t2, 1), GETBYTE(t1, 0)) ^ rk[0];
10010c40:	5882      	ldr	r2, [r0, r2]
10010c42:	4053      	eors	r3, r2
                          GETBYTE(t3, 1), GETBYTE(t2, 0)) ^ rk[1];
10010c44:	6872      	ldr	r2, [r6, #4]
10010c46:	ea85 0002 	eor.w	r0, r5, r2
                          GETBYTE(t0, 1), GETBYTE(t3, 0)) ^ rk[2];
10010c4a:	68b2      	ldr	r2, [r6, #8]
    s1 = ByteReverseWord32(s1);
    s2 = ByteReverseWord32(s2);
    s3 = ByteReverseWord32(s3);
#endif

    XMEMCPY(outBlock,                  &s0, sizeof(s0));
10010c4c:	9d01      	ldr	r5, [sp, #4]
                          GETBYTE(t0, 1), GETBYTE(t3, 0)) ^ rk[2];
10010c4e:	4062      	eors	r2, r4
                          GETBYTE(t1, 1), GETBYTE(t0, 0)) ^ rk[3];
10010c50:	68f4      	ldr	r4, [r6, #12]
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
10010c52:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
10010c56:	ba1b      	rev	r3, r3
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
10010c58:	602b      	str	r3, [r5, #0]
                          GETBYTE(t1, 1), GETBYTE(t0, 0)) ^ rk[3];
10010c5a:	ea81 0304 	eor.w	r3, r1, r4
10010c5e:	ba00      	rev	r0, r0
    s2 = ByteReverseWord32(s2);
10010c60:	ba12      	rev	r2, r2
    s3 = ByteReverseWord32(s3);
10010c62:	ba1b      	rev	r3, r3
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
10010c64:	6068      	str	r0, [r5, #4]
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
10010c66:	60aa      	str	r2, [r5, #8]
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
10010c68:	60eb      	str	r3, [r5, #12]

}
10010c6a:	b007      	add	sp, #28
10010c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10010c70:	10022ea4 	.word	0x10022ea4

10010c74 <wc_AesSetKeyLocal.constprop.0>:
    #ifdef WOLFSSL_IMX6_CAAM_BLOB
        byte   local[32];
        word32 localSz = 32;
    #endif

        if (aes == NULL)
10010c74:	2800      	cmp	r0, #0
10010c76:	f000 827d 	beq.w	10011174 <wc_AesSetKeyLocal.constprop.0+0x500>
    static WARN_UNUSED_RESULT int wc_AesSetKeyLocal(
10010c7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ret = wc_debug_CipherLifecycleCheck(aes->CipherLifecycleTag, 0);
        if (ret < 0)
            return ret;
#endif

        switch (keylen) {
10010c7e:	f1a2 0510 	sub.w	r5, r2, #16
10010c82:	2d10      	cmp	r5, #16
    static WARN_UNUSED_RESULT int wc_AesSetKeyLocal(
10010c84:	b085      	sub	sp, #20
10010c86:	4692      	mov	sl, r2
        switch (keylen) {
10010c88:	d804      	bhi.n	10010c94 <wc_AesSetKeyLocal.constprop.0+0x20>
10010c8a:	461f      	mov	r7, r3
10010c8c:	4bd8      	ldr	r3, [pc, #864]	@ (10010ff0 <wc_AesSetKeyLocal.constprop.0+0x37c>)
10010c8e:	40eb      	lsrs	r3, r5
10010c90:	07db      	lsls	r3, r3, #31
10010c92:	d404      	bmi.n	10010c9e <wc_AesSetKeyLocal.constprop.0+0x2a>
10010c94:	f06f 00ac 	mvn.w	r0, #172	@ 0xac
    #endif
    #ifdef WOLFSSL_IMX6_CAAM_BLOB
        ForceZero(local, sizeof(local));
    #endif
        return ret;
    } /* wc_AesSetKeyLocal */
10010c98:	b005      	add	sp, #20
10010c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        aes->rounds = (keylen/4) + 6;
10010c9e:	ea4f 0892 	mov.w	r8, r2, lsr #2
10010ca2:	f108 0306 	add.w	r3, r8, #6
10010ca6:	4689      	mov	r9, r1
10010ca8:	4604      	mov	r4, r0
        aes->keylen = (int)keylen;
10010caa:	f8c0 20f4 	str.w	r2, [r0, #244]	@ 0xf4
        aes->rounds = (keylen/4) + 6;
10010cae:	f8c0 30f0 	str.w	r3, [r0, #240]	@ 0xf0
        XMEMCPY(aes->key, userKey, keylen);
10010cb2:	4606      	mov	r6, r0
            return ret;
    }
#endif

    if (iv)
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
10010cb4:	f100 0bf8 	add.w	fp, r0, #248	@ 0xf8
    if (iv)
10010cb8:	2f00      	cmp	r7, #0
10010cba:	d047      	beq.n	10010d4c <wc_AesSetKeyLocal.constprop.0+0xd8>
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
10010cbc:	f8d7 e000 	ldr.w	lr, [r7]
10010cc0:	f8d7 c004 	ldr.w	ip, [r7, #4]
10010cc4:	68bd      	ldr	r5, [r7, #8]
10010cc6:	68fb      	ldr	r3, [r7, #12]
10010cc8:	f8c0 e0f8 	str.w	lr, [r0, #248]	@ 0xf8
10010ccc:	f8cb c004 	str.w	ip, [fp, #4]
10010cd0:	f8cb 5008 	str.w	r5, [fp, #8]
10010cd4:	f8cb 300c 	str.w	r3, [fp, #12]
        XMEMCPY(aes->key, userKey, keylen);
10010cd8:	f008 ffaa 	bl	10019c30 <memcpy>
    if ((((size_t)in & 0x3) == 0) &&
        (((size_t)out & 0x3) == 0))
#endif
    {
        word32 count = byteCount/(word32)sizeof(word32);
        for (i = 0; i < count; i++)
10010cdc:	eb04 0888 	add.w	r8, r4, r8, lsl #2
10010ce0:	4625      	mov	r5, r4
    static WARN_UNUSED_RESULT int wc_AesSetKeyLocal(
10010ce2:	4623      	mov	r3, r4
            out[i] = ByteReverseWord32(in[i]);
10010ce4:	681a      	ldr	r2, [r3, #0]
10010ce6:	ba12      	rev	r2, r2
10010ce8:	f843 2b04 	str.w	r2, [r3], #4
        for (i = 0; i < count; i++)
10010cec:	4598      	cmp	r8, r3
10010cee:	d1f9      	bne.n	10010ce4 <wc_AesSetKeyLocal.constprop.0+0x70>
    XMEMCPY(rk, key, keySz);
10010cf0:	4649      	mov	r1, r9
10010cf2:	4652      	mov	r2, sl
10010cf4:	4620      	mov	r0, r4
10010cf6:	f008 ff9b 	bl	10019c30 <memcpy>
10010cfa:	4623      	mov	r3, r4
            out[i] = ByteReverseWord32(in[i]);
10010cfc:	681a      	ldr	r2, [r3, #0]
10010cfe:	ba12      	rev	r2, r2
10010d00:	f843 2b04 	str.w	r2, [r3], #4
        for (i = 0; i < count; i++)
10010d04:	4598      	cmp	r8, r3
10010d06:	d1f9      	bne.n	10010cfc <wc_AesSetKeyLocal.constprop.0+0x88>
    switch (keySz) {
10010d08:	f1ba 0f18 	cmp.w	sl, #24
10010d0c:	f000 81e8 	beq.w	100110e0 <wc_AesSetKeyLocal.constprop.0+0x46c>
10010d10:	f1ba 0f20 	cmp.w	sl, #32
10010d14:	f000 815d 	beq.w	10010fd2 <wc_AesSetKeyLocal.constprop.0+0x35e>
10010d18:	f1ba 0f10 	cmp.w	sl, #16
10010d1c:	f000 8117 	beq.w	10010f4e <wc_AesSetKeyLocal.constprop.0+0x2da>
    if (dir == AES_DECRYPTION) {
10010d20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10010d22:	2b01      	cmp	r3, #1
10010d24:	d01d      	beq.n	10010d62 <wc_AesSetKeyLocal.constprop.0+0xee>
    if (iv)
10010d26:	2f00      	cmp	r7, #0
10010d28:	f000 8108 	beq.w	10010f3c <wc_AesSetKeyLocal.constprop.0+0x2c8>
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
10010d2c:	6838      	ldr	r0, [r7, #0]
10010d2e:	6879      	ldr	r1, [r7, #4]
10010d30:	68ba      	ldr	r2, [r7, #8]
10010d32:	68fb      	ldr	r3, [r7, #12]
10010d34:	f8c4 00f8 	str.w	r0, [r4, #248]	@ 0xf8
10010d38:	f8cb 1004 	str.w	r1, [fp, #4]
10010d3c:	f8cb 2008 	str.w	r2, [fp, #8]
10010d40:	f8cb 300c 	str.w	r3, [fp, #12]
        return ret;
10010d44:	2000      	movs	r0, #0
    } /* wc_AesSetKeyLocal */
10010d46:	b005      	add	sp, #20
10010d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);
10010d4c:	f8c0 70f8 	str.w	r7, [r0, #248]	@ 0xf8
10010d50:	f8cb 7004 	str.w	r7, [fp, #4]
10010d54:	f8cb 7008 	str.w	r7, [fp, #8]
10010d58:	f8cb 700c 	str.w	r7, [fp, #12]
        XMEMCPY(aes->key, userKey, keylen);
10010d5c:	f008 ff68 	bl	10019c30 <memcpy>
10010d60:	e7bc      	b.n	10010cdc <wc_AesSetKeyLocal.constprop.0+0x68>
        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
10010d62:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
10010d66:	009e      	lsls	r6, r3, #2
10010d68:	d025      	beq.n	10010db6 <wc_AesSetKeyLocal.constprop.0+0x142>
10010d6a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
10010d6e:	4622      	mov	r2, r4
10010d70:	2100      	movs	r1, #0
            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
10010d72:	6810      	ldr	r0, [r2, #0]
10010d74:	f8d3 c000 	ldr.w	ip, [r3]
10010d78:	f8c2 c000 	str.w	ip, [r2]
10010d7c:	6018      	str	r0, [r3, #0]
            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
10010d7e:	6850      	ldr	r0, [r2, #4]
10010d80:	f8d3 c004 	ldr.w	ip, [r3, #4]
10010d84:	f8c2 c004 	str.w	ip, [r2, #4]
10010d88:	6058      	str	r0, [r3, #4]
            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
10010d8a:	6890      	ldr	r0, [r2, #8]
10010d8c:	f8d3 c008 	ldr.w	ip, [r3, #8]
10010d90:	f8c2 c008 	str.w	ip, [r2, #8]
10010d94:	6098      	str	r0, [r3, #8]
            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
10010d96:	68d0      	ldr	r0, [r2, #12]
10010d98:	f8d3 c00c 	ldr.w	ip, [r3, #12]
10010d9c:	f8c2 c00c 	str.w	ip, [r2, #12]
        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
10010da0:	3104      	adds	r1, #4
            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
10010da2:	60d8      	str	r0, [r3, #12]
        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
10010da4:	1a70      	subs	r0, r6, r1
10010da6:	4281      	cmp	r1, r0
10010da8:	f102 0210 	add.w	r2, r2, #16
10010dac:	f1a3 0310 	sub.w	r3, r3, #16
10010db0:	d3df      	bcc.n	10010d72 <wc_AesSetKeyLocal.constprop.0+0xfe>
        for (i = 1; i < aes->rounds; i++) {
10010db2:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
10010db6:	2b01      	cmp	r3, #1
10010db8:	d9b5      	bls.n	10010d26 <wc_AesSetKeyLocal.constprop.0+0xb2>
10010dba:	4b8e      	ldr	r3, [pc, #568]	@ (10010ff4 <wc_AesSetKeyLocal.constprop.0+0x380>)
10010dbc:	4a8e      	ldr	r2, [pc, #568]	@ (10010ff8 <wc_AesSetKeyLocal.constprop.0+0x384>)
10010dbe:	f8cd b008 	str.w	fp, [sp, #8]
10010dc2:	f04f 0e01 	mov.w	lr, #1
10010dc6:	46a3      	mov	fp, r4
10010dc8:	9703      	str	r7, [sp, #12]
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
10010dca:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
10010dce:	b2f4      	uxtb	r4, r6
10010dd0:	f504 7480 	add.w	r4, r4, #256	@ 0x100
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
10010dd4:	69a9      	ldr	r1, [r5, #24]
                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
10010dd6:	f813 4024 	ldrb.w	r4, [r3, r4, lsl #2]
10010dda:	f504 7440 	add.w	r4, r4, #768	@ 0x300
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
10010dde:	ea4f 6a16 	mov.w	sl, r6, lsr #24
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
10010de2:	f852 9024 	ldr.w	r9, [r2, r4, lsl #2]
                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
10010de6:	b2c4      	uxtb	r4, r0
10010de8:	f504 7480 	add.w	r4, r4, #256	@ 0x100
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
10010dec:	f50a 7a80 	add.w	sl, sl, #256	@ 0x100
                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
10010df0:	f813 4024 	ldrb.w	r4, [r3, r4, lsl #2]
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
10010df4:	f813 a02a 	ldrb.w	sl, [r3, sl, lsl #2]
                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
10010df8:	f504 7440 	add.w	r4, r4, #768	@ 0x300
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
10010dfc:	f852 a02a 	ldr.w	sl, [r2, sl, lsl #2]
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
10010e00:	f852 c024 	ldr.w	ip, [r2, r4, lsl #2]
                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
10010e04:	b2cc      	uxtb	r4, r1
10010e06:	f504 7480 	add.w	r4, r4, #256	@ 0x100
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
10010e0a:	ea8a 0a09 	eor.w	sl, sl, r9
                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
10010e0e:	f813 4024 	ldrb.w	r4, [r3, r4, lsl #2]
10010e12:	f504 7440 	add.w	r4, r4, #768	@ 0x300
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
10010e16:	f3c1 4707 	ubfx	r7, r1, #16, #8
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
10010e1a:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
10010e1e:	9401      	str	r4, [sp, #4]
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
10010e20:	f3c6 4407 	ubfx	r4, r6, #16, #8
10010e24:	f504 7480 	add.w	r4, r4, #256	@ 0x100
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
10010e28:	f3c6 2607 	ubfx	r6, r6, #8, #8
10010e2c:	f506 7680 	add.w	r6, r6, #256	@ 0x100
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
10010e30:	f813 4024 	ldrb.w	r4, [r3, r4, lsl #2]
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
10010e34:	f813 6026 	ldrb.w	r6, [r3, r6, lsl #2]
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
10010e38:	f504 7480 	add.w	r4, r4, #256	@ 0x100
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
10010e3c:	f506 7600 	add.w	r6, r6, #512	@ 0x200
10010e40:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
10010e44:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
10010e48:	ea8a 0a08 	eor.w	sl, sl, r8
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
10010e4c:	f3c0 4407 	ubfx	r4, r0, #16, #8
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
10010e50:	ea8a 0606 	eor.w	r6, sl, r6
            rk[0] =
10010e54:	612e      	str	r6, [r5, #16]
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
10010e56:	f504 7480 	add.w	r4, r4, #256	@ 0x100
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
10010e5a:	0e06      	lsrs	r6, r0, #24
10010e5c:	f506 7680 	add.w	r6, r6, #256	@ 0x100
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
10010e60:	f3c0 2007 	ubfx	r0, r0, #8, #8
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
10010e64:	f813 4024 	ldrb.w	r4, [r3, r4, lsl #2]
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
10010e68:	f813 6026 	ldrb.w	r6, [r3, r6, lsl #2]
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
10010e6c:	f500 7080 	add.w	r0, r0, #256	@ 0x100
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
10010e70:	f504 7480 	add.w	r4, r4, #256	@ 0x100
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
10010e74:	f813 8020 	ldrb.w	r8, [r3, r0, lsl #2]
10010e78:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
10010e7c:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
10010e80:	f508 7800 	add.w	r8, r8, #512	@ 0x200
10010e84:	ea80 000c 	eor.w	r0, r0, ip
10010e88:	4060      	eors	r0, r4
10010e8a:	f852 4028 	ldr.w	r4, [r2, r8, lsl #2]
10010e8e:	4060      	eors	r0, r4
            rk[1] =
10010e90:	6168      	str	r0, [r5, #20]
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
10010e92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
10010e96:	0e08      	lsrs	r0, r1, #24
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
10010e98:	f3c1 2107 	ubfx	r1, r1, #8, #8
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
10010e9c:	f500 7080 	add.w	r0, r0, #256	@ 0x100
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
10010ea0:	f501 7180 	add.w	r1, r1, #256	@ 0x100
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
10010ea4:	f813 7027 	ldrb.w	r7, [r3, r7, lsl #2]
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
10010ea8:	f813 4020 	ldrb.w	r4, [r3, r0, lsl #2]
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
10010eac:	f813 0021 	ldrb.w	r0, [r3, r1, lsl #2]
10010eb0:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
10010eb4:	9c01      	ldr	r4, [sp, #4]
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
10010eb6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
10010eba:	f500 7000 	add.w	r0, r0, #512	@ 0x200
10010ebe:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
10010ec2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
10010ec6:	4061      	eors	r1, r4
10010ec8:	4079      	eors	r1, r7
10010eca:	4041      	eors	r1, r0
            rk[2] =
10010ecc:	61a9      	str	r1, [r5, #24]
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
10010ece:	69e9      	ldr	r1, [r5, #28]
10010ed0:	0e08      	lsrs	r0, r1, #24
10010ed2:	f500 7080 	add.w	r0, r0, #256	@ 0x100
        for (i = 1; i < aes->rounds; i++) {
10010ed6:	3510      	adds	r5, #16
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
10010ed8:	f813 6020 	ldrb.w	r6, [r3, r0, lsl #2]
                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
10010edc:	b2c8      	uxtb	r0, r1
10010ede:	f500 7080 	add.w	r0, r0, #256	@ 0x100
        for (i = 1; i < aes->rounds; i++) {
10010ee2:	f10e 0e01 	add.w	lr, lr, #1
                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
10010ee6:	f813 4020 	ldrb.w	r4, [r3, r0, lsl #2]
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
10010eea:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
10010eee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
10010ef2:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
10010ef6:	4060      	eors	r0, r4
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
10010ef8:	f3c1 4407 	ubfx	r4, r1, #16, #8
10010efc:	f504 7480 	add.w	r4, r4, #256	@ 0x100
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
10010f00:	f3c1 2107 	ubfx	r1, r1, #8, #8
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
10010f04:	f813 6024 	ldrb.w	r6, [r3, r4, lsl #2]
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
10010f08:	f501 7180 	add.w	r1, r1, #256	@ 0x100
10010f0c:	f813 4021 	ldrb.w	r4, [r3, r1, lsl #2]
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
10010f10:	f506 7180 	add.w	r1, r6, #256	@ 0x100
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
10010f14:	f504 7400 	add.w	r4, r4, #512	@ 0x200
10010f18:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
10010f1c:	4041      	eors	r1, r0
10010f1e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
10010f22:	4041      	eors	r1, r0
            rk[3] =
10010f24:	60e9      	str	r1, [r5, #12]
        for (i = 1; i < aes->rounds; i++) {
10010f26:	f8db 10f0 	ldr.w	r1, [fp, #240]	@ 0xf0
10010f2a:	458e      	cmp	lr, r1
10010f2c:	f4ff af4d 	bcc.w	10010dca <wc_AesSetKeyLocal.constprop.0+0x156>
10010f30:	465c      	mov	r4, fp
10010f32:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    if (iv)
10010f36:	2f00      	cmp	r7, #0
10010f38:	f47f aef8 	bne.w	10010d2c <wc_AesSetKeyLocal.constprop.0+0xb8>
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);
10010f3c:	f8c4 70f8 	str.w	r7, [r4, #248]	@ 0xf8
10010f40:	f8cb 7004 	str.w	r7, [fp, #4]
10010f44:	f8cb 7008 	str.w	r7, [fp, #8]
10010f48:	f8cb 700c 	str.w	r7, [fp, #12]
10010f4c:	e6fa      	b.n	10010d44 <wc_AesSetKeyLocal.constprop.0+0xd0>
10010f4e:	e9d4 ce01 	ldrd	ip, lr, [r4, #4]
10010f52:	4b28      	ldr	r3, [pc, #160]	@ (10010ff4 <wc_AesSetKeyLocal.constprop.0+0x380>)
10010f54:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 10010ffc <wc_AesSetKeyLocal.constprop.0+0x388>
10010f58:	6820      	ldr	r0, [r4, #0]
10010f5a:	68e1      	ldr	r1, [r4, #12]
10010f5c:	46a2      	mov	sl, r4
10010f5e:	461a      	mov	r2, r3
10010f60:	4674      	mov	r4, lr
10010f62:	4663      	mov	r3, ip
10010f64:	f108 0928 	add.w	r9, r8, #40	@ 0x28
10010f68:	4694      	mov	ip, r2
10010f6a:	46d6      	mov	lr, sl
10010f6c:	e000      	b.n	10010f70 <wc_AesSetKeyLocal.constprop.0+0x2fc>
            rk += 4;
10010f6e:	3610      	adds	r6, #16
                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
10010f70:	b2ca      	uxtb	r2, r1
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
10010f72:	ea4f 6a11 	mov.w	sl, r1, lsr #24
10010f76:	f50a 7a80 	add.w	sl, sl, #256	@ 0x100
                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
10010f7a:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
10010f7e:	f81c a02a 	ldrb.w	sl, [ip, sl, lsl #2]
                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
10010f82:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
10010f86:	ea42 020a 	orr.w	r2, r2, sl
                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
10010f8a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
10010f8e:	f50a 7a00 	add.w	sl, sl, #512	@ 0x200
10010f92:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
10010f96:	f00a 4a7f 	and.w	sl, sl, #4278190080	@ 0xff000000
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
10010f9a:	ea82 020a 	eor.w	r2, r2, sl
                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
10010f9e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
10010fa2:	f50a 7a40 	add.w	sl, sl, #768	@ 0x300
10010fa6:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
10010faa:	f40a 0a7f 	and.w	sl, sl, #16711680	@ 0xff0000
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
10010fae:	ea82 020a 	eor.w	r2, r2, sl
                rcon[i];
10010fb2:	f858 ab04 	ldr.w	sl, [r8], #4
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
10010fb6:	ea82 020a 	eor.w	r2, r2, sl
10010fba:	4050      	eors	r0, r2
            rk[5] = rk[1] ^ rk[4];
10010fbc:	4043      	eors	r3, r0
            rk[6] = rk[2] ^ rk[5];
10010fbe:	405c      	eors	r4, r3
            rk[7] = rk[3] ^ rk[6];
10010fc0:	4061      	eors	r1, r4
            if (++i == 10)
10010fc2:	45c1      	cmp	r9, r8
            rk[5] = rk[1] ^ rk[4];
10010fc4:	e9c6 0304 	strd	r0, r3, [r6, #16]
            rk[7] = rk[3] ^ rk[6];
10010fc8:	e9c6 4106 	strd	r4, r1, [r6, #24]
            if (++i == 10)
10010fcc:	d1cf      	bne.n	10010f6e <wc_AesSetKeyLocal.constprop.0+0x2fa>
10010fce:	4674      	mov	r4, lr
10010fd0:	e6a6      	b.n	10010d20 <wc_AesSetKeyLocal.constprop.0+0xac>
10010fd2:	e9d4 8e00 	ldrd	r8, lr, [r4]
10010fd6:	e9d4 c102 	ldrd	ip, r1, [r4, #8]
10010fda:	4622      	mov	r2, r4
10010fdc:	9501      	str	r5, [sp, #4]
10010fde:	4664      	mov	r4, ip
10010fe0:	f8df 901c 	ldr.w	r9, [pc, #28]	@ 10011000 <wc_AesSetKeyLocal.constprop.0+0x38c>
10010fe4:	4b03      	ldr	r3, [pc, #12]	@ (10010ff4 <wc_AesSetKeyLocal.constprop.0+0x380>)
10010fe6:	4640      	mov	r0, r8
10010fe8:	4675      	mov	r5, lr
10010fea:	4694      	mov	ip, r2
10010fec:	e041      	b.n	10011072 <wc_AesSetKeyLocal.constprop.0+0x3fe>
10010fee:	bf00      	nop
10010ff0:	00010101 	.word	0x00010101
10010ff4:	10023fa4 	.word	0x10023fa4
10010ff8:	10022fa4 	.word	0x10022fa4
10010ffc:	10024fa4 	.word	0x10024fa4
10011000:	10024fa0 	.word	0x10024fa0
                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
10011004:	f3c1 4e07 	ubfx	lr, r1, #16, #8
10011008:	f50e 7e40 	add.w	lr, lr, #768	@ 0x300
                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
1001100c:	f3c1 2807 	ubfx	r8, r1, #8, #8
                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
10011010:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
10011014:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
10011018:	f40e 0e7f 	and.w	lr, lr, #16711680	@ 0xff0000
                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
1001101c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
10011020:	ea4e 0e08 	orr.w	lr, lr, r8
                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
10011024:	ea4f 6811 	mov.w	r8, r1, lsr #24
10011028:	f508 7800 	add.w	r8, r8, #512	@ 0x200
1001102c:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
10011030:	fa5f f881 	uxtb.w	r8, r1
10011034:	f508 7880 	add.w	r8, r8, #256	@ 0x100
                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
10011038:	f00a 4a7f 	and.w	sl, sl, #4278190080	@ 0xff000000
                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
1001103c:	f813 8028 	ldrb.w	r8, [r3, r8, lsl #2]
                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
10011040:	ea4a 0808 	orr.w	r8, sl, r8
10011044:	f8d6 a010 	ldr.w	sl, [r6, #16]
10011048:	ea8e 0e0a 	eor.w	lr, lr, sl
1001104c:	ea8e 0e08 	eor.w	lr, lr, r8
            rk[13] = rk[ 5] ^ rk[12];
10011050:	f8d6 8014 	ldr.w	r8, [r6, #20]
            rk[12] = rk[ 4] ^
10011054:	f8c6 e030 	str.w	lr, [r6, #48]	@ 0x30
            rk[13] = rk[ 5] ^ rk[12];
10011058:	ea8e 0e08 	eor.w	lr, lr, r8
            rk[14] = rk[ 6] ^ rk[13];
1001105c:	f8d6 8018 	ldr.w	r8, [r6, #24]
            rk[13] = rk[ 5] ^ rk[12];
10011060:	f8c6 e034 	str.w	lr, [r6, #52]	@ 0x34
            rk[14] = rk[ 6] ^ rk[13];
10011064:	ea8e 0e08 	eor.w	lr, lr, r8
            rk[15] = rk[ 7] ^ rk[14];
10011068:	ea82 020e 	eor.w	r2, r2, lr
1001106c:	e9c6 e20e 	strd	lr, r2, [r6, #56]	@ 0x38
            rk += 8;
10011070:	3620      	adds	r6, #32
            temp = rk[ 7];
10011072:	69f2      	ldr	r2, [r6, #28]
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
10011074:	f859 af04 	ldr.w	sl, [r9, #4]!
                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
10011078:	fa5f fe82 	uxtb.w	lr, r2
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
1001107c:	ea4f 6812 	mov.w	r8, r2, lsr #24
10011080:	f508 7880 	add.w	r8, r8, #256	@ 0x100
                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
10011084:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
10011088:	f813 8028 	ldrb.w	r8, [r3, r8, lsl #2]
                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
1001108c:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
10011090:	ea4e 0e08 	orr.w	lr, lr, r8
                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
10011094:	f3c2 4807 	ubfx	r8, r2, #16, #8
10011098:	f508 7800 	add.w	r8, r8, #512	@ 0x200
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
1001109c:	ea8e 0e0a 	eor.w	lr, lr, sl
                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
100110a0:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
100110a4:	f008 487f 	and.w	r8, r8, #4278190080	@ 0xff000000
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
100110a8:	ea8e 0e08 	eor.w	lr, lr, r8
                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
100110ac:	f3c2 2807 	ubfx	r8, r2, #8, #8
100110b0:	f508 7840 	add.w	r8, r8, #768	@ 0x300
100110b4:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
100110b8:	f408 087f 	and.w	r8, r8, #16711680	@ 0xff0000
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
100110bc:	ea8e 0e08 	eor.w	lr, lr, r8
100110c0:	ea80 000e 	eor.w	r0, r0, lr
            rk[ 9] = rk[ 1] ^ rk[ 8];
100110c4:	4045      	eors	r5, r0
            if (++i == 7)
100110c6:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 1001117c <wc_AesSetKeyLocal.constprop.0+0x508>
            rk[10] = rk[ 2] ^ rk[ 9];
100110ca:	406c      	eors	r4, r5
            rk[11] = rk[ 3] ^ rk[10];
100110cc:	4061      	eors	r1, r4
            if (++i == 7)
100110ce:	45ce      	cmp	lr, r9
            rk[ 9] = rk[ 1] ^ rk[ 8];
100110d0:	e9c6 0508 	strd	r0, r5, [r6, #32]
            rk[11] = rk[ 3] ^ rk[10];
100110d4:	e9c6 410a 	strd	r4, r1, [r6, #40]	@ 0x28
            if (++i == 7)
100110d8:	d194      	bne.n	10011004 <wc_AesSetKeyLocal.constprop.0+0x390>
100110da:	9d01      	ldr	r5, [sp, #4]
100110dc:	4664      	mov	r4, ip
100110de:	e61f      	b.n	10010d20 <wc_AesSetKeyLocal.constprop.0+0xac>
100110e0:	e9d4 c902 	ldrd	ip, r9, [r4, #8]
100110e4:	4b26      	ldr	r3, [pc, #152]	@ (10011180 <wc_AesSetKeyLocal.constprop.0+0x50c>)
100110e6:	f8d4 e000 	ldr.w	lr, [r4]
100110ea:	6860      	ldr	r0, [r4, #4]
100110ec:	9501      	str	r5, [sp, #4]
100110ee:	461a      	mov	r2, r3
100110f0:	46a0      	mov	r8, r4
100110f2:	4663      	mov	r3, ip
100110f4:	f8df a08c 	ldr.w	sl, [pc, #140]	@ 10011184 <wc_AesSetKeyLocal.constprop.0+0x510>
100110f8:	4675      	mov	r5, lr
100110fa:	464c      	mov	r4, r9
100110fc:	4694      	mov	ip, r2
100110fe:	e005      	b.n	1001110c <wc_AesSetKeyLocal.constprop.0+0x498>
            rk[10] = rk[ 4] ^ rk[ 9];
10011100:	6932      	ldr	r2, [r6, #16]
10011102:	4062      	eors	r2, r4
            rk[11] = rk[ 5] ^ rk[10];
10011104:	4051      	eors	r1, r2
10011106:	e9c6 210a 	strd	r2, r1, [r6, #40]	@ 0x28
            rk += 6;
1001110a:	3618      	adds	r6, #24
            temp = rk[ 5];
1001110c:	6971      	ldr	r1, [r6, #20]
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
1001110e:	f85a 9f04 	ldr.w	r9, [sl, #4]!
                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
10011112:	b2ca      	uxtb	r2, r1
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
10011114:	ea4f 6e11 	mov.w	lr, r1, lsr #24
10011118:	f50e 7e80 	add.w	lr, lr, #256	@ 0x100
                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
1001111c:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
10011120:	f81c e02e 	ldrb.w	lr, [ip, lr, lsl #2]
                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
10011124:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
10011128:	ea42 020e 	orr.w	r2, r2, lr
                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
1001112c:	f3c1 4e07 	ubfx	lr, r1, #16, #8
10011130:	f50e 7e00 	add.w	lr, lr, #512	@ 0x200
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
10011134:	ea82 0209 	eor.w	r2, r2, r9
                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
10011138:	f85c e02e 	ldr.w	lr, [ip, lr, lsl #2]
1001113c:	f00e 4e7f 	and.w	lr, lr, #4278190080	@ 0xff000000
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
10011140:	ea82 020e 	eor.w	r2, r2, lr
                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
10011144:	f3c1 2e07 	ubfx	lr, r1, #8, #8
10011148:	f50e 7e40 	add.w	lr, lr, #768	@ 0x300
1001114c:	f85c e02e 	ldr.w	lr, [ip, lr, lsl #2]
10011150:	f40e 0e7f 	and.w	lr, lr, #16711680	@ 0xff0000
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
10011154:	ea82 020e 	eor.w	r2, r2, lr
10011158:	4055      	eors	r5, r2
            rk[ 7] = rk[ 1] ^ rk[ 6];
1001115a:	4068      	eors	r0, r5
            if (++i == 8)
1001115c:	4a0a      	ldr	r2, [pc, #40]	@ (10011188 <wc_AesSetKeyLocal.constprop.0+0x514>)
            rk[ 8] = rk[ 2] ^ rk[ 7];
1001115e:	4043      	eors	r3, r0
            rk[ 9] = rk[ 3] ^ rk[ 8];
10011160:	405c      	eors	r4, r3
            if (++i == 8)
10011162:	4552      	cmp	r2, sl
            rk[ 7] = rk[ 1] ^ rk[ 6];
10011164:	e9c6 5006 	strd	r5, r0, [r6, #24]
            rk[ 9] = rk[ 3] ^ rk[ 8];
10011168:	e9c6 3408 	strd	r3, r4, [r6, #32]
            if (++i == 8)
1001116c:	d1c8      	bne.n	10011100 <wc_AesSetKeyLocal.constprop.0+0x48c>
1001116e:	9d01      	ldr	r5, [sp, #4]
10011170:	4644      	mov	r4, r8
10011172:	e5d5      	b.n	10010d20 <wc_AesSetKeyLocal.constprop.0+0xac>
10011174:	f06f 00ac 	mvn.w	r0, #172	@ 0xac
    } /* wc_AesSetKeyLocal */
10011178:	4770      	bx	lr
1001117a:	bf00      	nop
1001117c:	10024fbc 	.word	0x10024fbc
10011180:	10023fa4 	.word	0x10023fa4
10011184:	10024fa0 	.word	0x10024fa0
10011188:	10024fc0 	.word	0x10024fc0

1001118c <wc_AesSetKey>:
    {
1001118c:	b410      	push	{r4}
1001118e:	9c01      	ldr	r4, [sp, #4]
        if (aes == NULL) {
10011190:	b128      	cbz	r0, 1001119e <wc_AesSetKey+0x12>
        if (keylen > sizeof(aes->key)) {
10011192:	2af0      	cmp	r2, #240	@ 0xf0
10011194:	d803      	bhi.n	1001119e <wc_AesSetKey+0x12>
        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
10011196:	9401      	str	r4, [sp, #4]
    } /* wc_AesSetKey() */
10011198:	bc10      	pop	{r4}
        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
1001119a:	f7ff bd6b 	b.w	10010c74 <wc_AesSetKeyLocal.constprop.0>
    } /* wc_AesSetKey() */
1001119e:	f06f 00ac 	mvn.w	r0, #172	@ 0xac
100111a2:	bc10      	pop	{r4}
100111a4:	4770      	bx	lr
100111a6:	bf00      	nop

100111a8 <wc_AesEncryptDirect>:
        /* Allow direct access to one block encrypt */
        int wc_AesEncryptDirect(Aes* aes, byte* out, const byte* in)
        {
            int ret;

            if (aes == NULL)
100111a8:	b190      	cbz	r0, 100111d0 <wc_AesEncryptDirect+0x28>
        {
100111aa:	b508      	push	{r3, lr}
100111ac:	4613      	mov	r3, r2
100111ae:	460a      	mov	r2, r1
100111b0:	4619      	mov	r1, r3
    r = aes->rounds >> 1;
100111b2:	f8d0 30f0 	ldr.w	r3, [r0, #240]	@ 0xf0
100111b6:	085b      	lsrs	r3, r3, #1
    if (r > 7 || r == 0) {
100111b8:	f103 3cff 	add.w	ip, r3, #4294967295	@ 0xffffffff
100111bc:	f1bc 0f06 	cmp.w	ip, #6
100111c0:	d803      	bhi.n	100111ca <wc_AesEncryptDirect+0x22>
    AesEncrypt_C(aes, inBlock, outBlock, r);
100111c2:	f7fd ffa5 	bl	1000f110 <AesEncrypt_C>
    return 0;
100111c6:	2000      	movs	r0, #0
                return BAD_FUNC_ARG;
            VECTOR_REGISTERS_PUSH;
            ret = wc_AesEncrypt(aes, in, out);
            VECTOR_REGISTERS_POP;
            return ret;
        }
100111c8:	bd08      	pop	{r3, pc}
        return KEYUSAGE_E;
100111ca:	f06f 00e1 	mvn.w	r0, #225	@ 0xe1
        }
100111ce:	bd08      	pop	{r3, pc}
                return BAD_FUNC_ARG;
100111d0:	f06f 00ac 	mvn.w	r0, #172	@ 0xac
        }
100111d4:	4770      	bx	lr
100111d6:	bf00      	nop

100111d8 <wc_AesDecryptDirect>:
        /* Allow direct access to one block decrypt */
        int wc_AesDecryptDirect(Aes* aes, byte* out, const byte* in)
        {
            int ret;

            if (aes == NULL)
100111d8:	b190      	cbz	r0, 10011200 <wc_AesDecryptDirect+0x28>
        {
100111da:	b508      	push	{r3, lr}
100111dc:	4613      	mov	r3, r2
100111de:	460a      	mov	r2, r1
100111e0:	4619      	mov	r1, r3
    r = aes->rounds >> 1;
100111e2:	f8d0 30f0 	ldr.w	r3, [r0, #240]	@ 0xf0
100111e6:	085b      	lsrs	r3, r3, #1
    if (r > 7 || r == 0) {
100111e8:	f103 3cff 	add.w	ip, r3, #4294967295	@ 0xffffffff
100111ec:	f1bc 0f06 	cmp.w	ip, #6
100111f0:	d803      	bhi.n	100111fa <wc_AesDecryptDirect+0x22>
    AesDecrypt_C(aes, inBlock, outBlock, r);
100111f2:	f7fe fe7f 	bl	1000fef4 <AesDecrypt_C>
    return 0;
100111f6:	2000      	movs	r0, #0
                return BAD_FUNC_ARG;
            VECTOR_REGISTERS_PUSH;
            ret = wc_AesDecrypt(aes, in, out);
            VECTOR_REGISTERS_POP;
            return ret;
        }
100111f8:	bd08      	pop	{r3, pc}
        return KEYUSAGE_E;
100111fa:	f06f 00e1 	mvn.w	r0, #225	@ 0xe1
        }
100111fe:	bd08      	pop	{r3, pc}
                return BAD_FUNC_ARG;
10011200:	f06f 00ac 	mvn.w	r0, #172	@ 0xac
        }
10011204:	4770      	bx	lr
10011206:	bf00      	nop

10011208 <wc_Md5Hash>:

#if !defined(WOLFSSL_TI_HASH)

#if !defined(NO_MD5)
    int wc_Md5Hash(const byte* data, word32 len, byte* hash)
    {
10011208:	b5f0      	push	{r4, r5, r6, r7, lr}
1001120a:	b099      	sub	sp, #100	@ 0x64
1001120c:	4605      	mov	r5, r0
        md5 = (wc_Md5*)XMALLOC(sizeof(wc_Md5), NULL, DYNAMIC_TYPE_TMP_BUFFER);
        if (md5 == NULL)
            return MEMORY_E;
    #endif

        if ((ret = wc_InitMd5(md5)) != 0) {
1001120e:	4668      	mov	r0, sp
    {
10011210:	460e      	mov	r6, r1
10011212:	4617      	mov	r7, r2
        if ((ret = wc_InitMd5(md5)) != 0) {
10011214:	f000 fc84 	bl	10011b20 <wc_InitMd5>
10011218:	b118      	cbz	r0, 10011222 <wc_Md5Hash+0x1a>
1001121a:	4604      	mov	r4, r0
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(md5, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    #endif

        return ret;
    }
1001121c:	4620      	mov	r0, r4
1001121e:	b019      	add	sp, #100	@ 0x64
10011220:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if ((ret = wc_Md5Update(md5, data, len)) != 0) {
10011222:	4632      	mov	r2, r6
10011224:	4629      	mov	r1, r5
10011226:	4668      	mov	r0, sp
10011228:	f000 fba2 	bl	10011970 <wc_Md5Update>
1001122c:	4604      	mov	r4, r0
1001122e:	b128      	cbz	r0, 1001123c <wc_Md5Hash+0x34>
            wc_Md5Free(md5);
10011230:	4668      	mov	r0, sp
10011232:	f000 fc93 	bl	10011b5c <wc_Md5Free>
    }
10011236:	4620      	mov	r0, r4
10011238:	b019      	add	sp, #100	@ 0x64
1001123a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if ((ret = wc_Md5Final(md5, hash)) != 0) {
1001123c:	4639      	mov	r1, r7
1001123e:	4668      	mov	r0, sp
10011240:	f000 fc16 	bl	10011a70 <wc_Md5Final>
10011244:	4604      	mov	r4, r0
10011246:	e7f3      	b.n	10011230 <wc_Md5Hash+0x28>

10011248 <Transform>:
    word32 a = md5->digest[0];
    word32 b = md5->digest[1];
    word32 c = md5->digest[2];
    word32 d = md5->digest[3];

    MD5STEP(F1, a, b, c, d, buffer[0]  + 0xd76aa478,  7);
10011248:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
1001124a:	4ae9      	ldr	r2, [pc, #932]	@ (100115f0 <Transform+0x3a8>)
{
1001124c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MD5STEP(F1, a, b, c, d, buffer[0]  + 0xd76aa478,  7);
10011250:	441a      	add	r2, r3
10011252:	e9d0 3415 	ldrd	r3, r4, [r0, #84]	@ 0x54
    word32 b = md5->digest[1];
10011256:	6d07      	ldr	r7, [r0, #80]	@ 0x50
    MD5STEP(F1, a, b, c, d, buffer[0]  + 0xd76aa478,  7);
10011258:	f8d1 b000 	ldr.w	fp, [r1]
    MD5STEP(F1, d, a, b, c, buffer[1]  + 0xe8c7b756, 12);
1001125c:	6d46      	ldr	r6, [r0, #84]	@ 0x54
1001125e:	684d      	ldr	r5, [r1, #4]
    MD5STEP(F1, c, d, a, b, buffer[2]  + 0x242070db, 17);
    MD5STEP(F1, b, c, d, a, buffer[3]  + 0xc1bdceee, 22);
    MD5STEP(F1, a, b, c, d, buffer[4]  + 0xf57c0faf,  7);
    MD5STEP(F1, d, a, b, c, buffer[5]  + 0x4787c62a, 12);
10011260:	f8d1 e014 	ldr.w	lr, [r1, #20]
    MD5STEP(F1, c, d, a, b, buffer[6]  + 0xa8304613, 17);
10011264:	f8d1 8018 	ldr.w	r8, [r1, #24]
    MD5STEP(F1, b, c, d, a, buffer[7]  + 0xfd469501, 22);
10011268:	f8d1 a01c 	ldr.w	sl, [r1, #28]
    MD5STEP(F1, a, b, c, d, buffer[8]  + 0x698098d8,  7);
1001126c:	f8d1 9020 	ldr.w	r9, [r1, #32]
    MD5STEP(F1, a, b, c, d, buffer[0]  + 0xd76aa478,  7);
10011270:	4063      	eors	r3, r4
10011272:	403b      	ands	r3, r7
10011274:	445a      	add	r2, fp
10011276:	4063      	eors	r3, r4
10011278:	4413      	add	r3, r2
    MD5STEP(F1, d, a, b, c, buffer[1]  + 0xe8c7b756, 12);
1001127a:	4ade      	ldr	r2, [pc, #888]	@ (100115f4 <Transform+0x3ac>)
1001127c:	4422      	add	r2, r4
    MD5STEP(F1, a, b, c, d, buffer[0]  + 0xd76aa478,  7);
1001127e:	eb07 6373 	add.w	r3, r7, r3, ror #25
    MD5STEP(F1, d, a, b, c, buffer[1]  + 0xe8c7b756, 12);
10011282:	462c      	mov	r4, r5
10011284:	442a      	add	r2, r5
10011286:	ea87 0506 	eor.w	r5, r7, r6
1001128a:	401d      	ands	r5, r3
1001128c:	4075      	eors	r5, r6
1001128e:	4415      	add	r5, r2
    MD5STEP(F1, c, d, a, b, buffer[2]  + 0x242070db, 17);
10011290:	4ad9      	ldr	r2, [pc, #868]	@ (100115f8 <Transform+0x3b0>)
{
10011292:	b08d      	sub	sp, #52	@ 0x34
    MD5STEP(F1, c, d, a, b, buffer[2]  + 0x242070db, 17);
10011294:	4432      	add	r2, r6
10011296:	688e      	ldr	r6, [r1, #8]
10011298:	9601      	str	r6, [sp, #4]
    MD5STEP(F1, d, a, b, c, buffer[1]  + 0xe8c7b756, 12);
1001129a:	eb03 5535 	add.w	r5, r3, r5, ror #20
    MD5STEP(F1, c, d, a, b, buffer[2]  + 0x242070db, 17);
1001129e:	4432      	add	r2, r6
100112a0:	ea87 0603 	eor.w	r6, r7, r3
100112a4:	402e      	ands	r6, r5
100112a6:	970a      	str	r7, [sp, #40]	@ 0x28
100112a8:	407e      	eors	r6, r7
100112aa:	4416      	add	r6, r2
    MD5STEP(F1, b, c, d, a, buffer[3]  + 0xc1bdceee, 22);
100112ac:	4fd3      	ldr	r7, [pc, #844]	@ (100115fc <Transform+0x3b4>)
100112ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    MD5STEP(F1, d, a, b, c, buffer[5]  + 0x4787c62a, 12);
100112b0:	f8cd e010 	str.w	lr, [sp, #16]
    MD5STEP(F1, b, c, d, a, buffer[3]  + 0xc1bdceee, 22);
100112b4:	4417      	add	r7, r2
100112b6:	68ca      	ldr	r2, [r1, #12]
100112b8:	9202      	str	r2, [sp, #8]
    MD5STEP(F1, c, d, a, b, buffer[2]  + 0x242070db, 17);
100112ba:	eb05 36f6 	add.w	r6, r5, r6, ror #15
    MD5STEP(F1, b, c, d, a, buffer[3]  + 0xc1bdceee, 22);
100112be:	4417      	add	r7, r2
100112c0:	ea83 0205 	eor.w	r2, r3, r5
100112c4:	4032      	ands	r2, r6
100112c6:	405a      	eors	r2, r3
100112c8:	443a      	add	r2, r7
    MD5STEP(F1, a, b, c, d, buffer[4]  + 0xf57c0faf,  7);
100112ca:	690f      	ldr	r7, [r1, #16]
    MD5STEP(F1, c, d, a, b, buffer[6]  + 0xa8304613, 17);
100112cc:	f8cd 8014 	str.w	r8, [sp, #20]
    MD5STEP(F1, a, b, c, d, buffer[4]  + 0xf57c0faf,  7);
100112d0:	46bc      	mov	ip, r7
100112d2:	4fcb      	ldr	r7, [pc, #812]	@ (10011600 <Transform+0x3b8>)
100112d4:	f8cd c00c 	str.w	ip, [sp, #12]
100112d8:	4467      	add	r7, ip
    MD5STEP(F1, b, c, d, a, buffer[3]  + 0xc1bdceee, 22);
100112da:	eb06 22b2 	add.w	r2, r6, r2, ror #10
    MD5STEP(F1, a, b, c, d, buffer[4]  + 0xf57c0faf,  7);
100112de:	441f      	add	r7, r3
100112e0:	ea85 0306 	eor.w	r3, r5, r6
100112e4:	4013      	ands	r3, r2
100112e6:	406b      	eors	r3, r5
100112e8:	443b      	add	r3, r7
    MD5STEP(F1, d, a, b, c, buffer[5]  + 0x4787c62a, 12);
100112ea:	4fc6      	ldr	r7, [pc, #792]	@ (10011604 <Transform+0x3bc>)
    MD5STEP(F1, a, b, c, d, buffer[8]  + 0x698098d8,  7);
100112ec:	f8cd 9018 	str.w	r9, [sp, #24]
    MD5STEP(F1, d, a, b, c, buffer[5]  + 0x4787c62a, 12);
100112f0:	4477      	add	r7, lr
    MD5STEP(F1, a, b, c, d, buffer[4]  + 0xf57c0faf,  7);
100112f2:	eb02 6373 	add.w	r3, r2, r3, ror #25
    MD5STEP(F1, d, a, b, c, buffer[5]  + 0x4787c62a, 12);
100112f6:	442f      	add	r7, r5
100112f8:	ea86 0502 	eor.w	r5, r6, r2
100112fc:	401d      	ands	r5, r3
100112fe:	4075      	eors	r5, r6
10011300:	443d      	add	r5, r7
    MD5STEP(F1, c, d, a, b, buffer[6]  + 0xa8304613, 17);
10011302:	4fc1      	ldr	r7, [pc, #772]	@ (10011608 <Transform+0x3c0>)
10011304:	4447      	add	r7, r8
    MD5STEP(F1, d, a, b, c, buffer[5]  + 0x4787c62a, 12);
10011306:	eb03 5535 	add.w	r5, r3, r5, ror #20
    MD5STEP(F1, c, d, a, b, buffer[6]  + 0xa8304613, 17);
1001130a:	4437      	add	r7, r6
1001130c:	ea82 0603 	eor.w	r6, r2, r3
10011310:	402e      	ands	r6, r5
10011312:	4056      	eors	r6, r2
10011314:	443e      	add	r6, r7
    MD5STEP(F1, b, c, d, a, buffer[7]  + 0xfd469501, 22);
10011316:	4fbd      	ldr	r7, [pc, #756]	@ (1001160c <Transform+0x3c4>)
    MD5STEP(F1, d, a, b, c, buffer[9]  + 0x8b44f7af, 12);
    MD5STEP(F1, c, d, a, b, buffer[10] + 0xffff5bb1, 17);
    MD5STEP(F1, b, c, d, a, buffer[11] + 0x895cd7be, 22);
    MD5STEP(F1, a, b, c, d, buffer[12] + 0x6b901122,  7);
10011318:	f8d1 8030 	ldr.w	r8, [r1, #48]	@ 0x30
    MD5STEP(F1, b, c, d, a, buffer[7]  + 0xfd469501, 22);
1001131c:	4457      	add	r7, sl
    MD5STEP(F1, c, d, a, b, buffer[6]  + 0xa8304613, 17);
1001131e:	eb05 36f6 	add.w	r6, r5, r6, ror #15
    MD5STEP(F1, b, c, d, a, buffer[7]  + 0xfd469501, 22);
10011322:	4417      	add	r7, r2
10011324:	ea83 0205 	eor.w	r2, r3, r5
10011328:	4032      	ands	r2, r6
1001132a:	405a      	eors	r2, r3
1001132c:	443a      	add	r2, r7
    MD5STEP(F1, a, b, c, d, buffer[8]  + 0x698098d8,  7);
1001132e:	4fb8      	ldr	r7, [pc, #736]	@ (10011610 <Transform+0x3c8>)
10011330:	444f      	add	r7, r9
    MD5STEP(F1, b, c, d, a, buffer[7]  + 0xfd469501, 22);
10011332:	eb06 22b2 	add.w	r2, r6, r2, ror #10
    MD5STEP(F1, a, b, c, d, buffer[8]  + 0x698098d8,  7);
10011336:	441f      	add	r7, r3
10011338:	ea85 0306 	eor.w	r3, r5, r6
1001133c:	4013      	ands	r3, r2
1001133e:	406b      	eors	r3, r5
10011340:	443b      	add	r3, r7
    MD5STEP(F1, d, a, b, c, buffer[9]  + 0x8b44f7af, 12);
10011342:	6a4f      	ldr	r7, [r1, #36]	@ 0x24
10011344:	46bc      	mov	ip, r7
10011346:	4fb3      	ldr	r7, [pc, #716]	@ (10011614 <Transform+0x3cc>)
10011348:	f8cd c01c 	str.w	ip, [sp, #28]
1001134c:	4467      	add	r7, ip
    MD5STEP(F1, a, b, c, d, buffer[8]  + 0x698098d8,  7);
1001134e:	eb02 6373 	add.w	r3, r2, r3, ror #25
    MD5STEP(F1, d, a, b, c, buffer[9]  + 0x8b44f7af, 12);
10011352:	443d      	add	r5, r7
10011354:	ea86 0702 	eor.w	r7, r6, r2
10011358:	401f      	ands	r7, r3
1001135a:	4077      	eors	r7, r6
1001135c:	442f      	add	r7, r5
    MD5STEP(F1, c, d, a, b, buffer[10] + 0xffff5bb1, 17);
1001135e:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
10011360:	f5a5 4e24 	sub.w	lr, r5, #41984	@ 0xa400
    MD5STEP(F1, d, a, b, c, buffer[9]  + 0x8b44f7af, 12);
10011364:	eb03 5737 	add.w	r7, r3, r7, ror #20
    MD5STEP(F1, c, d, a, b, buffer[10] + 0xffff5bb1, 17);
10011368:	ea82 0c03 	eor.w	ip, r2, r3
1001136c:	f1ae 0e4f 	sub.w	lr, lr, #79	@ 0x4f
10011370:	44b6      	add	lr, r6
10011372:	ea0c 0c07 	and.w	ip, ip, r7
    MD5STEP(F1, b, c, d, a, buffer[11] + 0x895cd7be, 22);
10011376:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
    MD5STEP(F1, c, d, a, b, buffer[10] + 0xffff5bb1, 17);
10011378:	ea8c 0c02 	eor.w	ip, ip, r2
1001137c:	44f4      	add	ip, lr
    MD5STEP(F1, b, c, d, a, buffer[11] + 0x895cd7be, 22);
1001137e:	46b6      	mov	lr, r6
10011380:	4ea5      	ldr	r6, [pc, #660]	@ (10011618 <Transform+0x3d0>)
10011382:	f8cd e020 	str.w	lr, [sp, #32]
10011386:	4476      	add	r6, lr
    MD5STEP(F1, c, d, a, b, buffer[10] + 0xffff5bb1, 17);
10011388:	eb07 3cfc 	add.w	ip, r7, ip, ror #15
    MD5STEP(F1, b, c, d, a, buffer[11] + 0x895cd7be, 22);
1001138c:	4416      	add	r6, r2
1001138e:	ea83 0207 	eor.w	r2, r3, r7
10011392:	ea02 020c 	and.w	r2, r2, ip
10011396:	405a      	eors	r2, r3
10011398:	4432      	add	r2, r6
    MD5STEP(F1, a, b, c, d, buffer[12] + 0x6b901122,  7);
1001139a:	4ea0      	ldr	r6, [pc, #640]	@ (1001161c <Transform+0x3d4>)
    MD5STEP(F1, d, a, b, c, buffer[13] + 0xfd987193, 12);
1001139c:	f8df e280 	ldr.w	lr, [pc, #640]	@ 10011620 <Transform+0x3d8>
    MD5STEP(F1, a, b, c, d, buffer[12] + 0x6b901122,  7);
100113a0:	4446      	add	r6, r8
    MD5STEP(F1, b, c, d, a, buffer[11] + 0x895cd7be, 22);
100113a2:	eb0c 22b2 	add.w	r2, ip, r2, ror #10
    MD5STEP(F1, a, b, c, d, buffer[12] + 0x6b901122,  7);
100113a6:	441e      	add	r6, r3
100113a8:	ea87 030c 	eor.w	r3, r7, ip
100113ac:	4013      	ands	r3, r2
100113ae:	407b      	eors	r3, r7
100113b0:	4433      	add	r3, r6
    MD5STEP(F1, d, a, b, c, buffer[13] + 0xfd987193, 12);
100113b2:	6b4e      	ldr	r6, [r1, #52]	@ 0x34
100113b4:	44b6      	add	lr, r6
    MD5STEP(F1, a, b, c, d, buffer[12] + 0x6b901122,  7);
100113b6:	eb02 6373 	add.w	r3, r2, r3, ror #25
    MD5STEP(F1, d, a, b, c, buffer[13] + 0xfd987193, 12);
100113ba:	4477      	add	r7, lr
100113bc:	ea8c 0e02 	eor.w	lr, ip, r2
100113c0:	ea0e 0e03 	and.w	lr, lr, r3
100113c4:	ea8e 0e0c 	eor.w	lr, lr, ip
100113c8:	44be      	add	lr, r7
    MD5STEP(F1, c, d, a, b, buffer[14] + 0xa679438e, 17);
    MD5STEP(F1, b, c, d, a, buffer[15] + 0x49b40821, 22);
100113ca:	e9d1 970e 	ldrd	r9, r7, [r1, #56]	@ 0x38
    MD5STEP(F1, c, d, a, b, buffer[14] + 0xa679438e, 17);
100113ce:	4995      	ldr	r1, [pc, #596]	@ (10011624 <Transform+0x3dc>)

    MD5STEP(F2, a, b, c, d, buffer[1]  + 0xf61e2562,  5);
100113d0:	9409      	str	r4, [sp, #36]	@ 0x24
    MD5STEP(F1, c, d, a, b, buffer[14] + 0xa679438e, 17);
100113d2:	4449      	add	r1, r9
    MD5STEP(F1, d, a, b, c, buffer[13] + 0xfd987193, 12);
100113d4:	eb03 5e3e 	add.w	lr, r3, lr, ror #20
    MD5STEP(F1, c, d, a, b, buffer[14] + 0xa679438e, 17);
100113d8:	4461      	add	r1, ip
100113da:	ea82 0c03 	eor.w	ip, r2, r3
100113de:	ea0c 0c0e 	and.w	ip, ip, lr
100113e2:	ea8c 0c02 	eor.w	ip, ip, r2
100113e6:	448c      	add	ip, r1
    MD5STEP(F1, b, c, d, a, buffer[15] + 0x49b40821, 22);
100113e8:	498f      	ldr	r1, [pc, #572]	@ (10011628 <Transform+0x3e0>)
    MD5STEP(F2, d, a, b, c, buffer[6]  + 0xc040b340,  9);
    MD5STEP(F2, c, d, a, b, buffer[11] + 0x265e5a51, 14);
    MD5STEP(F2, b, c, d, a, buffer[0]  + 0xe9b6c7aa, 20);
100113ea:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
    MD5STEP(F1, b, c, d, a, buffer[15] + 0x49b40821, 22);
100113ee:	4439      	add	r1, r7
    MD5STEP(F1, c, d, a, b, buffer[14] + 0xa679438e, 17);
100113f0:	eb0e 3cfc 	add.w	ip, lr, ip, ror #15
    MD5STEP(F1, b, c, d, a, buffer[15] + 0x49b40821, 22);
100113f4:	4411      	add	r1, r2
100113f6:	ea83 020e 	eor.w	r2, r3, lr
100113fa:	ea02 020c 	and.w	r2, r2, ip
100113fe:	405a      	eors	r2, r3
10011400:	440a      	add	r2, r1
    MD5STEP(F2, a, b, c, d, buffer[1]  + 0xf61e2562,  5);
10011402:	498a      	ldr	r1, [pc, #552]	@ (1001162c <Transform+0x3e4>)
    MD5STEP(F1, b, c, d, a, buffer[15] + 0x49b40821, 22);
10011404:	eb0c 22b2 	add.w	r2, ip, r2, ror #10
    MD5STEP(F2, a, b, c, d, buffer[1]  + 0xf61e2562,  5);
10011408:	4421      	add	r1, r4
1001140a:	4419      	add	r1, r3
1001140c:	ea8c 0302 	eor.w	r3, ip, r2
10011410:	ea03 030e 	and.w	r3, r3, lr
10011414:	ea83 030c 	eor.w	r3, r3, ip
    MD5STEP(F2, d, a, b, c, buffer[6]  + 0xc040b340,  9);
10011418:	9c05      	ldr	r4, [sp, #20]
    MD5STEP(F2, a, b, c, d, buffer[1]  + 0xf61e2562,  5);
1001141a:	440b      	add	r3, r1
    MD5STEP(F2, d, a, b, c, buffer[6]  + 0xc040b340,  9);
1001141c:	4984      	ldr	r1, [pc, #528]	@ (10011630 <Transform+0x3e8>)
    MD5STEP(F2, a, b, c, d, buffer[1]  + 0xf61e2562,  5);
1001141e:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    MD5STEP(F2, d, a, b, c, buffer[6]  + 0xc040b340,  9);
10011422:	4421      	add	r1, r4
10011424:	448e      	add	lr, r1
10011426:	ea82 0103 	eor.w	r1, r2, r3
1001142a:	ea01 010c 	and.w	r1, r1, ip
1001142e:	4051      	eors	r1, r2
    MD5STEP(F2, c, d, a, b, buffer[11] + 0x265e5a51, 14);
10011430:	9c08      	ldr	r4, [sp, #32]
    MD5STEP(F2, d, a, b, c, buffer[6]  + 0xc040b340,  9);
10011432:	4471      	add	r1, lr
    MD5STEP(F2, c, d, a, b, buffer[11] + 0x265e5a51, 14);
10011434:	f8df e1fc 	ldr.w	lr, [pc, #508]	@ 10011634 <Transform+0x3ec>
    MD5STEP(F2, d, a, b, c, buffer[6]  + 0xc040b340,  9);
10011438:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    MD5STEP(F2, c, d, a, b, buffer[11] + 0x265e5a51, 14);
1001143c:	44a6      	add	lr, r4
1001143e:	44e6      	add	lr, ip
10011440:	ea83 0c01 	eor.w	ip, r3, r1
10011444:	ea0c 0c02 	and.w	ip, ip, r2
10011448:	ea8c 0c03 	eor.w	ip, ip, r3
1001144c:	44f4      	add	ip, lr
    MD5STEP(F2, b, c, d, a, buffer[0]  + 0xe9b6c7aa, 20);
1001144e:	f8df e1e8 	ldr.w	lr, [pc, #488]	@ 10011638 <Transform+0x3f0>
    MD5STEP(F2, a, b, c, d, buffer[5]  + 0xd62f105d,  5);
    MD5STEP(F2, d, a, b, c, buffer[10] + 0x02441453,  9);
    MD5STEP(F2, c, d, a, b, buffer[15] + 0xd8a1e681, 14);
    MD5STEP(F2, b, c, d, a, buffer[4]  + 0xe7d3fbc8, 20);
    MD5STEP(F2, a, b, c, d, buffer[9]  + 0x21e1cde6,  5);
10011452:	9c07      	ldr	r4, [sp, #28]
    MD5STEP(F2, c, d, a, b, buffer[11] + 0x265e5a51, 14);
10011454:	eb01 4cbc 	add.w	ip, r1, ip, ror #18
    MD5STEP(F2, b, c, d, a, buffer[0]  + 0xe9b6c7aa, 20);
10011458:	44de      	add	lr, fp
1001145a:	4496      	add	lr, r2
1001145c:	ea81 020c 	eor.w	r2, r1, ip
10011460:	401a      	ands	r2, r3
10011462:	404a      	eors	r2, r1
    MD5STEP(F2, a, b, c, d, buffer[5]  + 0xd62f105d,  5);
10011464:	f8dd b010 	ldr.w	fp, [sp, #16]
    MD5STEP(F2, b, c, d, a, buffer[0]  + 0xe9b6c7aa, 20);
10011468:	4472      	add	r2, lr
    MD5STEP(F2, a, b, c, d, buffer[5]  + 0xd62f105d,  5);
1001146a:	f8df e1d0 	ldr.w	lr, [pc, #464]	@ 1001163c <Transform+0x3f4>
    MD5STEP(F2, b, c, d, a, buffer[0]  + 0xe9b6c7aa, 20);
1001146e:	eb0c 3232 	add.w	r2, ip, r2, ror #12
    MD5STEP(F2, a, b, c, d, buffer[5]  + 0xd62f105d,  5);
10011472:	44de      	add	lr, fp
10011474:	449e      	add	lr, r3
10011476:	ea8c 0302 	eor.w	r3, ip, r2
1001147a:	400b      	ands	r3, r1
1001147c:	ea83 030c 	eor.w	r3, r3, ip
10011480:	4473      	add	r3, lr
    MD5STEP(F2, d, a, b, c, buffer[10] + 0x02441453,  9);
10011482:	f8df e1bc 	ldr.w	lr, [pc, #444]	@ 10011640 <Transform+0x3f8>
    MD5STEP(F2, b, c, d, a, buffer[4]  + 0xe7d3fbc8, 20);
10011486:	f8dd b00c 	ldr.w	fp, [sp, #12]
    MD5STEP(F2, a, b, c, d, buffer[5]  + 0xd62f105d,  5);
1001148a:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    MD5STEP(F2, d, a, b, c, buffer[10] + 0x02441453,  9);
1001148e:	44ae      	add	lr, r5
10011490:	448e      	add	lr, r1
10011492:	ea82 0103 	eor.w	r1, r2, r3
10011496:	ea01 010c 	and.w	r1, r1, ip
1001149a:	4051      	eors	r1, r2
1001149c:	4471      	add	r1, lr
    MD5STEP(F2, c, d, a, b, buffer[15] + 0xd8a1e681, 14);
1001149e:	f8df e1a4 	ldr.w	lr, [pc, #420]	@ 10011644 <Transform+0x3fc>
    MD5STEP(F2, d, a, b, c, buffer[10] + 0x02441453,  9);
100114a2:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    MD5STEP(F2, c, d, a, b, buffer[15] + 0xd8a1e681, 14);
100114a6:	44be      	add	lr, r7
100114a8:	44e6      	add	lr, ip
100114aa:	ea83 0c01 	eor.w	ip, r3, r1
100114ae:	ea0c 0c02 	and.w	ip, ip, r2
100114b2:	ea8c 0c03 	eor.w	ip, ip, r3
100114b6:	44f4      	add	ip, lr
    MD5STEP(F2, b, c, d, a, buffer[4]  + 0xe7d3fbc8, 20);
100114b8:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 10011648 <Transform+0x400>
    MD5STEP(F2, c, d, a, b, buffer[15] + 0xd8a1e681, 14);
100114bc:	eb01 4cbc 	add.w	ip, r1, ip, ror #18
    MD5STEP(F2, b, c, d, a, buffer[4]  + 0xe7d3fbc8, 20);
100114c0:	44de      	add	lr, fp
100114c2:	4496      	add	lr, r2
100114c4:	ea81 020c 	eor.w	r2, r1, ip
100114c8:	401a      	ands	r2, r3
100114ca:	404a      	eors	r2, r1
100114cc:	4472      	add	r2, lr
    MD5STEP(F2, a, b, c, d, buffer[9]  + 0x21e1cde6,  5);
100114ce:	f8df e17c 	ldr.w	lr, [pc, #380]	@ 1001164c <Transform+0x404>
    MD5STEP(F2, c, d, a, b, buffer[3]  + 0xf4d50d87, 14);
    MD5STEP(F2, b, c, d, a, buffer[8]  + 0x455a14ed, 20);
    MD5STEP(F2, a, b, c, d, buffer[13] + 0xa9e3e905,  5);
    MD5STEP(F2, d, a, b, c, buffer[2]  + 0xfcefa3f8,  9);
    MD5STEP(F2, c, d, a, b, buffer[7]  + 0x676f02d9, 14);
    MD5STEP(F2, b, c, d, a, buffer[12] + 0x8d2a4c8a, 20);
100114d2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 10011650 <Transform+0x408>
    MD5STEP(F2, b, c, d, a, buffer[4]  + 0xe7d3fbc8, 20);
100114d6:	eb0c 3232 	add.w	r2, ip, r2, ror #12
    MD5STEP(F2, a, b, c, d, buffer[9]  + 0x21e1cde6,  5);
100114da:	44a6      	add	lr, r4
100114dc:	449e      	add	lr, r3
100114de:	ea8c 0302 	eor.w	r3, ip, r2
100114e2:	400b      	ands	r3, r1
100114e4:	ea83 030c 	eor.w	r3, r3, ip
100114e8:	4473      	add	r3, lr
    MD5STEP(F2, d, a, b, c, buffer[14] + 0xc33707d6,  9);
100114ea:	f8df e168 	ldr.w	lr, [pc, #360]	@ 10011654 <Transform+0x40c>
    MD5STEP(F2, c, d, a, b, buffer[3]  + 0xf4d50d87, 14);
100114ee:	9c02      	ldr	r4, [sp, #8]
    MD5STEP(F2, a, b, c, d, buffer[9]  + 0x21e1cde6,  5);
100114f0:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    MD5STEP(F2, d, a, b, c, buffer[14] + 0xc33707d6,  9);
100114f4:	44ce      	add	lr, r9
100114f6:	448e      	add	lr, r1
100114f8:	ea82 0103 	eor.w	r1, r2, r3
100114fc:	ea01 010c 	and.w	r1, r1, ip
10011500:	4051      	eors	r1, r2
10011502:	4471      	add	r1, lr
    MD5STEP(F2, c, d, a, b, buffer[3]  + 0xf4d50d87, 14);
10011504:	f8df e150 	ldr.w	lr, [pc, #336]	@ 10011658 <Transform+0x410>
    MD5STEP(F2, d, a, b, c, buffer[14] + 0xc33707d6,  9);
10011508:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    MD5STEP(F2, c, d, a, b, buffer[3]  + 0xf4d50d87, 14);
1001150c:	44a6      	add	lr, r4
1001150e:	44e6      	add	lr, ip
10011510:	ea83 0c01 	eor.w	ip, r3, r1
10011514:	ea0c 0c02 	and.w	ip, ip, r2
10011518:	ea8c 0c03 	eor.w	ip, ip, r3
    MD5STEP(F2, b, c, d, a, buffer[8]  + 0x455a14ed, 20);
1001151c:	9c06      	ldr	r4, [sp, #24]
    MD5STEP(F2, c, d, a, b, buffer[3]  + 0xf4d50d87, 14);
1001151e:	44f4      	add	ip, lr
    MD5STEP(F2, b, c, d, a, buffer[8]  + 0x455a14ed, 20);
10011520:	f8df e138 	ldr.w	lr, [pc, #312]	@ 1001165c <Transform+0x414>
    MD5STEP(F2, c, d, a, b, buffer[3]  + 0xf4d50d87, 14);
10011524:	eb01 4cbc 	add.w	ip, r1, ip, ror #18
    MD5STEP(F2, b, c, d, a, buffer[8]  + 0x455a14ed, 20);
10011528:	44a6      	add	lr, r4
1001152a:	4496      	add	lr, r2
1001152c:	ea81 020c 	eor.w	r2, r1, ip
10011530:	401a      	ands	r2, r3
10011532:	404a      	eors	r2, r1
10011534:	4472      	add	r2, lr
    MD5STEP(F2, a, b, c, d, buffer[13] + 0xa9e3e905,  5);
10011536:	f8df e128 	ldr.w	lr, [pc, #296]	@ 10011660 <Transform+0x418>
    MD5STEP(F2, d, a, b, c, buffer[2]  + 0xfcefa3f8,  9);
1001153a:	9c01      	ldr	r4, [sp, #4]
    MD5STEP(F2, b, c, d, a, buffer[8]  + 0x455a14ed, 20);
1001153c:	eb0c 3232 	add.w	r2, ip, r2, ror #12
    MD5STEP(F2, a, b, c, d, buffer[13] + 0xa9e3e905,  5);
10011540:	44b6      	add	lr, r6
10011542:	449e      	add	lr, r3
10011544:	ea8c 0302 	eor.w	r3, ip, r2
10011548:	400b      	ands	r3, r1
1001154a:	ea83 030c 	eor.w	r3, r3, ip
1001154e:	4473      	add	r3, lr
    MD5STEP(F2, d, a, b, c, buffer[2]  + 0xfcefa3f8,  9);
10011550:	f8df e110 	ldr.w	lr, [pc, #272]	@ 10011664 <Transform+0x41c>
    MD5STEP(F2, a, b, c, d, buffer[13] + 0xa9e3e905,  5);
10011554:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    MD5STEP(F2, d, a, b, c, buffer[2]  + 0xfcefa3f8,  9);
10011558:	44a6      	add	lr, r4
1001155a:	448e      	add	lr, r1
1001155c:	ea82 0103 	eor.w	r1, r2, r3
10011560:	ea01 010c 	and.w	r1, r1, ip
10011564:	4051      	eors	r1, r2
10011566:	4471      	add	r1, lr
    MD5STEP(F2, c, d, a, b, buffer[7]  + 0x676f02d9, 14);
10011568:	f8df e0fc 	ldr.w	lr, [pc, #252]	@ 10011668 <Transform+0x420>

    MD5STEP(F3, a, b, c, d, buffer[5]  + 0xfffa3942,  4);
    MD5STEP(F3, d, a, b, c, buffer[8]  + 0x8771f681, 11);
    MD5STEP(F3, c, d, a, b, buffer[11] + 0x6d9d6122, 16);
    MD5STEP(F3, b, c, d, a, buffer[14] + 0xfde5380c, 23);
    MD5STEP(F3, a, b, c, d, buffer[1]  + 0xa4beea44,  4);
1001156c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
    MD5STEP(F2, d, a, b, c, buffer[2]  + 0xfcefa3f8,  9);
1001156e:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    MD5STEP(F2, c, d, a, b, buffer[7]  + 0x676f02d9, 14);
10011572:	44d6      	add	lr, sl
10011574:	44e6      	add	lr, ip
10011576:	ea83 0c01 	eor.w	ip, r3, r1
1001157a:	ea0c 0c02 	and.w	ip, ip, r2
1001157e:	ea8c 0c03 	eor.w	ip, ip, r3
10011582:	44f4      	add	ip, lr
10011584:	eb01 4cbc 	add.w	ip, r1, ip, ror #18
    MD5STEP(F2, b, c, d, a, buffer[12] + 0x8d2a4c8a, 20);
10011588:	44c3      	add	fp, r8
1001158a:	4493      	add	fp, r2
1001158c:	ea81 020c 	eor.w	r2, r1, ip
10011590:	ea02 0e03 	and.w	lr, r2, r3
10011594:	ea8e 0e01 	eor.w	lr, lr, r1
10011598:	44de      	add	lr, fp
1001159a:	eb0c 3e3e 	add.w	lr, ip, lr, ror #12
    MD5STEP(F3, a, b, c, d, buffer[5]  + 0xfffa3942,  4);
1001159e:	ea82 0b0e 	eor.w	fp, r2, lr
100115a2:	9a04      	ldr	r2, [sp, #16]
100115a4:	f5a2 22b8 	sub.w	r2, r2, #376832	@ 0x5c000
100115a8:	f2a2 62be 	subw	r2, r2, #1726	@ 0x6be
100115ac:	441a      	add	r2, r3
100115ae:	445a      	add	r2, fp
    MD5STEP(F3, d, a, b, c, buffer[8]  + 0x8771f681, 11);
100115b0:	4b2e      	ldr	r3, [pc, #184]	@ (1001166c <Transform+0x424>)
100115b2:	f8dd b018 	ldr.w	fp, [sp, #24]
100115b6:	445b      	add	r3, fp
    MD5STEP(F3, a, b, c, d, buffer[5]  + 0xfffa3942,  4);
100115b8:	eb0e 7232 	add.w	r2, lr, r2, ror #28
    MD5STEP(F3, d, a, b, c, buffer[8]  + 0x8771f681, 11);
100115bc:	4419      	add	r1, r3
100115be:	ea8c 030e 	eor.w	r3, ip, lr
100115c2:	4053      	eors	r3, r2
    MD5STEP(F3, c, d, a, b, buffer[11] + 0x6d9d6122, 16);
100115c4:	f8dd b020 	ldr.w	fp, [sp, #32]
    MD5STEP(F3, d, a, b, c, buffer[8]  + 0x8771f681, 11);
100115c8:	440b      	add	r3, r1
    MD5STEP(F3, c, d, a, b, buffer[11] + 0x6d9d6122, 16);
100115ca:	4929      	ldr	r1, [pc, #164]	@ (10011670 <Transform+0x428>)
100115cc:	4459      	add	r1, fp
    MD5STEP(F3, d, a, b, c, buffer[8]  + 0x8771f681, 11);
100115ce:	eb02 5373 	add.w	r3, r2, r3, ror #21
    MD5STEP(F3, c, d, a, b, buffer[11] + 0x6d9d6122, 16);
100115d2:	4461      	add	r1, ip
100115d4:	ea8e 0c02 	eor.w	ip, lr, r2
100115d8:	ea8c 0c03 	eor.w	ip, ip, r3
100115dc:	448c      	add	ip, r1
    MD5STEP(F3, b, c, d, a, buffer[14] + 0xfde5380c, 23);
100115de:	4925      	ldr	r1, [pc, #148]	@ (10011674 <Transform+0x42c>)
    MD5STEP(F3, d, a, b, c, buffer[4]  + 0x4bdecfa9, 11);
100115e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
    MD5STEP(F3, b, c, d, a, buffer[14] + 0xfde5380c, 23);
100115e4:	4449      	add	r1, r9
    MD5STEP(F3, c, d, a, b, buffer[11] + 0x6d9d6122, 16);
100115e6:	eb03 4c3c 	add.w	ip, r3, ip, ror #16
    MD5STEP(F3, b, c, d, a, buffer[14] + 0xfde5380c, 23);
100115ea:	448e      	add	lr, r1
100115ec:	e044      	b.n	10011678 <Transform+0x430>
100115ee:	bf00      	nop
100115f0:	d76aa478 	.word	0xd76aa478
100115f4:	e8c7b756 	.word	0xe8c7b756
100115f8:	242070db 	.word	0x242070db
100115fc:	c1bdceee 	.word	0xc1bdceee
10011600:	f57c0faf 	.word	0xf57c0faf
10011604:	4787c62a 	.word	0x4787c62a
10011608:	a8304613 	.word	0xa8304613
1001160c:	fd469501 	.word	0xfd469501
10011610:	698098d8 	.word	0x698098d8
10011614:	8b44f7af 	.word	0x8b44f7af
10011618:	895cd7be 	.word	0x895cd7be
1001161c:	6b901122 	.word	0x6b901122
10011620:	fd987193 	.word	0xfd987193
10011624:	a679438e 	.word	0xa679438e
10011628:	49b40821 	.word	0x49b40821
1001162c:	f61e2562 	.word	0xf61e2562
10011630:	c040b340 	.word	0xc040b340
10011634:	265e5a51 	.word	0x265e5a51
10011638:	e9b6c7aa 	.word	0xe9b6c7aa
1001163c:	d62f105d 	.word	0xd62f105d
10011640:	02441453 	.word	0x02441453
10011644:	d8a1e681 	.word	0xd8a1e681
10011648:	e7d3fbc8 	.word	0xe7d3fbc8
1001164c:	21e1cde6 	.word	0x21e1cde6
10011650:	8d2a4c8a 	.word	0x8d2a4c8a
10011654:	c33707d6 	.word	0xc33707d6
10011658:	f4d50d87 	.word	0xf4d50d87
1001165c:	455a14ed 	.word	0x455a14ed
10011660:	a9e3e905 	.word	0xa9e3e905
10011664:	fcefa3f8 	.word	0xfcefa3f8
10011668:	676f02d9 	.word	0x676f02d9
1001166c:	8771f681 	.word	0x8771f681
10011670:	6d9d6122 	.word	0x6d9d6122
10011674:	fde5380c 	.word	0xfde5380c
10011678:	ea82 0103 	eor.w	r1, r2, r3
1001167c:	ea81 010c 	eor.w	r1, r1, ip
10011680:	4471      	add	r1, lr
    MD5STEP(F3, a, b, c, d, buffer[1]  + 0xa4beea44,  4);
10011682:	f8df e280 	ldr.w	lr, [pc, #640]	@ 10011904 <Transform+0x6bc>
10011686:	44a6      	add	lr, r4
    MD5STEP(F3, b, c, d, a, buffer[14] + 0xfde5380c, 23);
10011688:	eb0c 2171 	add.w	r1, ip, r1, ror #9
    MD5STEP(F3, a, b, c, d, buffer[1]  + 0xa4beea44,  4);
1001168c:	4496      	add	lr, r2
1001168e:	ea83 020c 	eor.w	r2, r3, ip
10011692:	404a      	eors	r2, r1
10011694:	4472      	add	r2, lr
    MD5STEP(F3, d, a, b, c, buffer[4]  + 0x4bdecfa9, 11);
10011696:	f8df e270 	ldr.w	lr, [pc, #624]	@ 10011908 <Transform+0x6c0>
    MD5STEP(F3, c, d, a, b, buffer[7]  + 0xf6bb4b60, 16);
    MD5STEP(F3, b, c, d, a, buffer[10] + 0xbebfbc70, 23);
    MD5STEP(F3, a, b, c, d, buffer[13] + 0x289b7ec6,  4);
    MD5STEP(F3, d, a, b, c, buffer[0]  + 0xeaa127fa, 11);
    MD5STEP(F3, c, d, a, b, buffer[3]  + 0xd4ef3085, 16);
1001169a:	9c02      	ldr	r4, [sp, #8]
    MD5STEP(F3, d, a, b, c, buffer[4]  + 0x4bdecfa9, 11);
1001169c:	44de      	add	lr, fp
    MD5STEP(F3, a, b, c, d, buffer[1]  + 0xa4beea44,  4);
1001169e:	eb01 7232 	add.w	r2, r1, r2, ror #28
    MD5STEP(F3, d, a, b, c, buffer[4]  + 0x4bdecfa9, 11);
100116a2:	4473      	add	r3, lr
100116a4:	ea8c 0e01 	eor.w	lr, ip, r1
100116a8:	ea8e 0e02 	eor.w	lr, lr, r2
100116ac:	449e      	add	lr, r3
    MD5STEP(F3, c, d, a, b, buffer[7]  + 0xf6bb4b60, 16);
100116ae:	4b97      	ldr	r3, [pc, #604]	@ (1001190c <Transform+0x6c4>)
    MD5STEP(F3, d, a, b, c, buffer[0]  + 0xeaa127fa, 11);
100116b0:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
    MD5STEP(F3, c, d, a, b, buffer[7]  + 0xf6bb4b60, 16);
100116b4:	4453      	add	r3, sl
    MD5STEP(F3, d, a, b, c, buffer[4]  + 0x4bdecfa9, 11);
100116b6:	eb02 5e7e 	add.w	lr, r2, lr, ror #21
    MD5STEP(F3, c, d, a, b, buffer[7]  + 0xf6bb4b60, 16);
100116ba:	449c      	add	ip, r3
100116bc:	ea81 0302 	eor.w	r3, r1, r2
100116c0:	ea83 030e 	eor.w	r3, r3, lr
100116c4:	4463      	add	r3, ip
    MD5STEP(F3, b, c, d, a, buffer[10] + 0xbebfbc70, 23);
100116c6:	f8df c248 	ldr.w	ip, [pc, #584]	@ 10011910 <Transform+0x6c8>
100116ca:	44ac      	add	ip, r5
    MD5STEP(F3, c, d, a, b, buffer[7]  + 0xf6bb4b60, 16);
100116cc:	eb0e 4333 	add.w	r3, lr, r3, ror #16
    MD5STEP(F3, b, c, d, a, buffer[10] + 0xbebfbc70, 23);
100116d0:	4461      	add	r1, ip
100116d2:	ea82 0c0e 	eor.w	ip, r2, lr
100116d6:	ea8c 0c03 	eor.w	ip, ip, r3
100116da:	448c      	add	ip, r1
    MD5STEP(F3, a, b, c, d, buffer[13] + 0x289b7ec6,  4);
100116dc:	498d      	ldr	r1, [pc, #564]	@ (10011914 <Transform+0x6cc>)
100116de:	4431      	add	r1, r6
    MD5STEP(F3, b, c, d, a, buffer[10] + 0xbebfbc70, 23);
100116e0:	eb03 2c7c 	add.w	ip, r3, ip, ror #9
    MD5STEP(F3, a, b, c, d, buffer[13] + 0x289b7ec6,  4);
100116e4:	4411      	add	r1, r2
100116e6:	ea8e 0203 	eor.w	r2, lr, r3
100116ea:	ea82 020c 	eor.w	r2, r2, ip
100116ee:	440a      	add	r2, r1
    MD5STEP(F3, d, a, b, c, buffer[0]  + 0xeaa127fa, 11);
100116f0:	4989      	ldr	r1, [pc, #548]	@ (10011918 <Transform+0x6d0>)
100116f2:	4459      	add	r1, fp
    MD5STEP(F3, a, b, c, d, buffer[13] + 0x289b7ec6,  4);
100116f4:	eb0c 7232 	add.w	r2, ip, r2, ror #28
    MD5STEP(F3, d, a, b, c, buffer[0]  + 0xeaa127fa, 11);
100116f8:	448e      	add	lr, r1
100116fa:	ea83 010c 	eor.w	r1, r3, ip
100116fe:	4051      	eors	r1, r2
10011700:	4471      	add	r1, lr
    MD5STEP(F3, c, d, a, b, buffer[3]  + 0xd4ef3085, 16);
10011702:	f8df e218 	ldr.w	lr, [pc, #536]	@ 1001191c <Transform+0x6d4>
10011706:	44a6      	add	lr, r4
    MD5STEP(F3, d, a, b, c, buffer[0]  + 0xeaa127fa, 11);
10011708:	eb02 5171 	add.w	r1, r2, r1, ror #21
    MD5STEP(F3, c, d, a, b, buffer[3]  + 0xd4ef3085, 16);
1001170c:	449e      	add	lr, r3
1001170e:	ea8c 0302 	eor.w	r3, ip, r2
10011712:	404b      	eors	r3, r1
    MD5STEP(F3, b, c, d, a, buffer[6]  + 0x04881d05, 23);
10011714:	9c05      	ldr	r4, [sp, #20]
    MD5STEP(F3, c, d, a, b, buffer[3]  + 0xd4ef3085, 16);
10011716:	4473      	add	r3, lr
    MD5STEP(F3, b, c, d, a, buffer[6]  + 0x04881d05, 23);
10011718:	f8df e204 	ldr.w	lr, [pc, #516]	@ 10011920 <Transform+0x6d8>
1001171c:	44a6      	add	lr, r4
    MD5STEP(F3, c, d, a, b, buffer[3]  + 0xd4ef3085, 16);
1001171e:	eb01 4333 	add.w	r3, r1, r3, ror #16
    MD5STEP(F3, b, c, d, a, buffer[6]  + 0x04881d05, 23);
10011722:	44e6      	add	lr, ip
10011724:	ea82 0c01 	eor.w	ip, r2, r1
10011728:	ea8c 0c03 	eor.w	ip, ip, r3
    MD5STEP(F3, a, b, c, d, buffer[9]  + 0xd9d4d039,  4);
1001172c:	9c07      	ldr	r4, [sp, #28]
    MD5STEP(F3, b, c, d, a, buffer[6]  + 0x04881d05, 23);
1001172e:	44f4      	add	ip, lr
    MD5STEP(F3, a, b, c, d, buffer[9]  + 0xd9d4d039,  4);
10011730:	f8df e1f0 	ldr.w	lr, [pc, #496]	@ 10011924 <Transform+0x6dc>
10011734:	44a6      	add	lr, r4
    MD5STEP(F3, b, c, d, a, buffer[6]  + 0x04881d05, 23);
10011736:	eb03 2c7c 	add.w	ip, r3, ip, ror #9
    MD5STEP(F3, a, b, c, d, buffer[9]  + 0xd9d4d039,  4);
1001173a:	4496      	add	lr, r2
1001173c:	ea81 0203 	eor.w	r2, r1, r3
10011740:	ea82 020c 	eor.w	r2, r2, ip
10011744:	4472      	add	r2, lr
    MD5STEP(F3, d, a, b, c, buffer[12] + 0xe6db99e5, 11);
10011746:	f8df e1e0 	ldr.w	lr, [pc, #480]	@ 10011928 <Transform+0x6e0>
    MD5STEP(F3, c, d, a, b, buffer[15] + 0x1fa27cf8, 16);
    MD5STEP(F3, b, c, d, a, buffer[2]  + 0xc4ac5665, 23);
1001174a:	9c01      	ldr	r4, [sp, #4]
    MD5STEP(F3, d, a, b, c, buffer[12] + 0xe6db99e5, 11);
1001174c:	44c6      	add	lr, r8
    MD5STEP(F3, a, b, c, d, buffer[9]  + 0xd9d4d039,  4);
1001174e:	eb0c 7232 	add.w	r2, ip, r2, ror #28
    MD5STEP(F3, d, a, b, c, buffer[12] + 0xe6db99e5, 11);
10011752:	448e      	add	lr, r1
10011754:	ea83 010c 	eor.w	r1, r3, ip
10011758:	4051      	eors	r1, r2
1001175a:	4471      	add	r1, lr
    MD5STEP(F3, c, d, a, b, buffer[15] + 0x1fa27cf8, 16);
1001175c:	f8df e1cc 	ldr.w	lr, [pc, #460]	@ 1001192c <Transform+0x6e4>
10011760:	44be      	add	lr, r7
    MD5STEP(F3, d, a, b, c, buffer[12] + 0xe6db99e5, 11);
10011762:	eb02 5171 	add.w	r1, r2, r1, ror #21
    MD5STEP(F3, c, d, a, b, buffer[15] + 0x1fa27cf8, 16);
10011766:	4473      	add	r3, lr
10011768:	ea8c 0e02 	eor.w	lr, ip, r2
1001176c:	ea8e 0e01 	eor.w	lr, lr, r1
10011770:	449e      	add	lr, r3
    MD5STEP(F3, b, c, d, a, buffer[2]  + 0xc4ac5665, 23);
10011772:	4b6f      	ldr	r3, [pc, #444]	@ (10011930 <Transform+0x6e8>)
10011774:	4423      	add	r3, r4
    MD5STEP(F3, c, d, a, b, buffer[15] + 0x1fa27cf8, 16);
10011776:	eb01 4e3e 	add.w	lr, r1, lr, ror #16
    MD5STEP(F3, b, c, d, a, buffer[2]  + 0xc4ac5665, 23);
1001177a:	449c      	add	ip, r3
1001177c:	ea82 0301 	eor.w	r3, r2, r1
10011780:	ea83 030e 	eor.w	r3, r3, lr
10011784:	4463      	add	r3, ip

    MD5STEP(F4, a, b, c, d, buffer[0]  + 0xf4292244,  6);
10011786:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 10011934 <Transform+0x6ec>
    MD5STEP(F4, c, d, a, b, buffer[14] + 0xab9423a7, 15);
    MD5STEP(F4, b, c, d, a, buffer[5]  + 0xfc93a039, 21);
    MD5STEP(F4, a, b, c, d, buffer[12] + 0x655b59c3,  6);
    MD5STEP(F4, d, a, b, c, buffer[3]  + 0x8f0ccc92, 10);
    MD5STEP(F4, c, d, a, b, buffer[10] + 0xffeff47d, 15);
    MD5STEP(F4, b, c, d, a, buffer[1]  + 0x85845dd1, 21);
1001178a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
    MD5STEP(F3, b, c, d, a, buffer[2]  + 0xc4ac5665, 23);
1001178c:	eb0e 2373 	add.w	r3, lr, r3, ror #9
    MD5STEP(F4, a, b, c, d, buffer[0]  + 0xf4292244,  6);
10011790:	44dc      	add	ip, fp
10011792:	4494      	add	ip, r2
10011794:	ea63 0201 	orn	r2, r3, r1
10011798:	ea82 020e 	eor.w	r2, r2, lr
1001179c:	4462      	add	r2, ip
    MD5STEP(F4, d, a, b, c, buffer[7]  + 0x432aff97, 10);
1001179e:	f8df c198 	ldr.w	ip, [pc, #408]	@ 10011938 <Transform+0x6f0>
    MD5STEP(F4, a, b, c, d, buffer[8]  + 0x6fa87e4f,  6);
    MD5STEP(F4, d, a, b, c, buffer[15] + 0xfe2ce6e0, 10);
    MD5STEP(F4, c, d, a, b, buffer[6]  + 0xa3014314, 15);
    MD5STEP(F4, b, c, d, a, buffer[13] + 0x4e0811a1, 21);
    MD5STEP(F4, a, b, c, d, buffer[4]  + 0xf7537e82,  6);
100117a2:	f8dd b00c 	ldr.w	fp, [sp, #12]
    MD5STEP(F4, a, b, c, d, buffer[0]  + 0xf4292244,  6);
100117a6:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    MD5STEP(F4, d, a, b, c, buffer[7]  + 0x432aff97, 10);
100117aa:	44d4      	add	ip, sl
100117ac:	448c      	add	ip, r1
100117ae:	ea62 010e 	orn	r1, r2, lr
100117b2:	4059      	eors	r1, r3
100117b4:	4461      	add	r1, ip
    MD5STEP(F4, c, d, a, b, buffer[14] + 0xab9423a7, 15);
100117b6:	f8df c184 	ldr.w	ip, [pc, #388]	@ 1001193c <Transform+0x6f4>
    MD5STEP(F4, d, a, b, c, buffer[7]  + 0x432aff97, 10);
100117ba:	eb02 51b1 	add.w	r1, r2, r1, ror #22
    MD5STEP(F4, c, d, a, b, buffer[14] + 0xab9423a7, 15);
100117be:	44cc      	add	ip, r9
100117c0:	44f4      	add	ip, lr
100117c2:	ea61 0e03 	orn	lr, r1, r3
100117c6:	ea8e 0e02 	eor.w	lr, lr, r2
    MD5STEP(F4, b, c, d, a, buffer[5]  + 0xfc93a039, 21);
100117ca:	f8dd 9010 	ldr.w	r9, [sp, #16]
    MD5STEP(F4, c, d, a, b, buffer[14] + 0xab9423a7, 15);
100117ce:	44f4      	add	ip, lr
    MD5STEP(F4, b, c, d, a, buffer[5]  + 0xfc93a039, 21);
100117d0:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 10011940 <Transform+0x6f8>
    MD5STEP(F4, c, d, a, b, buffer[14] + 0xab9423a7, 15);
100117d4:	eb01 4c7c 	add.w	ip, r1, ip, ror #17
    MD5STEP(F4, b, c, d, a, buffer[5]  + 0xfc93a039, 21);
100117d8:	44ce      	add	lr, r9
100117da:	449e      	add	lr, r3
100117dc:	ea6c 0302 	orn	r3, ip, r2
100117e0:	404b      	eors	r3, r1
100117e2:	4473      	add	r3, lr
    MD5STEP(F4, a, b, c, d, buffer[12] + 0x655b59c3,  6);
100117e4:	f8df e15c 	ldr.w	lr, [pc, #348]	@ 10011944 <Transform+0x6fc>
    MD5STEP(F4, b, c, d, a, buffer[5]  + 0xfc93a039, 21);
100117e8:	eb0c 23f3 	add.w	r3, ip, r3, ror #11
    MD5STEP(F4, a, b, c, d, buffer[12] + 0x655b59c3,  6);
100117ec:	44c6      	add	lr, r8
100117ee:	4496      	add	lr, r2
100117f0:	ea63 0201 	orn	r2, r3, r1
100117f4:	ea82 020c 	eor.w	r2, r2, ip
    MD5STEP(F4, d, a, b, c, buffer[3]  + 0x8f0ccc92, 10);
100117f8:	f8dd 8008 	ldr.w	r8, [sp, #8]
    MD5STEP(F4, a, b, c, d, buffer[12] + 0x655b59c3,  6);
100117fc:	4472      	add	r2, lr
    MD5STEP(F4, c, d, a, b, buffer[10] + 0xffeff47d, 15);
100117fe:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
    MD5STEP(F4, d, a, b, c, buffer[3]  + 0x8f0ccc92, 10);
10011802:	f8df e144 	ldr.w	lr, [pc, #324]	@ 10011948 <Transform+0x700>
    MD5STEP(F4, a, b, c, d, buffer[12] + 0x655b59c3,  6);
10011806:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    MD5STEP(F4, c, d, a, b, buffer[10] + 0xffeff47d, 15);
1001180a:	f6a5 3583 	subw	r5, r5, #2947	@ 0xb83
1001180e:	4465      	add	r5, ip
    MD5STEP(F4, d, a, b, c, buffer[3]  + 0x8f0ccc92, 10);
10011810:	44c6      	add	lr, r8
10011812:	ea62 0c0c 	orn	ip, r2, ip
10011816:	448e      	add	lr, r1
10011818:	ea8c 0c03 	eor.w	ip, ip, r3
1001181c:	44f4      	add	ip, lr
1001181e:	eb02 5cbc 	add.w	ip, r2, ip, ror #22
    MD5STEP(F4, c, d, a, b, buffer[10] + 0xffeff47d, 15);
10011822:	ea6c 0103 	orn	r1, ip, r3
10011826:	4051      	eors	r1, r2
10011828:	4429      	add	r1, r5
    MD5STEP(F4, b, c, d, a, buffer[1]  + 0x85845dd1, 21);
1001182a:	4d48      	ldr	r5, [pc, #288]	@ (1001194c <Transform+0x704>)
    MD5STEP(F4, a, b, c, d, buffer[8]  + 0x6fa87e4f,  6);
1001182c:	f8dd e018 	ldr.w	lr, [sp, #24]
    MD5STEP(F4, c, d, a, b, buffer[6]  + 0xa3014314, 15);
10011830:	f8dd 8014 	ldr.w	r8, [sp, #20]
    MD5STEP(F4, c, d, a, b, buffer[10] + 0xffeff47d, 15);
10011834:	eb0c 4171 	add.w	r1, ip, r1, ror #17
    MD5STEP(F4, b, c, d, a, buffer[1]  + 0x85845dd1, 21);
10011838:	4425      	add	r5, r4
1001183a:	441d      	add	r5, r3
1001183c:	ea61 0302 	orn	r3, r1, r2
10011840:	ea83 030c 	eor.w	r3, r3, ip
10011844:	442b      	add	r3, r5
    MD5STEP(F4, a, b, c, d, buffer[8]  + 0x6fa87e4f,  6);
10011846:	4d42      	ldr	r5, [pc, #264]	@ (10011950 <Transform+0x708>)
    MD5STEP(F4, d, a, b, c, buffer[11] + 0xbd3af235, 10);
    MD5STEP(F4, c, d, a, b, buffer[2]  + 0x2ad7d2bb, 15);
10011848:	9c01      	ldr	r4, [sp, #4]
    MD5STEP(F4, b, c, d, a, buffer[1]  + 0x85845dd1, 21);
1001184a:	eb01 23f3 	add.w	r3, r1, r3, ror #11
    MD5STEP(F4, a, b, c, d, buffer[8]  + 0x6fa87e4f,  6);
1001184e:	4475      	add	r5, lr
10011850:	4415      	add	r5, r2
10011852:	ea63 020c 	orn	r2, r3, ip
10011856:	404a      	eors	r2, r1
10011858:	442a      	add	r2, r5
    MD5STEP(F4, d, a, b, c, buffer[15] + 0xfe2ce6e0, 10);
1001185a:	4d3e      	ldr	r5, [pc, #248]	@ (10011954 <Transform+0x70c>)
    MD5STEP(F4, a, b, c, d, buffer[8]  + 0x6fa87e4f,  6);
1001185c:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    MD5STEP(F4, d, a, b, c, buffer[15] + 0xfe2ce6e0, 10);
10011860:	443d      	add	r5, r7
10011862:	ea62 0701 	orn	r7, r2, r1
10011866:	405f      	eors	r7, r3
10011868:	4465      	add	r5, ip
1001186a:	443d      	add	r5, r7
    MD5STEP(F4, c, d, a, b, buffer[6]  + 0xa3014314, 15);
1001186c:	4f3a      	ldr	r7, [pc, #232]	@ (10011958 <Transform+0x710>)
    MD5STEP(F4, d, a, b, c, buffer[15] + 0xfe2ce6e0, 10);
1001186e:	eb02 55b5 	add.w	r5, r2, r5, ror #22
    MD5STEP(F4, c, d, a, b, buffer[6]  + 0xa3014314, 15);
10011872:	4447      	add	r7, r8
10011874:	440f      	add	r7, r1
10011876:	ea65 0103 	orn	r1, r5, r3
1001187a:	4051      	eors	r1, r2
1001187c:	4439      	add	r1, r7
    MD5STEP(F4, b, c, d, a, buffer[13] + 0x4e0811a1, 21);
1001187e:	4f37      	ldr	r7, [pc, #220]	@ (1001195c <Transform+0x714>)
    MD5STEP(F4, c, d, a, b, buffer[6]  + 0xa3014314, 15);
10011880:	eb05 4171 	add.w	r1, r5, r1, ror #17
    MD5STEP(F4, b, c, d, a, buffer[13] + 0x4e0811a1, 21);
10011884:	4437      	add	r7, r6
10011886:	ea61 0602 	orn	r6, r1, r2
1001188a:	441f      	add	r7, r3
1001188c:	406e      	eors	r6, r5
    MD5STEP(F4, a, b, c, d, buffer[4]  + 0xf7537e82,  6);
1001188e:	4b34      	ldr	r3, [pc, #208]	@ (10011960 <Transform+0x718>)
    MD5STEP(F4, b, c, d, a, buffer[13] + 0x4e0811a1, 21);
10011890:	443e      	add	r6, r7
10011892:	eb01 26f6 	add.w	r6, r1, r6, ror #11
    MD5STEP(F4, a, b, c, d, buffer[4]  + 0xf7537e82,  6);
10011896:	445b      	add	r3, fp
10011898:	441a      	add	r2, r3
1001189a:	ea66 0305 	orn	r3, r6, r5
1001189e:	404b      	eors	r3, r1
100118a0:	4413      	add	r3, r2
    MD5STEP(F4, b, c, d, a, buffer[9]  + 0xeb86d391, 21);

    /* Add the working vars back into digest state[]  */
    md5->digest[0] += a;
100118a2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
    MD5STEP(F4, d, a, b, c, buffer[11] + 0xbd3af235, 10);
100118a4:	f8dd b020 	ldr.w	fp, [sp, #32]
    MD5STEP(F4, a, b, c, d, buffer[4]  + 0xf7537e82,  6);
100118a8:	eb06 63b3 	add.w	r3, r6, r3, ror #26
    md5->digest[0] += a;
100118ac:	441a      	add	r2, r3
100118ae:	64c2      	str	r2, [r0, #76]	@ 0x4c
    MD5STEP(F4, d, a, b, c, buffer[11] + 0xbd3af235, 10);
100118b0:	4a2c      	ldr	r2, [pc, #176]	@ (10011964 <Transform+0x71c>)
100118b2:	445a      	add	r2, fp
100118b4:	4415      	add	r5, r2
100118b6:	ea63 0201 	orn	r2, r3, r1
100118ba:	4072      	eors	r2, r6
100118bc:	442a      	add	r2, r5
    md5->digest[1] += b;
    md5->digest[2] += c;
    md5->digest[3] += d;
100118be:	6d85      	ldr	r5, [r0, #88]	@ 0x58
    MD5STEP(F4, d, a, b, c, buffer[11] + 0xbd3af235, 10);
100118c0:	eb03 52b2 	add.w	r2, r3, r2, ror #22
    md5->digest[3] += d;
100118c4:	4415      	add	r5, r2
100118c6:	6585      	str	r5, [r0, #88]	@ 0x58
    MD5STEP(F4, c, d, a, b, buffer[2]  + 0x2ad7d2bb, 15);
100118c8:	4d27      	ldr	r5, [pc, #156]	@ (10011968 <Transform+0x720>)
100118ca:	4425      	add	r5, r4
100118cc:	440d      	add	r5, r1
100118ce:	ea62 0106 	orn	r1, r2, r6
100118d2:	4059      	eors	r1, r3
100118d4:	4429      	add	r1, r5
100118d6:	eb02 4171 	add.w	r1, r2, r1, ror #17
    MD5STEP(F4, b, c, d, a, buffer[9]  + 0xeb86d391, 21);
100118da:	ea61 0303 	orn	r3, r1, r3
    md5->digest[1] += b;
100118de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
    MD5STEP(F4, b, c, d, a, buffer[9]  + 0xeb86d391, 21);
100118e0:	4053      	eors	r3, r2
    md5->digest[2] += c;
100118e2:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    MD5STEP(F4, b, c, d, a, buffer[9]  + 0xeb86d391, 21);
100118e4:	f8dd c01c 	ldr.w	ip, [sp, #28]
    md5->digest[1] += b;
100118e8:	440c      	add	r4, r1
    md5->digest[2] += c;
100118ea:	4411      	add	r1, r2
    MD5STEP(F4, b, c, d, a, buffer[9]  + 0xeb86d391, 21);
100118ec:	4a1f      	ldr	r2, [pc, #124]	@ (1001196c <Transform+0x724>)
    md5->digest[2] += c;
100118ee:	6541      	str	r1, [r0, #84]	@ 0x54
    MD5STEP(F4, b, c, d, a, buffer[9]  + 0xeb86d391, 21);
100118f0:	4462      	add	r2, ip
100118f2:	4432      	add	r2, r6
100118f4:	4413      	add	r3, r2
    md5->digest[1] += b;
100118f6:	eb04 24f3 	add.w	r4, r4, r3, ror #11
100118fa:	6504      	str	r4, [r0, #80]	@ 0x50

    return 0;
}
100118fc:	2000      	movs	r0, #0
100118fe:	b00d      	add	sp, #52	@ 0x34
10011900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10011904:	a4beea44 	.word	0xa4beea44
10011908:	4bdecfa9 	.word	0x4bdecfa9
1001190c:	f6bb4b60 	.word	0xf6bb4b60
10011910:	bebfbc70 	.word	0xbebfbc70
10011914:	289b7ec6 	.word	0x289b7ec6
10011918:	eaa127fa 	.word	0xeaa127fa
1001191c:	d4ef3085 	.word	0xd4ef3085
10011920:	04881d05 	.word	0x04881d05
10011924:	d9d4d039 	.word	0xd9d4d039
10011928:	e6db99e5 	.word	0xe6db99e5
1001192c:	1fa27cf8 	.word	0x1fa27cf8
10011930:	c4ac5665 	.word	0xc4ac5665
10011934:	f4292244 	.word	0xf4292244
10011938:	432aff97 	.word	0x432aff97
1001193c:	ab9423a7 	.word	0xab9423a7
10011940:	fc93a039 	.word	0xfc93a039
10011944:	655b59c3 	.word	0x655b59c3
10011948:	8f0ccc92 	.word	0x8f0ccc92
1001194c:	85845dd1 	.word	0x85845dd1
10011950:	6fa87e4f 	.word	0x6fa87e4f
10011954:	fe2ce6e0 	.word	0xfe2ce6e0
10011958:	a3014314 	.word	0xa3014314
1001195c:	4e0811a1 	.word	0x4e0811a1
10011960:	f7537e82 	.word	0xf7537e82
10011964:	bd3af235 	.word	0xbd3af235
10011968:	2ad7d2bb 	.word	0x2ad7d2bb
1001196c:	eb86d391 	.word	0xeb86d391

10011970 <wc_Md5Update>:
    return ret;
}

/* do block size increments/updates */
int wc_Md5Update(wc_Md5* md5, const byte* data, word32 len)
{
10011970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret = 0;
    word32 blocksLen;
    byte* local;

    if (md5 == NULL || (data == NULL && len > 0)) {
10011974:	2800      	cmp	r0, #0
10011976:	d074      	beq.n	10011a62 <wc_Md5Update+0xf2>
10011978:	460c      	mov	r4, r1
1001197a:	4690      	mov	r8, r2
1001197c:	4605      	mov	r5, r0
1001197e:	2900      	cmp	r1, #0
10011980:	d04d      	beq.n	10011a1e <wc_Md5Update+0xae>
#endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    /* check that internal buffLen is valid */
    if (md5->buffLen >= WC_MD5_BLOCK_SIZE)
10011982:	6800      	ldr	r0, [r0, #0]
10011984:	283f      	cmp	r0, #63	@ 0x3f
10011986:	d86f      	bhi.n	10011a68 <wc_Md5Update+0xf8>
    if ((md5->loLen += len) < tmp) {
10011988:	686b      	ldr	r3, [r5, #4]
1001198a:	18d3      	adds	r3, r2, r3
1001198c:	606b      	str	r3, [r5, #4]
1001198e:	d22c      	bcs.n	100119ea <wc_Md5Update+0x7a>
    }

    /* add length for final */
    AddLength(md5, len);

    local = (byte*)md5->buffer;
10011990:	f105 060c 	add.w	r6, r5, #12

    /* process any remainder from previous operation */
    if (md5->buffLen > 0) {
10011994:	bb80      	cbnz	r0, 100119f8 <wc_Md5Update+0x88>
        XTRANSFORM_LEN(md5, data, blocksLen);
        data += blocksLen;
        len  -= blocksLen;
    }
#else
    while (len >= WC_MD5_BLOCK_SIZE) {
10011996:	f1b8 0f3f 	cmp.w	r8, #63	@ 0x3f
1001199a:	d955      	bls.n	10011a48 <wc_Md5Update+0xd8>
1001199c:	f1a8 0740 	sub.w	r7, r8, #64	@ 0x40
100119a0:	f027 073f 	bic.w	r7, r7, #63	@ 0x3f
100119a4:	3740      	adds	r7, #64	@ 0x40
100119a6:	4427      	add	r7, r4
            local32 = (word32*)data;
        }
        else
    #endif
        {
            XMEMCPY(local32, data, WC_MD5_BLOCK_SIZE);
100119a8:	4633      	mov	r3, r6
100119aa:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
100119ae:	f8d4 c000 	ldr.w	ip, [r4]
100119b2:	6860      	ldr	r0, [r4, #4]
100119b4:	68a1      	ldr	r1, [r4, #8]
100119b6:	68e2      	ldr	r2, [r4, #12]
100119b8:	60da      	str	r2, [r3, #12]
100119ba:	3410      	adds	r4, #16
100119bc:	4574      	cmp	r4, lr
100119be:	f8c3 c000 	str.w	ip, [r3]
100119c2:	6058      	str	r0, [r3, #4]
100119c4:	6099      	str	r1, [r3, #8]
100119c6:	f103 0310 	add.w	r3, r3, #16
100119ca:	d1f0      	bne.n	100119ae <wc_Md5Update+0x3e>

    #if defined(BIG_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
        ByteReverseWords(local32, local32, WC_MD5_BLOCK_SIZE);
    #endif

        ret = XTRANSFORM(md5, (const byte*)local32);
100119cc:	4631      	mov	r1, r6
100119ce:	4628      	mov	r0, r5
100119d0:	f7ff fc3a 	bl	10011248 <Transform>
    while (len >= WC_MD5_BLOCK_SIZE) {
100119d4:	42bc      	cmp	r4, r7
        ret = XTRANSFORM(md5, (const byte*)local32);
100119d6:	4681      	mov	r9, r0
    while (len >= WC_MD5_BLOCK_SIZE) {
100119d8:	d1e6      	bne.n	100119a8 <wc_Md5Update+0x38>
        len  -= WC_MD5_BLOCK_SIZE;
100119da:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
    }
#endif /* XTRANSFORM_LEN */

    /* save remainder */
    if (len > 0) {
100119de:	f1b8 0f00 	cmp.w	r8, #0
100119e2:	d127      	bne.n	10011a34 <wc_Md5Update+0xc4>
        XMEMCPY(local, data, len);
        md5->buffLen = len;
    }

    return ret;
}
100119e4:	4648      	mov	r0, r9
100119e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        md5->hiLen++;                       /* carry low to high */
100119ea:	68ab      	ldr	r3, [r5, #8]
100119ec:	3301      	adds	r3, #1
100119ee:	60ab      	str	r3, [r5, #8]
    local = (byte*)md5->buffer;
100119f0:	f105 060c 	add.w	r6, r5, #12
    if (md5->buffLen > 0) {
100119f4:	2800      	cmp	r0, #0
100119f6:	d0ce      	beq.n	10011996 <wc_Md5Update+0x26>
        blocksLen = min(len, WC_MD5_BLOCK_SIZE - md5->buffLen);
100119f8:	f1c0 0740 	rsb	r7, r0, #64	@ 0x40
        #define min min
    #endif
    /* returns the smaller of a and b */
    WC_MISC_STATIC WC_INLINE word32 min(word32 a, word32 b)
    {
        return a > b ? b : a;
100119fc:	4547      	cmp	r7, r8
100119fe:	bf28      	it	cs
10011a00:	4647      	movcs	r7, r8
        XMEMCPY(&local[md5->buffLen], data, blocksLen);
10011a02:	4430      	add	r0, r6
10011a04:	463a      	mov	r2, r7
10011a06:	4621      	mov	r1, r4
10011a08:	f008 f912 	bl	10019c30 <memcpy>
        md5->buffLen += blocksLen;
10011a0c:	682b      	ldr	r3, [r5, #0]
10011a0e:	443b      	add	r3, r7
        if (md5->buffLen == WC_MD5_BLOCK_SIZE) {
10011a10:	2b40      	cmp	r3, #64	@ 0x40
        md5->buffLen += blocksLen;
10011a12:	602b      	str	r3, [r5, #0]
        if (md5->buffLen == WC_MD5_BLOCK_SIZE) {
10011a14:	d01c      	beq.n	10011a50 <wc_Md5Update+0xe0>
        data         += blocksLen;
10011a16:	443c      	add	r4, r7
        len          -= blocksLen;
10011a18:	eba8 0807 	sub.w	r8, r8, r7
10011a1c:	e7bb      	b.n	10011996 <wc_Md5Update+0x26>
    if (md5 == NULL || (data == NULL && len > 0)) {
10011a1e:	bb02      	cbnz	r2, 10011a62 <wc_Md5Update+0xf2>
    if (md5->buffLen >= WC_MD5_BLOCK_SIZE)
10011a20:	6803      	ldr	r3, [r0, #0]
        return BUFFER_E;
10011a22:	2b40      	cmp	r3, #64	@ 0x40
10011a24:	bf34      	ite	cc
10011a26:	f04f 0900 	movcc.w	r9, #0
10011a2a:	f06f 0983 	mvncs.w	r9, #131	@ 0x83
}
10011a2e:	4648      	mov	r0, r9
10011a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        XMEMCPY(local, data, len);
10011a34:	4639      	mov	r1, r7
10011a36:	4630      	mov	r0, r6
10011a38:	4642      	mov	r2, r8
10011a3a:	f008 f8f9 	bl	10019c30 <memcpy>
        md5->buffLen = len;
10011a3e:	f8c5 8000 	str.w	r8, [r5]
}
10011a42:	4648      	mov	r0, r9
10011a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while (len >= WC_MD5_BLOCK_SIZE) {
10011a48:	4627      	mov	r7, r4
10011a4a:	f04f 0900 	mov.w	r9, #0
10011a4e:	e7c6      	b.n	100119de <wc_Md5Update+0x6e>
            ret = XTRANSFORM(md5, (const byte*)local);
10011a50:	4631      	mov	r1, r6
10011a52:	4628      	mov	r0, r5
10011a54:	f7ff fbf8 	bl	10011248 <Transform>
            if (ret != 0)
10011a58:	4681      	mov	r9, r0
10011a5a:	2800      	cmp	r0, #0
10011a5c:	d1c2      	bne.n	100119e4 <wc_Md5Update+0x74>
            md5->buffLen = 0;
10011a5e:	6028      	str	r0, [r5, #0]
10011a60:	e7d9      	b.n	10011a16 <wc_Md5Update+0xa6>
        return BAD_FUNC_ARG;
10011a62:	f06f 09ac 	mvn.w	r9, #172	@ 0xac
10011a66:	e7bd      	b.n	100119e4 <wc_Md5Update+0x74>
        return BUFFER_E;
10011a68:	f06f 0983 	mvn.w	r9, #131	@ 0x83
10011a6c:	e7ba      	b.n	100119e4 <wc_Md5Update+0x74>
10011a6e:	bf00      	nop

10011a70 <wc_Md5Final>:

int wc_Md5Final(wc_Md5* md5, byte* hash)
{
    byte* local;

    if (md5 == NULL || hash == NULL) {
10011a70:	2800      	cmp	r0, #0
10011a72:	d04a      	beq.n	10011b0a <wc_Md5Final+0x9a>
{
10011a74:	b570      	push	{r4, r5, r6, lr}
10011a76:	460d      	mov	r5, r1
    if (md5 == NULL || hash == NULL) {
10011a78:	2900      	cmp	r1, #0
10011a7a:	d043      	beq.n	10011b04 <wc_Md5Final+0x94>
        return IntelQaSymMd5(&md5->asyncDev, hash, NULL, WC_MD5_DIGEST_SIZE);
#endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    local = (byte*)md5->buffer; /* buffer allocated in word32 size */
10011a7c:	4606      	mov	r6, r0
10011a7e:	4604      	mov	r4, r0

    /* ensure we have a valid buffer length; (-1 to append a byte to length) */
    if (md5->buffLen > WC_MD5_BLOCK_SIZE - 1) {
10011a80:	f856 3b0c 	ldr.w	r3, [r6], #12
10011a84:	2b3f      	cmp	r3, #63	@ 0x3f
10011a86:	d83a      	bhi.n	10011afe <wc_Md5Final+0x8e>
        return BUFFER_E;
    }

    local[md5->buffLen++] = 0x80;  /* add 1 */
10011a88:	1c5a      	adds	r2, r3, #1
10011a8a:	6002      	str	r2, [r0, #0]
10011a8c:	2280      	movs	r2, #128	@ 0x80
10011a8e:	54f2      	strb	r2, [r6, r3]

    /* pad with zeros */
    if (md5->buffLen > WC_MD5_PAD_SIZE) {
10011a90:	6803      	ldr	r3, [r0, #0]
10011a92:	2b38      	cmp	r3, #56	@ 0x38
10011a94:	d826      	bhi.n	10011ae4 <wc_Md5Final+0x74>
        XMEMSET(&local[md5->buffLen], 0, WC_MD5_BLOCK_SIZE - md5->buffLen);
10011a96:	18f0      	adds	r0, r6, r3
        ByteReverseWords(md5->buffer, md5->buffer, WC_MD5_BLOCK_SIZE);
#endif
        XTRANSFORM(md5, local);
        md5->buffLen = 0;
    }
    XMEMSET(&local[md5->buffLen], 0, WC_MD5_PAD_SIZE - md5->buffLen);
10011a98:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
10011a9c:	2100      	movs	r1, #0
10011a9e:	f007 fd8d 	bl	100195bc <memset>
    ByteReverseWords(md5->buffer, md5->buffer, WC_MD5_BLOCK_SIZE);
#endif

    /* put lengths in bits */
    md5->hiLen = (md5->loLen >> (8 * sizeof(md5->loLen) - 3)) +
                 (md5->hiLen << 3);
10011aa2:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
    md5->hiLen = (md5->loLen >> (8 * sizeof(md5->loLen) - 3)) +
10011aa6:	0f5a      	lsrs	r2, r3, #29
10011aa8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    md5->loLen = md5->loLen << 3;
10011aac:	00db      	lsls	r3, r3, #3
    /* ! length ordering dependent on digest endian type ! */
    XMEMCPY(&local[WC_MD5_PAD_SIZE], &md5->loLen, sizeof(word32));
    XMEMCPY(&local[WC_MD5_PAD_SIZE + sizeof(word32)], &md5->hiLen, sizeof(word32));

    /* final transform and result to hash */
    XTRANSFORM(md5, local);
10011aae:	4631      	mov	r1, r6
    XMEMCPY(&local[WC_MD5_PAD_SIZE], &md5->loLen, sizeof(word32));
10011ab0:	6463      	str	r3, [r4, #68]	@ 0x44
    XMEMCPY(&local[WC_MD5_PAD_SIZE + sizeof(word32)], &md5->hiLen, sizeof(word32));
10011ab2:	64a2      	str	r2, [r4, #72]	@ 0x48
    XTRANSFORM(md5, local);
10011ab4:	4620      	mov	r0, r4
10011ab6:	f7ff fbc7 	bl	10011248 <Transform>
#ifdef BIG_ENDIAN_ORDER
    ByteReverseWords(md5->digest, md5->digest, WC_MD5_DIGEST_SIZE);
#endif
    XMEMCPY(hash, md5->digest, WC_MD5_DIGEST_SIZE);
10011aba:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
10011abc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
10011abe:	6d22      	ldr	r2, [r4, #80]	@ 0x50
10011ac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10011ac2:	6029      	str	r1, [r5, #0]
10011ac4:	60ab      	str	r3, [r5, #8]
    md5->digest[0] = 0x67452301L;
10011ac6:	4912      	ldr	r1, [pc, #72]	@ (10011b10 <wc_Md5Final+0xa0>)
    md5->digest[1] = 0xefcdab89L;
10011ac8:	4b12      	ldr	r3, [pc, #72]	@ (10011b14 <wc_Md5Final+0xa4>)
    XMEMCPY(hash, md5->digest, WC_MD5_DIGEST_SIZE);
10011aca:	60e8      	str	r0, [r5, #12]
10011acc:	606a      	str	r2, [r5, #4]
    md5->digest[1] = 0xefcdab89L;
10011ace:	e9c4 1313 	strd	r1, r3, [r4, #76]	@ 0x4c
    md5->digest[2] = 0x98badcfeL;
10011ad2:	4a11      	ldr	r2, [pc, #68]	@ (10011b18 <wc_Md5Final+0xa8>)
    md5->digest[3] = 0x10325476L;
10011ad4:	4b11      	ldr	r3, [pc, #68]	@ (10011b1c <wc_Md5Final+0xac>)
    md5->buffLen = 0;
10011ad6:	2000      	movs	r0, #0
    md5->digest[3] = 0x10325476L;
10011ad8:	e9c4 2315 	strd	r2, r3, [r4, #84]	@ 0x54
    md5->buffLen = 0;
10011adc:	6020      	str	r0, [r4, #0]
10011ade:	6060      	str	r0, [r4, #4]
    md5->hiLen   = 0;
10011ae0:	60a0      	str	r0, [r4, #8]

    return _InitMd5(md5); /* reset state */
}
10011ae2:	bd70      	pop	{r4, r5, r6, pc}
        XMEMSET(&local[md5->buffLen], 0, WC_MD5_BLOCK_SIZE - md5->buffLen);
10011ae4:	f1c3 0240 	rsb	r2, r3, #64	@ 0x40
10011ae8:	18f0      	adds	r0, r6, r3
10011aea:	2100      	movs	r1, #0
10011aec:	f007 fd66 	bl	100195bc <memset>
        XTRANSFORM(md5, local);
10011af0:	4631      	mov	r1, r6
10011af2:	4620      	mov	r0, r4
10011af4:	f7ff fba8 	bl	10011248 <Transform>
10011af8:	4630      	mov	r0, r6
10011afa:	2238      	movs	r2, #56	@ 0x38
10011afc:	e7ce      	b.n	10011a9c <wc_Md5Final+0x2c>
        return BUFFER_E;
10011afe:	f06f 0083 	mvn.w	r0, #131	@ 0x83
}
10011b02:	bd70      	pop	{r4, r5, r6, pc}
        return BAD_FUNC_ARG;
10011b04:	f06f 00ac 	mvn.w	r0, #172	@ 0xac
}
10011b08:	bd70      	pop	{r4, r5, r6, pc}
        return BAD_FUNC_ARG;
10011b0a:	f06f 00ac 	mvn.w	r0, #172	@ 0xac
}
10011b0e:	4770      	bx	lr
10011b10:	67452301 	.word	0x67452301
10011b14:	efcdab89 	.word	0xefcdab89
10011b18:	98badcfe 	.word	0x98badcfe
10011b1c:	10325476 	.word	0x10325476

10011b20 <wc_InitMd5>:
#endif /* !HAVE_MD5_CUST_API */


int wc_InitMd5(wc_Md5* md5)
{
    if (md5 == NULL) {
10011b20:	b180      	cbz	r0, 10011b44 <wc_InitMd5+0x24>
{
10011b22:	b410      	push	{r4}
    md5->digest[1] = 0xefcdab89L;
10011b24:	4a09      	ldr	r2, [pc, #36]	@ (10011b4c <wc_InitMd5+0x2c>)
    md5->digest[0] = 0x67452301L;
10011b26:	4c0a      	ldr	r4, [pc, #40]	@ (10011b50 <wc_InitMd5+0x30>)
    md5->digest[2] = 0x98badcfeL;
10011b28:	490a      	ldr	r1, [pc, #40]	@ (10011b54 <wc_InitMd5+0x34>)
    md5->digest[1] = 0xefcdab89L;
10011b2a:	e9c0 4213 	strd	r4, r2, [r0, #76]	@ 0x4c
    md5->digest[3] = 0x10325476L;
10011b2e:	4a0a      	ldr	r2, [pc, #40]	@ (10011b58 <wc_InitMd5+0x38>)
        return BAD_FUNC_ARG;
    }
    return wc_InitMd5_ex(md5, NULL, INVALID_DEVID);
}
10011b30:	bc10      	pop	{r4}
    md5->heap = heap;
10011b32:	2300      	movs	r3, #0
    md5->digest[3] = 0x10325476L;
10011b34:	e9c0 1215 	strd	r1, r2, [r0, #84]	@ 0x54
    md5->heap = heap;
10011b38:	65c3      	str	r3, [r0, #92]	@ 0x5c
    md5->buffLen = 0;
10011b3a:	6003      	str	r3, [r0, #0]
10011b3c:	6043      	str	r3, [r0, #4]
    md5->hiLen   = 0;
10011b3e:	6083      	str	r3, [r0, #8]
    return wc_InitMd5_ex(md5, NULL, INVALID_DEVID);
10011b40:	4618      	mov	r0, r3
}
10011b42:	4770      	bx	lr
        return BAD_FUNC_ARG;
10011b44:	f06f 00ac 	mvn.w	r0, #172	@ 0xac
}
10011b48:	4770      	bx	lr
10011b4a:	bf00      	nop
10011b4c:	efcdab89 	.word	0xefcdab89
10011b50:	67452301 	.word	0x67452301
10011b54:	98badcfe 	.word	0x98badcfe
10011b58:	10325476 	.word	0x10325476

10011b5c <wc_Md5Free>:
#endif /* WOLFSSL_ASYNC_CRYPT */

#ifdef WOLFSSL_PIC32MZ_HASH
    wc_Md5Pic32Free(md5);
#endif
}
10011b5c:	4770      	bx	lr
10011b5e:	bf00      	nop

10011b60 <wolfSSL_Malloc>:
#ifdef WOLFSSL_CHECK_MEM_ZERO
    /* Space for requested size. */
    size += MEM_ALIGN;
#endif

    if (malloc_function) {
10011b60:	4b02      	ldr	r3, [pc, #8]	@ (10011b6c <wolfSSL_Malloc+0xc>)
10011b62:	681b      	ldr	r3, [r3, #0]
10011b64:	b103      	cbz	r3, 10011b68 <wolfSSL_Malloc+0x8>
    #ifdef WOLFSSL_DEBUG_MEMORY
        res = malloc_function(size, func, line);
    #else
        res = malloc_function(size);
10011b66:	4718      	bx	r3
            WOLFSSL_MSG("Malloc too big!");
            return NULL;
        }
        #endif

        res = malloc(size);
10011b68:	f003 b806 	b.w	10014b78 <malloc>
10011b6c:	20000cac 	.word	0x20000cac

10011b70 <wolfSSL_Free>:
#endif
#ifdef WOLFSSL_MEM_FAIL_COUNT
    wc_MemFailCount_FreeMem();
#endif

    if (free_function) {
10011b70:	4b02      	ldr	r3, [pc, #8]	@ (10011b7c <wolfSSL_Free+0xc>)
10011b72:	681b      	ldr	r3, [r3, #0]
10011b74:	b103      	cbz	r3, 10011b78 <wolfSSL_Free+0x8>
    #ifdef WOLFSSL_DEBUG_MEMORY
        free_function(ptr, func, line);
    #else
        free_function(ptr);
10011b76:	4718      	bx	r3
    #endif
    }
    else {
    #ifndef WOLFSSL_NO_MALLOC
        free(ptr);
10011b78:	f003 b806 	b.w	10014b88 <free>
10011b7c:	20000ca8 	.word	0x20000ca8

10011b80 <Hash_df.constprop.0>:

static int wc_RNG_HealthTestLocal(int reseed);

/* Hash Derivation Function */
/* Returns: DRBG_SUCCESS or DRBG_FAILURE */
static int Hash_df(DRBG_internal* drbg, byte* out, word32 outSz, byte type,
10011b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10011b84:	b0a8      	sub	sp, #160	@ 0xa0
10011b86:	9f30      	ldr	r7, [sp, #192]	@ 0xc0
10011b88:	f88d 2007 	strb.w	r2, [sp, #7]
    byte* digest;
#else
    byte digest[WC_SHA256_DIGEST_SIZE];
#endif

    if (drbg == NULL) {
10011b8c:	2800      	cmp	r0, #0
10011b8e:	f000 808d 	beq.w	10011cac <Hash_df.constprop.0+0x12c>
10011b92:	469a      	mov	sl, r3
    if (digest == NULL)
        return DRBG_FAILURE;
#endif

#ifdef LITTLE_ENDIAN_ORDER
    bits = ByteReverseWord32(bits);
10011b94:	4b47      	ldr	r3, [pc, #284]	@ (10011cb4 <Hash_df.constprop.0+0x134>)
10011b96:	9303      	str	r3, [sp, #12]
#endif
    len = (outSz / OUTPUT_BLOCK_LEN)
        + ((outSz % OUTPUT_BLOCK_LEN) ? 1 : 0);

    ctr = 1;
10011b98:	2301      	movs	r3, #1
10011b9a:	460e      	mov	r6, r1
10011b9c:	f88d 300b 	strb.w	r3, [sp, #11]
10011ba0:	f04f 0802 	mov.w	r8, #2
10011ba4:	f04f 0937 	mov.w	r9, #55	@ 0x37
10011ba8:	ad0c      	add	r5, sp, #48	@ 0x30
10011baa:	e007      	b.n	10011bbc <Hash_df.constprop.0+0x3c>
        }
        if (ret == 0)
            ret = wc_Sha256Final(sha, digest);

#ifndef WOLFSSL_SMALL_STACK_CACHE
        wc_Sha256Free(sha);
10011bac:	4628      	mov	r0, r5
10011bae:	f000 ff39 	bl	10012a24 <wc_Sha256Free>
    for (i = 0; i < len; i++) {
10011bb2:	f1b8 0f01 	cmp.w	r8, #1
10011bb6:	d05d      	beq.n	10011c74 <Hash_df.constprop.0+0xf4>
10011bb8:	f04f 0801 	mov.w	r8, #1
        ret = wc_InitSha256(sha);
10011bbc:	4628      	mov	r0, r5
10011bbe:	f000 ff03 	bl	100129c8 <wc_InitSha256>
        if (ret != 0)
10011bc2:	4604      	mov	r4, r0
10011bc4:	2800      	cmp	r0, #0
10011bc6:	d155      	bne.n	10011c74 <Hash_df.constprop.0+0xf4>
        ret = wc_Sha256Update(sha, &ctr, sizeof(ctr));
10011bc8:	2201      	movs	r2, #1
10011bca:	f10d 010b 	add.w	r1, sp, #11
10011bce:	4628      	mov	r0, r5
10011bd0:	f000 fdcc 	bl	1001276c <wc_Sha256Update>
        if (ret == 0) {
10011bd4:	4604      	mov	r4, r0
10011bd6:	2800      	cmp	r0, #0
10011bd8:	d1e8      	bne.n	10011bac <Hash_df.constprop.0+0x2c>
            ctr++;
10011bda:	f89d 300b 	ldrb.w	r3, [sp, #11]
            ret = wc_Sha256Update(sha, (byte*)&bits, sizeof(bits));
10011bde:	2204      	movs	r2, #4
            ctr++;
10011be0:	3301      	adds	r3, #1
            ret = wc_Sha256Update(sha, (byte*)&bits, sizeof(bits));
10011be2:	a903      	add	r1, sp, #12
10011be4:	4628      	mov	r0, r5
            ctr++;
10011be6:	f88d 300b 	strb.w	r3, [sp, #11]
            ret = wc_Sha256Update(sha, (byte*)&bits, sizeof(bits));
10011bea:	f000 fdbf 	bl	1001276c <wc_Sha256Update>
        if (ret == 0) {
10011bee:	4604      	mov	r4, r0
10011bf0:	2800      	cmp	r0, #0
10011bf2:	d1db      	bne.n	10011bac <Hash_df.constprop.0+0x2c>
            if (type != drbgInitV)
10011bf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
10011bf8:	2b04      	cmp	r3, #4
10011bfa:	d008      	beq.n	10011c0e <Hash_df.constprop.0+0x8e>
                ret = wc_Sha256Update(sha, &type, sizeof(type));
10011bfc:	2201      	movs	r2, #1
10011bfe:	f10d 0107 	add.w	r1, sp, #7
10011c02:	4628      	mov	r0, r5
10011c04:	f000 fdb2 	bl	1001276c <wc_Sha256Update>
        if (ret == 0)
10011c08:	4604      	mov	r4, r0
10011c0a:	2800      	cmp	r0, #0
10011c0c:	d1ce      	bne.n	10011bac <Hash_df.constprop.0+0x2c>
            ret = wc_Sha256Update(sha, inA, inASz);
10011c0e:	463a      	mov	r2, r7
10011c10:	4651      	mov	r1, sl
10011c12:	4628      	mov	r0, r5
10011c14:	f000 fdaa 	bl	1001276c <wc_Sha256Update>
        if (ret == 0) {
10011c18:	4604      	mov	r4, r0
10011c1a:	2800      	cmp	r0, #0
10011c1c:	d1c6      	bne.n	10011bac <Hash_df.constprop.0+0x2c>
            if (inB != NULL && inBSz > 0)
10011c1e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
10011c20:	b113      	cbz	r3, 10011c28 <Hash_df.constprop.0+0xa8>
10011c22:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
10011c24:	2b00      	cmp	r3, #0
10011c26:	d138      	bne.n	10011c9a <Hash_df.constprop.0+0x11a>
            ret = wc_Sha256Final(sha, digest);
10011c28:	a904      	add	r1, sp, #16
10011c2a:	4628      	mov	r0, r5
10011c2c:	f000 fe2a 	bl	10012884 <wc_Sha256Final>
10011c30:	4604      	mov	r4, r0
        wc_Sha256Free(sha);
10011c32:	4628      	mov	r0, r5
10011c34:	f000 fef6 	bl	10012a24 <wc_Sha256Free>
#endif
        if (ret == 0) {
10011c38:	2c00      	cmp	r4, #0
10011c3a:	d1ba      	bne.n	10011bb2 <Hash_df.constprop.0+0x32>
            if (outSz > OUTPUT_BLOCK_LEN) {
10011c3c:	f1b9 0f20 	cmp.w	r9, #32
10011c40:	d925      	bls.n	10011c8e <Hash_df.constprop.0+0x10e>
                XMEMCPY(out, digest, OUTPUT_BLOCK_LEN);
10011c42:	f10d 0c10 	add.w	ip, sp, #16
10011c46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
10011c4a:	6030      	str	r0, [r6, #0]
10011c4c:	6071      	str	r1, [r6, #4]
10011c4e:	60b2      	str	r2, [r6, #8]
10011c50:	60f3      	str	r3, [r6, #12]
10011c52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    for (i = 0; i < len; i++) {
10011c56:	f1b8 0f01 	cmp.w	r8, #1
                outSz -= OUTPUT_BLOCK_LEN;
                out += OUTPUT_BLOCK_LEN;
10011c5a:	f106 0620 	add.w	r6, r6, #32
                outSz -= OUTPUT_BLOCK_LEN;
10011c5e:	f04f 0917 	mov.w	r9, #23
                XMEMCPY(out, digest, OUTPUT_BLOCK_LEN);
10011c62:	f846 0c10 	str.w	r0, [r6, #-16]
10011c66:	f846 1c0c 	str.w	r1, [r6, #-12]
10011c6a:	f846 2c08 	str.w	r2, [r6, #-8]
10011c6e:	f846 3c04 	str.w	r3, [r6, #-4]
    for (i = 0; i < len; i++) {
10011c72:	d1a1      	bne.n	10011bb8 <Hash_df.constprop.0+0x38>
    volatile byte* z = (volatile byte*)mem;
10011c74:	ab04      	add	r3, sp, #16
    while (len--) *z++ = 0;
10011c76:	2100      	movs	r1, #0
10011c78:	461a      	mov	r2, r3
10011c7a:	3301      	adds	r3, #1
10011c7c:	42ab      	cmp	r3, r5
10011c7e:	7011      	strb	r1, [r2, #0]
10011c80:	d1fa      	bne.n	10011c78 <Hash_df.constprop.0+0xf8>

#ifdef WOLFSSL_SMALL_STACK
    XFREE(digest, drbg->heap, DYNAMIC_TYPE_DIGEST);
#endif

    return (ret == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
10011c82:	1e20      	subs	r0, r4, #0
10011c84:	bf18      	it	ne
10011c86:	2001      	movne	r0, #1
}
10011c88:	b028      	add	sp, #160	@ 0xa0
10011c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                XMEMCPY(out, digest, outSz);
10011c8e:	464a      	mov	r2, r9
10011c90:	a904      	add	r1, sp, #16
10011c92:	4630      	mov	r0, r6
10011c94:	f007 ffcc 	bl	10019c30 <memcpy>
10011c98:	e78b      	b.n	10011bb2 <Hash_df.constprop.0+0x32>
                ret = wc_Sha256Update(sha, inB, inBSz);
10011c9a:	9931      	ldr	r1, [sp, #196]	@ 0xc4
10011c9c:	461a      	mov	r2, r3
10011c9e:	4628      	mov	r0, r5
10011ca0:	f000 fd64 	bl	1001276c <wc_Sha256Update>
        if (ret == 0)
10011ca4:	4604      	mov	r4, r0
10011ca6:	2800      	cmp	r0, #0
10011ca8:	d180      	bne.n	10011bac <Hash_df.constprop.0+0x2c>
10011caa:	e7bd      	b.n	10011c28 <Hash_df.constprop.0+0xa8>
        return DRBG_FAILURE;
10011cac:	2001      	movs	r0, #1
}
10011cae:	b028      	add	sp, #160	@ 0xa0
10011cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10011cb4:	b8010000 	.word	0xb8010000

10011cb8 <Hash_DRBG_Instantiate.constprop.0>:

    return (ret == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
}

/* Returns: DRBG_SUCCESS or DRBG_FAILURE */
static int Hash_DRBG_Instantiate(DRBG_internal* drbg, const byte* seed, word32 seedSz,
10011cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
10011cba:	b085      	sub	sp, #20
10011cbc:	4604      	mov	r4, r0
10011cbe:	460d      	mov	r5, r1
10011cc0:	4616      	mov	r6, r2
                                             const byte* nonce, word32 nonceSz,
                                             void* heap, int devId)
{
    int ret = DRBG_FAILURE;

    XMEMSET(drbg, 0, sizeof(DRBG_internal));
10011cc2:	2100      	movs	r1, #0
10011cc4:	2278      	movs	r2, #120	@ 0x78
static int Hash_DRBG_Instantiate(DRBG_internal* drbg, const byte* seed, word32 seedSz,
10011cc6:	461f      	mov	r7, r3
    XMEMSET(drbg, 0, sizeof(DRBG_internal));
10011cc8:	f007 fc78 	bl	100195bc <memset>
    drbg->heap = heap;
10011ccc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10011cce:	6763      	str	r3, [r4, #116]	@ 0x74
    #endif
    if (ret != 0)
        return ret;
#endif

    if (Hash_df(drbg, drbg->V, sizeof(drbg->V), drbgInitV, seed, seedSz,
10011cd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10011cd2:	9600      	str	r6, [sp, #0]
10011cd4:	2204      	movs	r2, #4
10011cd6:	e9cd 7301 	strd	r7, r3, [sp, #4]
10011cda:	462b      	mov	r3, r5
10011cdc:	18a5      	adds	r5, r4, r2
10011cde:	4620      	mov	r0, r4
10011ce0:	4629      	mov	r1, r5
10011ce2:	f7ff ff4d 	bl	10011b80 <Hash_df.constprop.0>
10011ce6:	b110      	cbz	r0, 10011cee <Hash_DRBG_Instantiate.constprop.0+0x36>
    int ret = DRBG_FAILURE;
10011ce8:	2001      	movs	r0, #1
        drbg->reseedCtr = 1;
        ret = DRBG_SUCCESS;
    }

    return ret;
}
10011cea:	b005      	add	sp, #20
10011cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Hash_df(drbg, drbg->C, sizeof(drbg->C), drbgInitC, drbg->V,
10011cee:	2337      	movs	r3, #55	@ 0x37
10011cf0:	e9cd 0001 	strd	r0, r0, [sp, #4]
10011cf4:	9300      	str	r3, [sp, #0]
10011cf6:	4602      	mov	r2, r0
10011cf8:	462b      	mov	r3, r5
10011cfa:	f104 013b 	add.w	r1, r4, #59	@ 0x3b
10011cfe:	4620      	mov	r0, r4
10011d00:	f7ff ff3e 	bl	10011b80 <Hash_df.constprop.0>
                                              nonce, nonceSz) == DRBG_SUCCESS &&
10011d04:	2800      	cmp	r0, #0
10011d06:	d1ef      	bne.n	10011ce8 <Hash_DRBG_Instantiate.constprop.0+0x30>
        drbg->reseedCtr = 1;
10011d08:	2301      	movs	r3, #1
10011d0a:	6023      	str	r3, [r4, #0]
}
10011d0c:	b005      	add	sp, #20
10011d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10011d10 <Hash_DRBG_Reseed.part.0>:
static int Hash_DRBG_Reseed(DRBG_internal* drbg, const byte* seed, word32 seedSz)
10011d10:	b5f0      	push	{r4, r5, r6, r7, lr}
    XMEMSET(newV, 0, DRBG_SEED_LEN);
10011d12:	2737      	movs	r7, #55	@ 0x37
static int Hash_DRBG_Reseed(DRBG_internal* drbg, const byte* seed, word32 seedSz)
10011d14:	b093      	sub	sp, #76	@ 0x4c
10011d16:	4604      	mov	r4, r0
10011d18:	460d      	mov	r5, r1
10011d1a:	4616      	mov	r6, r2
    XMEMSET(newV, 0, DRBG_SEED_LEN);
10011d1c:	2100      	movs	r1, #0
10011d1e:	463a      	mov	r2, r7
10011d20:	a804      	add	r0, sp, #16
10011d22:	f007 fc4b 	bl	100195bc <memset>
    ret = Hash_df(drbg, newV, DRBG_SEED_LEN, drbgReseed,
10011d26:	e9cd 5601 	strd	r5, r6, [sp, #4]
                drbg->V, sizeof(drbg->V), seed, seedSz);
10011d2a:	1d25      	adds	r5, r4, #4
    ret = Hash_df(drbg, newV, DRBG_SEED_LEN, drbgReseed,
10011d2c:	9700      	str	r7, [sp, #0]
10011d2e:	2201      	movs	r2, #1
10011d30:	a904      	add	r1, sp, #16
10011d32:	4620      	mov	r0, r4
10011d34:	462b      	mov	r3, r5
10011d36:	f7ff ff23 	bl	10011b80 <Hash_df.constprop.0>
    if (ret == DRBG_SUCCESS) {
10011d3a:	bb98      	cbnz	r0, 10011da4 <Hash_DRBG_Reseed.part.0+0x94>
        XMEMCPY(drbg->V, newV, sizeof(drbg->V));
10011d3c:	ae04      	add	r6, sp, #16
10011d3e:	46ae      	mov	lr, r5
10011d40:	af10      	add	r7, sp, #64	@ 0x40
10011d42:	46b4      	mov	ip, r6
10011d44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
10011d48:	45bc      	cmp	ip, r7
10011d4a:	f10e 0e10 	add.w	lr, lr, #16
10011d4e:	f106 0610 	add.w	r6, r6, #16
10011d52:	f84e 0c10 	str.w	r0, [lr, #-16]
10011d56:	f84e 1c0c 	str.w	r1, [lr, #-12]
10011d5a:	f84e 2c08 	str.w	r2, [lr, #-8]
10011d5e:	f84e 3c04 	str.w	r3, [lr, #-4]
10011d62:	d1ee      	bne.n	10011d42 <Hash_DRBG_Reseed.part.0+0x32>
10011d64:	6830      	ldr	r0, [r6, #0]
10011d66:	f8ce 0000 	str.w	r0, [lr]
10011d6a:	88b2      	ldrh	r2, [r6, #4]
10011d6c:	f8ae 2004 	strh.w	r2, [lr, #4]
10011d70:	79b2      	ldrb	r2, [r6, #6]
10011d72:	f88e 2006 	strb.w	r2, [lr, #6]
    volatile byte* z = (volatile byte*)mem;
10011d76:	ab04      	add	r3, sp, #16
10011d78:	f10d 0047 	add.w	r0, sp, #71	@ 0x47
    while (len--) *z++ = 0;
10011d7c:	2100      	movs	r1, #0
10011d7e:	461a      	mov	r2, r3
10011d80:	3301      	adds	r3, #1
10011d82:	4283      	cmp	r3, r0
10011d84:	7011      	strb	r1, [r2, #0]
10011d86:	d1fa      	bne.n	10011d7e <Hash_DRBG_Reseed.part.0+0x6e>
        ret = Hash_df(drbg, drbg->C, sizeof(drbg->C), drbgInitC, drbg->V,
10011d88:	2337      	movs	r3, #55	@ 0x37
10011d8a:	e9cd 1101 	strd	r1, r1, [sp, #4]
10011d8e:	9300      	str	r3, [sp, #0]
10011d90:	2200      	movs	r2, #0
10011d92:	462b      	mov	r3, r5
10011d94:	f104 013b 	add.w	r1, r4, #59	@ 0x3b
10011d98:	4620      	mov	r0, r4
10011d9a:	f7ff fef1 	bl	10011b80 <Hash_df.constprop.0>
    if (ret == DRBG_SUCCESS) {
10011d9e:	b908      	cbnz	r0, 10011da4 <Hash_DRBG_Reseed.part.0+0x94>
        drbg->reseedCtr = 1;
10011da0:	2301      	movs	r3, #1
10011da2:	6023      	str	r3, [r4, #0]
}
10011da4:	b013      	add	sp, #76	@ 0x4c
10011da6:	bdf0      	pop	{r4, r5, r6, r7, pc}

10011da8 <Hash_DRBG_Generate>:
{
10011da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10011dac:	b0b9      	sub	sp, #228	@ 0xe4
    if (drbg == NULL) {
10011dae:	9001      	str	r0, [sp, #4]
10011db0:	2800      	cmp	r0, #0
10011db2:	f000 8114 	beq.w	10011fde <Hash_DRBG_Generate+0x236>
10011db6:	6803      	ldr	r3, [r0, #0]
10011db8:	460e      	mov	r6, r1
    if (drbg->reseedCtr == RESEED_INTERVAL) {
10011dba:	ba19      	rev	r1, r3
10011dbc:	9102      	str	r1, [sp, #8]
10011dbe:	498c      	ldr	r1, [pc, #560]	@ (10011ff0 <Hash_DRBG_Generate+0x248>)
10011dc0:	428b      	cmp	r3, r1
10011dc2:	f000 8107 	beq.w	10011fd4 <Hash_DRBG_Generate+0x22c>
        type = drbgGenerateH;
10011dc6:	2a01      	cmp	r2, #1
10011dc8:	bf38      	it	cc
10011dca:	2201      	movcc	r2, #1
    len = (outSz / OUTPUT_BLOCK_LEN) + ((outSz % OUTPUT_BLOCK_LEN) ? 1 : 0);
10011dcc:	f012 0b1f 	ands.w	fp, r2, #31
10011dd0:	bf18      	it	ne
10011dd2:	f04f 0b01 	movne.w	fp, #1
        reseedCtr = drbg->reseedCtr;
10011dd6:	9305      	str	r3, [sp, #20]
10011dd8:	4691      	mov	r9, r2
    len = (outSz / OUTPUT_BLOCK_LEN) + ((outSz % OUTPUT_BLOCK_LEN) ? 1 : 0);
10011dda:	eb0b 1b52 	add.w	fp, fp, r2, lsr #5
        type = drbgGenerateH;
10011dde:	2303      	movs	r3, #3
    XMEMCPY(data, V, DRBG_SEED_LEN);
10011de0:	1d02      	adds	r2, r0, #4
10011de2:	ad0e      	add	r5, sp, #56	@ 0x38
        type = drbgGenerateH;
10011de4:	f88d 3013 	strb.w	r3, [sp, #19]
    XMEMCPY(data, V, DRBG_SEED_LEN);
10011de8:	9203      	str	r2, [sp, #12]
10011dea:	4614      	mov	r4, r2
10011dec:	46ae      	mov	lr, r5
10011dee:	f100 0c34 	add.w	ip, r0, #52	@ 0x34
10011df2:	6820      	ldr	r0, [r4, #0]
10011df4:	6861      	ldr	r1, [r4, #4]
10011df6:	68a2      	ldr	r2, [r4, #8]
10011df8:	68e3      	ldr	r3, [r4, #12]
10011dfa:	4677      	mov	r7, lr
10011dfc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
10011dfe:	3410      	adds	r4, #16
10011e00:	4564      	cmp	r4, ip
10011e02:	46be      	mov	lr, r7
10011e04:	d1f5      	bne.n	10011df2 <Hash_DRBG_Generate+0x4a>
10011e06:	6820      	ldr	r0, [r4, #0]
10011e08:	6038      	str	r0, [r7, #0]
10011e0a:	88a3      	ldrh	r3, [r4, #4]
10011e0c:	80bb      	strh	r3, [r7, #4]
10011e0e:	79a3      	ldrb	r3, [r4, #6]
10011e10:	71bb      	strb	r3, [r7, #6]
    for (i = 0; i < len; i++) {
10011e12:	f1bb 0f00 	cmp.w	fp, #0
10011e16:	f000 80e7 	beq.w	10011fe8 <Hash_DRBG_Generate+0x240>
10011e1a:	2700      	movs	r7, #0
10011e1c:	f10d 0870 	add.w	r8, sp, #112	@ 0x70
10011e20:	f10d 0a6f 	add.w	sl, sp, #111	@ 0x6f
        ret = wc_InitSha256(sha);
10011e24:	4640      	mov	r0, r8
10011e26:	f000 fdcf 	bl	100129c8 <wc_InitSha256>
        if (ret == 0)
10011e2a:	4604      	mov	r4, r0
10011e2c:	b1b8      	cbz	r0, 10011e5e <Hash_DRBG_Generate+0xb6>
        wc_Sha256Free(sha);
10011e2e:	4640      	mov	r0, r8
10011e30:	f000 fdf8 	bl	10012a24 <wc_Sha256Free>
    volatile byte* z = (volatile byte*)mem;
10011e34:	462b      	mov	r3, r5
    while (len--) *z++ = 0;
10011e36:	2100      	movs	r1, #0
10011e38:	461a      	mov	r2, r3
10011e3a:	3301      	adds	r3, #1
10011e3c:	4553      	cmp	r3, sl
10011e3e:	7011      	strb	r1, [r2, #0]
10011e40:	d1fa      	bne.n	10011e38 <Hash_DRBG_Generate+0x90>
        if (ret == DRBG_SUCCESS) {
10011e42:	2c00      	cmp	r4, #0
10011e44:	d052      	beq.n	10011eec <Hash_DRBG_Generate+0x144>
10011e46:	2601      	movs	r6, #1
10011e48:	a916      	add	r1, sp, #88	@ 0x58
10011e4a:	2200      	movs	r2, #0
10011e4c:	462b      	mov	r3, r5
10011e4e:	3501      	adds	r5, #1
10011e50:	428d      	cmp	r5, r1
10011e52:	701a      	strb	r2, [r3, #0]
10011e54:	d1fa      	bne.n	10011e4c <Hash_DRBG_Generate+0xa4>
}
10011e56:	4630      	mov	r0, r6
10011e58:	b039      	add	sp, #228	@ 0xe4
10011e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = wc_Sha256Update(sha, data, DRBG_SEED_LEN);
10011e5e:	2237      	movs	r2, #55	@ 0x37
10011e60:	4629      	mov	r1, r5
10011e62:	4640      	mov	r0, r8
10011e64:	f000 fc82 	bl	1001276c <wc_Sha256Update>
        if (ret == 0)
10011e68:	4604      	mov	r4, r0
10011e6a:	2800      	cmp	r0, #0
10011e6c:	d1df      	bne.n	10011e2e <Hash_DRBG_Generate+0x86>
            ret = wc_Sha256Final(sha, digest);
10011e6e:	a906      	add	r1, sp, #24
10011e70:	4640      	mov	r0, r8
10011e72:	f000 fd07 	bl	10012884 <wc_Sha256Final>
10011e76:	4604      	mov	r4, r0
        wc_Sha256Free(sha);
10011e78:	4640      	mov	r0, r8
10011e7a:	f000 fdd3 	bl	10012a24 <wc_Sha256Free>
        if (ret == 0) {
10011e7e:	2c00      	cmp	r4, #0
10011e80:	d1d8      	bne.n	10011e34 <Hash_DRBG_Generate+0x8c>
            if (out != NULL && outSz != 0) {
10011e82:	b126      	cbz	r6, 10011e8e <Hash_DRBG_Generate+0xe6>
10011e84:	f1b9 0f00 	cmp.w	r9, #0
10011e88:	d105      	bne.n	10011e96 <Hash_DRBG_Generate+0xee>
    for (i = 0; i < len; i++) {
10011e8a:	f04f 0900 	mov.w	r9, #0
10011e8e:	3701      	adds	r7, #1
10011e90:	45bb      	cmp	fp, r7
10011e92:	d1c7      	bne.n	10011e24 <Hash_DRBG_Generate+0x7c>
10011e94:	e7ce      	b.n	10011e34 <Hash_DRBG_Generate+0x8c>
                if (outSz >= OUTPUT_BLOCK_LEN) {
10011e96:	f1b9 0f1f 	cmp.w	r9, #31
10011e9a:	d805      	bhi.n	10011ea8 <Hash_DRBG_Generate+0x100>
                    XMEMCPY(out, digest, outSz);
10011e9c:	464a      	mov	r2, r9
10011e9e:	a906      	add	r1, sp, #24
10011ea0:	4630      	mov	r0, r6
10011ea2:	f007 fec5 	bl	10019c30 <memcpy>
                    outSz = 0;
10011ea6:	e7f0      	b.n	10011e8a <Hash_DRBG_Generate+0xe2>
                    XMEMCPY(out, digest, OUTPUT_BLOCK_LEN);
10011ea8:	f10d 0e18 	add.w	lr, sp, #24
10011eac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
10011eb0:	6030      	str	r0, [r6, #0]
10011eb2:	6071      	str	r1, [r6, #4]
10011eb4:	60b2      	str	r2, [r6, #8]
10011eb6:	60f3      	str	r3, [r6, #12]
10011eb8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
                    out += OUTPUT_BLOCK_LEN;
10011ebc:	3620      	adds	r6, #32
                    outSz -= OUTPUT_BLOCK_LEN;
10011ebe:	f1a9 0920 	sub.w	r9, r9, #32
10011ec2:	46d4      	mov	ip, sl
                    XMEMCPY(out, digest, OUTPUT_BLOCK_LEN);
10011ec4:	f846 0c10 	str.w	r0, [r6, #-16]
10011ec8:	f846 1c0c 	str.w	r1, [r6, #-12]
10011ecc:	f846 2c08 	str.w	r2, [r6, #-8]
10011ed0:	f846 3c04 	str.w	r3, [r6, #-4]
    for (i = (int)dataSz - 1; i >= 0; i--) {
10011ed4:	e001      	b.n	10011eda <Hash_DRBG_Generate+0x132>
10011ed6:	4565      	cmp	r5, ip
10011ed8:	d0d9      	beq.n	10011e8e <Hash_DRBG_Generate+0xe6>
        data[i]++;
10011eda:	f81c 3d01 	ldrb.w	r3, [ip, #-1]!
10011ede:	3301      	adds	r3, #1
10011ee0:	b2db      	uxtb	r3, r3
10011ee2:	f88c 3000 	strb.w	r3, [ip]
        if (data[i] != 0) break;
10011ee6:	2b00      	cmp	r3, #0
10011ee8:	d0f5      	beq.n	10011ed6 <Hash_DRBG_Generate+0x12e>
10011eea:	e7d0      	b.n	10011e8e <Hash_DRBG_Generate+0xe6>
            ret = wc_InitSha256(sha);
10011eec:	f10d 0870 	add.w	r8, sp, #112	@ 0x70
10011ef0:	4640      	mov	r0, r8
10011ef2:	f000 fd69 	bl	100129c8 <wc_InitSha256>
            if (ret == 0)
10011ef6:	b140      	cbz	r0, 10011f0a <Hash_DRBG_Generate+0x162>
            wc_Sha256Free(sha);
10011ef8:	4640      	mov	r0, r8
10011efa:	f000 fd93 	bl	10012a24 <wc_Sha256Free>
        word16 carry = 0;
10011efe:	2601      	movs	r6, #1
            drbg->reseedCtr++;
10011f00:	9a01      	ldr	r2, [sp, #4]
10011f02:	6813      	ldr	r3, [r2, #0]
10011f04:	3301      	adds	r3, #1
10011f06:	6013      	str	r3, [r2, #0]
10011f08:	e79e      	b.n	10011e48 <Hash_DRBG_Generate+0xa0>
                ret = wc_Sha256Update(sha, &type, sizeof(type));
10011f0a:	2201      	movs	r2, #1
10011f0c:	f10d 0113 	add.w	r1, sp, #19
10011f10:	4640      	mov	r0, r8
10011f12:	f000 fc2b 	bl	1001276c <wc_Sha256Update>
            if (ret == 0)
10011f16:	2800      	cmp	r0, #0
10011f18:	d1ee      	bne.n	10011ef8 <Hash_DRBG_Generate+0x150>
                ret = wc_Sha256Update(sha, drbg->V, sizeof(drbg->V));
10011f1a:	9903      	ldr	r1, [sp, #12]
10011f1c:	2237      	movs	r2, #55	@ 0x37
10011f1e:	4640      	mov	r0, r8
10011f20:	f000 fc24 	bl	1001276c <wc_Sha256Update>
            if (ret == 0)
10011f24:	2800      	cmp	r0, #0
10011f26:	d1e7      	bne.n	10011ef8 <Hash_DRBG_Generate+0x150>
                ret = wc_Sha256Final(sha, digest);
10011f28:	4629      	mov	r1, r5
10011f2a:	4640      	mov	r0, r8
10011f2c:	f000 fcaa 	bl	10012884 <wc_Sha256Final>
10011f30:	4606      	mov	r6, r0
            wc_Sha256Free(sha);
10011f32:	4640      	mov	r0, r8
10011f34:	f000 fd76 	bl	10012a24 <wc_Sha256Free>
            if (ret == 0) {
10011f38:	2e00      	cmp	r6, #0
10011f3a:	d1e0      	bne.n	10011efe <Hash_DRBG_Generate+0x156>
10011f3c:	9b01      	ldr	r3, [sp, #4]
10011f3e:	f103 013b 	add.w	r1, r3, #59	@ 0x3b
10011f42:	f10d 0257 	add.w	r2, sp, #87	@ 0x57
10011f46:	4608      	mov	r0, r1
            carry += (word16)(d[dIdx] + s[sIdx]);
10011f48:	7813      	ldrb	r3, [r2, #0]
10011f4a:	f810 7d01 	ldrb.w	r7, [r0, #-1]!
10011f4e:	443b      	add	r3, r7
10011f50:	441c      	add	r4, r3
        for (sIdx = (int)sLen - 1; sIdx >= 0; sIdx--) {
10011f52:	4295      	cmp	r5, r2
            d[dIdx] = (byte)carry;
10011f54:	7004      	strb	r4, [r0, #0]
        for (sIdx = (int)sLen - 1; sIdx >= 0; sIdx--) {
10011f56:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
            carry >>= 8;
10011f5a:	f3c4 240f 	ubfx	r4, r4, #8, #16
        for (sIdx = (int)sLen - 1; sIdx >= 0; sIdx--) {
10011f5e:	d1f3      	bne.n	10011f48 <Hash_DRBG_Generate+0x1a0>
10011f60:	9b01      	ldr	r3, [sp, #4]
10011f62:	f103 021b 	add.w	r2, r3, #27
10011f66:	4623      	mov	r3, r4
10011f68:	9c03      	ldr	r4, [sp, #12]
            carry += (word16)d[dIdx];
10011f6a:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
10011f6e:	4403      	add	r3, r0
10011f70:	b29b      	uxth	r3, r3
        for (; dIdx >= 0; dIdx--) {
10011f72:	4294      	cmp	r4, r2
            d[dIdx] = (byte)carry;
10011f74:	7013      	strb	r3, [r2, #0]
            carry >>= 8;
10011f76:	ea4f 2313 	mov.w	r3, r3, lsr #8
        for (; dIdx >= 0; dIdx--) {
10011f7a:	d1f6      	bne.n	10011f6a <Hash_DRBG_Generate+0x1c2>
        word16 carry = 0;
10011f7c:	9f03      	ldr	r7, [sp, #12]
10011f7e:	4608      	mov	r0, r1
10011f80:	2300      	movs	r3, #0
            carry += (word16)(d[dIdx] + s[sIdx]);
10011f82:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
10011f86:	f890 4037 	ldrb.w	r4, [r0, #55]	@ 0x37
10011f8a:	4422      	add	r2, r4
10011f8c:	4413      	add	r3, r2
        for (sIdx = (int)sLen - 1; sIdx >= 0; sIdx--) {
10011f8e:	4287      	cmp	r7, r0
            d[dIdx] = (byte)carry;
10011f90:	7003      	strb	r3, [r0, #0]
            carry >>= 8;
10011f92:	f3c3 230f 	ubfx	r3, r3, #8, #16
        for (sIdx = (int)sLen - 1; sIdx >= 0; sIdx--) {
10011f96:	d1f4      	bne.n	10011f82 <Hash_DRBG_Generate+0x1da>
                reseedCtr = ByteReverseWord32(reseedCtr);
10011f98:	9b02      	ldr	r3, [sp, #8]
10011f9a:	9305      	str	r3, [sp, #20]
        for (sIdx = (int)sLen - 1; sIdx >= 0; sIdx--) {
10011f9c:	9b01      	ldr	r3, [sp, #4]
10011f9e:	ac06      	add	r4, sp, #24
10011fa0:	f103 0037 	add.w	r0, r3, #55	@ 0x37
        word16 carry = 0;
10011fa4:	2300      	movs	r3, #0
            carry += (word16)(d[dIdx] + s[sIdx]);
10011fa6:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
10011faa:	f814 7d01 	ldrb.w	r7, [r4, #-1]!
10011fae:	443a      	add	r2, r7
10011fb0:	4413      	add	r3, r2
        for (sIdx = (int)sLen - 1; sIdx >= 0; sIdx--) {
10011fb2:	4288      	cmp	r0, r1
            d[dIdx] = (byte)carry;
10011fb4:	700b      	strb	r3, [r1, #0]
            carry >>= 8;
10011fb6:	f3c3 230f 	ubfx	r3, r3, #8, #16
        for (sIdx = (int)sLen - 1; sIdx >= 0; sIdx--) {
10011fba:	d1f4      	bne.n	10011fa6 <Hash_DRBG_Generate+0x1fe>
10011fbc:	4601      	mov	r1, r0
10011fbe:	9803      	ldr	r0, [sp, #12]
            carry += (word16)d[dIdx];
10011fc0:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
10011fc4:	4413      	add	r3, r2
10011fc6:	b29b      	uxth	r3, r3
        for (; dIdx >= 0; dIdx--) {
10011fc8:	4281      	cmp	r1, r0
            d[dIdx] = (byte)carry;
10011fca:	700b      	strb	r3, [r1, #0]
            carry >>= 8;
10011fcc:	ea4f 2313 	mov.w	r3, r3, lsr #8
        for (; dIdx >= 0; dIdx--) {
10011fd0:	d1f6      	bne.n	10011fc0 <Hash_DRBG_Generate+0x218>
10011fd2:	e795      	b.n	10011f00 <Hash_DRBG_Generate+0x158>
        return DRBG_NEED_RESEED;
10011fd4:	2602      	movs	r6, #2
}
10011fd6:	4630      	mov	r0, r6
10011fd8:	b039      	add	sp, #228	@ 0xe4
10011fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return DRBG_FAILURE;
10011fde:	2601      	movs	r6, #1
}
10011fe0:	4630      	mov	r0, r6
10011fe2:	b039      	add	sp, #228	@ 0xe4
10011fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int ret = DRBG_FAILURE;
10011fe8:	2401      	movs	r4, #1
10011fea:	f10d 0a6f 	add.w	sl, sp, #111	@ 0x6f
10011fee:	e721      	b.n	10011e34 <Hash_DRBG_Generate+0x8c>
10011ff0:	000f4240 	.word	0x000f4240

10011ff4 <wc_RNG_TestSeed>:
    return (compareSum == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
}


int wc_RNG_TestSeed(const byte* seed, word32 seedSz)
{
10011ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret = 0;

    /* Check the seed for duplicate words. */
    word32 seedIdx = 0;
    word32 scratchSz = min(SEED_BLOCK_SZ, seedSz - SEED_BLOCK_SZ);
10011ff8:	f1a1 0804 	sub.w	r8, r1, #4
        return a > b ? b : a;
10011ffc:	4644      	mov	r4, r8
10011ffe:	2c04      	cmp	r4, #4
10012000:	bf28      	it	cs
10012002:	2404      	movcs	r4, #4

    while (seedIdx < seedSz - SEED_BLOCK_SZ) {
10012004:	f1b8 0f00 	cmp.w	r8, #0
10012008:	d027      	beq.n	1001205a <wc_RNG_TestSeed+0x66>
    word32 seedIdx = 0;
1001200a:	2500      	movs	r5, #0
1001200c:	4681      	mov	r9, r0
1001200e:	4606      	mov	r6, r0
10012010:	460f      	mov	r7, r1
    int ret = 0;
10012012:	4628      	mov	r0, r5
        if (ConstantCompare(seed + seedIdx,
                            seed + seedIdx + scratchSz,
10012014:	eb05 0c04 	add.w	ip, r5, r4
    for (i = 0; i < length; i++) {
10012018:	b1ec      	cbz	r4, 10012056 <wc_RNG_TestSeed+0x62>
1001201a:	44cc      	add	ip, r9
1001201c:	4434      	add	r4, r6
1001201e:	4632      	mov	r2, r6
    int compareSum = 0;
10012020:	f04f 0e00 	mov.w	lr, #0
        compareSum |= a[i] ^ b[i];
10012024:	f812 3b01 	ldrb.w	r3, [r2], #1
10012028:	f81c 1b01 	ldrb.w	r1, [ip], #1
    for (i = 0; i < length; i++) {
1001202c:	4294      	cmp	r4, r2
        compareSum |= a[i] ^ b[i];
1001202e:	ea83 0301 	eor.w	r3, r3, r1
10012032:	ea4e 0e03 	orr.w	lr, lr, r3
    for (i = 0; i < length; i++) {
10012036:	d1f5      	bne.n	10012024 <wc_RNG_TestSeed+0x30>
                            (int)scratchSz) == 0) {

            ret = DRBG_CONT_FAILURE;
10012038:	f1be 0f00 	cmp.w	lr, #0
1001203c:	bf08      	it	eq
1001203e:	2003      	moveq	r0, #3
        }
        seedIdx += SEED_BLOCK_SZ;
10012040:	3504      	adds	r5, #4
        scratchSz = min(SEED_BLOCK_SZ, (seedSz - seedIdx));
10012042:	1b7c      	subs	r4, r7, r5
        return a > b ? b : a;
10012044:	2c04      	cmp	r4, #4
10012046:	bf28      	it	cs
10012048:	2404      	movcs	r4, #4
    while (seedIdx < seedSz - SEED_BLOCK_SZ) {
1001204a:	45a8      	cmp	r8, r5
1001204c:	f106 0604 	add.w	r6, r6, #4
10012050:	d8e0      	bhi.n	10012014 <wc_RNG_TestSeed+0x20>
    }

    return ret;
}
10012052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            ret = DRBG_CONT_FAILURE;
10012056:	2003      	movs	r0, #3
10012058:	e7f2      	b.n	10012040 <wc_RNG_TestSeed+0x4c>
    int ret = 0;
1001205a:	4640      	mov	r0, r8
}
1001205c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

10012060 <wc_FreeRng>:
    return wc_RNG_GenerateBlock(rng, b, 1);
}


int wc_FreeRng(WC_RNG* rng)
{
10012060:	b538      	push	{r3, r4, r5, lr}
    int ret = 0;

    if (rng == NULL)
10012062:	b318      	cbz	r0, 100120ac <wc_FreeRng+0x4c>
#if defined(WOLFSSL_ASYNC_CRYPT)
    wolfAsync_DevCtxFree(&rng->asyncDev, WOLFSSL_ASYNC_MARKER_RNG);
#endif

#ifdef HAVE_HASHDRBG
    if (rng->drbg != NULL) {
10012064:	6884      	ldr	r4, [r0, #8]
10012066:	4605      	mov	r5, r0
10012068:	b1e4      	cbz	r4, 100120a4 <wc_FreeRng+0x44>
    while (len--) *z++ = 0;
1001206a:	f104 0078 	add.w	r0, r4, #120	@ 0x78
1001206e:	4623      	mov	r3, r4
10012070:	2100      	movs	r1, #0
10012072:	461a      	mov	r2, r3
10012074:	3301      	adds	r3, #1
10012076:	4283      	cmp	r3, r0
10012078:	7011      	strb	r1, [r2, #0]
1001207a:	d1fa      	bne.n	10012072 <wc_FreeRng+0x12>
1001207c:	1e63      	subs	r3, r4, #1
1001207e:	f104 0177 	add.w	r1, r4, #119	@ 0x77
    int    compareSum = 0;
10012082:	2400      	movs	r4, #0
        compareSum |= compareDrbg[i] ^ 0;
10012084:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    for (i = 0; i < sizeof(DRBG_internal); i++) {
10012088:	428b      	cmp	r3, r1
        compareSum |= compareDrbg[i] ^ 0;
1001208a:	ea44 0402 	orr.w	r4, r4, r2
    for (i = 0; i < sizeof(DRBG_internal); i++) {
1001208e:	d1f9      	bne.n	10012084 <wc_FreeRng+0x24>
      if (Hash_DRBG_Uninstantiate((DRBG_internal *)rng->drbg) != DRBG_SUCCESS)
            ret = RNG_FAILURE_E;

    #if !defined(WOLFSSL_NO_MALLOC) || defined(WOLFSSL_STATIC_MEMORY)
        XFREE(rng->drbg, rng->heap, DYNAMIC_TYPE_RNG);
10012090:	68a8      	ldr	r0, [r5, #8]
            ret = RNG_FAILURE_E;
10012092:	2c00      	cmp	r4, #0
10012094:	bf18      	it	ne
10012096:	f06f 04c6 	mvnne.w	r4, #198	@ 0xc6
        XFREE(rng->drbg, rng->heap, DYNAMIC_TYPE_RNG);
1001209a:	b108      	cbz	r0, 100120a0 <wc_FreeRng+0x40>
1001209c:	f7ff fd68 	bl	10011b70 <wolfSSL_Free>
    #elif defined(WOLFSSL_CHECK_MEM_ZERO)
        wc_MemZero_Check(rng->drbg, sizeof(DRBG_internal));
    #endif
        rng->drbg = NULL;
100120a0:	2300      	movs	r3, #0
100120a2:	60ab      	str	r3, [r5, #8]
    }

    rng->status = DRBG_NOT_INIT;
100120a4:	2300      	movs	r3, #0
100120a6:	732b      	strb	r3, [r5, #12]
    if (wc_VersalTrngReset() && !ret)
        ret = WC_HW_E;
#endif

    return ret;
}
100120a8:	4620      	mov	r0, r4
100120aa:	bd38      	pop	{r3, r4, r5, pc}
        return BAD_FUNC_ARG;
100120ac:	f06f 04ac 	mvn.w	r4, #172	@ 0xac
100120b0:	e7fa      	b.n	100120a8 <wc_FreeRng+0x48>
100120b2:	bf00      	nop

100120b4 <wc_RNG_HealthTest_ex>:
int wc_RNG_HealthTest_ex(int reseed, const byte* nonce, word32 nonceSz,
                                  const byte* seedA, word32 seedASz,
                                  const byte* seedB, word32 seedBSz,
                                  byte* output, word32 outputSz,
                                  void* heap, int devId)
{
100120b4:	b530      	push	{r4, r5, lr}
100120b6:	b0a1      	sub	sp, #132	@ 0x84
100120b8:	9d27      	ldr	r5, [sp, #156]	@ 0x9c
    DRBG_internal* drbg;
#ifndef WOLFSSL_SMALL_STACK
    DRBG_internal  drbg_var;
#endif

    if (seedA == NULL || output == NULL) {
100120ba:	2b00      	cmp	r3, #0
100120bc:	d039      	beq.n	10012132 <wc_RNG_HealthTest_ex+0x7e>
100120be:	2d00      	cmp	r5, #0
100120c0:	d037      	beq.n	10012132 <wc_RNG_HealthTest_ex+0x7e>
        return BAD_FUNC_ARG;
    }

    if (reseed != 0 && seedB == NULL) {
100120c2:	4604      	mov	r4, r0
100120c4:	4608      	mov	r0, r1
100120c6:	4619      	mov	r1, r3
100120c8:	bb84      	cbnz	r4, 1001212c <wc_RNG_HealthTest_ex+0x78>
        return BAD_FUNC_ARG;
    }

    if (outputSz != RNG_HEALTH_TEST_CHECK_SIZE) {
100120ca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
100120cc:	2b80      	cmp	r3, #128	@ 0x80
100120ce:	d13d      	bne.n	1001214c <wc_RNG_HealthTest_ex+0x98>
    }
#else
    drbg = &drbg_var;
#endif

    if (Hash_DRBG_Instantiate(drbg, seedA, seedASz, nonce, nonceSz,
100120d0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
100120d2:	e9cd 2300 	strd	r2, r3, [sp]
100120d6:	4603      	mov	r3, r0
100120d8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
100120da:	a802      	add	r0, sp, #8
100120dc:	f7ff fdec 	bl	10011cb8 <Hash_DRBG_Instantiate.constprop.0>
100120e0:	b960      	cbnz	r0, 100120fc <wc_RNG_HealthTest_ex+0x48>
                              heap, devId) != 0) {
        goto exit_rng_ht;
    }

    if (reseed) {
100120e2:	b12c      	cbz	r4, 100120f0 <wc_RNG_HealthTest_ex+0x3c>
    if (drbg == NULL) {
100120e4:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	@ 0x94
100120e8:	a802      	add	r0, sp, #8
100120ea:	f7ff fe11 	bl	10011d10 <Hash_DRBG_Reseed.part.0>
        if (Hash_DRBG_Reseed(drbg, seedB, seedBSz) != 0) {
100120ee:	b928      	cbnz	r0, 100120fc <wc_RNG_HealthTest_ex+0x48>
    /* This call to generate is prescribed by the NIST DRBGVS
     * procedure. The results are thrown away. The known
     * answer test checks the second block of DRBG out of
     * the generator to ensure the internal state is updated
     * as expected. */
    if (Hash_DRBG_Generate(drbg, output, outputSz) != 0) {
100120f0:	2280      	movs	r2, #128	@ 0x80
100120f2:	4629      	mov	r1, r5
100120f4:	a802      	add	r0, sp, #8
100120f6:	f7ff fe57 	bl	10011da8 <Hash_DRBG_Generate>
100120fa:	b1e8      	cbz	r0, 10012138 <wc_RNG_HealthTest_ex+0x84>
    int ret = -1;
100120fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    volatile byte* z = (volatile byte*)mem;
10012100:	ab02      	add	r3, sp, #8
    while (len--) *z++ = 0;
10012102:	2100      	movs	r1, #0
10012104:	461a      	mov	r2, r3
10012106:	3301      	adds	r3, #1
10012108:	7011      	strb	r1, [r2, #0]
1001210a:	aa20      	add	r2, sp, #128	@ 0x80
1001210c:	4293      	cmp	r3, r2
1001210e:	d1f9      	bne.n	10012104 <wc_RNG_HealthTest_ex+0x50>
10012110:	f10d 0307 	add.w	r3, sp, #7
10012114:	f10d 0c7f 	add.w	ip, sp, #127	@ 0x7f
    int    compareSum = 0;
10012118:	2200      	movs	r2, #0
        compareSum |= compareDrbg[i] ^ 0;
1001211a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (i = 0; i < sizeof(DRBG_internal); i++) {
1001211e:	4563      	cmp	r3, ip
        compareSum |= compareDrbg[i] ^ 0;
10012120:	ea42 0201 	orr.w	r2, r2, r1
    for (i = 0; i < sizeof(DRBG_internal); i++) {
10012124:	d1f9      	bne.n	1001211a <wc_RNG_HealthTest_ex+0x66>
    ret = 0;

exit_rng_ht:

    /* This is safe to call even if Hash_DRBG_Instantiate fails */
    if (Hash_DRBG_Uninstantiate(drbg) != 0) {
10012126:	b98a      	cbnz	r2, 1001214c <wc_RNG_HealthTest_ex+0x98>
#ifdef WOLFSSL_SMALL_STACK
    XFREE(drbg, heap, DYNAMIC_TYPE_RNG);
#endif

    return ret;
}
10012128:	b021      	add	sp, #132	@ 0x84
1001212a:	bd30      	pop	{r4, r5, pc}
    if (reseed != 0 && seedB == NULL) {
1001212c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
1001212e:	2b00      	cmp	r3, #0
10012130:	d1cb      	bne.n	100120ca <wc_RNG_HealthTest_ex+0x16>
        return BAD_FUNC_ARG;
10012132:	f06f 00ac 	mvn.w	r0, #172	@ 0xac
10012136:	e7f7      	b.n	10012128 <wc_RNG_HealthTest_ex+0x74>
    if (Hash_DRBG_Generate(drbg, output, outputSz) != 0) {
10012138:	2280      	movs	r2, #128	@ 0x80
1001213a:	4629      	mov	r1, r5
1001213c:	a802      	add	r0, sp, #8
1001213e:	f7ff fe33 	bl	10011da8 <Hash_DRBG_Generate>
10012142:	3800      	subs	r0, #0
10012144:	bf18      	it	ne
10012146:	2001      	movne	r0, #1
10012148:	4240      	negs	r0, r0
1001214a:	e7d9      	b.n	10012100 <wc_RNG_HealthTest_ex+0x4c>
        return ret;
1001214c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10012150:	e7ea      	b.n	10012128 <wc_RNG_HealthTest_ex+0x74>
10012152:	bf00      	nop

10012154 <wc_GenerateSeed>:

#else

    /* may block */
    int wc_GenerateSeed(OS_Seed* os, byte* output, word32 sz)
    {
10012154:	b570      	push	{r4, r5, r6, lr}
        int ret = 0;

        if (os == NULL) {
10012156:	b350      	cbz	r0, 100121ae <wc_GenerateSeed+0x5a>
10012158:	4605      	mov	r5, r0
        #endif
        }
    #endif /* HAVE_INTEL_RDSEED || HAVE_AMD_RDSEED */

    #ifndef NO_DEV_URANDOM /* way to disable use of /dev/urandom */
        os->fd = open("/dev/urandom", O_RDONLY);
1001215a:	460e      	mov	r6, r1
1001215c:	4815      	ldr	r0, [pc, #84]	@ (100121b4 <wc_GenerateSeed+0x60>)
1001215e:	2100      	movs	r1, #0
10012160:	4614      	mov	r4, r2
10012162:	f007 fe79 	bl	10019e58 <open>
        if (os->fd == -1)
10012166:	1c41      	adds	r1, r0, #1
        os->fd = open("/dev/urandom", O_RDONLY);
10012168:	6028      	str	r0, [r5, #0]
        if (os->fd == -1)
1001216a:	d004      	beq.n	10012176 <wc_GenerateSeed+0x22>
            os->fd = open("/dev/random", O_RDONLY);
            if (os->fd == -1)
                return OPEN_RAN_E;
        }

        while (sz) {
1001216c:	b96c      	cbnz	r4, 1001218a <wc_GenerateSeed+0x36>
                ret = RAN_BLOCK_E;
                break;
    #endif
            }
        }
        close(os->fd);
1001216e:	f007 fd07 	bl	10019b80 <close>

        return ret;
    }
10012172:	4620      	mov	r0, r4
10012174:	bd70      	pop	{r4, r5, r6, pc}
            os->fd = open("/dev/random", O_RDONLY);
10012176:	4810      	ldr	r0, [pc, #64]	@ (100121b8 <wc_GenerateSeed+0x64>)
10012178:	2100      	movs	r1, #0
1001217a:	f007 fe6d 	bl	10019e58 <open>
            if (os->fd == -1)
1001217e:	1c42      	adds	r2, r0, #1
            os->fd = open("/dev/random", O_RDONLY);
10012180:	6028      	str	r0, [r5, #0]
            if (os->fd == -1)
10012182:	d1f3      	bne.n	1001216c <wc_GenerateSeed+0x18>
                return OPEN_RAN_E;
10012184:	f06f 0464 	mvn.w	r4, #100	@ 0x64
10012188:	e7f3      	b.n	10012172 <wc_GenerateSeed+0x1e>
            int len = (int)read(os->fd, output, sz);
1001218a:	4622      	mov	r2, r4
1001218c:	4631      	mov	r1, r6
1001218e:	f007 fe77 	bl	10019e80 <read>
            if (len == -1) {
10012192:	1c43      	adds	r3, r0, #1
10012194:	d007      	beq.n	100121a6 <wc_GenerateSeed+0x52>
                ret = RAN_BLOCK_E;
10012196:	42a0      	cmp	r0, r4
10012198:	bf08      	it	eq
1001219a:	2400      	moveq	r4, #0
        close(os->fd);
1001219c:	6828      	ldr	r0, [r5, #0]
                ret = RAN_BLOCK_E;
1001219e:	bf18      	it	ne
100121a0:	f06f 0468 	mvnne.w	r4, #104	@ 0x68
100121a4:	e7e3      	b.n	1001216e <wc_GenerateSeed+0x1a>
        close(os->fd);
100121a6:	6828      	ldr	r0, [r5, #0]
                ret = READ_RAN_E;
100121a8:	f06f 0465 	mvn.w	r4, #101	@ 0x65
100121ac:	e7df      	b.n	1001216e <wc_GenerateSeed+0x1a>
            return BAD_FUNC_ARG;
100121ae:	f06f 04ac 	mvn.w	r4, #172	@ 0xac
100121b2:	e7de      	b.n	10012172 <wc_GenerateSeed+0x1e>
100121b4:	10024fcc 	.word	0x10024fcc
100121b8:	10024fdc 	.word	0x10024fdc

100121bc <wc_RNG_GenerateBlock>:
    if (rng == NULL || output == NULL)
100121bc:	2800      	cmp	r0, #0
100121be:	d06d      	beq.n	1001229c <wc_RNG_GenerateBlock+0xe0>
{
100121c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100121c2:	460e      	mov	r6, r1
100121c4:	b0a9      	sub	sp, #164	@ 0xa4
    if (rng == NULL || output == NULL)
100121c6:	2900      	cmp	r1, #0
100121c8:	d065      	beq.n	10012296 <wc_RNG_GenerateBlock+0xda>
    if (sz == 0)
100121ca:	4615      	mov	r5, r2
100121cc:	b19a      	cbz	r2, 100121f6 <wc_RNG_GenerateBlock+0x3a>
    if (sz > RNG_MAX_BLOCK_LEN)
100121ce:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
100121d2:	d860      	bhi.n	10012296 <wc_RNG_GenerateBlock+0xda>
    if (rng->status != DRBG_OK)
100121d4:	7b07      	ldrb	r7, [r0, #12]
100121d6:	2f01      	cmp	r7, #1
100121d8:	4604      	mov	r4, r0
100121da:	d109      	bne.n	100121f0 <wc_RNG_GenerateBlock+0x34>
    ret = Hash_DRBG_Generate((DRBG_internal *)rng->drbg, output, sz);
100121dc:	6880      	ldr	r0, [r0, #8]
100121de:	f7ff fde3 	bl	10011da8 <Hash_DRBG_Generate>
    if (ret == DRBG_NEED_RESEED) {
100121e2:	2802      	cmp	r0, #2
100121e4:	d00a      	beq.n	100121fc <wc_RNG_GenerateBlock+0x40>
    if (ret == DRBG_SUCCESS) {
100121e6:	b130      	cbz	r0, 100121f6 <wc_RNG_GenerateBlock+0x3a>
    else if (ret == DRBG_CONT_FAILURE) {
100121e8:	2803      	cmp	r0, #3
100121ea:	d044      	beq.n	10012276 <wc_RNG_GenerateBlock+0xba>
        rng->status = DRBG_FAILED;
100121ec:	2302      	movs	r3, #2
100121ee:	7323      	strb	r3, [r4, #12]
        return RNG_FAILURE_E;
100121f0:	f06f 00c6 	mvn.w	r0, #198	@ 0xc6
100121f4:	e000      	b.n	100121f8 <wc_RNG_GenerateBlock+0x3c>
        return 0;
100121f6:	2000      	movs	r0, #0
}
100121f8:	b029      	add	sp, #164	@ 0xa4
100121fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return wc_RNG_HealthTest_ex(reseed, NULL, 0,
100121fc:	2200      	movs	r2, #0
100121fe:	f06f 0301 	mvn.w	r3, #1
10012202:	e9cd 2305 	strd	r2, r3, [sp, #20]
10012206:	4b27      	ldr	r3, [pc, #156]	@ (100122a4 <wc_RNG_GenerateBlock+0xe8>)
10012208:	9301      	str	r3, [sp, #4]
1001220a:	2380      	movs	r3, #128	@ 0x80
1001220c:	9304      	str	r3, [sp, #16]
1001220e:	2320      	movs	r3, #32
10012210:	4638      	mov	r0, r7
10012212:	9302      	str	r3, [sp, #8]
10012214:	af08      	add	r7, sp, #32
10012216:	2330      	movs	r3, #48	@ 0x30
10012218:	9300      	str	r3, [sp, #0]
1001221a:	9703      	str	r7, [sp, #12]
1001221c:	4b22      	ldr	r3, [pc, #136]	@ (100122a8 <wc_RNG_GenerateBlock+0xec>)
1001221e:	4611      	mov	r1, r2
10012220:	f7ff ff48 	bl	100120b4 <wc_RNG_HealthTest_ex>
        if (ret == 0) {
10012224:	bb38      	cbnz	r0, 10012276 <wc_RNG_GenerateBlock+0xba>
10012226:	4921      	ldr	r1, [pc, #132]	@ (100122ac <wc_RNG_GenerateBlock+0xf0>)
10012228:	f10d 021f 	add.w	r2, sp, #31
1001222c:	f10d 0e9f 	add.w	lr, sp, #159	@ 0x9f
        compareSum |= a[i] ^ b[i];
10012230:	f812 3f01 	ldrb.w	r3, [r2, #1]!
10012234:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    for (i = 0; i < length; i++) {
10012238:	4572      	cmp	r2, lr
        compareSum |= a[i] ^ b[i];
1001223a:	ea83 030c 	eor.w	r3, r3, ip
1001223e:	ea40 0003 	orr.w	r0, r0, r3
    for (i = 0; i < length; i++) {
10012242:	d1f5      	bne.n	10012230 <wc_RNG_GenerateBlock+0x74>
            if (ConstantCompare(check, outputA,
10012244:	b9b8      	cbnz	r0, 10012276 <wc_RNG_GenerateBlock+0xba>
                ret = wc_GenerateSeed(&rng->seed, newSeed,
10012246:	2224      	movs	r2, #36	@ 0x24
10012248:	4639      	mov	r1, r7
1001224a:	4620      	mov	r0, r4
1001224c:	f7ff ff82 	bl	10012154 <wc_GenerateSeed>
                if (ret != 0)
10012250:	b9b8      	cbnz	r0, 10012282 <wc_RNG_GenerateBlock+0xc6>
                ret = wc_RNG_TestSeed(newSeed, SEED_SZ + SEED_BLOCK_SZ);
10012252:	2124      	movs	r1, #36	@ 0x24
10012254:	4638      	mov	r0, r7
10012256:	f7ff fecd 	bl	10011ff4 <wc_RNG_TestSeed>
            if (ret == DRBG_SUCCESS)
1001225a:	b998      	cbnz	r0, 10012284 <wc_RNG_GenerateBlock+0xc8>
                ret = Hash_DRBG_Reseed((DRBG_internal *)rng->drbg,
1001225c:	68a0      	ldr	r0, [r4, #8]
    if (drbg == NULL) {
1001225e:	b180      	cbz	r0, 10012282 <wc_RNG_GenerateBlock+0xc6>
10012260:	2220      	movs	r2, #32
10012262:	a909      	add	r1, sp, #36	@ 0x24
10012264:	f7ff fd54 	bl	10011d10 <Hash_DRBG_Reseed.part.0>
            if (ret == DRBG_SUCCESS)
10012268:	b960      	cbnz	r0, 10012284 <wc_RNG_GenerateBlock+0xc8>
                ret = Hash_DRBG_Generate((DRBG_internal *)rng->drbg, output, sz);
1001226a:	68a0      	ldr	r0, [r4, #8]
1001226c:	462a      	mov	r2, r5
1001226e:	4631      	mov	r1, r6
10012270:	f7ff fd9a 	bl	10011da8 <Hash_DRBG_Generate>
10012274:	e006      	b.n	10012284 <wc_RNG_GenerateBlock+0xc8>
        rng->status = DRBG_CONT_FAILED;
10012276:	2303      	movs	r3, #3
        ret = DRBG_CONT_FIPS_E;
10012278:	f06f 00d0 	mvn.w	r0, #208	@ 0xd0
        rng->status = DRBG_CONT_FAILED;
1001227c:	7323      	strb	r3, [r4, #12]
}
1001227e:	b029      	add	sp, #164	@ 0xa4
10012280:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    ret = DRBG_FAILURE;
10012282:	2001      	movs	r0, #1
    while (len--) *z++ = 0;
10012284:	a911      	add	r1, sp, #68	@ 0x44
10012286:	2200      	movs	r2, #0
10012288:	703a      	strb	r2, [r7, #0]
1001228a:	3701      	adds	r7, #1
1001228c:	428f      	cmp	r7, r1
1001228e:	d1fb      	bne.n	10012288 <wc_RNG_GenerateBlock+0xcc>
    if (ret == DRBG_SUCCESS) {
10012290:	2800      	cmp	r0, #0
10012292:	d0b0      	beq.n	100121f6 <wc_RNG_GenerateBlock+0x3a>
10012294:	e7a8      	b.n	100121e8 <wc_RNG_GenerateBlock+0x2c>
        return BAD_FUNC_ARG;
10012296:	f06f 00ac 	mvn.w	r0, #172	@ 0xac
1001229a:	e7ad      	b.n	100121f8 <wc_RNG_GenerateBlock+0x3c>
1001229c:	f06f 00ac 	mvn.w	r0, #172	@ 0xac
}
100122a0:	4770      	bx	lr
100122a2:	bf00      	nop
100122a4:	10025118 	.word	0x10025118
100122a8:	10025138 	.word	0x10025138
100122ac:	10025097 	.word	0x10025097

100122b0 <_InitRng.isra.0>:
static int _InitRng(WC_RNG* rng, byte* nonce, word32 nonceSz,
100122b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
100122b4:	b0a8      	sub	sp, #160	@ 0xa0
    if (rng == NULL)
100122b6:	2800      	cmp	r0, #0
100122b8:	f000 80ac 	beq.w	10012414 <_InitRng.isra.0+0x164>
    if (nonce == NULL && nonceSz != 0)
100122bc:	4689      	mov	r9, r1
100122be:	4692      	mov	sl, r2
100122c0:	4604      	mov	r4, r0
100122c2:	2900      	cmp	r1, #0
100122c4:	d06c      	beq.n	100123a0 <_InitRng.isra.0+0xf0>
        seedSz = MAX_SEED_SZ;
100122c6:	2a00      	cmp	r2, #0
100122c8:	bf14      	ite	ne
100122ca:	f04f 0824 	movne.w	r8, #36	@ 0x24
100122ce:	f04f 0834 	moveq.w	r8, #52	@ 0x34
    rng->heap = heap;
100122d2:	6063      	str	r3, [r4, #4]
    rng->drbg = NULL;
100122d4:	2200      	movs	r2, #0
    return wc_RNG_HealthTest_ex(reseed, NULL, 0,
100122d6:	f06f 0301 	mvn.w	r3, #1
    rng->drbg = NULL;
100122da:	60a2      	str	r2, [r4, #8]
    rng->status = DRBG_NOT_INIT;
100122dc:	7322      	strb	r2, [r4, #12]
    return wc_RNG_HealthTest_ex(reseed, NULL, 0,
100122de:	9306      	str	r3, [sp, #24]
100122e0:	2380      	movs	r3, #128	@ 0x80
100122e2:	9304      	str	r3, [sp, #16]
100122e4:	ab08      	add	r3, sp, #32
100122e6:	9303      	str	r3, [sp, #12]
100122e8:	2330      	movs	r3, #48	@ 0x30
100122ea:	9300      	str	r3, [sp, #0]
100122ec:	e9cd 2201 	strd	r2, r2, [sp, #4]
100122f0:	4b4a      	ldr	r3, [pc, #296]	@ (1001241c <_InitRng.isra.0+0x16c>)
100122f2:	9205      	str	r2, [sp, #20]
100122f4:	4611      	mov	r1, r2
100122f6:	4610      	mov	r0, r2
100122f8:	f7ff fedc 	bl	100120b4 <wc_RNG_HealthTest_ex>
        if (ret == 0) {
100122fc:	bb20      	cbnz	r0, 10012348 <_InitRng.isra.0+0x98>
100122fe:	4f48      	ldr	r7, [pc, #288]	@ (10012420 <_InitRng.isra.0+0x170>)
10012300:	f10d 051f 	add.w	r5, sp, #31
10012304:	f10d 069f 	add.w	r6, sp, #159	@ 0x9f
10012308:	4639      	mov	r1, r7
1001230a:	462a      	mov	r2, r5
        compareSum |= a[i] ^ b[i];
1001230c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
10012310:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    for (i = 0; i < length; i++) {
10012314:	42b2      	cmp	r2, r6
        compareSum |= a[i] ^ b[i];
10012316:	ea83 030c 	eor.w	r3, r3, ip
1001231a:	ea40 0003 	orr.w	r0, r0, r3
    for (i = 0; i < length; i++) {
1001231e:	d1f5      	bne.n	1001230c <_InitRng.isra.0+0x5c>
            if (ConstantCompare(check, outputB,
10012320:	b990      	cbnz	r0, 10012348 <_InitRng.isra.0+0x98>
            ret = wc_RNG_HealthTest_ex(0,
10012322:	ab08      	add	r3, sp, #32
10012324:	f06f 0201 	mvn.w	r2, #1
10012328:	e9cd 0302 	strd	r0, r3, [sp, #8]
1001232c:	9206      	str	r2, [sp, #24]
1001232e:	4b3b      	ldr	r3, [pc, #236]	@ (1001241c <_InitRng.isra.0+0x16c>)
10012330:	9005      	str	r0, [sp, #20]
10012332:	2280      	movs	r2, #128	@ 0x80
10012334:	9204      	str	r2, [sp, #16]
10012336:	2220      	movs	r2, #32
10012338:	9200      	str	r2, [sp, #0]
1001233a:	9001      	str	r0, [sp, #4]
1001233c:	2210      	movs	r2, #16
1001233e:	f103 0120 	add.w	r1, r3, #32
10012342:	f7ff feb7 	bl	100120b4 <wc_RNG_HealthTest_ex>
            if (ret == 0) {
10012346:	b138      	cbz	r0, 10012358 <_InitRng.isra.0+0xa8>
        rng->status = DRBG_CONT_FAILED;
10012348:	2303      	movs	r3, #3
1001234a:	7323      	strb	r3, [r4, #12]
        ret = DRBG_CONT_FIPS_E;
1001234c:	f06f 05d0 	mvn.w	r5, #208	@ 0xd0
}
10012350:	4628      	mov	r0, r5
10012352:	b028      	add	sp, #160	@ 0xa0
10012354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        compareSum |= a[i] ^ b[i];
10012358:	f815 3f01 	ldrb.w	r3, [r5, #1]!
1001235c:	f817 2f01 	ldrb.w	r2, [r7, #1]!
    for (i = 0; i < length; i++) {
10012360:	42ae      	cmp	r6, r5
        compareSum |= a[i] ^ b[i];
10012362:	ea83 0302 	eor.w	r3, r3, r2
10012366:	ea40 0003 	orr.w	r0, r0, r3
    for (i = 0; i < length; i++) {
1001236a:	d1f5      	bne.n	10012358 <_InitRng.isra.0+0xa8>
                if (ConstantCompare(check, outputB, sizeof(outputB_data)) != 0)
1001236c:	2800      	cmp	r0, #0
1001236e:	d1eb      	bne.n	10012348 <_InitRng.isra.0+0x98>
                (struct DRBG*)XMALLOC(sizeof(DRBG_internal), rng->heap,
10012370:	2078      	movs	r0, #120	@ 0x78
10012372:	f7ff fbf5 	bl	10011b60 <wolfSSL_Malloc>
        rng->drbg =
10012376:	60a0      	str	r0, [r4, #8]
        if (rng->drbg == NULL) {
10012378:	b1b8      	cbz	r0, 100123aa <_InitRng.isra.0+0xfa>
            ret = wc_GenerateSeed(&rng->seed, seed, seedSz);
1001237a:	4642      	mov	r2, r8
1001237c:	a908      	add	r1, sp, #32
1001237e:	4620      	mov	r0, r4
10012380:	f7ff fee8 	bl	10012154 <wc_GenerateSeed>
            if (ret == 0)
10012384:	bb70      	cbnz	r0, 100123e4 <_InitRng.isra.0+0x134>
                ret = wc_RNG_TestSeed(seed, seedSz);
10012386:	4641      	mov	r1, r8
10012388:	a808      	add	r0, sp, #32
1001238a:	f7ff fe33 	bl	10011ff4 <wc_RNG_TestSeed>
1001238e:	4605      	mov	r5, r0
                XFREE(rng->drbg, rng->heap, DYNAMIC_TYPE_RNG);
10012390:	68a0      	ldr	r0, [r4, #8]
            if (ret == DRBG_SUCCESS)
10012392:	b375      	cbz	r5, 100123f2 <_InitRng.isra.0+0x142>
                XFREE(rng->drbg, rng->heap, DYNAMIC_TYPE_RNG);
10012394:	b158      	cbz	r0, 100123ae <_InitRng.isra.0+0xfe>
10012396:	f7ff fbeb 	bl	10011b70 <wolfSSL_Free>
                rng->drbg = NULL;
1001239a:	2300      	movs	r3, #0
1001239c:	60a3      	str	r3, [r4, #8]
    while (len--) *z++ = 0;
1001239e:	e006      	b.n	100123ae <_InitRng.isra.0+0xfe>
    if (nonce == NULL && nonceSz != 0)
100123a0:	2a00      	cmp	r2, #0
100123a2:	d137      	bne.n	10012414 <_InitRng.isra.0+0x164>
        seedSz = MAX_SEED_SZ;
100123a4:	f04f 0834 	mov.w	r8, #52	@ 0x34
100123a8:	e793      	b.n	100122d2 <_InitRng.isra.0+0x22>
            ret = MEMORY_E;
100123aa:	f06f 057c 	mvn.w	r5, #124	@ 0x7c
100123ae:	ab08      	add	r3, sp, #32
100123b0:	4498      	add	r8, r3
100123b2:	2100      	movs	r1, #0
100123b4:	461a      	mov	r2, r3
100123b6:	3301      	adds	r3, #1
100123b8:	4543      	cmp	r3, r8
100123ba:	7011      	strb	r1, [r2, #0]
100123bc:	d1fa      	bne.n	100123b4 <_InitRng.isra.0+0x104>
    if (ret == DRBG_SUCCESS) {
100123be:	b92d      	cbnz	r5, 100123cc <_InitRng.isra.0+0x11c>
        rng->status = DRBG_OK;
100123c0:	2301      	movs	r3, #1
}
100123c2:	4628      	mov	r0, r5
        rng->status = DRBG_OK;
100123c4:	7323      	strb	r3, [r4, #12]
}
100123c6:	b028      	add	sp, #160	@ 0xa0
100123c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (ret == DRBG_CONT_FAILURE) {
100123cc:	2d03      	cmp	r5, #3
100123ce:	d0bb      	beq.n	10012348 <_InitRng.isra.0+0x98>
    else if (ret == DRBG_FAILURE) {
100123d0:	2d01      	cmp	r5, #1
        ret = RNG_FAILURE_E;
100123d2:	bf08      	it	eq
100123d4:	f06f 05c6 	mvneq.w	r5, #198	@ 0xc6
        rng->status = DRBG_FAILED;
100123d8:	2302      	movs	r3, #2
}
100123da:	4628      	mov	r0, r5
        rng->status = DRBG_FAILED;
100123dc:	7323      	strb	r3, [r4, #12]
}
100123de:	b028      	add	sp, #160	@ 0xa0
100123e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                XFREE(rng->drbg, rng->heap, DYNAMIC_TYPE_RNG);
100123e4:	68a0      	ldr	r0, [r4, #8]
                rng->status = DRBG_FAILED;
100123e6:	2302      	movs	r3, #2
100123e8:	7323      	strb	r3, [r4, #12]
                ret = DRBG_FAILURE;
100123ea:	2501      	movs	r5, #1
                XFREE(rng->drbg, rng->heap, DYNAMIC_TYPE_RNG);
100123ec:	2800      	cmp	r0, #0
100123ee:	d1d2      	bne.n	10012396 <_InitRng.isra.0+0xe6>
100123f0:	e7dd      	b.n	100123ae <_InitRng.isra.0+0xfe>
                ret = Hash_DRBG_Instantiate((DRBG_internal *)rng->drbg,
100123f2:	f8cd a000 	str.w	sl, [sp]
100123f6:	6862      	ldr	r2, [r4, #4]
100123f8:	9201      	str	r2, [sp, #4]
100123fa:	464b      	mov	r3, r9
100123fc:	f1a8 0204 	sub.w	r2, r8, #4
10012400:	a909      	add	r1, sp, #36	@ 0x24
10012402:	f7ff fc59 	bl	10011cb8 <Hash_DRBG_Instantiate.constprop.0>
            if (ret != DRBG_SUCCESS) {
10012406:	4605      	mov	r5, r0
10012408:	2800      	cmp	r0, #0
1001240a:	d0d0      	beq.n	100123ae <_InitRng.isra.0+0xfe>
                XFREE(rng->drbg, rng->heap, DYNAMIC_TYPE_RNG);
1001240c:	68a0      	ldr	r0, [r4, #8]
1001240e:	2800      	cmp	r0, #0
10012410:	d1c1      	bne.n	10012396 <_InitRng.isra.0+0xe6>
10012412:	e7cc      	b.n	100123ae <_InitRng.isra.0+0xfe>
        return BAD_FUNC_ARG;
10012414:	f06f 05ac 	mvn.w	r5, #172	@ 0xac
10012418:	e79a      	b.n	10012350 <_InitRng.isra.0+0xa0>
1001241a:	bf00      	nop
1001241c:	10025068 	.word	0x10025068
10012420:	10024fe7 	.word	0x10024fe7

10012424 <wc_InitRng>:
    return _InitRng(rng, NULL, 0, NULL, INVALID_DEVID);
10012424:	2300      	movs	r3, #0
10012426:	461a      	mov	r2, r3
10012428:	4619      	mov	r1, r3
1001242a:	f7ff bf41 	b.w	100122b0 <_InitRng.isra.0>
1001242e:	bf00      	nop

10012430 <Transform_Sha256>:
         t1 = Sigma0(a(j)) + Maj(a(j), b(j), c(j)); \
         d(j) += t0; \
         h(j)  = t0 + t1

    static int Transform_Sha256(wc_Sha256* sha256, const byte* data)
    {
10012430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10012434:	4680      	mov	r8, r0
10012436:	460c      	mov	r4, r1
        word32 W[WC_SHA256_BLOCK_SIZE];
    #endif

        /* Copy context->state[] to working vars */
        for (i = 0; i < 8; i++)
            S[i] = sha256->digest[i];
10012438:	6800      	ldr	r0, [r0, #0]
1001243a:	f8d8 1004 	ldr.w	r1, [r8, #4]
1001243e:	f8d8 2008 	ldr.w	r2, [r8, #8]
10012442:	f8d8 300c 	ldr.w	r3, [r8, #12]
    {
10012446:	b0cb      	sub	sp, #300	@ 0x12c
            S[i] = sha256->digest[i];
10012448:	ad02      	add	r5, sp, #8
1001244a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1001244c:	f8d8 0010 	ldr.w	r0, [r8, #16]
10012450:	f8d8 1014 	ldr.w	r1, [r8, #20]
10012454:	f8d8 2018 	ldr.w	r2, [r8, #24]
10012458:	f8d8 301c 	ldr.w	r3, [r8, #28]
1001245c:	c50f      	stmia	r5!, {r0, r1, r2, r3}

        for (i = 0; i < 16; i++)
            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
1001245e:	f104 0740 	add.w	r7, r4, #64	@ 0x40
10012462:	462e      	mov	r6, r5
10012464:	6820      	ldr	r0, [r4, #0]
10012466:	6861      	ldr	r1, [r4, #4]
10012468:	68a2      	ldr	r2, [r4, #8]
1001246a:	68e3      	ldr	r3, [r4, #12]
1001246c:	4635      	mov	r5, r6
1001246e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10012470:	3410      	adds	r4, #16
10012472:	42bc      	cmp	r4, r7
10012474:	462e      	mov	r6, r5
10012476:	d1f5      	bne.n	10012464 <Transform_Sha256+0x34>
10012478:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	@ 0x60
1001247c:	f10d 0e28 	add.w	lr, sp, #40	@ 0x28
10012480:	980a      	ldr	r0, [sp, #40]	@ 0x28
10012482:	ae3a      	add	r6, sp, #232	@ 0xe8
10012484:	4671      	mov	r1, lr
10012486:	461f      	mov	r7, r3

        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
10012488:	f8d1 c024 	ldr.w	ip, [r1, #36]	@ 0x24
1001248c:	4605      	mov	r5, r0
1001248e:	f851 0f04 	ldr.w	r0, [r1, #4]!
        return (x >> y) | (x << (sizeof(x) * 8 - y));
10012492:	ea4f 42f7 	mov.w	r2, r7, ror #19
10012496:	ea82 4277 	eor.w	r2, r2, r7, ror #17
1001249a:	ea4f 43b0 	mov.w	r3, r0, ror #18
1001249e:	ea82 2297 	eor.w	r2, r2, r7, lsr #10
100124a2:	ea83 13f0 	eor.w	r3, r3, r0, ror #7
100124a6:	4462      	add	r2, ip
100124a8:	ea83 03d0 	eor.w	r3, r3, r0, lsr #3
100124ac:	441a      	add	r2, r3
100124ae:	4627      	mov	r7, r4
        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
100124b0:	42b1      	cmp	r1, r6
            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
100124b2:	eb05 0402 	add.w	r4, r5, r2
100124b6:	63cc      	str	r4, [r1, #60]	@ 0x3c
        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
100124b8:	d1e6      	bne.n	10012488 <Transform_Sha256+0x58>
100124ba:	4fab      	ldr	r7, [pc, #684]	@ (10012768 <Transform_Sha256+0x338>)
100124bc:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
100124c0:	9d06      	ldr	r5, [sp, #24]
100124c2:	f8cd 8004 	str.w	r8, [sp, #4]
100124c6:	e9dd 0607 	ldrd	r0, r6, [sp, #28]
100124ca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
100124ce:	e9dd 1404 	ldrd	r1, r4, [sp, #16]
100124d2:	f507 7b80 	add.w	fp, r7, #256	@ 0x100
            }
        }
    #else
        /* partially loop unrolled */
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
            RND(0); RND(1); RND(2); RND(3);
100124d6:	f8d7 8000 	ldr.w	r8, [r7]
100124da:	f8de 9000 	ldr.w	r9, [lr]
100124de:	44c1      	add	r9, r8
100124e0:	ea4f 28f5 	mov.w	r8, r5, ror #11
100124e4:	ea88 18b5 	eor.w	r8, r8, r5, ror #6
100124e8:	ea88 6875 	eor.w	r8, r8, r5, ror #25
100124ec:	44c8      	add	r8, r9
100124ee:	ea86 0900 	eor.w	r9, r6, r0
100124f2:	ea09 0905 	and.w	r9, r9, r5
100124f6:	ea89 0906 	eor.w	r9, r9, r6
100124fa:	44c8      	add	r8, r9
100124fc:	44e0      	add	r8, ip
100124fe:	eb04 0c08 	add.w	ip, r4, r8
10012502:	ea4f 04b3 	mov.w	r4, r3, ror #2
10012506:	ea84 3473 	eor.w	r4, r4, r3, ror #13
1001250a:	ea84 54b3 	eor.w	r4, r4, r3, ror #22
1001250e:	4444      	add	r4, r8
10012510:	ea43 0802 	orr.w	r8, r3, r2
10012514:	ea03 0902 	and.w	r9, r3, r2
10012518:	ea08 0801 	and.w	r8, r8, r1
1001251c:	ea48 0809 	orr.w	r8, r8, r9
10012520:	4444      	add	r4, r8
10012522:	f8de 9004 	ldr.w	r9, [lr, #4]
10012526:	f8d7 8004 	ldr.w	r8, [r7, #4]
1001252a:	eb08 0a09 	add.w	sl, r8, r9
1001252e:	44b2      	add	sl, r6
10012530:	ea85 0600 	eor.w	r6, r5, r0
10012534:	ea06 060c 	and.w	r6, r6, ip
10012538:	4046      	eors	r6, r0
1001253a:	44b2      	add	sl, r6
1001253c:	ea4f 26fc 	mov.w	r6, ip, ror #11
10012540:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
10012544:	ea86 667c 	eor.w	r6, r6, ip, ror #25
10012548:	44b2      	add	sl, r6
1001254a:	ea4f 3674 	mov.w	r6, r4, ror #13
1001254e:	ea86 06b4 	eor.w	r6, r6, r4, ror #2
10012552:	ea86 56b4 	eor.w	r6, r6, r4, ror #22
10012556:	eb01 080a 	add.w	r8, r1, sl
1001255a:	eb06 090a 	add.w	r9, r6, sl
1001255e:	68b9      	ldr	r1, [r7, #8]
10012560:	f8de 6008 	ldr.w	r6, [lr, #8]
10012564:	ea44 0a03 	orr.w	sl, r4, r3
10012568:	4431      	add	r1, r6
1001256a:	ea0a 0a02 	and.w	sl, sl, r2
1001256e:	4401      	add	r1, r0
10012570:	ea04 0003 	and.w	r0, r4, r3
10012574:	ea4a 0a00 	orr.w	sl, sl, r0
10012578:	ea85 000c 	eor.w	r0, r5, ip
1001257c:	ea00 0008 	and.w	r0, r0, r8
10012580:	4068      	eors	r0, r5
10012582:	4401      	add	r1, r0
10012584:	ea4f 20f8 	mov.w	r0, r8, ror #11
10012588:	ea80 10b8 	eor.w	r0, r0, r8, ror #6
1001258c:	eb09 060a 	add.w	r6, r9, sl
10012590:	ea80 6078 	eor.w	r0, r0, r8, ror #25
10012594:	4401      	add	r1, r0
10012596:	ea4f 3076 	mov.w	r0, r6, ror #13
1001259a:	ea80 00b6 	eor.w	r0, r0, r6, ror #2
1001259e:	ea80 50b6 	eor.w	r0, r0, r6, ror #22
100125a2:	eb02 0901 	add.w	r9, r2, r1
100125a6:	4408      	add	r0, r1
100125a8:	68fa      	ldr	r2, [r7, #12]
100125aa:	f8de 100c 	ldr.w	r1, [lr, #12]
100125ae:	ea44 0a06 	orr.w	sl, r4, r6
100125b2:	ea0a 0a03 	and.w	sl, sl, r3
100125b6:	440a      	add	r2, r1
100125b8:	ea04 0106 	and.w	r1, r4, r6
100125bc:	ea4a 0a01 	orr.w	sl, sl, r1
100125c0:	ea8c 0108 	eor.w	r1, ip, r8
100125c4:	ea01 0109 	and.w	r1, r1, r9
100125c8:	ea81 010c 	eor.w	r1, r1, ip
100125cc:	442a      	add	r2, r5
100125ce:	4450      	add	r0, sl
100125d0:	440a      	add	r2, r1
100125d2:	ea4f 21f9 	mov.w	r1, r9, ror #11
100125d6:	ea81 11b9 	eor.w	r1, r1, r9, ror #6
100125da:	ea4f 3570 	mov.w	r5, r0, ror #13
100125de:	ea81 6179 	eor.w	r1, r1, r9, ror #25
100125e2:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
100125e6:	440a      	add	r2, r1
100125e8:	ea85 55b0 	eor.w	r5, r5, r0, ror #22
100125ec:	eb03 0a02 	add.w	sl, r3, r2
100125f0:	4415      	add	r5, r2
            RND(4); RND(5); RND(6); RND(7);
100125f2:	693b      	ldr	r3, [r7, #16]
100125f4:	f8de 2010 	ldr.w	r2, [lr, #16]
            RND(0); RND(1); RND(2); RND(3);
100125f8:	ea46 0100 	orr.w	r1, r6, r0
100125fc:	4021      	ands	r1, r4
            RND(4); RND(5); RND(6); RND(7);
100125fe:	4413      	add	r3, r2
            RND(0); RND(1); RND(2); RND(3);
10012600:	ea06 0200 	and.w	r2, r6, r0
10012604:	4311      	orrs	r1, r2
            RND(4); RND(5); RND(6); RND(7);
10012606:	ea88 0209 	eor.w	r2, r8, r9
1001260a:	ea02 020a 	and.w	r2, r2, sl
1001260e:	ea82 0208 	eor.w	r2, r2, r8
10012612:	4463      	add	r3, ip
10012614:	4413      	add	r3, r2
10012616:	ea4f 22fa 	mov.w	r2, sl, ror #11
1001261a:	ea82 12ba 	eor.w	r2, r2, sl, ror #6
1001261e:	ea82 627a 	eor.w	r2, r2, sl, ror #25
            RND(0); RND(1); RND(2); RND(3);
10012622:	440d      	add	r5, r1
            RND(4); RND(5); RND(6); RND(7);
10012624:	4413      	add	r3, r2
10012626:	eb04 0c03 	add.w	ip, r4, r3
1001262a:	ea4f 3475 	mov.w	r4, r5, ror #13
1001262e:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
10012632:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
10012636:	f8de 2014 	ldr.w	r2, [lr, #20]
1001263a:	441c      	add	r4, r3
1001263c:	697b      	ldr	r3, [r7, #20]
1001263e:	ea40 0105 	orr.w	r1, r0, r5
10012642:	4031      	ands	r1, r6
10012644:	4413      	add	r3, r2
10012646:	ea00 0205 	and.w	r2, r0, r5
1001264a:	4311      	orrs	r1, r2
1001264c:	ea89 020a 	eor.w	r2, r9, sl
10012650:	ea02 020c 	and.w	r2, r2, ip
10012654:	ea82 0209 	eor.w	r2, r2, r9
10012658:	4443      	add	r3, r8
1001265a:	440c      	add	r4, r1
1001265c:	4413      	add	r3, r2
1001265e:	ea4f 22fc 	mov.w	r2, ip, ror #11
10012662:	ea82 12bc 	eor.w	r2, r2, ip, ror #6
10012666:	ea4f 3174 	mov.w	r1, r4, ror #13
1001266a:	ea82 627c 	eor.w	r2, r2, ip, ror #25
1001266e:	ea81 01b4 	eor.w	r1, r1, r4, ror #2
10012672:	4413      	add	r3, r2
10012674:	ea81 51b4 	eor.w	r1, r1, r4, ror #22
10012678:	441e      	add	r6, r3
1001267a:	f8de 2018 	ldr.w	r2, [lr, #24]
1001267e:	4419      	add	r1, r3
10012680:	69bb      	ldr	r3, [r7, #24]
10012682:	ea45 0804 	orr.w	r8, r5, r4
10012686:	ea08 0800 	and.w	r8, r8, r0
1001268a:	4413      	add	r3, r2
1001268c:	ea05 0204 	and.w	r2, r5, r4
10012690:	ea48 0802 	orr.w	r8, r8, r2
10012694:	ea8a 020c 	eor.w	r2, sl, ip
10012698:	4032      	ands	r2, r6
1001269a:	444b      	add	r3, r9
1001269c:	ea82 020a 	eor.w	r2, r2, sl
100126a0:	4413      	add	r3, r2
100126a2:	ea4f 22f6 	mov.w	r2, r6, ror #11
100126a6:	ea82 12b6 	eor.w	r2, r2, r6, ror #6
100126aa:	4441      	add	r1, r8
100126ac:	ea82 6276 	eor.w	r2, r2, r6, ror #25
100126b0:	4413      	add	r3, r2
100126b2:	ea4f 3271 	mov.w	r2, r1, ror #13
100126b6:	ea82 02b1 	eor.w	r2, r2, r1, ror #2
100126ba:	ea82 52b1 	eor.w	r2, r2, r1, ror #22
100126be:	4418      	add	r0, r3
100126c0:	eb02 0803 	add.w	r8, r2, r3
100126c4:	69fa      	ldr	r2, [r7, #28]
100126c6:	f8de 301c 	ldr.w	r3, [lr, #28]
100126ca:	ea44 0901 	orr.w	r9, r4, r1
100126ce:	441a      	add	r2, r3
100126d0:	eb02 030a 	add.w	r3, r2, sl
100126d4:	ea09 0905 	and.w	r9, r9, r5
100126d8:	ea04 0201 	and.w	r2, r4, r1
100126dc:	ea49 0902 	orr.w	r9, r9, r2
100126e0:	eb08 0209 	add.w	r2, r8, r9
100126e4:	ea8c 0806 	eor.w	r8, ip, r6
100126e8:	ea08 0800 	and.w	r8, r8, r0
100126ec:	ea88 080c 	eor.w	r8, r8, ip
100126f0:	4498      	add	r8, r3
100126f2:	ea4f 23f0 	mov.w	r3, r0, ror #11
100126f6:	ea83 13b0 	eor.w	r3, r3, r0, ror #6
100126fa:	ea83 6370 	eor.w	r3, r3, r0, ror #25
100126fe:	4498      	add	r8, r3
10012700:	ea4f 3372 	mov.w	r3, r2, ror #13
10012704:	ea83 03b2 	eor.w	r3, r3, r2, ror #2
10012708:	ea83 53b2 	eor.w	r3, r3, r2, ror #22
1001270c:	4443      	add	r3, r8
1001270e:	4445      	add	r5, r8
10012710:	ea41 0802 	orr.w	r8, r1, r2
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
10012714:	3720      	adds	r7, #32
            RND(4); RND(5); RND(6); RND(7);
10012716:	ea08 0804 	and.w	r8, r8, r4
1001271a:	ea01 0902 	and.w	r9, r1, r2
1001271e:	ea48 0809 	orr.w	r8, r8, r9
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
10012722:	455f      	cmp	r7, fp
10012724:	f10e 0e20 	add.w	lr, lr, #32
            RND(4); RND(5); RND(6); RND(7);
10012728:	4443      	add	r3, r8
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
1001272a:	f47f aed4 	bne.w	100124d6 <Transform_Sha256+0xa6>
1001272e:	f8dd 8004 	ldr.w	r8, [sp, #4]
10012732:	9104      	str	r1, [sp, #16]
10012734:	9302      	str	r3, [sp, #8]
10012736:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
1001273a:	f1a8 0304 	sub.w	r3, r8, #4
1001273e:	9405      	str	r4, [sp, #20]
10012740:	9608      	str	r6, [sp, #32]
10012742:	9007      	str	r0, [sp, #28]
10012744:	9203      	str	r2, [sp, #12]
10012746:	9506      	str	r5, [sp, #24]
10012748:	a901      	add	r1, sp, #4
1001274a:	f108 081c 	add.w	r8, r8, #28
        }
    #endif /* USE_SLOW_SHA256 */

        /* Add the working vars back into digest state[] */
        for (i = 0; i < 8; i++) {
            sha256->digest[i] += S[i];
1001274e:	f853 2f04 	ldr.w	r2, [r3, #4]!
10012752:	f851 0f04 	ldr.w	r0, [r1, #4]!
        for (i = 0; i < 8; i++) {
10012756:	4543      	cmp	r3, r8
            sha256->digest[i] += S[i];
10012758:	4402      	add	r2, r0
1001275a:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 8; i++) {
1001275c:	d1f7      	bne.n	1001274e <Transform_Sha256+0x31e>
    #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SMALL_STACK_CACHE)
        ForceZero(W, sizeof(word32) * WC_SHA256_BLOCK_SIZE);
        XFREE(W, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    #endif
        return 0;
    }
1001275e:	2000      	movs	r0, #0
10012760:	b04b      	add	sp, #300	@ 0x12c
10012762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10012766:	bf00      	nop
10012768:	10025168 	.word	0x10025168

1001276c <wc_Sha256Update>:
    /* implemented in wolfcrypt/src/port/kcapi/kcapi_hash.c */

#else
    int wc_Sha256Update(wc_Sha256* sha256, const byte* data, word32 len)
    {
        if (sha256 == NULL || (data == NULL && len > 0)) {
1001276c:	2800      	cmp	r0, #0
1001276e:	f000 8086 	beq.w	1001287e <wc_Sha256Update+0x112>
    {
10012772:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10012776:	460c      	mov	r4, r1
10012778:	4690      	mov	r8, r2
        if (sha256 == NULL || (data == NULL && len > 0)) {
1001277a:	2900      	cmp	r1, #0
1001277c:	d038      	beq.n	100127f0 <wc_Sha256Update+0x84>
1001277e:	4605      	mov	r5, r0
        if (sha256->buffLen >= WC_SHA256_BLOCK_SIZE) {
10012780:	6e00      	ldr	r0, [r0, #96]	@ 0x60
10012782:	283f      	cmp	r0, #63	@ 0x3f
10012784:	d861      	bhi.n	1001284a <wc_Sha256Update+0xde>
        if ((sha256->loLen += len) < tmp) {
10012786:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
10012788:	18d3      	adds	r3, r2, r3
1001278a:	666b      	str	r3, [r5, #100]	@ 0x64
1001278c:	d235      	bcs.n	100127fa <wc_Sha256Update+0x8e>
        local = (byte*)sha256->buffer;
1001278e:	f105 0620 	add.w	r6, r5, #32
        if (sha256->buffLen > 0) {
10012792:	2800      	cmp	r0, #0
10012794:	d138      	bne.n	10012808 <wc_Sha256Update+0x9c>
10012796:	f028 073f 	bic.w	r7, r8, #63	@ 0x3f
1001279a:	4427      	add	r7, r4
1001279c:	f105 095c 	add.w	r9, r5, #92	@ 0x5c
            while (len >= WC_SHA256_BLOCK_SIZE) {
100127a0:	42bc      	cmp	r4, r7
100127a2:	d045      	beq.n	10012830 <wc_Sha256Update+0xc4>
                    XMEMCPY(local32, data, WC_SHA256_BLOCK_SIZE);
100127a4:	4621      	mov	r1, r4
100127a6:	4633      	mov	r3, r6
100127a8:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
100127ac:	f8d1 c000 	ldr.w	ip, [r1]
100127b0:	684c      	ldr	r4, [r1, #4]
100127b2:	6888      	ldr	r0, [r1, #8]
100127b4:	68ca      	ldr	r2, [r1, #12]
100127b6:	60da      	str	r2, [r3, #12]
100127b8:	3110      	adds	r1, #16
100127ba:	4571      	cmp	r1, lr
100127bc:	f8c3 c000 	str.w	ip, [r3]
100127c0:	605c      	str	r4, [r3, #4]
100127c2:	6098      	str	r0, [r3, #8]
100127c4:	f103 0310 	add.w	r3, r3, #16
100127c8:	d1f0      	bne.n	100127ac <wc_Sha256Update+0x40>
                data += WC_SHA256_BLOCK_SIZE;
100127ca:	460c      	mov	r4, r1
                len  -= WC_SHA256_BLOCK_SIZE;
100127cc:	f1a8 0840 	sub.w	r8, r8, #64	@ 0x40
        for (i = 0; i < count; i++)
100127d0:	f105 031c 	add.w	r3, r5, #28
            out[i] = ByteReverseWord32(in[i]);
100127d4:	f853 2f04 	ldr.w	r2, [r3, #4]!
100127d8:	ba12      	rev	r2, r2
        for (i = 0; i < count; i++)
100127da:	4599      	cmp	r9, r3
            out[i] = ByteReverseWord32(in[i]);
100127dc:	601a      	str	r2, [r3, #0]
        for (i = 0; i < count; i++)
100127de:	d1f9      	bne.n	100127d4 <wc_Sha256Update+0x68>
                ret = XTRANSFORM(sha256, (const byte*)local32);
100127e0:	4631      	mov	r1, r6
100127e2:	4628      	mov	r0, r5
100127e4:	f7ff fe24 	bl	10012430 <Transform_Sha256>
                if (ret != 0)
100127e8:	2800      	cmp	r0, #0
100127ea:	d0d9      	beq.n	100127a0 <wc_Sha256Update+0x34>
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        return Sha256Update(sha256, data, len);
    }
100127ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (sha256 == NULL || (data == NULL && len > 0)) {
100127f0:	2a00      	cmp	r2, #0
100127f2:	d141      	bne.n	10012878 <wc_Sha256Update+0x10c>
            return 0;
100127f4:	2000      	movs	r0, #0
    }
100127f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            sha256->hiLen++;                       /* carry low to high */
100127fa:	6eab      	ldr	r3, [r5, #104]	@ 0x68
100127fc:	3301      	adds	r3, #1
100127fe:	66ab      	str	r3, [r5, #104]	@ 0x68
        local = (byte*)sha256->buffer;
10012800:	f105 0620 	add.w	r6, r5, #32
        if (sha256->buffLen > 0) {
10012804:	2800      	cmp	r0, #0
10012806:	d0c6      	beq.n	10012796 <wc_Sha256Update+0x2a>
            blocksLen = min(len, WC_SHA256_BLOCK_SIZE - sha256->buffLen);
10012808:	f1c0 0740 	rsb	r7, r0, #64	@ 0x40
        return a > b ? b : a;
1001280c:	4547      	cmp	r7, r8
1001280e:	bf28      	it	cs
10012810:	4647      	movcs	r7, r8
            XMEMCPY(&local[sha256->buffLen], data, blocksLen);
10012812:	4621      	mov	r1, r4
10012814:	463a      	mov	r2, r7
10012816:	4430      	add	r0, r6
10012818:	f007 fa0a 	bl	10019c30 <memcpy>
            sha256->buffLen += blocksLen;
1001281c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
            len             -= blocksLen;
1001281e:	eba8 0807 	sub.w	r8, r8, r7
            data            += blocksLen;
10012822:	443c      	add	r4, r7
            sha256->buffLen += blocksLen;
10012824:	441f      	add	r7, r3
            if (sha256->buffLen == WC_SHA256_BLOCK_SIZE) {
10012826:	2f40      	cmp	r7, #64	@ 0x40
            sha256->buffLen += blocksLen;
10012828:	662f      	str	r7, [r5, #96]	@ 0x60
            if (sha256->buffLen == WC_SHA256_BLOCK_SIZE) {
1001282a:	d011      	beq.n	10012850 <wc_Sha256Update+0xe4>
                ret = XTRANSFORM(sha256, (const byte*)local);
1001282c:	2000      	movs	r0, #0
1001282e:	e7b2      	b.n	10012796 <wc_Sha256Update+0x2a>
        if (ret == 0 && len > 0) {
10012830:	2800      	cmp	r0, #0
10012832:	d1db      	bne.n	100127ec <wc_Sha256Update+0x80>
10012834:	f1b8 0f00 	cmp.w	r8, #0
10012838:	d0dc      	beq.n	100127f4 <wc_Sha256Update+0x88>
            XMEMCPY(local, data, len);
1001283a:	4642      	mov	r2, r8
1001283c:	4621      	mov	r1, r4
1001283e:	4630      	mov	r0, r6
10012840:	f007 f9f6 	bl	10019c30 <memcpy>
            sha256->buffLen = len;
10012844:	f8c5 8060 	str.w	r8, [r5, #96]	@ 0x60
10012848:	e7d4      	b.n	100127f4 <wc_Sha256Update+0x88>
            return BUFFER_E;
1001284a:	f06f 0083 	mvn.w	r0, #131	@ 0x83
1001284e:	e7cd      	b.n	100127ec <wc_Sha256Update+0x80>
10012850:	f105 031c 	add.w	r3, r5, #28
10012854:	f105 015c 	add.w	r1, r5, #92	@ 0x5c
            out[i] = ByteReverseWord32(in[i]);
10012858:	f853 2f04 	ldr.w	r2, [r3, #4]!
1001285c:	ba12      	rev	r2, r2
        for (i = 0; i < count; i++)
1001285e:	4299      	cmp	r1, r3
            out[i] = ByteReverseWord32(in[i]);
10012860:	601a      	str	r2, [r3, #0]
        for (i = 0; i < count; i++)
10012862:	d1f9      	bne.n	10012858 <wc_Sha256Update+0xec>
                ret = XTRANSFORM(sha256, (const byte*)local);
10012864:	4631      	mov	r1, r6
10012866:	4628      	mov	r0, r5
10012868:	f7ff fde2 	bl	10012430 <Transform_Sha256>
                if (ret == 0)
1001286c:	b908      	cbnz	r0, 10012872 <wc_Sha256Update+0x106>
                    sha256->buffLen = 0;
1001286e:	6628      	str	r0, [r5, #96]	@ 0x60
10012870:	e7dc      	b.n	1001282c <wc_Sha256Update+0xc0>
                    len = 0; /* error */
10012872:	f04f 0800 	mov.w	r8, #0
10012876:	e78e      	b.n	10012796 <wc_Sha256Update+0x2a>
            return BAD_FUNC_ARG;
10012878:	f06f 00ac 	mvn.w	r0, #172	@ 0xac
1001287c:	e7b6      	b.n	100127ec <wc_Sha256Update+0x80>
1001287e:	f06f 00ac 	mvn.w	r0, #172	@ 0xac
    }
10012882:	4770      	bx	lr

10012884 <wc_Sha256Final>:

    int wc_Sha256Final(wc_Sha256* sha256, byte* hash)
    {
        int ret;

        if (sha256 == NULL || hash == NULL) {
10012884:	2800      	cmp	r0, #0
10012886:	f000 808d 	beq.w	100129a4 <wc_Sha256Final+0x120>
    {
1001288a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1001288e:	460e      	mov	r6, r1
        if (sha256 == NULL || hash == NULL) {
10012890:	2900      	cmp	r1, #0
10012892:	f000 8084 	beq.w	1001299e <wc_Sha256Final+0x11a>
        if (sha256->buffLen > WC_SHA256_BLOCK_SIZE - 1) {
10012896:	6e03      	ldr	r3, [r0, #96]	@ 0x60
10012898:	2b3f      	cmp	r3, #63	@ 0x3f
1001289a:	4604      	mov	r4, r0
1001289c:	d87c      	bhi.n	10012998 <wc_Sha256Final+0x114>
        local[sha256->buffLen++] = 0x80; /* add 1 */
1001289e:	1c5a      	adds	r2, r3, #1
        local = (byte*)sha256->buffer;
100128a0:	f100 0820 	add.w	r8, r0, #32
        local[sha256->buffLen++] = 0x80; /* add 1 */
100128a4:	6602      	str	r2, [r0, #96]	@ 0x60
100128a6:	2280      	movs	r2, #128	@ 0x80
100128a8:	f808 2003 	strb.w	r2, [r8, r3]
        if (sha256->buffLen > WC_SHA256_PAD_SIZE) {
100128ac:	6e03      	ldr	r3, [r0, #96]	@ 0x60
100128ae:	2b38      	cmp	r3, #56	@ 0x38
100128b0:	d854      	bhi.n	1001295c <wc_Sha256Final+0xd8>
            XMEMSET(&local[sha256->buffLen], 0,
100128b2:	eb08 0003 	add.w	r0, r8, r3
        XMEMSET(&local[sha256->buffLen], 0,
100128b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
100128ba:	f104 071c 	add.w	r7, r4, #28
100128be:	f104 055c 	add.w	r5, r4, #92	@ 0x5c
100128c2:	2100      	movs	r1, #0
100128c4:	f006 fe7a 	bl	100195bc <memset>
                                                         (sha256->hiLen << 3);
100128c8:	e9d4 3119 	ldrd	r3, r1, [r4, #100]	@ 0x64
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
100128cc:	0f5a      	lsrs	r2, r3, #29
100128ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
        sha256->loLen = sha256->loLen << 3;
100128d2:	00db      	lsls	r3, r3, #3
100128d4:	6663      	str	r3, [r4, #100]	@ 0x64
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
100128d6:	66a2      	str	r2, [r4, #104]	@ 0x68
100128d8:	463b      	mov	r3, r7
            out[i] = ByteReverseWord32(in[i]);
100128da:	f853 2f04 	ldr.w	r2, [r3, #4]!
100128de:	ba12      	rev	r2, r2
        for (i = 0; i < count; i++)
100128e0:	429d      	cmp	r5, r3
            out[i] = ByteReverseWord32(in[i]);
100128e2:	601a      	str	r2, [r3, #0]
        for (i = 0; i < count; i++)
100128e4:	d1f9      	bne.n	100128da <wc_Sha256Final+0x56>
        XMEMCPY(&local[WC_SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
100128e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100128e8:	65e3      	str	r3, [r4, #92]	@ 0x5c
100128ea:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
100128ec:	65a3      	str	r3, [r4, #88]	@ 0x58
        ret = XTRANSFORM(sha256, (const byte*)local);
100128ee:	4641      	mov	r1, r8
100128f0:	4620      	mov	r0, r4
100128f2:	f7ff fd9d 	bl	10012430 <Transform_Sha256>
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        ret = Sha256Final(sha256);
        if (ret != 0) {
100128f6:	bb78      	cbnz	r0, 10012958 <wc_Sha256Final+0xd4>
100128f8:	1f23      	subs	r3, r4, #4
            out[i] = ByteReverseWord32(in[i]);
100128fa:	f853 2f04 	ldr.w	r2, [r3, #4]!
100128fe:	ba12      	rev	r2, r2
        for (i = 0; i < count; i++)
10012900:	42bb      	cmp	r3, r7
            out[i] = ByteReverseWord32(in[i]);
10012902:	601a      	str	r2, [r3, #0]
        for (i = 0; i < count; i++)
10012904:	d1f9      	bne.n	100128fa <wc_Sha256Final+0x76>
            {
                ByteReverseWords(sha256->digest, sha256->digest,
                                 WC_SHA256_DIGEST_SIZE);
            }
    #endif
        XMEMCPY(hash, sha256->digest, WC_SHA256_DIGEST_SIZE);
10012906:	6821      	ldr	r1, [r4, #0]
10012908:	6863      	ldr	r3, [r4, #4]
1001290a:	68a2      	ldr	r2, [r4, #8]
1001290c:	68e5      	ldr	r5, [r4, #12]
1001290e:	60f5      	str	r5, [r6, #12]
10012910:	6031      	str	r1, [r6, #0]
10012912:	6073      	str	r3, [r6, #4]
10012914:	60b2      	str	r2, [r6, #8]
10012916:	6921      	ldr	r1, [r4, #16]
10012918:	6963      	ldr	r3, [r4, #20]
1001291a:	69a2      	ldr	r2, [r4, #24]
1001291c:	69e5      	ldr	r5, [r4, #28]
1001291e:	6131      	str	r1, [r6, #16]
    sha256->digest[0] = 0x6A09E667L;
10012920:	4922      	ldr	r1, [pc, #136]	@ (100129ac <wc_Sha256Final+0x128>)
        XMEMCPY(hash, sha256->digest, WC_SHA256_DIGEST_SIZE);
10012922:	6173      	str	r3, [r6, #20]
10012924:	61b2      	str	r2, [r6, #24]
10012926:	61f5      	str	r5, [r6, #28]
    sha256->digest[2] = 0x3C6EF372L;
10012928:	4a21      	ldr	r2, [pc, #132]	@ (100129b0 <wc_Sha256Final+0x12c>)
    sha256->digest[0] = 0x6A09E667L;
1001292a:	6021      	str	r1, [r4, #0]
    sha256->digest[2] = 0x3C6EF372L;
1001292c:	4921      	ldr	r1, [pc, #132]	@ (100129b4 <wc_Sha256Final+0x130>)
1001292e:	e9c4 1201 	strd	r1, r2, [r4, #4]
    sha256->digest[4] = 0x510E527FL;
10012932:	4921      	ldr	r1, [pc, #132]	@ (100129b8 <wc_Sha256Final+0x134>)
10012934:	4a21      	ldr	r2, [pc, #132]	@ (100129bc <wc_Sha256Final+0x138>)
10012936:	e9c4 1203 	strd	r1, r2, [r4, #12]
    sha256->digest[6] = 0x1F83D9ABL;
1001293a:	4a21      	ldr	r2, [pc, #132]	@ (100129c0 <wc_Sha256Final+0x13c>)
1001293c:	4921      	ldr	r1, [pc, #132]	@ (100129c4 <wc_Sha256Final+0x140>)
    sha256->buffLen = 0;
1001293e:	2300      	movs	r3, #0
    sha256->digest[6] = 0x1F83D9ABL;
10012940:	e9c4 1205 	strd	r1, r2, [r4, #20]
    sha256->digest[7] = 0x5BE0CD19L;
10012944:	f102 5274 	add.w	r2, r2, #1023410176	@ 0x3d000000
10012948:	f5a2 0223 	sub.w	r2, r2, #10682368	@ 0xa30000
    sha256->loLen   = 0;
1001294c:	e9c4 3318 	strd	r3, r3, [r4, #96]	@ 0x60
    sha256->digest[7] = 0x5BE0CD19L;
10012950:	f6a2 4292 	subw	r2, r2, #3218	@ 0xc92
10012954:	61e2      	str	r2, [r4, #28]
    sha256->hiLen   = 0;
10012956:	66a3      	str	r3, [r4, #104]	@ 0x68

        return InitSha256(sha256);  /* reset state */
    }
10012958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            XMEMSET(&local[sha256->buffLen], 0,
1001295c:	f1c3 0240 	rsb	r2, r3, #64	@ 0x40
10012960:	eb08 0003 	add.w	r0, r8, r3
10012964:	2100      	movs	r1, #0
10012966:	f006 fe29 	bl	100195bc <memset>
            sha256->buffLen += WC_SHA256_BLOCK_SIZE - sha256->buffLen;
1001296a:	f104 071c 	add.w	r7, r4, #28
1001296e:	2340      	movs	r3, #64	@ 0x40
10012970:	6623      	str	r3, [r4, #96]	@ 0x60
10012972:	f104 055c 	add.w	r5, r4, #92	@ 0x5c
10012976:	463b      	mov	r3, r7
            out[i] = ByteReverseWord32(in[i]);
10012978:	f853 2f04 	ldr.w	r2, [r3, #4]!
1001297c:	ba12      	rev	r2, r2
        for (i = 0; i < count; i++)
1001297e:	429d      	cmp	r5, r3
            out[i] = ByteReverseWord32(in[i]);
10012980:	601a      	str	r2, [r3, #0]
        for (i = 0; i < count; i++)
10012982:	d1f9      	bne.n	10012978 <wc_Sha256Final+0xf4>
            ret = XTRANSFORM(sha256, (const byte*)local);
10012984:	4641      	mov	r1, r8
10012986:	4620      	mov	r0, r4
10012988:	f7ff fd52 	bl	10012430 <Transform_Sha256>
            if (ret != 0)
1001298c:	2800      	cmp	r0, #0
1001298e:	d1e3      	bne.n	10012958 <wc_Sha256Final+0xd4>
            sha256->buffLen = 0;
10012990:	6620      	str	r0, [r4, #96]	@ 0x60
10012992:	2238      	movs	r2, #56	@ 0x38
10012994:	4640      	mov	r0, r8
10012996:	e794      	b.n	100128c2 <wc_Sha256Final+0x3e>
            return BAD_STATE_E;
10012998:	f06f 00bf 	mvn.w	r0, #191	@ 0xbf
1001299c:	e7dc      	b.n	10012958 <wc_Sha256Final+0xd4>
            return BAD_FUNC_ARG;
1001299e:	f06f 00ac 	mvn.w	r0, #172	@ 0xac
100129a2:	e7d9      	b.n	10012958 <wc_Sha256Final+0xd4>
100129a4:	f06f 00ac 	mvn.w	r0, #172	@ 0xac
    }
100129a8:	4770      	bx	lr
100129aa:	bf00      	nop
100129ac:	6a09e667 	.word	0x6a09e667
100129b0:	3c6ef372 	.word	0x3c6ef372
100129b4:	bb67ae85 	.word	0xbb67ae85
100129b8:	a54ff53a 	.word	0xa54ff53a
100129bc:	510e527f 	.word	0x510e527f
100129c0:	1f83d9ab 	.word	0x1f83d9ab
100129c4:	9b05688c 	.word	0x9b05688c

100129c8 <wc_InitSha256>:
        if (sha256 == NULL)
100129c8:	b1c0      	cbz	r0, 100129fc <wc_InitSha256+0x34>
#endif /* !defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH)  */
#endif /*  WOLFSSL_SHA224 */


int wc_InitSha256(wc_Sha256* sha256)
{
100129ca:	b410      	push	{r4}
    sha256->digest[1] = 0xBB67AE85L;
100129cc:	4a0d      	ldr	r2, [pc, #52]	@ (10012a04 <wc_InitSha256+0x3c>)
    sha256->digest[0] = 0x6A09E667L;
100129ce:	4c0e      	ldr	r4, [pc, #56]	@ (10012a08 <wc_InitSha256+0x40>)
    sha256->digest[2] = 0x3C6EF372L;
100129d0:	490e      	ldr	r1, [pc, #56]	@ (10012a0c <wc_InitSha256+0x44>)
    sha256->digest[1] = 0xBB67AE85L;
100129d2:	e9c0 4200 	strd	r4, r2, [r0]
    sha256->digest[3] = 0xA54FF53AL;
100129d6:	4a0e      	ldr	r2, [pc, #56]	@ (10012a10 <wc_InitSha256+0x48>)
    sha256->digest[4] = 0x510E527FL;
100129d8:	4c0e      	ldr	r4, [pc, #56]	@ (10012a14 <wc_InitSha256+0x4c>)
    sha256->digest[3] = 0xA54FF53AL;
100129da:	e9c0 1202 	strd	r1, r2, [r0, #8]
    sha256->digest[5] = 0x9B05688CL;
100129de:	4a0e      	ldr	r2, [pc, #56]	@ (10012a18 <wc_InitSha256+0x50>)
    sha256->digest[6] = 0x1F83D9ABL;
100129e0:	490e      	ldr	r1, [pc, #56]	@ (10012a1c <wc_InitSha256+0x54>)
    sha256->digest[5] = 0x9B05688CL;
100129e2:	e9c0 4204 	strd	r4, r2, [r0, #16]
    sha256->digest[7] = 0x5BE0CD19L;
100129e6:	4a0e      	ldr	r2, [pc, #56]	@ (10012a20 <wc_InitSha256+0x58>)

#ifdef WOLF_CRYPTO_CB
    devId = wc_CryptoCb_DefaultDevID();
#endif
    return wc_InitSha256_ex(sha256, NULL, devId);
}
100129e8:	bc10      	pop	{r4}
    sha256->buffLen = 0;
100129ea:	2300      	movs	r3, #0
    sha256->digest[7] = 0x5BE0CD19L;
100129ec:	e9c0 1206 	strd	r1, r2, [r0, #24]
        sha256->heap = heap;
100129f0:	e9c0 331a 	strd	r3, r3, [r0, #104]	@ 0x68
    sha256->buffLen = 0;
100129f4:	6603      	str	r3, [r0, #96]	@ 0x60
100129f6:	6643      	str	r3, [r0, #100]	@ 0x64
    return ret;
100129f8:	4618      	mov	r0, r3
}
100129fa:	4770      	bx	lr
            return BAD_FUNC_ARG;
100129fc:	f06f 00ac 	mvn.w	r0, #172	@ 0xac
}
10012a00:	4770      	bx	lr
10012a02:	bf00      	nop
10012a04:	bb67ae85 	.word	0xbb67ae85
10012a08:	6a09e667 	.word	0x6a09e667
10012a0c:	3c6ef372 	.word	0x3c6ef372
10012a10:	a54ff53a 	.word	0xa54ff53a
10012a14:	510e527f 	.word	0x510e527f
10012a18:	9b05688c 	.word	0x9b05688c
10012a1c:	1f83d9ab 	.word	0x1f83d9ab
10012a20:	5be0cd19 	.word	0x5be0cd19

10012a24 <wc_Sha256Free>:
#if !defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH)
    /* implemented in wolfcrypt/src/port/psa/psa_hash.c */

void wc_Sha256Free(wc_Sha256* sha256)
{
    if (sha256 == NULL)
10012a24:	b138      	cbz	r0, 10012a36 <wc_Sha256Free+0x12>
10012a26:	f100 0170 	add.w	r1, r0, #112	@ 0x70
    while (len--) *z++ = 0;
10012a2a:	2200      	movs	r2, #0
10012a2c:	4603      	mov	r3, r0
10012a2e:	3001      	adds	r0, #1
10012a30:	4288      	cmp	r0, r1
10012a32:	701a      	strb	r2, [r3, #0]
10012a34:	d1fa      	bne.n	10012a2c <wc_Sha256Free+0x8>
    else {
        ESP_LOGV(TAG, "Hardware unlock not needed in wc_Sha256Free.");
    }
#endif
    ForceZero(sha256, sizeof(*sha256));
} /* wc_Sha256Free */
10012a36:	4770      	bx	lr

10012a38 <mxc_assert>:
};
const unsigned int num_leds = (sizeof(led_pin) / sizeof(mxc_gpio_cfg_t));

/******************************************************************************/
void mxc_assert(const char *expr, const char *file, int line)
{
10012a38:	b508      	push	{r3, lr}
10012a3a:	4603      	mov	r3, r0
    printf("MXC_ASSERT %s #%d: (%s)\n", file, line, expr);
10012a3c:	4801      	ldr	r0, [pc, #4]	@ (10012a44 <mxc_assert+0xc>)
10012a3e:	f002 fb65 	bl	1001510c <printf>

    while (1) {}
10012a42:	e7fe      	b.n	10012a42 <mxc_assert+0xa>
10012a44:	10025268 	.word	0x10025268

10012a48 <GPIO0_IRQHandler>:
 * NOTE: This weak definition is included to support Push Button 0 interrupts in
 *       case the user does not define this interrupt handler in their application.
 **/
__weak void GPIO0_IRQHandler(void)
{
    MXC_GPIO_Handler(MXC_GPIO_GET_IDX(MXC_GPIO0));
10012a48:	2000      	movs	r0, #0
10012a4a:	f000 bdd3 	b.w	100135f4 <MXC_GPIO_Handler>
10012a4e:	bf00      	nop

10012a50 <GPIO1_IRQHandler>:
 * NOTE: This weak definition is included to support Push Button 1 interrupts in
 *       case the user does not define this interrupt handler in their application.
 **/
__weak void GPIO1_IRQHandler(void)
{
    MXC_GPIO_Handler(MXC_GPIO_GET_IDX(MXC_GPIO1));
10012a50:	2001      	movs	r0, #1
10012a52:	f000 bdcf 	b.w	100135f4 <MXC_GPIO_Handler>
10012a56:	bf00      	nop

10012a58 <Board_Init>:
}

/******************************************************************************/
int Board_Init(void)
{
10012a58:	b510      	push	{r4, lr}
#ifndef __riscv
    int err;

    // Enable GPIO
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO0);
10012a5a:	2000      	movs	r0, #0
10012a5c:	f000 fb60 	bl	10013120 <MXC_SYS_ClockEnable>
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO1);
10012a60:	2001      	movs	r0, #1
10012a62:	f000 fb5d 	bl	10013120 <MXC_SYS_ClockEnable>
    MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO2);
10012a66:	2040      	movs	r0, #64	@ 0x40
10012a68:	f000 fb5a 	bl	10013120 <MXC_SYS_ClockEnable>
/******************************************************************************/
int Console_Init(void)
{
    int err;

    if ((err = MXC_UART_Init(ConsoleUart, CONSOLE_BAUD, MXC_UART_IBRO_CLK)) != E_NO_ERROR) {
10012a6c:	4b10      	ldr	r3, [pc, #64]	@ (10012ab0 <Board_Init+0x58>)
10012a6e:	2202      	movs	r2, #2
10012a70:	6818      	ldr	r0, [r3, #0]
10012a72:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
10012a76:	f001 fd55 	bl	10014524 <MXC_UART_Init>
    if ((err = Console_Init()) < E_NO_ERROR) {
10012a7a:	1e04      	subs	r4, r0, #0
10012a7c:	db0c      	blt.n	10012a98 <Board_Init+0x40>
    if ((err = PB_Init()) != E_NO_ERROR) {
10012a7e:	f000 f8ef 	bl	10012c60 <PB_Init>
10012a82:	b958      	cbnz	r0, 10012a9c <Board_Init+0x44>
    if ((err = LED_Init()) != E_NO_ERROR) {
10012a84:	f000 f88c 	bl	10012ba0 <LED_Init>
10012a88:	4604      	mov	r4, r0
10012a8a:	b960      	cbnz	r0, 10012aa6 <Board_Init+0x4e>
    MXC_SIMO->vrego_c = 0x43; // Set CNN voltage
10012a8c:	4b09      	ldr	r3, [pc, #36]	@ (10012ab4 <Board_Init+0x5c>)
    MXC_Delay(200000);
10012a8e:	480a      	ldr	r0, [pc, #40]	@ (10012ab8 <Board_Init+0x60>)
    MXC_SIMO->vrego_c = 0x43; // Set CNN voltage
10012a90:	2243      	movs	r2, #67	@ 0x43
10012a92:	60da      	str	r2, [r3, #12]
    MXC_Delay(200000);
10012a94:	f000 fac2 	bl	1001301c <MXC_Delay>
}
10012a98:	4620      	mov	r0, r4
10012a9a:	bd10      	pop	{r4, pc}
        MXC_ASSERT_FAIL();
10012a9c:	4907      	ldr	r1, [pc, #28]	@ (10012abc <Board_Init+0x64>)
10012a9e:	4808      	ldr	r0, [pc, #32]	@ (10012ac0 <Board_Init+0x68>)
10012aa0:	226f      	movs	r2, #111	@ 0x6f
10012aa2:	f7ff ffc9 	bl	10012a38 <mxc_assert>
        MXC_ASSERT_FAIL();
10012aa6:	4905      	ldr	r1, [pc, #20]	@ (10012abc <Board_Init+0x64>)
10012aa8:	4805      	ldr	r0, [pc, #20]	@ (10012ac0 <Board_Init+0x68>)
10012aaa:	2274      	movs	r2, #116	@ 0x74
10012aac:	f7ff ffc4 	bl	10012a38 <mxc_assert>
10012ab0:	20000000 	.word	0x20000000
10012ab4:	40004400 	.word	0x40004400
10012ab8:	00030d40 	.word	0x00030d40
10012abc:	10025284 	.word	0x10025284
10012ac0:	100252e0 	.word	0x100252e0

10012ac4 <NMI_Handler>:
}

/******************************************************************************/
void NMI_Handler(void)
{
    __NOP();
10012ac4:	bf00      	nop
}
10012ac6:	4770      	bx	lr

10012ac8 <_open>:
 */
#if defined(__GNUC__)
int _open(const char *name, int flags, int mode)
{
    return -1;
}
10012ac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10012acc:	4770      	bx	lr
10012ace:	bf00      	nop

10012ad0 <_close>:
int _close(int file)
{
    return -1;
}
10012ad0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10012ad4:	4770      	bx	lr
10012ad6:	bf00      	nop

10012ad8 <_isatty>:
int _isatty(int file)
10012ad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10012adc:	4770      	bx	lr
10012ade:	bf00      	nop

10012ae0 <_lseek>:
    return -1;
}
int _lseek(int file, off_t offset, int whence)
{
    return -1;
}
10012ae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10012ae4:	4770      	bx	lr
10012ae6:	bf00      	nop

10012ae8 <_fstat>:
int _fstat(int file, struct stat *st)
{
    return -1;
}
10012ae8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10012aec:	4770      	bx	lr
10012aee:	bf00      	nop

10012af0 <_read>:
   fgetc for stdio */
#if defined(__ICCARM__) || defined(__GNUC__)

#if defined(__GNUC__) // GNUC _read function prototype
int _read(int file, char *ptr, int len)
{
10012af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t n;
#endif /*  */

    int num = 0; // count of number received.

    switch (file) {
10012af2:	b9e0      	cbnz	r0, 10012b2e <_read+0x3e>
    case STDIN_FILENO:
        for (n = 0; n < len; n++) {
10012af4:	2a00      	cmp	r2, #0
10012af6:	dd19      	ble.n	10012b2c <_read+0x3c>
            *ptr = MXC_UART_ReadCharacter(MXC_UARTn); // read a byte.
10012af8:	4d10      	ldr	r5, [pc, #64]	@ (10012b3c <_read+0x4c>)
10012afa:	460e      	mov	r6, r1
10012afc:	188f      	adds	r7, r1, r2
        for (n = 0; n < len; n++) {
10012afe:	460c      	mov	r4, r1
10012b00:	e002      	b.n	10012b08 <_read+0x18>
10012b02:	42bb      	cmp	r3, r7
10012b04:	d00f      	beq.n	10012b26 <_read+0x36>
                num++;
                ptr++;

                break;
            } else {
                ptr++;
10012b06:	461c      	mov	r4, r3
            *ptr = MXC_UART_ReadCharacter(MXC_UARTn); // read a byte.
10012b08:	4628      	mov	r0, r5
10012b0a:	f001 fe03 	bl	10014714 <MXC_UART_ReadCharacter>
10012b0e:	b2c1      	uxtb	r1, r0
10012b10:	7021      	strb	r1, [r4, #0]
            MXC_UART_WriteCharacter(MXC_UARTn, *ptr); // echo the byte.
10012b12:	4628      	mov	r0, r5
10012b14:	f001 fe00 	bl	10014718 <MXC_UART_WriteCharacter>
            if (*ptr == '\r') { // check for end of line.
10012b18:	7822      	ldrb	r2, [r4, #0]
10012b1a:	2a0d      	cmp	r2, #13
                ptr++;
10012b1c:	f104 0301 	add.w	r3, r4, #1
            if (*ptr == '\r') { // check for end of line.
10012b20:	d1ef      	bne.n	10012b02 <_read+0x12>
                *ptr = '\n';
10012b22:	230a      	movs	r3, #10
10012b24:	7023      	strb	r3, [r4, #0]
                num++;
10012b26:	f1c6 0601 	rsb	r6, r6, #1
10012b2a:	19a0      	adds	r0, r4, r6
        errno = EBADF;
        return -1;
    }

    return num;
}
10012b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        errno = EBADF;
10012b2e:	f006 fe67 	bl	10019800 <__errno>
10012b32:	2309      	movs	r3, #9
10012b34:	6003      	str	r3, [r0, #0]
        return -1;
10012b36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
10012b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012b3c:	40042000 	.word	0x40042000

10012b40 <_write>:

/* newlib/libc printf() will eventually call write() to get the data to the stdout */
#if defined(__GNUC__)
// GNUC _write function prototype
int _write(int file, char *ptr, int len)
{
10012b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int __write(int file, const unsigned char *ptr, size_t len)
{
    size_t n;
#endif /* __GNUC__ */

    switch (file) {
10012b42:	1e43      	subs	r3, r0, #1
10012b44:	2b01      	cmp	r3, #1
10012b46:	d821      	bhi.n	10012b8c <_write+0x4c>
    case STDOUT_FILENO:
    case STDERR_FILENO:

        // This function should be as fast as possible
        // So we'll forgo the UART driver for now
        for (n = 0; n < len; n++) {
10012b48:	2a00      	cmp	r2, #0
10012b4a:	4617      	mov	r7, r2
10012b4c:	dd12      	ble.n	10012b74 <_write+0x34>
10012b4e:	1e53      	subs	r3, r2, #1
            if (*ptr == '\n') {
                // Wait until there's room in the FIFO
                while (MXC_UART_GetTXFIFOAvailable(MXC_UARTn) == 0) {}
10012b50:	4e12      	ldr	r6, [pc, #72]	@ (10012b9c <_write+0x5c>)
10012b52:	1e4c      	subs	r4, r1, #1
10012b54:	18cd      	adds	r5, r1, r3
            if (*ptr == '\n') {
10012b56:	f814 3f01 	ldrb.w	r3, [r4, #1]!
10012b5a:	2b0a      	cmp	r3, #10
10012b5c:	d00c      	beq.n	10012b78 <_write+0x38>

                MXC_UART_WriteCharacter(MXC_UARTn, '\r');
            }

            // Wait until there's room in the FIFO
            while (MXC_UART_GetTXFIFOAvailable(MXC_UARTn) == 0) {}
10012b5e:	480f      	ldr	r0, [pc, #60]	@ (10012b9c <_write+0x5c>)
10012b60:	f001 fdde 	bl	10014720 <MXC_UART_GetTXFIFOAvailable>
10012b64:	2800      	cmp	r0, #0
10012b66:	d0fa      	beq.n	10012b5e <_write+0x1e>

            MXC_UART_WriteCharacter(MXC_UARTn, *ptr++);
10012b68:	7821      	ldrb	r1, [r4, #0]
10012b6a:	4630      	mov	r0, r6
10012b6c:	f001 fdd4 	bl	10014718 <MXC_UART_WriteCharacter>
        for (n = 0; n < len; n++) {
10012b70:	42ac      	cmp	r4, r5
10012b72:	d1f0      	bne.n	10012b56 <_write+0x16>

        break;

    default:
        errno = EBADF;
        return -1;
10012b74:	4638      	mov	r0, r7
    }

    return len;
}
10012b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                while (MXC_UART_GetTXFIFOAvailable(MXC_UARTn) == 0) {}
10012b78:	4808      	ldr	r0, [pc, #32]	@ (10012b9c <_write+0x5c>)
10012b7a:	f001 fdd1 	bl	10014720 <MXC_UART_GetTXFIFOAvailable>
10012b7e:	2800      	cmp	r0, #0
10012b80:	d0fa      	beq.n	10012b78 <_write+0x38>
                MXC_UART_WriteCharacter(MXC_UARTn, '\r');
10012b82:	210d      	movs	r1, #13
10012b84:	4630      	mov	r0, r6
10012b86:	f001 fdc7 	bl	10014718 <MXC_UART_WriteCharacter>
10012b8a:	e7e8      	b.n	10012b5e <_write+0x1e>
        errno = EBADF;
10012b8c:	f006 fe38 	bl	10019800 <__errno>
10012b90:	2309      	movs	r3, #9
10012b92:	6003      	str	r3, [r0, #0]
        return -1;
10012b94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
10012b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012b9a:	bf00      	nop
10012b9c:	40042000 	.word	0x40042000

10012ba0 <LED_Init>:
#include "led.h"
#include "mxc_device.h"

/******************************************************************************/
int LED_Init(void)
{
10012ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int retval = E_NO_ERROR;
    unsigned int i;

    /* setup GPIO for the LED */
    for (i = 0; i < num_leds; i++) {
10012ba2:	4b0d      	ldr	r3, [pc, #52]	@ (10012bd8 <LED_Init+0x38>)
10012ba4:	681f      	ldr	r7, [r3, #0]
10012ba6:	b1a7      	cbz	r7, 10012bd2 <LED_Init+0x32>
10012ba8:	2500      	movs	r5, #0
10012baa:	4c0c      	ldr	r4, [pc, #48]	@ (10012bdc <LED_Init+0x3c>)
    int retval = E_NO_ERROR;
10012bac:	462e      	mov	r6, r5
//******************************************************************************
void LED_Off(unsigned int idx)
{
    MXC_ASSERT(idx < num_leds);
#if (LED_ON == 0)
    MXC_GPIO_OutSet(led_pin[idx].port, led_pin[idx].mask);
10012bae:	e9d4 0100 	ldrd	r0, r1, [r4]
10012bb2:	f000 fcf1 	bl	10013598 <MXC_GPIO_OutSet>
        if (MXC_GPIO_Config(&led_pin[i]) != E_NO_ERROR) {
10012bb6:	4620      	mov	r0, r4
10012bb8:	f000 fbe8 	bl	1001338c <MXC_GPIO_Config>
    for (i = 0; i < num_leds; i++) {
10012bbc:	3501      	adds	r5, #1
            retval = E_UNKNOWN;
10012bbe:	2800      	cmp	r0, #0
10012bc0:	bf18      	it	ne
10012bc2:	f06f 0607 	mvnne.w	r6, #7
    for (i = 0; i < num_leds; i++) {
10012bc6:	42af      	cmp	r7, r5
10012bc8:	f104 040c 	add.w	r4, r4, #12
10012bcc:	d1ef      	bne.n	10012bae <LED_Init+0xe>
}
10012bce:	4630      	mov	r0, r6
10012bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int retval = E_NO_ERROR;
10012bd2:	463e      	mov	r6, r7
}
10012bd4:	4630      	mov	r0, r6
10012bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012bd8:	100252e8 	.word	0x100252e8
10012bdc:	100252ec 	.word	0x100252ec

10012be0 <LED_On>:
    MXC_ASSERT(idx < num_leds);
10012be0:	4b0b      	ldr	r3, [pc, #44]	@ (10012c10 <LED_On+0x30>)
10012be2:	681b      	ldr	r3, [r3, #0]
10012be4:	4283      	cmp	r3, r0
{
10012be6:	b510      	push	{r4, lr}
10012be8:	4604      	mov	r4, r0
    MXC_ASSERT(idx < num_leds);
10012bea:	d90b      	bls.n	10012c04 <LED_On+0x24>
    MXC_GPIO_OutClr(led_pin[idx].port, led_pin[idx].mask);
10012bec:	4b09      	ldr	r3, [pc, #36]	@ (10012c14 <LED_On+0x34>)
10012bee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
10012bf2:	eb03 0284 	add.w	r2, r3, r4, lsl #2
10012bf6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
10012bfa:	6851      	ldr	r1, [r2, #4]
}
10012bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MXC_GPIO_OutClr(led_pin[idx].port, led_pin[idx].mask);
10012c00:	f000 bce0 	b.w	100135c4 <MXC_GPIO_OutClr>
    MXC_ASSERT(idx < num_leds);
10012c04:	4904      	ldr	r1, [pc, #16]	@ (10012c18 <LED_On+0x38>)
10012c06:	4805      	ldr	r0, [pc, #20]	@ (10012c1c <LED_On+0x3c>)
10012c08:	223b      	movs	r2, #59	@ 0x3b
10012c0a:	f7ff ff15 	bl	10012a38 <mxc_assert>
10012c0e:	e7ed      	b.n	10012bec <LED_On+0xc>
10012c10:	100252e8 	.word	0x100252e8
10012c14:	100252ec 	.word	0x100252ec
10012c18:	1002532c 	.word	0x1002532c
10012c1c:	10025374 	.word	0x10025374

10012c20 <LED_Off>:
    MXC_ASSERT(idx < num_leds);
10012c20:	4b0b      	ldr	r3, [pc, #44]	@ (10012c50 <LED_Off+0x30>)
10012c22:	681b      	ldr	r3, [r3, #0]
10012c24:	4283      	cmp	r3, r0
{
10012c26:	b510      	push	{r4, lr}
10012c28:	4604      	mov	r4, r0
    MXC_ASSERT(idx < num_leds);
10012c2a:	d90b      	bls.n	10012c44 <LED_Off+0x24>
    MXC_GPIO_OutSet(led_pin[idx].port, led_pin[idx].mask);
10012c2c:	4b09      	ldr	r3, [pc, #36]	@ (10012c54 <LED_Off+0x34>)
10012c2e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
10012c32:	eb03 0284 	add.w	r2, r3, r4, lsl #2
10012c36:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
10012c3a:	6851      	ldr	r1, [r2, #4]
#else
    MXC_GPIO_OutClr(led_pin[idx].port, led_pin[idx].mask);
#endif
}
10012c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MXC_GPIO_OutSet(led_pin[idx].port, led_pin[idx].mask);
10012c40:	f000 bcaa 	b.w	10013598 <MXC_GPIO_OutSet>
    MXC_ASSERT(idx < num_leds);
10012c44:	4904      	ldr	r1, [pc, #16]	@ (10012c58 <LED_Off+0x38>)
10012c46:	4805      	ldr	r0, [pc, #20]	@ (10012c5c <LED_Off+0x3c>)
10012c48:	2246      	movs	r2, #70	@ 0x46
10012c4a:	f7ff fef5 	bl	10012a38 <mxc_assert>
10012c4e:	e7ed      	b.n	10012c2c <LED_Off+0xc>
10012c50:	100252e8 	.word	0x100252e8
10012c54:	100252ec 	.word	0x100252ec
10012c58:	1002532c 	.word	0x1002532c
10012c5c:	10025374 	.word	0x10025374

10012c60 <PB_Init>:
#include "mxc_assert.h"
#include "pb.h"

/******************************************************************************/
int PB_Init(void)
{
10012c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int retval = E_NO_ERROR;
    unsigned int i;

    // Enable pushbutton inputs
    for (i = 0; i < num_pbs; i++) {
10012c62:	4b0b      	ldr	r3, [pc, #44]	@ (10012c90 <PB_Init+0x30>)
10012c64:	681f      	ldr	r7, [r3, #0]
10012c66:	b187      	cbz	r7, 10012c8a <PB_Init+0x2a>
10012c68:	2400      	movs	r4, #0
10012c6a:	4d0a      	ldr	r5, [pc, #40]	@ (10012c94 <PB_Init+0x34>)
    int retval = E_NO_ERROR;
10012c6c:	4626      	mov	r6, r4
        if (MXC_GPIO_Config(&pb_pin[i]) != E_NO_ERROR) {
10012c6e:	4628      	mov	r0, r5
10012c70:	f000 fb8c 	bl	1001338c <MXC_GPIO_Config>
    for (i = 0; i < num_pbs; i++) {
10012c74:	3401      	adds	r4, #1
            retval = E_UNKNOWN;
10012c76:	2800      	cmp	r0, #0
10012c78:	bf18      	it	ne
10012c7a:	f06f 0607 	mvnne.w	r6, #7
    for (i = 0; i < num_pbs; i++) {
10012c7e:	42bc      	cmp	r4, r7
10012c80:	f105 050c 	add.w	r5, r5, #12
10012c84:	d1f3      	bne.n	10012c6e <PB_Init+0xe>
        }
    }

    return retval;
}
10012c86:	4630      	mov	r0, r6
10012c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int retval = E_NO_ERROR;
10012c8a:	463e      	mov	r6, r7
}
10012c8c:	4630      	mov	r0, r6
10012c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012c90:	10025310 	.word	0x10025310
10012c94:	10025314 	.word	0x10025314

10012c98 <Reset_Handler>:
10012c98:	4847      	ldr	r0, [pc, #284]	@ (10012db8 <LPCMP_IRQHandler+0x2>)
10012c9a:	4685      	mov	sp, r0
10012c9c:	4847      	ldr	r0, [pc, #284]	@ (10012dbc <LPCMP_IRQHandler+0x6>)
10012c9e:	4780      	blx	r0
10012ca0:	b980      	cbnz	r0, 10012cc4 <.SKIPRAMINIT>
10012ca2:	4947      	ldr	r1, [pc, #284]	@ (10012dc0 <LPCMP_IRQHandler+0xa>)
10012ca4:	4a47      	ldr	r2, [pc, #284]	@ (10012dc4 <LPCMP_IRQHandler+0xe>)
10012ca6:	4b48      	ldr	r3, [pc, #288]	@ (10012dc8 <LPCMP_IRQHandler+0x12>)
10012ca8:	1a9b      	subs	r3, r3, r2
10012caa:	dd03      	ble.n	10012cb4 <Reset_Handler+0x1c>
10012cac:	3b04      	subs	r3, #4
10012cae:	58c8      	ldr	r0, [r1, r3]
10012cb0:	50d0      	str	r0, [r2, r3]
10012cb2:	dcfb      	bgt.n	10012cac <Reset_Handler+0x14>
10012cb4:	4945      	ldr	r1, [pc, #276]	@ (10012dcc <LPCMP_IRQHandler+0x16>)
10012cb6:	4a46      	ldr	r2, [pc, #280]	@ (10012dd0 <LPCMP_IRQHandler+0x1a>)
10012cb8:	2000      	movs	r0, #0
10012cba:	4291      	cmp	r1, r2
10012cbc:	bfbc      	itt	lt
10012cbe:	f841 0b04 	strlt.w	r0, [r1], #4
10012cc2:	e7fa      	blt.n	10012cba <Reset_Handler+0x22>

10012cc4 <.SKIPRAMINIT>:
10012cc4:	4843      	ldr	r0, [pc, #268]	@ (10012dd4 <LPCMP_IRQHandler+0x1e>)
10012cc6:	4780      	blx	r0
10012cc8:	4843      	ldr	r0, [pc, #268]	@ (10012dd8 <LPCMP_IRQHandler+0x22>)
10012cca:	4780      	blx	r0
10012ccc:	4843      	ldr	r0, [pc, #268]	@ (10012ddc <LPCMP_IRQHandler+0x26>)
10012cce:	4780      	blx	r0

10012cd0 <.SPIN>:
10012cd0:	f7ff fffe 	bl	10012cd0 <.SPIN>
10012cd4:	e7fe      	b.n	10012cd4 <.SPIN+0x4>

10012cd6 <HardFault_Handler>:
10012cd6:	e7fe      	b.n	10012cd6 <HardFault_Handler>

10012cd8 <MemManage_Handler>:
10012cd8:	e7fe      	b.n	10012cd8 <MemManage_Handler>

10012cda <BusFault_Handler>:
10012cda:	e7fe      	b.n	10012cda <BusFault_Handler>

10012cdc <UsageFault_Handler>:
10012cdc:	e7fe      	b.n	10012cdc <UsageFault_Handler>

10012cde <SVC_Handler>:
10012cde:	e7fe      	b.n	10012cde <SVC_Handler>

10012ce0 <DebugMon_Handler>:
10012ce0:	e7fe      	b.n	10012ce0 <DebugMon_Handler>

10012ce2 <PendSV_Handler>:
10012ce2:	e7fe      	b.n	10012ce2 <PendSV_Handler>

10012ce4 <SysTick_Handler>:
10012ce4:	e7fe      	b.n	10012ce4 <SysTick_Handler>

10012ce6 <Default_Handler>:
10012ce6:	e7fe      	b.n	10012ce6 <Default_Handler>

10012ce8 <PF_IRQHandler>:
10012ce8:	e7fe      	b.n	10012ce8 <PF_IRQHandler>

10012cea <WDT0_IRQHandler>:
10012cea:	e7fe      	b.n	10012cea <WDT0_IRQHandler>

10012cec <RSV02_IRQHandler>:
10012cec:	e7fe      	b.n	10012cec <RSV02_IRQHandler>

10012cee <RTC_IRQHandler>:
10012cee:	e7fe      	b.n	10012cee <RTC_IRQHandler>

10012cf0 <TRNG_IRQHandler>:
10012cf0:	e7fe      	b.n	10012cf0 <TRNG_IRQHandler>

10012cf2 <TMR0_IRQHandler>:
10012cf2:	e7fe      	b.n	10012cf2 <TMR0_IRQHandler>

10012cf4 <TMR1_IRQHandler>:
10012cf4:	e7fe      	b.n	10012cf4 <TMR1_IRQHandler>

10012cf6 <TMR2_IRQHandler>:
10012cf6:	e7fe      	b.n	10012cf6 <TMR2_IRQHandler>

10012cf8 <TMR3_IRQHandler>:
10012cf8:	e7fe      	b.n	10012cf8 <TMR3_IRQHandler>

10012cfa <TMR4_IRQHandler>:
10012cfa:	e7fe      	b.n	10012cfa <TMR4_IRQHandler>

10012cfc <TMR5_IRQHandler>:
10012cfc:	e7fe      	b.n	10012cfc <TMR5_IRQHandler>

10012cfe <RSV11_IRQHandler>:
10012cfe:	e7fe      	b.n	10012cfe <RSV11_IRQHandler>

10012d00 <RSV12_IRQHandler>:
10012d00:	e7fe      	b.n	10012d00 <RSV12_IRQHandler>

10012d02 <I2C0_IRQHandler>:
10012d02:	e7fe      	b.n	10012d02 <I2C0_IRQHandler>

10012d04 <UART0_IRQHandler>:
10012d04:	e7fe      	b.n	10012d04 <UART0_IRQHandler>

10012d06 <UART1_IRQHandler>:
10012d06:	e7fe      	b.n	10012d06 <UART1_IRQHandler>

10012d08 <SPI1_IRQHandler>:
10012d08:	e7fe      	b.n	10012d08 <SPI1_IRQHandler>

10012d0a <RSV17_IRQHandler>:
10012d0a:	e7fe      	b.n	10012d0a <RSV17_IRQHandler>

10012d0c <RSV18_IRQHandler>:
10012d0c:	e7fe      	b.n	10012d0c <RSV18_IRQHandler>

10012d0e <RSV19_IRQHandler>:
10012d0e:	e7fe      	b.n	10012d0e <RSV19_IRQHandler>

10012d10 <ADC_IRQHandler>:
10012d10:	e7fe      	b.n	10012d10 <ADC_IRQHandler>

10012d12 <RSV21_IRQHandler>:
10012d12:	e7fe      	b.n	10012d12 <RSV21_IRQHandler>

10012d14 <RSV22_IRQHandler>:
10012d14:	e7fe      	b.n	10012d14 <RSV22_IRQHandler>

10012d16 <FLC0_IRQHandler>:
10012d16:	e7fe      	b.n	10012d16 <FLC0_IRQHandler>
10012d18:	e7fe      	b.n	10012d18 <FLC0_IRQHandler+0x2>
10012d1a:	e7fe      	b.n	10012d1a <FLC0_IRQHandler+0x4>

10012d1c <GPIO2_IRQHandler>:
10012d1c:	e7fe      	b.n	10012d1c <GPIO2_IRQHandler>

10012d1e <RSV27_IRQHandler>:
10012d1e:	e7fe      	b.n	10012d1e <RSV27_IRQHandler>

10012d20 <DMA0_IRQHandler>:
10012d20:	e7fe      	b.n	10012d20 <DMA0_IRQHandler>

10012d22 <DMA1_IRQHandler>:
10012d22:	e7fe      	b.n	10012d22 <DMA1_IRQHandler>

10012d24 <DMA2_IRQHandler>:
10012d24:	e7fe      	b.n	10012d24 <DMA2_IRQHandler>

10012d26 <DMA3_IRQHandler>:
10012d26:	e7fe      	b.n	10012d26 <DMA3_IRQHandler>

10012d28 <RSV32_IRQHandler>:
10012d28:	e7fe      	b.n	10012d28 <RSV32_IRQHandler>

10012d2a <RSV33_IRQHandler>:
10012d2a:	e7fe      	b.n	10012d2a <RSV33_IRQHandler>

10012d2c <UART2_IRQHandler>:
10012d2c:	e7fe      	b.n	10012d2c <UART2_IRQHandler>

10012d2e <RSV35_IRQHandler>:
10012d2e:	e7fe      	b.n	10012d2e <RSV35_IRQHandler>

10012d30 <I2C1_IRQHandler>:
10012d30:	e7fe      	b.n	10012d30 <I2C1_IRQHandler>

10012d32 <RSV37_IRQHandler>:
10012d32:	e7fe      	b.n	10012d32 <RSV37_IRQHandler>

10012d34 <RSV38_IRQHandler>:
10012d34:	e7fe      	b.n	10012d34 <RSV38_IRQHandler>

10012d36 <RSV39_IRQHandler>:
10012d36:	e7fe      	b.n	10012d36 <RSV39_IRQHandler>

10012d38 <RSV40_IRQHandler>:
10012d38:	e7fe      	b.n	10012d38 <RSV40_IRQHandler>

10012d3a <RSV41_IRQHandler>:
10012d3a:	e7fe      	b.n	10012d3a <RSV41_IRQHandler>

10012d3c <RSV42_IRQHandler>:
10012d3c:	e7fe      	b.n	10012d3c <RSV42_IRQHandler>

10012d3e <RSV43_IRQHandler>:
10012d3e:	e7fe      	b.n	10012d3e <RSV43_IRQHandler>

10012d40 <RSV44_IRQHandler>:
10012d40:	e7fe      	b.n	10012d40 <RSV44_IRQHandler>

10012d42 <RSV45_IRQHandler>:
10012d42:	e7fe      	b.n	10012d42 <RSV45_IRQHandler>

10012d44 <RSV46_IRQHandler>:
10012d44:	e7fe      	b.n	10012d44 <RSV46_IRQHandler>

10012d46 <RSV47_IRQHandler>:
10012d46:	e7fe      	b.n	10012d46 <RSV47_IRQHandler>

10012d48 <RSV48_IRQHandler>:
10012d48:	e7fe      	b.n	10012d48 <RSV48_IRQHandler>

10012d4a <RSV49_IRQHandler>:
10012d4a:	e7fe      	b.n	10012d4a <RSV49_IRQHandler>

10012d4c <RSV50_IRQHandler>:
10012d4c:	e7fe      	b.n	10012d4c <RSV50_IRQHandler>

10012d4e <RSV51_IRQHandler>:
10012d4e:	e7fe      	b.n	10012d4e <RSV51_IRQHandler>

10012d50 <RSV52_IRQHandler>:
10012d50:	e7fe      	b.n	10012d50 <RSV52_IRQHandler>

10012d52 <WUT_IRQHandler>:
10012d52:	e7fe      	b.n	10012d52 <WUT_IRQHandler>

10012d54 <GPIOWAKE_IRQHandler>:
10012d54:	e7fe      	b.n	10012d54 <GPIOWAKE_IRQHandler>

10012d56 <RSV55_IRQHandler>:
10012d56:	e7fe      	b.n	10012d56 <RSV55_IRQHandler>

10012d58 <SPI0_IRQHandler>:
10012d58:	e7fe      	b.n	10012d58 <SPI0_IRQHandler>

10012d5a <WDT1_IRQHandler>:
10012d5a:	e7fe      	b.n	10012d5a <WDT1_IRQHandler>

10012d5c <RSV58_IRQHandler>:
10012d5c:	e7fe      	b.n	10012d5c <RSV58_IRQHandler>

10012d5e <PT_IRQHandler>:
10012d5e:	e7fe      	b.n	10012d5e <PT_IRQHandler>

10012d60 <RSV60_IRQHandler>:
10012d60:	e7fe      	b.n	10012d60 <RSV60_IRQHandler>

10012d62 <RSV61_IRQHandler>:
10012d62:	e7fe      	b.n	10012d62 <RSV61_IRQHandler>

10012d64 <I2C2_IRQHandler>:
10012d64:	e7fe      	b.n	10012d64 <I2C2_IRQHandler>

10012d66 <RISCV_IRQHandler>:
10012d66:	e7fe      	b.n	10012d66 <RISCV_IRQHandler>

10012d68 <RSV64_IRQHandler>:
10012d68:	e7fe      	b.n	10012d68 <RSV64_IRQHandler>

10012d6a <RSV65_IRQHandler>:
10012d6a:	e7fe      	b.n	10012d6a <RSV65_IRQHandler>

10012d6c <RSV66_IRQHandler>:
10012d6c:	e7fe      	b.n	10012d6c <RSV66_IRQHandler>

10012d6e <OWM_IRQHandler>:
10012d6e:	e7fe      	b.n	10012d6e <OWM_IRQHandler>

10012d70 <RSV68_IRQHandler>:
10012d70:	e7fe      	b.n	10012d70 <RSV68_IRQHandler>

10012d72 <RSV69_IRQHandler>:
10012d72:	e7fe      	b.n	10012d72 <RSV69_IRQHandler>

10012d74 <RSV70_IRQHandler>:
10012d74:	e7fe      	b.n	10012d74 <RSV70_IRQHandler>

10012d76 <RSV71_IRQHandler>:
10012d76:	e7fe      	b.n	10012d76 <RSV71_IRQHandler>

10012d78 <RSV72_IRQHandler>:
10012d78:	e7fe      	b.n	10012d78 <RSV72_IRQHandler>

10012d7a <RSV73_IRQHandler>:
10012d7a:	e7fe      	b.n	10012d7a <RSV73_IRQHandler>

10012d7c <RSV74_IRQHandler>:
10012d7c:	e7fe      	b.n	10012d7c <RSV74_IRQHandler>

10012d7e <RSV75_IRQHandler>:
10012d7e:	e7fe      	b.n	10012d7e <RSV75_IRQHandler>

10012d80 <RSV76_IRQHandler>:
10012d80:	e7fe      	b.n	10012d80 <RSV76_IRQHandler>

10012d82 <RSV77_IRQHandler>:
10012d82:	e7fe      	b.n	10012d82 <RSV77_IRQHandler>

10012d84 <RSV78_IRQHandler>:
10012d84:	e7fe      	b.n	10012d84 <RSV78_IRQHandler>

10012d86 <RSV79_IRQHandler>:
10012d86:	e7fe      	b.n	10012d86 <RSV79_IRQHandler>

10012d88 <RSV80_IRQHandler>:
10012d88:	e7fe      	b.n	10012d88 <RSV80_IRQHandler>

10012d8a <RSV81_IRQHandler>:
10012d8a:	e7fe      	b.n	10012d8a <RSV81_IRQHandler>

10012d8c <ECC_IRQHandler>:
10012d8c:	e7fe      	b.n	10012d8c <ECC_IRQHandler>

10012d8e <DVS_IRQHandler>:
10012d8e:	e7fe      	b.n	10012d8e <DVS_IRQHandler>

10012d90 <SIMO_IRQHandler>:
10012d90:	e7fe      	b.n	10012d90 <SIMO_IRQHandler>

10012d92 <RSV85_IRQHandler>:
10012d92:	e7fe      	b.n	10012d92 <RSV85_IRQHandler>

10012d94 <RSV86_IRQHandler>:
10012d94:	e7fe      	b.n	10012d94 <RSV86_IRQHandler>

10012d96 <RSV87_IRQHandler>:
10012d96:	e7fe      	b.n	10012d96 <RSV87_IRQHandler>

10012d98 <UART3_IRQHandler>:
10012d98:	e7fe      	b.n	10012d98 <UART3_IRQHandler>

10012d9a <RSV89_IRQHandler>:
10012d9a:	e7fe      	b.n	10012d9a <RSV89_IRQHandler>

10012d9c <RSV90_IRQHandler>:
10012d9c:	e7fe      	b.n	10012d9c <RSV90_IRQHandler>

10012d9e <PCIF_IRQHandler>:
10012d9e:	e7fe      	b.n	10012d9e <PCIF_IRQHandler>

10012da0 <RSV92_IRQHandler>:
10012da0:	e7fe      	b.n	10012da0 <RSV92_IRQHandler>

10012da2 <RSV93_IRQHandler>:
10012da2:	e7fe      	b.n	10012da2 <RSV93_IRQHandler>

10012da4 <RSV94_IRQHandler>:
10012da4:	e7fe      	b.n	10012da4 <RSV94_IRQHandler>

10012da6 <RSV95_IRQHandler>:
10012da6:	e7fe      	b.n	10012da6 <RSV95_IRQHandler>

10012da8 <RSV96_IRQHandler>:
10012da8:	e7fe      	b.n	10012da8 <RSV96_IRQHandler>

10012daa <AES_IRQHandler>:
10012daa:	e7fe      	b.n	10012daa <AES_IRQHandler>

10012dac <RSV98_IRQHandler>:
10012dac:	e7fe      	b.n	10012dac <RSV98_IRQHandler>

10012dae <I2S_IRQHandler>:
10012dae:	e7fe      	b.n	10012dae <I2S_IRQHandler>

10012db0 <CNN_FIFO_IRQHandler>:
10012db0:	e7fe      	b.n	10012db0 <CNN_FIFO_IRQHandler>

10012db2 <CNN_IRQHandler>:
10012db2:	e7fe      	b.n	10012db2 <CNN_IRQHandler>

10012db4 <RSV102_IRQHandler>:
10012db4:	e7fe      	b.n	10012db4 <RSV102_IRQHandler>

10012db6 <LPCMP_IRQHandler>:
10012db6:	e7fe      	b.n	10012db6 <LPCMP_IRQHandler>
10012db8:	20020000 	.word	0x20020000
10012dbc:	10012e85 	.word	0x10012e85
10012dc0:	1002c648 	.word	0x1002c648
10012dc4:	20000000 	.word	0x20000000
10012dc8:	20000bcc 	.word	0x20000bcc
10012dcc:	20000c00 	.word	0x20000c00
10012dd0:	20001768 	.word	0x20001768
10012dd4:	10012e89 	.word	0x10012e89
10012dd8:	10019b21 	.word	0x10019b21
10012ddc:	1000eb89 	.word	0x1000eb89

10012de0 <_sbrk>:
extern unsigned int __HeapLimit;
caddr_t _sbrk(int incr)
{
    char *prev_heap_end;

    if (heap_end == 0) {
10012de0:	4a0b      	ldr	r2, [pc, #44]	@ (10012e10 <_sbrk+0x30>)
{
10012de2:	b508      	push	{r3, lr}
10012de4:	4603      	mov	r3, r0
    if (heap_end == 0) {
10012de6:	6810      	ldr	r0, [r2, #0]
10012de8:	b128      	cbz	r0, 10012df6 <_sbrk+0x16>
        heap_end = (caddr_t)&__HeapBase;
    }
    prev_heap_end = heap_end;

    if ((unsigned int)(heap_end + incr) > (unsigned int)&__HeapLimit) {
10012dea:	490a      	ldr	r1, [pc, #40]	@ (10012e14 <_sbrk+0x34>)
10012dec:	4403      	add	r3, r0
10012dee:	428b      	cmp	r3, r1
10012df0:	d807      	bhi.n	10012e02 <_sbrk+0x22>
        errno = ENOMEM;
        return (caddr_t)-1;
    }

    heap_end += incr;
10012df2:	6013      	str	r3, [r2, #0]

    return (caddr_t)prev_heap_end;
}
10012df4:	bd08      	pop	{r3, pc}
        heap_end = (caddr_t)&__HeapBase;
10012df6:	4808      	ldr	r0, [pc, #32]	@ (10012e18 <_sbrk+0x38>)
    if ((unsigned int)(heap_end + incr) > (unsigned int)&__HeapLimit) {
10012df8:	4906      	ldr	r1, [pc, #24]	@ (10012e14 <_sbrk+0x34>)
        heap_end = (caddr_t)&__HeapBase;
10012dfa:	6010      	str	r0, [r2, #0]
    if ((unsigned int)(heap_end + incr) > (unsigned int)&__HeapLimit) {
10012dfc:	4403      	add	r3, r0
10012dfe:	428b      	cmp	r3, r1
10012e00:	d9f7      	bls.n	10012df2 <_sbrk+0x12>
        errno = ENOMEM;
10012e02:	f006 fcfd 	bl	10019800 <__errno>
10012e06:	230c      	movs	r3, #12
10012e08:	6003      	str	r3, [r0, #0]
        return (caddr_t)-1;
10012e0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
10012e0e:	bd08      	pop	{r3, pc}
10012e10:	20000cb0 	.word	0x20000cb0
10012e14:	2001f000 	.word	0x2001f000
10012e18:	20001770 	.word	0x20001770

10012e1c <SystemCoreClockUpdate>:
__weak void SystemCoreClockUpdate(void)
{
    uint32_t base_freq, div, clk_src;

    // Get the clock source and frequency
    clk_src = (MXC_GCR->clkctrl & MXC_F_GCR_CLKCTRL_SYSCLK_SEL);
10012e1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
10012e20:	689a      	ldr	r2, [r3, #8]
10012e22:	f402 6260 	and.w	r2, r2, #3584	@ 0xe00
    switch (clk_src) {
10012e26:	f5b2 6f20 	cmp.w	r2, #2560	@ 0xa00
10012e2a:	d020      	beq.n	10012e6e <SystemCoreClockUpdate+0x52>
10012e2c:	d911      	bls.n	10012e52 <SystemCoreClockUpdate+0x36>
10012e2e:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
10012e32:	d017      	beq.n	10012e64 <SystemCoreClockUpdate+0x48>
        break;
    case MXC_S_GCR_CLKCTRL_SYSCLK_SEL_INRO:
        base_freq = INRO_FREQ;
        break;
    case MXC_S_GCR_CLKCTRL_SYSCLK_SEL_IPO:
        base_freq = IPO_FREQ;
10012e34:	4b0f      	ldr	r3, [pc, #60]	@ (10012e74 <SystemCoreClockUpdate+0x58>)
10012e36:	4910      	ldr	r1, [pc, #64]	@ (10012e78 <SystemCoreClockUpdate+0x5c>)
10012e38:	f5b2 6f60 	cmp.w	r2, #3584	@ 0xe00
10012e3c:	bf18      	it	ne
10012e3e:	460b      	movne	r3, r1
        // This code should never execute, however, initialize to safe value.
        base_freq = HIRC_FREQ;
        break;
    }

    div = (MXC_GCR->clkctrl & MXC_F_GCR_CLKCTRL_SYSCLK_DIV) >> MXC_F_GCR_CLKCTRL_SYSCLK_DIV_POS;
10012e40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000

    SystemCoreClock = base_freq >> div;
10012e44:	490d      	ldr	r1, [pc, #52]	@ (10012e7c <SystemCoreClockUpdate+0x60>)
    div = (MXC_GCR->clkctrl & MXC_F_GCR_CLKCTRL_SYSCLK_DIV) >> MXC_F_GCR_CLKCTRL_SYSCLK_DIV_POS;
10012e46:	6892      	ldr	r2, [r2, #8]
10012e48:	f3c2 1282 	ubfx	r2, r2, #6, #3
    SystemCoreClock = base_freq >> div;
10012e4c:	40d3      	lsrs	r3, r2
10012e4e:	600b      	str	r3, [r1, #0]
}
10012e50:	4770      	bx	lr
    switch (clk_src) {
10012e52:	b152      	cbz	r2, 10012e6a <SystemCoreClockUpdate+0x4e>
        base_freq = IPO_FREQ;
10012e54:	4908      	ldr	r1, [pc, #32]	@ (10012e78 <SystemCoreClockUpdate+0x5c>)
10012e56:	f247 5330 	movw	r3, #30000	@ 0x7530
10012e5a:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
10012e5e:	bf18      	it	ne
10012e60:	460b      	movne	r3, r1
10012e62:	e7ed      	b.n	10012e40 <SystemCoreClockUpdate+0x24>
        base_freq = ERTCO_FREQ;
10012e64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
10012e68:	e7ea      	b.n	10012e40 <SystemCoreClockUpdate+0x24>
        base_freq = ISO_FREQ;
10012e6a:	4b05      	ldr	r3, [pc, #20]	@ (10012e80 <SystemCoreClockUpdate+0x64>)
10012e6c:	e7e8      	b.n	10012e40 <SystemCoreClockUpdate+0x24>
        base_freq = IBRO_FREQ;
10012e6e:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
10012e72:	e7e5      	b.n	10012e40 <SystemCoreClockUpdate+0x24>
10012e74:	047868c0 	.word	0x047868c0
10012e78:	05f5e100 	.word	0x05f5e100
10012e7c:	20001768 	.word	0x20001768
10012e80:	03938700 	.word	0x03938700

10012e84 <PreInit>:
 */
__weak int PreInit(void)
{
    /* Do nothing */
    return 0;
}
10012e84:	2000      	movs	r0, #0
10012e86:	4770      	bx	lr

10012e88 <SystemInit>:
 * You may over-ride this function in your program by defining a custom 
 *  SystemInit(), but care should be taken to reproduce the initialization
 *  steps or a non-functional system may result.
 */
__weak void SystemInit(void)
{
10012e88:	b510      	push	{r4, lr}
    /* Configure the interrupt controller to use the application vector table in */
    /* the application space */
#if defined(__CC_ARM) || defined(__GNUC__)
    /* IAR sets the VTOR pointer incorrectly and causes stack corruption */
    SCB->VTOR = (uint32_t)__isr_vector;
10012e8a:	4c0a      	ldr	r4, [pc, #40]	@ (10012eb4 <SystemInit+0x2c>)
10012e8c:	4b0a      	ldr	r3, [pc, #40]	@ (10012eb8 <SystemInit+0x30>)
10012e8e:	60a3      	str	r3, [r4, #8]
#endif /* __CC_ARM || __GNUC__ */

    /* Enable instruction cache */
    MXC_ICC_Enable(MXC_ICC0);
10012e90:	480a      	ldr	r0, [pc, #40]	@ (10012ebc <SystemInit+0x34>)
10012e92:	f001 faed 	bl	10014470 <MXC_ICC_Enable>

    /* Enable FPU on Cortex-M4, which occupies coprocessor slots 10 & 11 */
    /* Grant full access, per "Table B3-24 CPACR bit assignments". */
    /* DDI0403D "ARMv7-M Architecture Reference Manual" */
    SCB->CPACR |= SCB_CPACR_CP10_Msk | SCB_CPACR_CP11_Msk;
10012e96:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
10012e9a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
10012e9e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
10012ea2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10012ea6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();

    SystemCoreClockUpdate();
10012eaa:	f7ff ffb7 	bl	10012e1c <SystemCoreClockUpdate>

    Board_Init();
10012eae:	f7ff fdd3 	bl	10012a58 <Board_Init>
}
10012eb2:	bd10      	pop	{r4, pc}
10012eb4:	e000ed00 	.word	0xe000ed00
10012eb8:	1000e000 	.word	0x1000e000
10012ebc:	4002a000 	.word	0x4002a000

10012ec0 <MXC_DelayInit>:
    }
}

/* ************************************************************************** */
static void MXC_DelayInit(uint32_t us)
{
10012ec0:	b538      	push	{r3, r4, r5, lr}
    uint32_t starttick, reload, ticks, lastticks;

    // Record the current tick value and clear the overflow flag
    starttick = SysTick->VAL;
10012ec2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000

    // Save the state of control register (and clear the overflow flag)
    ctrl_save = SysTick->CTRL & ~SysTick_CTRL_COUNTFLAG_Msk;
10012ec6:	4918      	ldr	r1, [pc, #96]	@ (10012f28 <MXC_DelayInit+0x68>)
    starttick = SysTick->VAL;
10012ec8:	699c      	ldr	r4, [r3, #24]
    ctrl_save = SysTick->CTRL & ~SysTick_CTRL_COUNTFLAG_Msk;
10012eca:	691a      	ldr	r2, [r3, #16]
10012ecc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
10012ed0:	600a      	str	r2, [r1, #0]

    // If the SysTick is not running, configure and start it
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk)) {
10012ed2:	691a      	ldr	r2, [r3, #16]
10012ed4:	07d2      	lsls	r2, r2, #31
10012ed6:	d41f      	bmi.n	10012f18 <MXC_DelayInit+0x58>
        SysTick->LOAD = SysTick_LOAD_RELOAD_Msk;
10012ed8:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
        SysTick->VAL = SysTick_VAL_CURRENT_Msk;
        SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;
10012edc:	2205      	movs	r2, #5
        SysTick->LOAD = SysTick_LOAD_RELOAD_Msk;
10012ede:	615c      	str	r4, [r3, #20]
        starttick = SysTick_VAL_CURRENT_Msk;
        reload = SysTick_LOAD_RELOAD_Msk + 1;
10012ee0:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
        SysTick->VAL = SysTick_VAL_CURRENT_Msk;
10012ee4:	619c      	str	r4, [r3, #24]
        SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;
10012ee6:	611a      	str	r2, [r3, #16]
    } else {
        reload = SysTick->LOAD + 1; // get the current reload value
    }

    // Calculate the total number of ticks to delay
    ticks = (uint32_t)(((uint64_t)us * (uint64_t)SystemCoreClock) / 1000000);
10012ee8:	4b10      	ldr	r3, [pc, #64]	@ (10012f2c <MXC_DelayInit+0x6c>)
10012eea:	4a11      	ldr	r2, [pc, #68]	@ (10012f30 <MXC_DelayInit+0x70>)
10012eec:	6819      	ldr	r1, [r3, #0]
10012eee:	2300      	movs	r3, #0
10012ef0:	fba0 0101 	umull	r0, r1, r0, r1
10012ef4:	f00f fbb6 	bl	10022664 <__aeabi_uldivmod>

    // How many overflows of the SysTick will occur
    overflows = ticks / reload;
10012ef8:	4b0e      	ldr	r3, [pc, #56]	@ (10012f34 <MXC_DelayInit+0x74>)
10012efa:	fbb0 f2f5 	udiv	r2, r0, r5

    // How many remaining ticks after the last overflow
    lastticks = ticks % reload;
10012efe:	fb05 0012 	mls	r0, r5, r2, r0

    // Check if there will be another overflow due to the current value of the SysTick
    if (lastticks >= starttick) {
10012f02:	4284      	cmp	r4, r0
    overflows = ticks / reload;
10012f04:	601a      	str	r2, [r3, #0]
    if (lastticks >= starttick) {
10012f06:	d80a      	bhi.n	10012f1e <MXC_DelayInit+0x5e>
        overflows++;
10012f08:	681a      	ldr	r2, [r3, #0]
10012f0a:	3201      	adds	r2, #1
10012f0c:	601a      	str	r2, [r3, #0]
        endtick = reload - (lastticks - starttick);
10012f0e:	4425      	add	r5, r4
10012f10:	4b09      	ldr	r3, [pc, #36]	@ (10012f38 <MXC_DelayInit+0x78>)
10012f12:	1a28      	subs	r0, r5, r0
10012f14:	6018      	str	r0, [r3, #0]
    } else {
        endtick = starttick - lastticks;
    }
}
10012f16:	bd38      	pop	{r3, r4, r5, pc}
        reload = SysTick->LOAD + 1; // get the current reload value
10012f18:	695d      	ldr	r5, [r3, #20]
10012f1a:	3501      	adds	r5, #1
10012f1c:	e7e4      	b.n	10012ee8 <MXC_DelayInit+0x28>
        endtick = starttick - lastticks;
10012f1e:	4b06      	ldr	r3, [pc, #24]	@ (10012f38 <MXC_DelayInit+0x78>)
10012f20:	1a20      	subs	r0, r4, r0
10012f22:	6018      	str	r0, [r3, #0]
}
10012f24:	bd38      	pop	{r3, r4, r5, pc}
10012f26:	bf00      	nop
10012f28:	20000cb8 	.word	0x20000cb8
10012f2c:	20001768 	.word	0x20001768
10012f30:	000f4240 	.word	0x000f4240
10012f34:	20000004 	.word	0x20000004
10012f38:	20000cbc 	.word	0x20000cbc

10012f3c <MXC_DelayAsync>:

/* ************************************************************************** */
int MXC_DelayAsync(uint32_t us, mxc_delay_complete_t callback)
{
10012f3c:	b510      	push	{r4, lr}
    cbFunc = callback;

    // Check if timeout currently ongoing
    if (overflows > 0) {
10012f3e:	4c0c      	ldr	r4, [pc, #48]	@ (10012f70 <MXC_DelayAsync+0x34>)
    cbFunc = callback;
10012f40:	4b0c      	ldr	r3, [pc, #48]	@ (10012f74 <MXC_DelayAsync+0x38>)
    if (overflows > 0) {
10012f42:	6822      	ldr	r2, [r4, #0]
    cbFunc = callback;
10012f44:	6019      	str	r1, [r3, #0]
    if (overflows > 0) {
10012f46:	2a00      	cmp	r2, #0
10012f48:	dc0e      	bgt.n	10012f68 <MXC_DelayAsync+0x2c>
        return E_BUSY;
    }

    // Check if there is nothing to do
    if (us == 0) {
10012f4a:	b908      	cbnz	r0, 10012f50 <MXC_DelayAsync+0x14>
        return E_NO_ERROR;
10012f4c:	2000      	movs	r0, #0
    if (overflows > 0) {
        SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
    }

    return E_NO_ERROR;
}
10012f4e:	bd10      	pop	{r4, pc}
    MXC_DelayInit(us);
10012f50:	f7ff ffb6 	bl	10012ec0 <MXC_DelayInit>
    if (overflows > 0) {
10012f54:	6823      	ldr	r3, [r4, #0]
10012f56:	2b00      	cmp	r3, #0
10012f58:	ddf8      	ble.n	10012f4c <MXC_DelayAsync+0x10>
        SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
10012f5a:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
10012f5e:	6913      	ldr	r3, [r2, #16]
10012f60:	f043 0302 	orr.w	r3, r3, #2
10012f64:	6113      	str	r3, [r2, #16]
10012f66:	e7f1      	b.n	10012f4c <MXC_DelayAsync+0x10>
        return E_BUSY;
10012f68:	f06f 0005 	mvn.w	r0, #5
}
10012f6c:	bd10      	pop	{r4, pc}
10012f6e:	bf00      	nop
10012f70:	20000004 	.word	0x20000004
10012f74:	20000cb4 	.word	0x20000cb4

10012f78 <MXC_DelayCheck>:

/* ************************************************************************** */
int MXC_DelayCheck(void)
{
10012f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Check if timeout currently ongoing
    if (overflows < 0) {
10012f7a:	4c17      	ldr	r4, [pc, #92]	@ (10012fd8 <MXC_DelayCheck+0x60>)
10012f7c:	6823      	ldr	r3, [r4, #0]
10012f7e:	2b00      	cmp	r3, #0
10012f80:	db1e      	blt.n	10012fc0 <MXC_DelayCheck+0x48>

        return E_NO_ERROR;
    }

    // Check the global values
    if ((overflows == 0) && (SysTick->VAL <= endtick)) {
10012f82:	6826      	ldr	r6, [r4, #0]
10012f84:	bb2e      	cbnz	r6, 10012fd2 <MXC_DelayCheck+0x5a>
10012f86:	4b15      	ldr	r3, [pc, #84]	@ (10012fdc <MXC_DelayCheck+0x64>)
10012f88:	f04f 25e0 	mov.w	r5, #3758153728	@ 0xe000e000
10012f8c:	681b      	ldr	r3, [r3, #0]
10012f8e:	69aa      	ldr	r2, [r5, #24]
10012f90:	429a      	cmp	r2, r3
10012f92:	d81e      	bhi.n	10012fd2 <MXC_DelayCheck+0x5a>
}

/* ************************************************************************** */
void MXC_DelayAbort(void)
{
    if (cbFunc != NULL) {
10012f94:	4f12      	ldr	r7, [pc, #72]	@ (10012fe0 <MXC_DelayCheck+0x68>)
10012f96:	683b      	ldr	r3, [r7, #0]
10012f98:	b15b      	cbz	r3, 10012fb2 <MXC_DelayCheck+0x3a>
        cbFunc(E_ABORT);
10012f9a:	f06f 000f 	mvn.w	r0, #15
10012f9e:	4798      	blx	r3
        cbFunc = NULL;
    }

    SysTick->CTRL = ctrl_save;
10012fa0:	4b10      	ldr	r3, [pc, #64]	@ (10012fe4 <MXC_DelayCheck+0x6c>)
        cbFunc = NULL;
10012fa2:	603e      	str	r6, [r7, #0]
    SysTick->CTRL = ctrl_save;
10012fa4:	681a      	ldr	r2, [r3, #0]
10012fa6:	612a      	str	r2, [r5, #16]
    overflows = -1;
10012fa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10012fac:	6023      	str	r3, [r4, #0]
        return E_NO_ERROR;
10012fae:	2000      	movs	r0, #0
}
10012fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SysTick->CTRL = ctrl_save;
10012fb2:	4a0c      	ldr	r2, [pc, #48]	@ (10012fe4 <MXC_DelayCheck+0x6c>)
    overflows = -1;
10012fb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    SysTick->CTRL = ctrl_save;
10012fb8:	6812      	ldr	r2, [r2, #0]
10012fba:	612a      	str	r2, [r5, #16]
    overflows = -1;
10012fbc:	6023      	str	r3, [r4, #0]
        if (cbFunc != NULL) {
10012fbe:	e7f6      	b.n	10012fae <MXC_DelayCheck+0x36>
        if (cbFunc != NULL) {
10012fc0:	4c07      	ldr	r4, [pc, #28]	@ (10012fe0 <MXC_DelayCheck+0x68>)
10012fc2:	6823      	ldr	r3, [r4, #0]
10012fc4:	2b00      	cmp	r3, #0
10012fc6:	d0f2      	beq.n	10012fae <MXC_DelayCheck+0x36>
            cbFunc(E_NO_ERROR);
10012fc8:	2000      	movs	r0, #0
10012fca:	4798      	blx	r3
            cbFunc = NULL;
10012fcc:	2300      	movs	r3, #0
10012fce:	6023      	str	r3, [r4, #0]
10012fd0:	e7ed      	b.n	10012fae <MXC_DelayCheck+0x36>
    return E_BUSY;
10012fd2:	f06f 0005 	mvn.w	r0, #5
}
10012fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012fd8:	20000004 	.word	0x20000004
10012fdc:	20000cbc 	.word	0x20000cbc
10012fe0:	20000cb4 	.word	0x20000cb4
10012fe4:	20000cb8 	.word	0x20000cb8

10012fe8 <MXC_DelayAbort>:
{
10012fe8:	b510      	push	{r4, lr}
    if (cbFunc != NULL) {
10012fea:	4c09      	ldr	r4, [pc, #36]	@ (10013010 <MXC_DelayAbort+0x28>)
10012fec:	6823      	ldr	r3, [r4, #0]
10012fee:	b123      	cbz	r3, 10012ffa <MXC_DelayAbort+0x12>
        cbFunc(E_ABORT);
10012ff0:	f06f 000f 	mvn.w	r0, #15
10012ff4:	4798      	blx	r3
        cbFunc = NULL;
10012ff6:	2300      	movs	r3, #0
10012ff8:	6023      	str	r3, [r4, #0]
    SysTick->CTRL = ctrl_save;
10012ffa:	4a06      	ldr	r2, [pc, #24]	@ (10013014 <MXC_DelayAbort+0x2c>)
    overflows = -1;
10012ffc:	4b06      	ldr	r3, [pc, #24]	@ (10013018 <MXC_DelayAbort+0x30>)
    SysTick->CTRL = ctrl_save;
10012ffe:	6810      	ldr	r0, [r2, #0]
10013000:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    overflows = -1;
10013004:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
    SysTick->CTRL = ctrl_save;
10013008:	6108      	str	r0, [r1, #16]
    overflows = -1;
1001300a:	601a      	str	r2, [r3, #0]
}
1001300c:	bd10      	pop	{r4, pc}
1001300e:	bf00      	nop
10013010:	20000cb4 	.word	0x20000cb4
10013014:	20000cb8 	.word	0x20000cb8
10013018:	20000004 	.word	0x20000004

1001301c <MXC_Delay>:

/* ************************************************************************** */
int MXC_Delay(uint32_t us)
{
1001301c:	b538      	push	{r3, r4, r5, lr}
    // Check if timeout currently ongoing
    if (overflows > 0) {
1001301e:	4c18      	ldr	r4, [pc, #96]	@ (10013080 <MXC_Delay+0x64>)
10013020:	6822      	ldr	r2, [r4, #0]
10013022:	2a00      	cmp	r2, #0
10013024:	dc29      	bgt.n	1001307a <MXC_Delay+0x5e>
        return E_BUSY;
    }

    // Check if there is nothing to do
    if (us == 0) {
10013026:	b908      	cbnz	r0, 1001302c <MXC_Delay+0x10>
        return E_NO_ERROR;
10013028:	2000      	movs	r0, #0
    // Wait for the counter value
    while (SysTick->VAL > endtick) {}

    MXC_DelayAbort();
    return E_NO_ERROR;
}
1001302a:	bd38      	pop	{r3, r4, r5, pc}
    MXC_DelayInit(us);
1001302c:	f7ff ff48 	bl	10012ec0 <MXC_DelayInit>
        if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
10013030:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
    while (overflows > 0) {
10013034:	e002      	b.n	1001303c <MXC_Delay+0x20>
        if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
10013036:	6913      	ldr	r3, [r2, #16]
10013038:	03db      	lsls	r3, r3, #15
1001303a:	d41a      	bmi.n	10013072 <MXC_Delay+0x56>
    while (overflows > 0) {
1001303c:	6823      	ldr	r3, [r4, #0]
1001303e:	2b00      	cmp	r3, #0
10013040:	dcf9      	bgt.n	10013036 <MXC_Delay+0x1a>
    while (SysTick->VAL > endtick) {}
10013042:	4b10      	ldr	r3, [pc, #64]	@ (10013084 <MXC_Delay+0x68>)
10013044:	681a      	ldr	r2, [r3, #0]
10013046:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
1001304a:	698b      	ldr	r3, [r1, #24]
1001304c:	4293      	cmp	r3, r2
1001304e:	d8fc      	bhi.n	1001304a <MXC_Delay+0x2e>
    if (cbFunc != NULL) {
10013050:	4d0d      	ldr	r5, [pc, #52]	@ (10013088 <MXC_Delay+0x6c>)
10013052:	682b      	ldr	r3, [r5, #0]
10013054:	b123      	cbz	r3, 10013060 <MXC_Delay+0x44>
        cbFunc(E_ABORT);
10013056:	f06f 000f 	mvn.w	r0, #15
1001305a:	4798      	blx	r3
        cbFunc = NULL;
1001305c:	2300      	movs	r3, #0
1001305e:	602b      	str	r3, [r5, #0]
    SysTick->CTRL = ctrl_save;
10013060:	4b0a      	ldr	r3, [pc, #40]	@ (1001308c <MXC_Delay+0x70>)
10013062:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
10013066:	6819      	ldr	r1, [r3, #0]
10013068:	6111      	str	r1, [r2, #16]
    overflows = -1;
1001306a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1001306e:	6023      	str	r3, [r4, #0]
}
10013070:	e7da      	b.n	10013028 <MXC_Delay+0xc>
            overflows--;
10013072:	6823      	ldr	r3, [r4, #0]
10013074:	3b01      	subs	r3, #1
10013076:	6023      	str	r3, [r4, #0]
10013078:	e7e0      	b.n	1001303c <MXC_Delay+0x20>
        return E_BUSY;
1001307a:	f06f 0005 	mvn.w	r0, #5
}
1001307e:	bd38      	pop	{r3, r4, r5, pc}
10013080:	20000004 	.word	0x20000004
10013084:	20000cbc 	.word	0x20000cbc
10013088:	20000cb4 	.word	0x20000cb4
1001308c:	20000cb8 	.word	0x20000cb8

10013090 <MXC_NVIC_SetVector>:
    memcpy(&ramVectorTable, &__isr_vector, sizeof(ramVectorTable));
    SCB->VTOR = (uint32_t)&ramVectorTable;
}

void MXC_NVIC_SetVector(IRQn_Type irqn, void (*irq_handler)(void))
{
10013090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int index = irqn + 16; /* offset for externals */

    /* If not copied, do copy */
    if (SCB->VTOR != (uint32_t)&ramVectorTable) {
10013092:	4e0f      	ldr	r6, [pc, #60]	@ (100130d0 <MXC_NVIC_SetVector+0x40>)
10013094:	4b0f      	ldr	r3, [pc, #60]	@ (100130d4 <MXC_NVIC_SetVector+0x44>)
10013096:	68b2      	ldr	r2, [r6, #8]
10013098:	429a      	cmp	r2, r3
{
1001309a:	4604      	mov	r4, r0
1001309c:	460d      	mov	r5, r1
    int index = irqn + 16; /* offset for externals */
1001309e:	f100 0710 	add.w	r7, r0, #16
    if (SCB->VTOR != (uint32_t)&ramVectorTable) {
100130a2:	d007      	beq.n	100130b4 <MXC_NVIC_SetVector+0x24>
    memcpy(&ramVectorTable, &__isr_vector, sizeof(ramVectorTable));
100130a4:	4618      	mov	r0, r3
100130a6:	490c      	ldr	r1, [pc, #48]	@ (100130d8 <MXC_NVIC_SetVector+0x48>)
100130a8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
100130ac:	f006 fdc0 	bl	10019c30 <memcpy>
100130b0:	4603      	mov	r3, r0
    SCB->VTOR = (uint32_t)&ramVectorTable;
100130b2:	60b0      	str	r0, [r6, #8]
  if ((int32_t)(IRQn) >= 0)
100130b4:	2c00      	cmp	r4, #0
        NVIC_SetRAM();
    }

    ramVectorTable[index] = irq_handler;
100130b6:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
100130ba:	db07      	blt.n	100130cc <MXC_NVIC_SetVector+0x3c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100130bc:	4a07      	ldr	r2, [pc, #28]	@ (100130dc <MXC_NVIC_SetVector+0x4c>)
100130be:	0961      	lsrs	r1, r4, #5
100130c0:	2301      	movs	r3, #1
100130c2:	f004 041f 	and.w	r4, r4, #31
100130c6:	40a3      	lsls	r3, r4
100130c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    NVIC_EnableIRQ(irqn);
}
100130cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100130ce:	bf00      	nop
100130d0:	e000ed00 	.word	0xe000ed00
100130d4:	20000e00 	.word	0x20000e00
100130d8:	1000e000 	.word	0x1000e000
100130dc:	e000e100 	.word	0xe000e100

100130e0 <MXC_SYS_ClockDisable>:

/* ************************************************************************** */
void MXC_SYS_ClockDisable(mxc_sys_periph_clock_t clock)
{
    /* The mxc_sys_periph_clock_t enum uses enum values that are the offset by 32 and 64 for the perckcn1 register. */
    if (clock > 63) {
100130e0:	283f      	cmp	r0, #63	@ 0x3f
100130e2:	d908      	bls.n	100130f6 <MXC_SYS_ClockDisable+0x16>
        clock -= 64;
        MXC_LPGCR->pclkdis |= (0x1 << clock);
100130e4:	4a0d      	ldr	r2, [pc, #52]	@ (1001311c <MXC_SYS_ClockDisable+0x3c>)
        clock -= 64;
100130e6:	3840      	subs	r0, #64	@ 0x40
        MXC_LPGCR->pclkdis |= (0x1 << clock);
100130e8:	68d1      	ldr	r1, [r2, #12]
100130ea:	b2c0      	uxtb	r0, r0
100130ec:	2301      	movs	r3, #1
100130ee:	4083      	lsls	r3, r0
100130f0:	430b      	orrs	r3, r1
100130f2:	60d3      	str	r3, [r2, #12]
100130f4:	4770      	bx	lr
    } else if (clock > 31) {
100130f6:	281f      	cmp	r0, #31
        clock -= 32;
        MXC_GCR->pclkdis1 |= (0x1 << clock);
100130f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
    } else if (clock > 31) {
100130fc:	d907      	bls.n	1001310e <MXC_SYS_ClockDisable+0x2e>
        clock -= 32;
100130fe:	3820      	subs	r0, #32
        MXC_GCR->pclkdis1 |= (0x1 << clock);
10013100:	6c91      	ldr	r1, [r2, #72]	@ 0x48
10013102:	b2c0      	uxtb	r0, r0
10013104:	2301      	movs	r3, #1
10013106:	4083      	lsls	r3, r0
10013108:	430b      	orrs	r3, r1
1001310a:	6493      	str	r3, [r2, #72]	@ 0x48
1001310c:	4770      	bx	lr
    } else {
        MXC_GCR->pclkdis0 |= (0x1 << clock);
1001310e:	6a51      	ldr	r1, [r2, #36]	@ 0x24
10013110:	2301      	movs	r3, #1
10013112:	4083      	lsls	r3, r0
10013114:	430b      	orrs	r3, r1
10013116:	6253      	str	r3, [r2, #36]	@ 0x24
    }
}
10013118:	4770      	bx	lr
1001311a:	bf00      	nop
1001311c:	40080000 	.word	0x40080000

10013120 <MXC_SYS_ClockEnable>:

/* ************************************************************************** */
void MXC_SYS_ClockEnable(mxc_sys_periph_clock_t clock)
{
    /* The mxc_sys_periph_clock_t enum uses enum values that are the offset by 32 and 64 for the perckcn1 register. */
    if (clock > 63) {
10013120:	283f      	cmp	r0, #63	@ 0x3f
10013122:	d909      	bls.n	10013138 <MXC_SYS_ClockEnable+0x18>
        clock -= 64;
        MXC_LPGCR->pclkdis &= ~(0x1 << clock);
10013124:	490e      	ldr	r1, [pc, #56]	@ (10013160 <MXC_SYS_ClockEnable+0x40>)
        clock -= 64;
10013126:	3840      	subs	r0, #64	@ 0x40
        MXC_LPGCR->pclkdis &= ~(0x1 << clock);
10013128:	68cb      	ldr	r3, [r1, #12]
1001312a:	b2c0      	uxtb	r0, r0
1001312c:	2201      	movs	r2, #1
1001312e:	4082      	lsls	r2, r0
10013130:	ea23 0302 	bic.w	r3, r3, r2
10013134:	60cb      	str	r3, [r1, #12]
10013136:	4770      	bx	lr
    } else if (clock > 31) {
10013138:	281f      	cmp	r0, #31
        clock -= 32;
        MXC_GCR->pclkdis1 &= ~(0x1 << clock);
1001313a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
    } else if (clock > 31) {
1001313e:	d908      	bls.n	10013152 <MXC_SYS_ClockEnable+0x32>
        clock -= 32;
10013140:	3820      	subs	r0, #32
        MXC_GCR->pclkdis1 &= ~(0x1 << clock);
10013142:	6c8b      	ldr	r3, [r1, #72]	@ 0x48
10013144:	b2c0      	uxtb	r0, r0
10013146:	2201      	movs	r2, #1
10013148:	4082      	lsls	r2, r0
1001314a:	ea23 0302 	bic.w	r3, r3, r2
1001314e:	648b      	str	r3, [r1, #72]	@ 0x48
10013150:	4770      	bx	lr
    } else {
        MXC_GCR->pclkdis0 &= ~(0x1 << clock);
10013152:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
10013154:	2201      	movs	r2, #1
10013156:	4082      	lsls	r2, r0
10013158:	ea23 0302 	bic.w	r3, r3, r2
1001315c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
}
1001315e:	4770      	bx	lr
10013160:	40080000 	.word	0x40080000

10013164 <MXC_SYS_ClockSourceEnable>:
    }
}

/******************************************************************************/
int MXC_SYS_ClockSourceEnable(mxc_sys_system_clock_t clock)
{
10013164:	b510      	push	{r4, lr}
    switch (clock) {
10013166:	2807      	cmp	r0, #7
10013168:	d80a      	bhi.n	10013180 <MXC_SYS_ClockSourceEnable+0x1c>
1001316a:	e8df f000 	tbb	[pc, r0]
1001316e:	090c      	.short	0x090c
10013170:	47332309 	.word	0x47332309
10013174:	045b      	.short	0x045b

    default:
        return E_BAD_PARAM;
        break;
    }
}
10013176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return MXC_GPIO_Config(&gpio_cfg_extclk);
1001317a:	4836      	ldr	r0, [pc, #216]	@ (10013254 <MXC_SYS_ClockSourceEnable+0xf0>)
1001317c:	f000 b906 	b.w	1001338c <MXC_GPIO_Config>
    switch (clock) {
10013180:	f06f 0002 	mvn.w	r0, #2
}
10013184:	bd10      	pop	{r4, pc}
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_ISO_EN;
10013186:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
    // We do not have access to a system tick in the RV core.
    while (!(MXC_GCR->clkctrl & ready)) {}
    return E_NO_ERROR;
#else
    // Start timeout, wait for ready
    MXC_DelayAsync(MXC_SYS_CLOCK_TIMEOUT, NULL);
1001318a:	2100      	movs	r1, #0
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_ISO_EN;
1001318c:	68a3      	ldr	r3, [r4, #8]
1001318e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
10013192:	60a3      	str	r3, [r4, #8]
    MXC_DelayAsync(MXC_SYS_CLOCK_TIMEOUT, NULL);
10013194:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10013198:	f7ff fed0 	bl	10012f3c <MXC_DelayAsync>
1001319c:	e003      	b.n	100131a6 <MXC_SYS_ClockSourceEnable+0x42>
    do {
        if (MXC_GCR->clkctrl & ready) {
            MXC_DelayAbort();
            return E_NO_ERROR;
        }
    } while (MXC_DelayCheck() == E_BUSY);
1001319e:	f7ff feeb 	bl	10012f78 <MXC_DelayCheck>
100131a2:	3006      	adds	r0, #6
100131a4:	d152      	bne.n	1001324c <MXC_SYS_ClockSourceEnable+0xe8>
        if (MXC_GCR->clkctrl & ready) {
100131a6:	68a3      	ldr	r3, [r4, #8]
100131a8:	0159      	lsls	r1, r3, #5
100131aa:	d5f8      	bpl.n	1001319e <MXC_SYS_ClockSourceEnable+0x3a>
            MXC_DelayAbort();
100131ac:	f7ff ff1c 	bl	10012fe8 <MXC_DelayAbort>
            return E_NO_ERROR;
100131b0:	2000      	movs	r0, #0
}
100131b2:	bd10      	pop	{r4, pc}
    MXC_DelayAsync(MXC_SYS_CLOCK_TIMEOUT, NULL);
100131b4:	2100      	movs	r1, #0
100131b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
100131ba:	f7ff febf 	bl	10012f3c <MXC_DelayAsync>
        if (MXC_GCR->clkctrl & ready) {
100131be:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
100131c2:	e003      	b.n	100131cc <MXC_SYS_ClockSourceEnable+0x68>
    } while (MXC_DelayCheck() == E_BUSY);
100131c4:	f7ff fed8 	bl	10012f78 <MXC_DelayCheck>
100131c8:	3006      	adds	r0, #6
100131ca:	d13f      	bne.n	1001324c <MXC_SYS_ClockSourceEnable+0xe8>
        if (MXC_GCR->clkctrl & ready) {
100131cc:	68a3      	ldr	r3, [r4, #8]
100131ce:	009a      	lsls	r2, r3, #2
100131d0:	d4ec      	bmi.n	100131ac <MXC_SYS_ClockSourceEnable+0x48>
100131d2:	e7f7      	b.n	100131c4 <MXC_SYS_ClockSourceEnable+0x60>
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_IPO_EN;
100131d4:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
    MXC_DelayAsync(MXC_SYS_CLOCK_TIMEOUT, NULL);
100131d8:	2100      	movs	r1, #0
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_IPO_EN;
100131da:	68a3      	ldr	r3, [r4, #8]
100131dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
100131e0:	60a3      	str	r3, [r4, #8]
    MXC_DelayAsync(MXC_SYS_CLOCK_TIMEOUT, NULL);
100131e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
100131e6:	f7ff fea9 	bl	10012f3c <MXC_DelayAsync>
100131ea:	e003      	b.n	100131f4 <MXC_SYS_ClockSourceEnable+0x90>
    } while (MXC_DelayCheck() == E_BUSY);
100131ec:	f7ff fec4 	bl	10012f78 <MXC_DelayCheck>
100131f0:	3006      	adds	r0, #6
100131f2:	d12b      	bne.n	1001324c <MXC_SYS_ClockSourceEnable+0xe8>
        if (MXC_GCR->clkctrl & ready) {
100131f4:	68a3      	ldr	r3, [r4, #8]
100131f6:	011b      	lsls	r3, r3, #4
100131f8:	d5f8      	bpl.n	100131ec <MXC_SYS_ClockSourceEnable+0x88>
100131fa:	e7d7      	b.n	100131ac <MXC_SYS_ClockSourceEnable+0x48>
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_IBRO_EN;
100131fc:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
    MXC_DelayAsync(MXC_SYS_CLOCK_TIMEOUT, NULL);
10013200:	2100      	movs	r1, #0
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_IBRO_EN;
10013202:	68a3      	ldr	r3, [r4, #8]
10013204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
10013208:	60a3      	str	r3, [r4, #8]
    MXC_DelayAsync(MXC_SYS_CLOCK_TIMEOUT, NULL);
1001320a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
1001320e:	f7ff fe95 	bl	10012f3c <MXC_DelayAsync>
10013212:	e003      	b.n	1001321c <MXC_SYS_ClockSourceEnable+0xb8>
    } while (MXC_DelayCheck() == E_BUSY);
10013214:	f7ff feb0 	bl	10012f78 <MXC_DelayCheck>
10013218:	3006      	adds	r0, #6
1001321a:	d117      	bne.n	1001324c <MXC_SYS_ClockSourceEnable+0xe8>
        if (MXC_GCR->clkctrl & ready) {
1001321c:	68a3      	ldr	r3, [r4, #8]
1001321e:	00d8      	lsls	r0, r3, #3
10013220:	d4c4      	bmi.n	100131ac <MXC_SYS_ClockSourceEnable+0x48>
10013222:	e7f7      	b.n	10013214 <MXC_SYS_ClockSourceEnable+0xb0>
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_ERTCO_EN;
10013224:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
    MXC_DelayAsync(MXC_SYS_CLOCK_TIMEOUT, NULL);
10013228:	2100      	movs	r1, #0
        MXC_GCR->clkctrl |= MXC_F_GCR_CLKCTRL_ERTCO_EN;
1001322a:	68a3      	ldr	r3, [r4, #8]
1001322c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
10013230:	60a3      	str	r3, [r4, #8]
    MXC_DelayAsync(MXC_SYS_CLOCK_TIMEOUT, NULL);
10013232:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10013236:	f7ff fe81 	bl	10012f3c <MXC_DelayAsync>
1001323a:	e003      	b.n	10013244 <MXC_SYS_ClockSourceEnable+0xe0>
    } while (MXC_DelayCheck() == E_BUSY);
1001323c:	f7ff fe9c 	bl	10012f78 <MXC_DelayCheck>
10013240:	3006      	adds	r0, #6
10013242:	d103      	bne.n	1001324c <MXC_SYS_ClockSourceEnable+0xe8>
        if (MXC_GCR->clkctrl & ready) {
10013244:	68a3      	ldr	r3, [r4, #8]
10013246:	019b      	lsls	r3, r3, #6
10013248:	d4b0      	bmi.n	100131ac <MXC_SYS_ClockSourceEnable+0x48>
1001324a:	e7f7      	b.n	1001323c <MXC_SYS_ClockSourceEnable+0xd8>

    return E_TIME_OUT;
1001324c:	f06f 0009 	mvn.w	r0, #9
}
10013250:	bd10      	pop	{r4, pc}
10013252:	bf00      	nop
10013254:	100253d8 	.word	0x100253d8

10013258 <MXC_SYS_Reset_Periph>:

/* ************************************************************************** */
void MXC_SYS_Reset_Periph(mxc_sys_reset_t reset)
{
    /* The mxc_sys_reset_t enum uses enum values that are the offset by 32 and 64 for the rst register. */
    if (reset > 63) {
10013258:	283f      	cmp	r0, #63	@ 0x3f
1001325a:	d909      	bls.n	10013270 <MXC_SYS_Reset_Periph+0x18>
        reset -= 64;
1001325c:	3840      	subs	r0, #64	@ 0x40
        MXC_LPGCR->rst = (0x1 << reset);
1001325e:	490f      	ldr	r1, [pc, #60]	@ (1001329c <MXC_SYS_Reset_Periph+0x44>)
10013260:	b2c0      	uxtb	r0, r0
10013262:	2201      	movs	r2, #1
10013264:	4082      	lsls	r2, r0
10013266:	608a      	str	r2, [r1, #8]
        while (MXC_LPGCR->rst & (0x1 << reset)) {}
10013268:	688b      	ldr	r3, [r1, #8]
1001326a:	421a      	tst	r2, r3
1001326c:	d1fc      	bne.n	10013268 <MXC_SYS_Reset_Periph+0x10>
1001326e:	4770      	bx	lr
    } else if (reset > 31) {
10013270:	281f      	cmp	r0, #31
10013272:	d90a      	bls.n	1001328a <MXC_SYS_Reset_Periph+0x32>
        reset -= 32;
10013274:	3820      	subs	r0, #32
        MXC_GCR->rst1 = (0x1 << reset);
10013276:	b2c0      	uxtb	r0, r0
10013278:	2201      	movs	r2, #1
1001327a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
1001327e:	4082      	lsls	r2, r0
10013280:	644a      	str	r2, [r1, #68]	@ 0x44
        while (MXC_GCR->rst1 & (0x1 << reset)) {}
10013282:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
10013284:	421a      	tst	r2, r3
10013286:	d1fc      	bne.n	10013282 <MXC_SYS_Reset_Periph+0x2a>
10013288:	4770      	bx	lr
    } else {
        MXC_GCR->rst0 = (0x1 << reset);
1001328a:	2201      	movs	r2, #1
1001328c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
10013290:	4082      	lsls	r2, r0
10013292:	604a      	str	r2, [r1, #4]
        while (MXC_GCR->rst0 & (0x1 << reset)) {}
10013294:	684b      	ldr	r3, [r1, #4]
10013296:	421a      	tst	r2, r3
10013298:	d1fc      	bne.n	10013294 <MXC_SYS_Reset_Periph+0x3c>
    }
}
1001329a:	4770      	bx	lr
1001329c:	40080000 	.word	0x40080000

100132a0 <MXC_FLC_Write32>:
    uint32_t addr, aligned;
    int err;
    mxc_flc_regs_t *flc = NULL;

    // Address checked if it is byte addressable
    if (address & 0x3) {
100132a0:	0782      	lsls	r2, r0, #30
100132a2:	d133      	bne.n	1001330c <MXC_FLC_Write32+0x6c>
    if ((addr >= MXC_FLASH_MEM_BASE) && (addr < (MXC_FLASH_MEM_BASE + MXC_FLASH_MEM_SIZE))) {
100132a4:	f100 4370 	add.w	r3, r0, #4026531840	@ 0xf0000000
100132a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
100132ac:	4684      	mov	ip, r0
100132ae:	460a      	mov	r2, r1
100132b0:	d329      	bcc.n	10013306 <MXC_FLC_Write32+0x66>
    } else if ((addr >= MXC_INFO_MEM_BASE) && (addr < (MXC_INFO_MEM_BASE + MXC_INFO_MEM_SIZE))) {
100132b2:	f1a0 5384 	sub.w	r3, r0, #276824064	@ 0x10800000
100132b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
100132ba:	d227      	bcs.n	1001330c <MXC_FLC_Write32+0x6c>
        return E_BAD_PARAM;
    }

    // Align address to 128-bit word
    aligned = address & 0xfffffff0;
100132bc:	f020 030f 	bic.w	r3, r0, #15
    } else if ((addr >= MXC_INFO_MEM_BASE) && (addr < (MXC_INFO_MEM_BASE + MXC_INFO_MEM_SIZE))) {
100132c0:	f1a3 5384 	sub.w	r3, r3, #276824064	@ 0x10800000
100132c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
100132c8:	d220      	bcs.n	1001330c <MXC_FLC_Write32+0x6c>
        *result = (addr & (MXC_INFO_MEM_SIZE - 1)) + MXC_FLASH_MEM_SIZE;
100132ca:	f643 73f0 	movw	r3, #16368	@ 0x3ff0
100132ce:	4003      	ands	r3, r0
100132d0:	f503 2300 	add.w	r3, r3, #524288	@ 0x80000
{
100132d4:	b500      	push	{lr}

    if ((err = MXC_FLC_ME17_GetPhysicalAddress(aligned, &addr)) < E_NO_ERROR) {
        return err;
    }

    err = MXC_FLC_RevA_Write32Using128((mxc_flc_reva_regs_t *)flc, address, data, addr);
100132d6:	480f      	ldr	r0, [pc, #60]	@ (10013314 <MXC_FLC_Write32+0x74>)
{
100132d8:	b083      	sub	sp, #12
    err = MXC_FLC_RevA_Write32Using128((mxc_flc_reva_regs_t *)flc, address, data, addr);
100132da:	4661      	mov	r1, ip
100132dc:	f019 f948 	bl	1002c570 <__MXC_FLC_RevA_Write32Using128_veneer>
    MXC_GCR->sysctrl |= MXC_F_GCR_SYSCTRL_ICC0_FLUSH;
100132e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
100132e4:	6813      	ldr	r3, [r2, #0]
100132e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100132ea:	6013      	str	r3, [r2, #0]
    while (MXC_GCR->sysctrl & MXC_F_GCR_SYSCTRL_ICC0_FLUSH) {}
100132ec:	6813      	ldr	r3, [r2, #0]
100132ee:	065b      	lsls	r3, r3, #25
100132f0:	d4fc      	bmi.n	100132ec <MXC_FLC_Write32+0x4c>
    line = *line_addr;
100132f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    line = *line_addr;
100132f6:	4b08      	ldr	r3, [pc, #32]	@ (10013318 <MXC_FLC_Write32+0x78>)
    line = *line_addr;
100132f8:	6812      	ldr	r2, [r2, #0]
100132fa:	9201      	str	r2, [sp, #4]
    line = *line_addr;
100132fc:	681b      	ldr	r3, [r3, #0]
100132fe:	9301      	str	r3, [sp, #4]

    // Flush the cache
    MXC_FLC_ME17_Flash_Operation();

    return err;
}
10013300:	b003      	add	sp, #12
10013302:	f85d fb04 	ldr.w	pc, [sp], #4
        *result = addr & (MXC_FLASH_MEM_SIZE - 1);
10013306:	4b05      	ldr	r3, [pc, #20]	@ (1001331c <MXC_FLC_Write32+0x7c>)
10013308:	4003      	ands	r3, r0
1001330a:	e7e3      	b.n	100132d4 <MXC_FLC_Write32+0x34>
        return E_BAD_PARAM;
1001330c:	f06f 0002 	mvn.w	r0, #2
}
10013310:	4770      	bx	lr
10013312:	bf00      	nop
10013314:	40029000 	.word	0x40029000
10013318:	10002000 	.word	0x10002000
1001331c:	0007fff0 	.word	0x0007fff0

10013320 <MXC_FLC_Write>:
}

//******************************************************************************
int MXC_FLC_Write(uint32_t address, uint32_t length, uint32_t *buffer)
{
    return MXC_FLC_Com_Write(address, length, buffer);
10013320:	f019 b91e 	b.w	1002c560 <__MXC_FLC_Com_Write_veneer>

10013324 <MXC_FLC_Read>:
}

//******************************************************************************
void MXC_FLC_Read(int address, void *buffer, int len)
{
    MXC_FLC_Com_Read(address, buffer, len);
10013324:	f019 b920 	b.w	1002c568 <__MXC_FLC_Com_Read_veneer>

10013328 <MXC_FLC_EnableInt>:
}

//******************************************************************************
int MXC_FLC_EnableInt(uint32_t flags)
{
    return MXC_FLC_RevA_EnableInt(flags);
10013328:	f000 b800 	b.w	1001332c <MXC_FLC_RevA_EnableInt>

1001332c <MXC_FLC_RevA_EnableInt>:
//******************************************************************************
int MXC_FLC_RevA_EnableInt(uint32_t mask)
{
    mask &= (MXC_F_FLC_REVA_INTR_DONEIE | MXC_F_FLC_REVA_INTR_AFIE);

    if (!mask) {
1001332c:	f410 7340 	ands.w	r3, r0, #768	@ 0x300
10013330:	d006      	beq.n	10013340 <MXC_FLC_RevA_EnableInt+0x14>
        /* No bits set? Wasn't something we can enable. */
        return E_BAD_PARAM;
    }

    /* Apply enables and write back, preserving the flags */
    flc_int->intr |= mask;
10013332:	4a05      	ldr	r2, [pc, #20]	@ (10013348 <MXC_FLC_RevA_EnableInt+0x1c>)
10013334:	6811      	ldr	r1, [r2, #0]
10013336:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
10013338:	4313      	orrs	r3, r2

    return E_NO_ERROR;
1001333a:	2000      	movs	r0, #0
    flc_int->intr |= mask;
1001333c:	624b      	str	r3, [r1, #36]	@ 0x24
    return E_NO_ERROR;
1001333e:	4770      	bx	lr
        return E_BAD_PARAM;
10013340:	f06f 0002 	mvn.w	r0, #2
}
10013344:	4770      	bx	lr
10013346:	bf00      	nop
10013348:	20000008 	.word	0x20000008

1001334c <MXC_GPIO_Init>:
/* **** Globals **** */

/* **** Functions **** */
int MXC_GPIO_Init(uint32_t portmask)
{
    if (portmask & 0x1) {
1001334c:	07c1      	lsls	r1, r0, #31
{
1001334e:	b510      	push	{r4, lr}
10013350:	4604      	mov	r4, r0
    if (portmask & 0x1) {
10013352:	d408      	bmi.n	10013366 <MXC_GPIO_Init+0x1a>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO0);
    }

    if (portmask & 0x2) {
10013354:	07a2      	lsls	r2, r4, #30
10013356:	d40b      	bmi.n	10013370 <MXC_GPIO_Init+0x24>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO1);
    }

    if (portmask & 0x4) {
10013358:	0763      	lsls	r3, r4, #29
1001335a:	d40e      	bmi.n	1001337a <MXC_GPIO_Init+0x2e>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO2);
    }

    return MXC_GPIO_Common_Init(portmask);
1001335c:	4620      	mov	r0, r4
}
1001335e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return MXC_GPIO_Common_Init(portmask);
10013362:	f001 bbbd 	b.w	10014ae0 <MXC_GPIO_Common_Init>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO0);
10013366:	2000      	movs	r0, #0
10013368:	f7ff feda 	bl	10013120 <MXC_SYS_ClockEnable>
    if (portmask & 0x2) {
1001336c:	07a2      	lsls	r2, r4, #30
1001336e:	d5f3      	bpl.n	10013358 <MXC_GPIO_Init+0xc>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO1);
10013370:	2001      	movs	r0, #1
10013372:	f7ff fed5 	bl	10013120 <MXC_SYS_ClockEnable>
    if (portmask & 0x4) {
10013376:	0763      	lsls	r3, r4, #29
10013378:	d5f0      	bpl.n	1001335c <MXC_GPIO_Init+0x10>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_GPIO2);
1001337a:	2040      	movs	r0, #64	@ 0x40
1001337c:	f7ff fed0 	bl	10013120 <MXC_SYS_ClockEnable>
    return MXC_GPIO_Common_Init(portmask);
10013380:	4620      	mov	r0, r4
}
10013382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return MXC_GPIO_Common_Init(portmask);
10013386:	f001 bbab 	b.w	10014ae0 <MXC_GPIO_Common_Init>
1001338a:	bf00      	nop

1001338c <MXC_GPIO_Config>:

    return E_NO_ERROR;
}

int MXC_GPIO_Config(const mxc_gpio_cfg_t *cfg)
{
1001338c:	b570      	push	{r4, r5, r6, lr}
    int port, error;
    mxc_gpio_regs_t *gpio = cfg->port;

    port = MXC_GPIO_GET_IDX(cfg->port);
1001338e:	4b7f      	ldr	r3, [pc, #508]	@ (1001358c <MXC_GPIO_Config+0x200>)
    mxc_gpio_regs_t *gpio = cfg->port;
10013390:	6805      	ldr	r5, [r0, #0]
    port = MXC_GPIO_GET_IDX(cfg->port);
10013392:	429d      	cmp	r5, r3
{
10013394:	4604      	mov	r4, r0
    port = MXC_GPIO_GET_IDX(cfg->port);
10013396:	d037      	beq.n	10013408 <MXC_GPIO_Config+0x7c>
10013398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001339c:	429d      	cmp	r5, r3
1001339e:	d020      	beq.n	100133e2 <MXC_GPIO_Config+0x56>
100133a0:	f503 23ee 	add.w	r3, r3, #487424	@ 0x77000
100133a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
100133a8:	429d      	cmp	r5, r3
100133aa:	d07f      	beq.n	100134ac <MXC_GPIO_Config+0x120>
100133ac:	4878      	ldr	r0, [pc, #480]	@ (10013590 <MXC_GPIO_Config+0x204>)
100133ae:	1a28      	subs	r0, r5, r0
100133b0:	fab0 f080 	clz	r0, r0
100133b4:	0940      	lsrs	r0, r0, #5
100133b6:	00c0      	lsls	r0, r0, #3

    MXC_GPIO_Init(1 << port);
100133b8:	f7ff ffc8 	bl	1001334c <MXC_GPIO_Init>

    if (cfg->port == MXC_GPIO3) {
100133bc:	4b74      	ldr	r3, [pc, #464]	@ (10013590 <MXC_GPIO_Config+0x204>)
100133be:	6822      	ldr	r2, [r4, #0]
100133c0:	429a      	cmp	r2, r3
100133c2:	d015      	beq.n	100133f0 <MXC_GPIO_Config+0x64>
        default:
            return E_NOT_SUPPORTED;
        }
    } else {
        // Configure alternate function
        error = MXC_GPIO_RevA_SetAF((mxc_gpio_reva_regs_t *)gpio, cfg->func, cfg->mask);
100133c4:	6862      	ldr	r2, [r4, #4]
100133c6:	7a21      	ldrb	r1, [r4, #8]
100133c8:	4628      	mov	r0, r5
100133ca:	f000 f94b 	bl	10013664 <MXC_GPIO_RevA_SetAF>
        if (error != E_NO_ERROR) {
100133ce:	b9d0      	cbnz	r0, 10013406 <MXC_GPIO_Config+0x7a>
            return error;
        }

        // Configure the pad
        switch (cfg->pad) {
100133d0:	7a63      	ldrb	r3, [r4, #9]
100133d2:	2b04      	cmp	r3, #4
100133d4:	f200 80d7 	bhi.w	10013586 <MXC_GPIO_Config+0x1fa>
100133d8:	e8df f003 	tbb	[pc, r3]
100133dc:	2f3e4c5a 	.word	0x2f3e4c5a
100133e0:	18          	.byte	0x18
100133e1:	00          	.byte	0x00
100133e2:	2002      	movs	r0, #2
    MXC_GPIO_Init(1 << port);
100133e4:	f7ff ffb2 	bl	1001334c <MXC_GPIO_Init>
    if (cfg->port == MXC_GPIO3) {
100133e8:	4b69      	ldr	r3, [pc, #420]	@ (10013590 <MXC_GPIO_Config+0x204>)
100133ea:	6822      	ldr	r2, [r4, #0]
100133ec:	429a      	cmp	r2, r3
100133ee:	d1e9      	bne.n	100133c4 <MXC_GPIO_Config+0x38>
        switch (cfg->func) {
100133f0:	7a23      	ldrb	r3, [r4, #8]
100133f2:	2b01      	cmp	r3, #1
100133f4:	f000 80bb 	beq.w	1001356e <MXC_GPIO_Config+0x1e2>
100133f8:	2b02      	cmp	r3, #2
100133fa:	f000 80a5 	beq.w	10013548 <MXC_GPIO_Config+0x1bc>
100133fe:	2b00      	cmp	r3, #0
10013400:	d056      	beq.n	100134b0 <MXC_GPIO_Config+0x124>
            return E_NOT_SUPPORTED;
10013402:	f06f 0010 	mvn.w	r0, #16
        }
    }

    // Configure the vssel
    return MXC_GPIO_SetVSSEL(gpio, cfg->vssel, cfg->mask);
}
10013406:	bd70      	pop	{r4, r5, r6, pc}
10013408:	2001      	movs	r0, #1
1001340a:	e7d5      	b.n	100133b8 <MXC_GPIO_Config+0x2c>
            gpio->padctrl0 &= ~cfg->mask;
1001340c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
1001340e:	6862      	ldr	r2, [r4, #4]
10013410:	ea23 0302 	bic.w	r3, r3, r2
10013414:	662b      	str	r3, [r5, #96]	@ 0x60
            gpio->padctrl1 |= cfg->mask;
10013416:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
10013418:	4313      	orrs	r3, r2
1001341a:	666b      	str	r3, [r5, #100]	@ 0x64
            gpio->ps &= ~cfg->mask;
1001341c:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
10013420:	ea23 0302 	bic.w	r3, r3, r2
10013424:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
}

/* ************************************************************************** */
int MXC_GPIO_SetVSSEL(mxc_gpio_regs_t *port, mxc_gpio_vssel_t vssel, uint32_t mask)
{
    if (port == MXC_GPIO3) {
10013428:	4b59      	ldr	r3, [pc, #356]	@ (10013590 <MXC_GPIO_Config+0x204>)
    return MXC_GPIO_SetVSSEL(gpio, cfg->vssel, cfg->mask);
1001342a:	7aa1      	ldrb	r1, [r4, #10]
    if (port == MXC_GPIO3) {
1001342c:	429d      	cmp	r5, r3
1001342e:	d039      	beq.n	100134a4 <MXC_GPIO_Config+0x118>
        }

        return E_NO_ERROR;
    }

    return MXC_GPIO_RevA_SetVSSEL((mxc_gpio_reva_regs_t *)port, vssel, mask);
10013430:	4628      	mov	r0, r5
}
10013432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return MXC_GPIO_RevA_SetVSSEL((mxc_gpio_reva_regs_t *)port, vssel, mask);
10013436:	f000 b8ff 	b.w	10013638 <MXC_GPIO_RevA_SetVSSEL>
            gpio->padctrl0 |= cfg->mask;
1001343a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
1001343c:	6862      	ldr	r2, [r4, #4]
1001343e:	4313      	orrs	r3, r2
10013440:	662b      	str	r3, [r5, #96]	@ 0x60
            gpio->padctrl1 &= ~cfg->mask;
10013442:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
10013444:	ea23 0302 	bic.w	r3, r3, r2
10013448:	666b      	str	r3, [r5, #100]	@ 0x64
            gpio->ps &= ~cfg->mask;
1001344a:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
1001344e:	ea23 0302 	bic.w	r3, r3, r2
10013452:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
            break;
10013456:	e7e7      	b.n	10013428 <MXC_GPIO_Config+0x9c>
            gpio->padctrl0 &= ~cfg->mask;
10013458:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
1001345a:	6862      	ldr	r2, [r4, #4]
1001345c:	ea23 0302 	bic.w	r3, r3, r2
10013460:	662b      	str	r3, [r5, #96]	@ 0x60
            gpio->padctrl1 |= cfg->mask;
10013462:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
10013464:	4313      	orrs	r3, r2
10013466:	666b      	str	r3, [r5, #100]	@ 0x64
            gpio->ps |= cfg->mask;
10013468:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
1001346c:	4313      	orrs	r3, r2
1001346e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
            break;
10013472:	e7d9      	b.n	10013428 <MXC_GPIO_Config+0x9c>
            gpio->padctrl0 |= cfg->mask;
10013474:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
10013476:	6862      	ldr	r2, [r4, #4]
10013478:	4313      	orrs	r3, r2
1001347a:	662b      	str	r3, [r5, #96]	@ 0x60
            gpio->padctrl1 &= ~cfg->mask;
1001347c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
1001347e:	ea23 0302 	bic.w	r3, r3, r2
10013482:	666b      	str	r3, [r5, #100]	@ 0x64
            gpio->ps |= cfg->mask;
10013484:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
10013488:	4313      	orrs	r3, r2
1001348a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
            break;
1001348e:	e7cb      	b.n	10013428 <MXC_GPIO_Config+0x9c>
            gpio->padctrl0 &= ~cfg->mask;
10013490:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
10013492:	6862      	ldr	r2, [r4, #4]
10013494:	ea23 0302 	bic.w	r3, r3, r2
10013498:	662b      	str	r3, [r5, #96]	@ 0x60
            gpio->padctrl1 &= ~cfg->mask;
1001349a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
1001349c:	ea23 0302 	bic.w	r3, r3, r2
100134a0:	666b      	str	r3, [r5, #100]	@ 0x64
            break;
100134a2:	e7c1      	b.n	10013428 <MXC_GPIO_Config+0x9c>
        if (vssel == MXC_GPIO_VSSEL_VDDIO) {
100134a4:	2900      	cmp	r1, #0
100134a6:	d0ac      	beq.n	10013402 <MXC_GPIO_Config+0x76>
        return E_NO_ERROR;
100134a8:	2000      	movs	r0, #0
}
100134aa:	bd70      	pop	{r4, r5, r6, pc}
100134ac:	2004      	movs	r0, #4
100134ae:	e783      	b.n	100133b8 <MXC_GPIO_Config+0x2c>
            MXC_MCR->gpio3_ctrl &= ~(P30_OUT_EN(cfg->mask) | P31_OUT_EN(cfg->mask));
100134b0:	6863      	ldr	r3, [r4, #4]
100134b2:	4938      	ldr	r1, [pc, #224]	@ (10013594 <MXC_GPIO_Config+0x208>)
100134b4:	0058      	lsls	r0, r3, #1
100134b6:	011a      	lsls	r2, r3, #4
100134b8:	6a0e      	ldr	r6, [r1, #32]
100134ba:	f000 0002 	and.w	r0, r0, #2
100134be:	f002 0220 	and.w	r2, r2, #32
100134c2:	4302      	orrs	r2, r0
100134c4:	ea26 0202 	bic.w	r2, r6, r2
            MXC_MCR->gpio3_ctrl |= P30_OUT_EN(cfg->mask) | P31_OUT_EN(cfg->mask);
100134c8:	620a      	str	r2, [r1, #32]
            MXC_MCR->outen &= ~(SQWAVE_OUT_EN(cfg->mask) | PDOWN_OUT_EN(cfg->mask));
100134ca:	688a      	ldr	r2, [r1, #8]
100134cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
100134d0:	4303      	orrs	r3, r0
100134d2:	ea22 0303 	bic.w	r3, r2, r3
100134d6:	608b      	str	r3, [r1, #8]
        switch (cfg->pad) {
100134d8:	7a63      	ldrb	r3, [r4, #9]
100134da:	2b04      	cmp	r3, #4
100134dc:	d891      	bhi.n	10013402 <MXC_GPIO_Config+0x76>
100134de:	e8df f003 	tbb	[pc, r3]
100134e2:	1b26      	.short	0x1b26
100134e4:	1b03      	.short	0x1b03
100134e6:	03          	.byte	0x03
100134e7:	00          	.byte	0x00
            MXC_MCR->gpio3_ctrl &= ~(P30_DATA_OUT(cfg->mask) | P31_DATA_OUT(cfg->mask));
100134e8:	6862      	ldr	r2, [r4, #4]
100134ea:	492a      	ldr	r1, [pc, #168]	@ (10013594 <MXC_GPIO_Config+0x208>)
100134ec:	00d3      	lsls	r3, r2, #3
100134ee:	6a08      	ldr	r0, [r1, #32]
100134f0:	f003 0310 	and.w	r3, r3, #16
100134f4:	f002 0601 	and.w	r6, r2, #1
100134f8:	4333      	orrs	r3, r6
100134fa:	ea20 0303 	bic.w	r3, r0, r3
100134fe:	620b      	str	r3, [r1, #32]
            MXC_MCR->gpio3_ctrl &= ~(P30_PULL_DIS(cfg->mask) | P31_PULL_DIS(cfg->mask));
10013500:	0156      	lsls	r6, r2, #5
10013502:	0093      	lsls	r3, r2, #2
10013504:	6a08      	ldr	r0, [r1, #32]
10013506:	f003 0304 	and.w	r3, r3, #4
1001350a:	f006 0640 	and.w	r6, r6, #64	@ 0x40
1001350e:	4333      	orrs	r3, r6
10013510:	ea20 0303 	bic.w	r3, r0, r3
10013514:	620b      	str	r3, [r1, #32]
            break;
10013516:	e787      	b.n	10013428 <MXC_GPIO_Config+0x9c>
            MXC_MCR->gpio3_ctrl |= P30_DATA_OUT(cfg->mask) | P31_DATA_OUT(cfg->mask);
10013518:	491e      	ldr	r1, [pc, #120]	@ (10013594 <MXC_GPIO_Config+0x208>)
1001351a:	6862      	ldr	r2, [r4, #4]
1001351c:	6a0e      	ldr	r6, [r1, #32]
1001351e:	00d3      	lsls	r3, r2, #3
10013520:	f002 0001 	and.w	r0, r2, #1
10013524:	f003 0310 	and.w	r3, r3, #16
10013528:	4330      	orrs	r0, r6
1001352a:	4303      	orrs	r3, r0
1001352c:	e7e7      	b.n	100134fe <MXC_GPIO_Config+0x172>
            MXC_MCR->gpio3_ctrl |= P30_PULL_DIS(cfg->mask) | P31_PULL_DIS(cfg->mask);
1001352e:	6862      	ldr	r2, [r4, #4]
10013530:	4818      	ldr	r0, [pc, #96]	@ (10013594 <MXC_GPIO_Config+0x208>)
10013532:	0093      	lsls	r3, r2, #2
10013534:	0151      	lsls	r1, r2, #5
10013536:	6a06      	ldr	r6, [r0, #32]
10013538:	f003 0304 	and.w	r3, r3, #4
1001353c:	f001 0140 	and.w	r1, r1, #64	@ 0x40
10013540:	430b      	orrs	r3, r1
10013542:	4333      	orrs	r3, r6
10013544:	6203      	str	r3, [r0, #32]
            break;
10013546:	e76f      	b.n	10013428 <MXC_GPIO_Config+0x9c>
            MXC_MCR->gpio3_ctrl |= P30_OUT_EN(cfg->mask) | P31_OUT_EN(cfg->mask);
10013548:	6863      	ldr	r3, [r4, #4]
1001354a:	4912      	ldr	r1, [pc, #72]	@ (10013594 <MXC_GPIO_Config+0x208>)
1001354c:	0058      	lsls	r0, r3, #1
1001354e:	011a      	lsls	r2, r3, #4
10013550:	6a0e      	ldr	r6, [r1, #32]
10013552:	f000 0002 	and.w	r0, r0, #2
10013556:	f002 0220 	and.w	r2, r2, #32
1001355a:	4302      	orrs	r2, r0
1001355c:	4332      	orrs	r2, r6
1001355e:	620a      	str	r2, [r1, #32]
            MXC_MCR->outen |= SQWAVE_OUT_EN(cfg->mask) | PDOWN_OUT_EN(cfg->mask);
10013560:	688a      	ldr	r2, [r1, #8]
10013562:	f3c3 0340 	ubfx	r3, r3, #1, #1
10013566:	4303      	orrs	r3, r0
10013568:	4313      	orrs	r3, r2
1001356a:	608b      	str	r3, [r1, #8]
            break;
1001356c:	e7b4      	b.n	100134d8 <MXC_GPIO_Config+0x14c>
            MXC_MCR->gpio3_ctrl |= P30_OUT_EN(cfg->mask) | P31_OUT_EN(cfg->mask);
1001356e:	6863      	ldr	r3, [r4, #4]
10013570:	4908      	ldr	r1, [pc, #32]	@ (10013594 <MXC_GPIO_Config+0x208>)
10013572:	0058      	lsls	r0, r3, #1
10013574:	011a      	lsls	r2, r3, #4
10013576:	6a0e      	ldr	r6, [r1, #32]
10013578:	f000 0002 	and.w	r0, r0, #2
1001357c:	f002 0220 	and.w	r2, r2, #32
10013580:	4302      	orrs	r2, r0
10013582:	4332      	orrs	r2, r6
10013584:	e7a0      	b.n	100134c8 <MXC_GPIO_Config+0x13c>
        switch (cfg->pad) {
10013586:	f06f 0002 	mvn.w	r0, #2
}
1001358a:	bd70      	pop	{r4, r5, r6, pc}
1001358c:	40008000 	.word	0x40008000
10013590:	40080600 	.word	0x40080600
10013594:	40006c00 	.word	0x40006c00

10013598 <MXC_GPIO_OutSet>:
    if (port == MXC_GPIO3) {
10013598:	4a08      	ldr	r2, [pc, #32]	@ (100135bc <MXC_GPIO_OutSet+0x24>)
1001359a:	4290      	cmp	r0, r2
1001359c:	d001      	beq.n	100135a2 <MXC_GPIO_OutSet+0xa>
    MXC_GPIO_RevA_OutSet((mxc_gpio_reva_regs_t *)port, mask);
1001359e:	f000 b843 	b.w	10013628 <MXC_GPIO_RevA_OutSet>
        MXC_MCR->gpio3_ctrl |= P30_DATA_OUT(mask) | P31_DATA_OUT(mask);
100135a2:	4807      	ldr	r0, [pc, #28]	@ (100135c0 <MXC_GPIO_OutSet+0x28>)
{
100135a4:	b410      	push	{r4}
        MXC_MCR->gpio3_ctrl |= P30_DATA_OUT(mask) | P31_DATA_OUT(mask);
100135a6:	6a04      	ldr	r4, [r0, #32]
100135a8:	00ca      	lsls	r2, r1, #3
100135aa:	f001 0101 	and.w	r1, r1, #1
100135ae:	4321      	orrs	r1, r4
100135b0:	f002 0310 	and.w	r3, r2, #16
100135b4:	430b      	orrs	r3, r1
}
100135b6:	bc10      	pop	{r4}
        MXC_MCR->gpio3_ctrl |= P30_DATA_OUT(mask) | P31_DATA_OUT(mask);
100135b8:	6203      	str	r3, [r0, #32]
}
100135ba:	4770      	bx	lr
100135bc:	40080600 	.word	0x40080600
100135c0:	40006c00 	.word	0x40006c00

100135c4 <MXC_GPIO_OutClr>:
    if (port == MXC_GPIO3) {
100135c4:	4a09      	ldr	r2, [pc, #36]	@ (100135ec <MXC_GPIO_OutClr+0x28>)
100135c6:	4290      	cmp	r0, r2
100135c8:	d001      	beq.n	100135ce <MXC_GPIO_OutClr+0xa>
    MXC_GPIO_RevA_OutClr((mxc_gpio_reva_regs_t *)port, mask);
100135ca:	f000 b82f 	b.w	1001362c <MXC_GPIO_RevA_OutClr>
{
100135ce:	b410      	push	{r4}
        MXC_MCR->gpio3_ctrl &= ~(P30_DATA_OUT(mask) | P31_DATA_OUT(mask));
100135d0:	4c07      	ldr	r4, [pc, #28]	@ (100135f0 <MXC_GPIO_OutClr+0x2c>)
100135d2:	00ca      	lsls	r2, r1, #3
100135d4:	6a20      	ldr	r0, [r4, #32]
100135d6:	f002 0210 	and.w	r2, r2, #16
100135da:	f001 0101 	and.w	r1, r1, #1
100135de:	ea42 0301 	orr.w	r3, r2, r1
100135e2:	ea20 0303 	bic.w	r3, r0, r3
100135e6:	6223      	str	r3, [r4, #32]
}
100135e8:	bc10      	pop	{r4}
100135ea:	4770      	bx	lr
100135ec:	40080600 	.word	0x40080600
100135f0:	40006c00 	.word	0x40006c00

100135f4 <MXC_GPIO_Handler>:
    MXC_GPIO_Common_Handler(port);
100135f4:	f001 ba86 	b.w	10014b04 <MXC_GPIO_Common_Handler>

100135f8 <MXC_GPIO_ClearFlags>:
    if (port == MXC_GPIO3) {
100135f8:	4a03      	ldr	r2, [pc, #12]	@ (10013608 <MXC_GPIO_ClearFlags+0x10>)
100135fa:	4290      	cmp	r0, r2
100135fc:	d001      	beq.n	10013602 <MXC_GPIO_ClearFlags+0xa>
    MXC_GPIO_RevA_ClearFlags((mxc_gpio_reva_regs_t *)port, flags);
100135fe:	f000 b817 	b.w	10013630 <MXC_GPIO_RevA_ClearFlags>
        MXC_PWRSEQ->lpwkst3 = flags;
10013602:	4a02      	ldr	r2, [pc, #8]	@ (1001360c <MXC_GPIO_ClearFlags+0x14>)
10013604:	61d1      	str	r1, [r2, #28]
}
10013606:	4770      	bx	lr
10013608:	40080600 	.word	0x40080600
1001360c:	40006800 	.word	0x40006800

10013610 <MXC_GPIO_GetFlags>:
    if (port == MXC_GPIO3) {
10013610:	4b03      	ldr	r3, [pc, #12]	@ (10013620 <MXC_GPIO_GetFlags+0x10>)
10013612:	4298      	cmp	r0, r3
10013614:	d001      	beq.n	1001361a <MXC_GPIO_GetFlags+0xa>
    return MXC_GPIO_RevA_GetFlags((mxc_gpio_reva_regs_t *)port);
10013616:	f000 b80d 	b.w	10013634 <MXC_GPIO_RevA_GetFlags>
        return MXC_PWRSEQ->lpwkst3;
1001361a:	4b02      	ldr	r3, [pc, #8]	@ (10013624 <MXC_GPIO_GetFlags+0x14>)
1001361c:	69d8      	ldr	r0, [r3, #28]
}
1001361e:	4770      	bx	lr
10013620:	40080600 	.word	0x40080600
10013624:	40006800 	.word	0x40006800

10013628 <MXC_GPIO_RevA_OutSet>:
    return (port->in & mask);
}

void MXC_GPIO_RevA_OutSet(mxc_gpio_reva_regs_t *port, uint32_t mask)
{
    port->out_set = mask;
10013628:	61c1      	str	r1, [r0, #28]
}
1001362a:	4770      	bx	lr

1001362c <MXC_GPIO_RevA_OutClr>:

void MXC_GPIO_RevA_OutClr(mxc_gpio_reva_regs_t *port, uint32_t mask)
{
    port->out_clr = mask;
1001362c:	6201      	str	r1, [r0, #32]
}
1001362e:	4770      	bx	lr

10013630 <MXC_GPIO_RevA_ClearFlags>:
    port->inten_clr = mask;
}

void MXC_GPIO_RevA_ClearFlags(mxc_gpio_reva_regs_t *port, uint32_t flags)
{
    port->intfl_clr = flags;
10013630:	6481      	str	r1, [r0, #72]	@ 0x48
}
10013632:	4770      	bx	lr

10013634 <MXC_GPIO_RevA_GetFlags>:

uint32_t MXC_GPIO_RevA_GetFlags(mxc_gpio_reva_regs_t *port)
{
    return port->intfl;
10013634:	6c00      	ldr	r0, [r0, #64]	@ 0x40
}
10013636:	4770      	bx	lr

10013638 <MXC_GPIO_RevA_SetVSSEL>:

int MXC_GPIO_RevA_SetVSSEL(mxc_gpio_reva_regs_t *port, mxc_gpio_vssel_t vssel, uint32_t mask)
{
    // Configure the vssel
    switch (vssel) {
10013638:	b159      	cbz	r1, 10013652 <MXC_GPIO_RevA_SetVSSEL+0x1a>
1001363a:	2901      	cmp	r1, #1
1001363c:	d106      	bne.n	1001364c <MXC_GPIO_RevA_SetVSSEL+0x14>
    case MXC_GPIO_VSSEL_VDDIO:
        port->vssel &= ~mask;
        break;

    case MXC_GPIO_VSSEL_VDDIOH:
        port->vssel |= mask;
1001363e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
10013642:	4313      	orrs	r3, r2
10013644:	f8c0 30c0 	str.w	r3, [r0, #192]	@ 0xc0

    default:
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10013648:	2000      	movs	r0, #0
}
1001364a:	4770      	bx	lr
    switch (vssel) {
1001364c:	f06f 0002 	mvn.w	r0, #2
10013650:	4770      	bx	lr
        port->vssel &= ~mask;
10013652:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
10013656:	ea23 0302 	bic.w	r3, r3, r2
1001365a:	f8c0 30c0 	str.w	r3, [r0, #192]	@ 0xc0
    return E_NO_ERROR;
1001365e:	2000      	movs	r0, #0
}
10013660:	4770      	bx	lr
10013662:	bf00      	nop

10013664 <MXC_GPIO_RevA_SetAF>:

int MXC_GPIO_RevA_SetAF(mxc_gpio_reva_regs_t *port, mxc_gpio_func_t func, uint32_t mask)
{
    //This is required for new devices going forward.
    port->inen |= mask;
10013664:	6b03      	ldr	r3, [r0, #48]	@ 0x30
10013666:	4313      	orrs	r3, r2
10013668:	6303      	str	r3, [r0, #48]	@ 0x30

    //Switch to I/O mode first
    port->en0_set = mask;
1001366a:	6042      	str	r2, [r0, #4]

    switch (func) {
1001366c:	2905      	cmp	r1, #5
1001366e:	d82c      	bhi.n	100136ca <MXC_GPIO_RevA_SetAF+0x66>
10013670:	e8df f001 	tbb	[pc, r1]
10013674:	1f19120a 	.word	0x1f19120a
10013678:	0325      	.short	0x0325
        port->en1_clr = mask;
        port->en0_clr = mask;
        break;

    case MXC_GPIO_FUNC_ALT4:
        port->en3_clr = mask;
1001367a:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
        port->en2_set = mask;
1001367e:	6782      	str	r2, [r0, #120]	@ 0x78
        port->en1_set = mask;
10013680:	66c2      	str	r2, [r0, #108]	@ 0x6c
        port->en0_clr = mask;
10013682:	6082      	str	r2, [r0, #8]
#endif
    default:
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
10013684:	2000      	movs	r0, #0
10013686:	4770      	bx	lr
        port->outen_clr = mask;
10013688:	6142      	str	r2, [r0, #20]
        port->en0_set = mask;
1001368a:	6042      	str	r2, [r0, #4]
        port->en1_clr = mask;
1001368c:	6702      	str	r2, [r0, #112]	@ 0x70
        port->en2_clr = mask;
1001368e:	67c2      	str	r2, [r0, #124]	@ 0x7c
        port->en3_clr = mask;
10013690:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    return E_NO_ERROR;
10013694:	2000      	movs	r0, #0
10013696:	4770      	bx	lr
        port->outen_set = mask;
10013698:	6102      	str	r2, [r0, #16]
        port->en0_set = mask;
1001369a:	6042      	str	r2, [r0, #4]
        port->en1_clr = mask;
1001369c:	6702      	str	r2, [r0, #112]	@ 0x70
        port->en2_clr = mask;
1001369e:	67c2      	str	r2, [r0, #124]	@ 0x7c
        port->en3_clr = mask;
100136a0:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
        break;
100136a4:	e7ee      	b.n	10013684 <MXC_GPIO_RevA_SetAF+0x20>
        port->en3_clr = mask;
100136a6:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
        port->en2_clr = mask;
100136aa:	67c2      	str	r2, [r0, #124]	@ 0x7c
        port->en1_clr = mask;
100136ac:	6702      	str	r2, [r0, #112]	@ 0x70
        port->en0_clr = mask;
100136ae:	6082      	str	r2, [r0, #8]
        break;
100136b0:	e7e8      	b.n	10013684 <MXC_GPIO_RevA_SetAF+0x20>
        port->en3_clr = mask;
100136b2:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
        port->en2_clr = mask;
100136b6:	67c2      	str	r2, [r0, #124]	@ 0x7c
        port->en1_set = mask;
100136b8:	66c2      	str	r2, [r0, #108]	@ 0x6c
        port->en0_clr = mask;
100136ba:	6082      	str	r2, [r0, #8]
        break;
100136bc:	e7e2      	b.n	10013684 <MXC_GPIO_RevA_SetAF+0x20>
        port->en3_clr = mask;
100136be:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
        port->en2_set = mask;
100136c2:	6782      	str	r2, [r0, #120]	@ 0x78
        port->en1_clr = mask;
100136c4:	6702      	str	r2, [r0, #112]	@ 0x70
        port->en0_clr = mask;
100136c6:	6082      	str	r2, [r0, #8]
        break;
100136c8:	e7dc      	b.n	10013684 <MXC_GPIO_RevA_SetAF+0x20>
    switch (func) {
100136ca:	f06f 0002 	mvn.w	r0, #2
}
100136ce:	4770      	bx	lr

100136d0 <MXC_I2C_SetSlaveAddr>:
    return MXC_I2C_RevA_Init((mxc_i2c_reva_regs_t *)i2c, masterMode, slaveAddr);
}

int MXC_I2C_SetSlaveAddr(mxc_i2c_regs_t *i2c, unsigned int slaveAddr, int idx)
{
    return MXC_I2C_RevA_SetSlaveAddr((mxc_i2c_reva_regs_t *)i2c, slaveAddr, idx);
100136d0:	f000 b8fa 	b.w	100138c8 <MXC_I2C_RevA_SetSlaveAddr>

100136d4 <MXC_I2C_Shutdown>:
}

int MXC_I2C_Shutdown(mxc_i2c_regs_t *i2c)
{
100136d4:	b508      	push	{r3, lr}
    // Configure GPIO for I2C
    if (i2c == MXC_I2C0) {
100136d6:	4b11      	ldr	r3, [pc, #68]	@ (1001371c <MXC_I2C_Shutdown+0x48>)
100136d8:	4298      	cmp	r0, r3
100136da:	d00d      	beq.n	100136f8 <MXC_I2C_Shutdown+0x24>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_I2C0);
        MXC_SYS_Reset_Periph(MXC_SYS_RESET0_I2C0);
    } else if (i2c == MXC_I2C1) {
100136dc:	4b10      	ldr	r3, [pc, #64]	@ (10013720 <MXC_I2C_Shutdown+0x4c>)
100136de:	4298      	cmp	r0, r3
100136e0:	d011      	beq.n	10013706 <MXC_I2C_Shutdown+0x32>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_I2C1);
        MXC_SYS_Reset_Periph(MXC_SYS_RESET1_I2C1);
    } else if (i2c == MXC_I2C2) {
100136e2:	4b10      	ldr	r3, [pc, #64]	@ (10013724 <MXC_I2C_Shutdown+0x50>)
100136e4:	4298      	cmp	r0, r3
100136e6:	d115      	bne.n	10013714 <MXC_I2C_Shutdown+0x40>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_I2C2);
100136e8:	2038      	movs	r0, #56	@ 0x38
100136ea:	f7ff fcf9 	bl	100130e0 <MXC_SYS_ClockDisable>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET1_I2C2);
100136ee:	2034      	movs	r0, #52	@ 0x34
100136f0:	f7ff fdb2 	bl	10013258 <MXC_SYS_Reset_Periph>
    } else {
        return E_NO_DEVICE;
    }

    return E_NO_ERROR;
100136f4:	2000      	movs	r0, #0
}
100136f6:	bd08      	pop	{r3, pc}
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_I2C0);
100136f8:	200d      	movs	r0, #13
100136fa:	f7ff fcf1 	bl	100130e0 <MXC_SYS_ClockDisable>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET0_I2C0);
100136fe:	2010      	movs	r0, #16
10013700:	f7ff fdaa 	bl	10013258 <MXC_SYS_Reset_Periph>
10013704:	e7f6      	b.n	100136f4 <MXC_I2C_Shutdown+0x20>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_I2C1);
10013706:	201c      	movs	r0, #28
10013708:	f7ff fcea 	bl	100130e0 <MXC_SYS_ClockDisable>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET1_I2C1);
1001370c:	2020      	movs	r0, #32
1001370e:	f7ff fda3 	bl	10013258 <MXC_SYS_Reset_Periph>
10013712:	e7ef      	b.n	100136f4 <MXC_I2C_Shutdown+0x20>
        return E_NO_DEVICE;
10013714:	f06f 0001 	mvn.w	r0, #1
}
10013718:	bd08      	pop	{r3, pc}
1001371a:	bf00      	nop
1001371c:	4001d000 	.word	0x4001d000
10013720:	4001e000 	.word	0x4001e000
10013724:	4001f000 	.word	0x4001f000

10013728 <MXC_I2C_Init>:
    if (i2c == NULL) {
10013728:	b3c0      	cbz	r0, 1001379c <MXC_I2C_Init+0x74>
{
1001372a:	b570      	push	{r4, r5, r6, lr}
1001372c:	4604      	mov	r4, r0
    MXC_I2C_Shutdown(i2c); // Clear everything out
1001372e:	460d      	mov	r5, r1
10013730:	4616      	mov	r6, r2
10013732:	f7ff ffcf 	bl	100136d4 <MXC_I2C_Shutdown>
    if (i2c == MXC_I2C0) {
10013736:	4b1b      	ldr	r3, [pc, #108]	@ (100137a4 <MXC_I2C_Init+0x7c>)
10013738:	429c      	cmp	r4, r3
1001373a:	d012      	beq.n	10013762 <MXC_I2C_Init+0x3a>
    } else if (i2c == MXC_I2C1) {
1001373c:	4b1a      	ldr	r3, [pc, #104]	@ (100137a8 <MXC_I2C_Init+0x80>)
1001373e:	429c      	cmp	r4, r3
10013740:	d01c      	beq.n	1001377c <MXC_I2C_Init+0x54>
    } else if (i2c == MXC_I2C2) {
10013742:	4b1a      	ldr	r3, [pc, #104]	@ (100137ac <MXC_I2C_Init+0x84>)
10013744:	429c      	cmp	r4, r3
10013746:	d126      	bne.n	10013796 <MXC_I2C_Init+0x6e>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_I2C2);
10013748:	2038      	movs	r0, #56	@ 0x38
1001374a:	f7ff fce9 	bl	10013120 <MXC_SYS_ClockEnable>
        MXC_GPIO_Config(&gpio_cfg_i2c2);
1001374e:	4818      	ldr	r0, [pc, #96]	@ (100137b0 <MXC_I2C_Init+0x88>)
10013750:	f7ff fe1c 	bl	1001338c <MXC_GPIO_Config>
    return MXC_I2C_RevA_Init((mxc_i2c_reva_regs_t *)i2c, masterMode, slaveAddr);
10013754:	4632      	mov	r2, r6
10013756:	4629      	mov	r1, r5
10013758:	4620      	mov	r0, r4
}
1001375a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return MXC_I2C_RevA_Init((mxc_i2c_reva_regs_t *)i2c, masterMode, slaveAddr);
1001375e:	f000 b84d 	b.w	100137fc <MXC_I2C_RevA_Init>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_I2C0);
10013762:	200d      	movs	r0, #13
10013764:	f7ff fcdc 	bl	10013120 <MXC_SYS_ClockEnable>
        MXC_GPIO_Config(&gpio_cfg_i2c0);
10013768:	4812      	ldr	r0, [pc, #72]	@ (100137b4 <MXC_I2C_Init+0x8c>)
1001376a:	f7ff fe0f 	bl	1001338c <MXC_GPIO_Config>
    return MXC_I2C_RevA_Init((mxc_i2c_reva_regs_t *)i2c, masterMode, slaveAddr);
1001376e:	4632      	mov	r2, r6
10013770:	4629      	mov	r1, r5
10013772:	4620      	mov	r0, r4
}
10013774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return MXC_I2C_RevA_Init((mxc_i2c_reva_regs_t *)i2c, masterMode, slaveAddr);
10013778:	f000 b840 	b.w	100137fc <MXC_I2C_RevA_Init>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_I2C1);
1001377c:	201c      	movs	r0, #28
1001377e:	f7ff fccf 	bl	10013120 <MXC_SYS_ClockEnable>
        MXC_GPIO_Config(&gpio_cfg_i2c1);
10013782:	480d      	ldr	r0, [pc, #52]	@ (100137b8 <MXC_I2C_Init+0x90>)
10013784:	f7ff fe02 	bl	1001338c <MXC_GPIO_Config>
    return MXC_I2C_RevA_Init((mxc_i2c_reva_regs_t *)i2c, masterMode, slaveAddr);
10013788:	4632      	mov	r2, r6
1001378a:	4629      	mov	r1, r5
1001378c:	4620      	mov	r0, r4
}
1001378e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return MXC_I2C_RevA_Init((mxc_i2c_reva_regs_t *)i2c, masterMode, slaveAddr);
10013792:	f000 b833 	b.w	100137fc <MXC_I2C_RevA_Init>
        return E_NO_DEVICE;
10013796:	f06f 0001 	mvn.w	r0, #1
}
1001379a:	bd70      	pop	{r4, r5, r6, pc}
        return E_NULL_PTR;
1001379c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
100137a0:	4770      	bx	lr
100137a2:	bf00      	nop
100137a4:	4001d000 	.word	0x4001d000
100137a8:	4001e000 	.word	0x4001e000
100137ac:	4001f000 	.word	0x4001f000
100137b0:	100253b4 	.word	0x100253b4
100137b4:	100253cc 	.word	0x100253cc
100137b8:	100253c0 	.word	0x100253c0

100137bc <MXC_I2C_SetFrequency>:
    return E_NO_ERROR;
}

int MXC_I2C_SetFrequency(mxc_i2c_regs_t *i2c, unsigned int hz)
{
    return MXC_I2C_RevA_SetFrequency((mxc_i2c_reva_regs_t *)i2c, hz);
100137bc:	f000 b89e 	b.w	100138fc <MXC_I2C_RevA_SetFrequency>

100137c0 <MXC_I2C_GetFrequency>:
}

int MXC_I2C_GetFrequency(mxc_i2c_regs_t *i2c)
{
    return MXC_I2C_RevA_GetFrequency((mxc_i2c_reva_regs_t *)i2c);
100137c0:	f000 b8ec 	b.w	1001399c <MXC_I2C_RevA_GetFrequency>

100137c4 <MXC_I2C_Start>:
/* ************************************************************************* */
/* Low-level functions                                                       */
/* ************************************************************************* */
int MXC_I2C_Start(mxc_i2c_regs_t *i2c)
{
    return MXC_I2C_RevA_Start((mxc_i2c_reva_regs_t *)i2c);
100137c4:	f000 b8fa 	b.w	100139bc <MXC_I2C_RevA_Start>

100137c8 <MXC_I2C_Stop>:
}

int MXC_I2C_Stop(mxc_i2c_regs_t *i2c)
{
    return MXC_I2C_RevA_Stop((mxc_i2c_reva_regs_t *)i2c);
100137c8:	f000 b90c 	b.w	100139e4 <MXC_I2C_RevA_Stop>

100137cc <MXC_I2C_ReadRXFIFO>:
    return MXC_I2C_RevA_Read((mxc_i2c_reva_regs_t *)i2c, bytes, len, ack);
}

int MXC_I2C_ReadRXFIFO(mxc_i2c_regs_t *i2c, volatile unsigned char *bytes, unsigned int len)
{
    return MXC_I2C_RevA_ReadRXFIFO((mxc_i2c_reva_regs_t *)i2c, bytes, len);
100137cc:	f000 b918 	b.w	10013a00 <MXC_I2C_RevA_ReadRXFIFO>

100137d0 <MXC_I2C_WriteTXFIFO>:
    return MXC_I2C_RevA_GetRXFIFOAvailable((mxc_i2c_reva_regs_t *)i2c);
}

int MXC_I2C_WriteTXFIFO(mxc_i2c_regs_t *i2c, volatile unsigned char *bytes, unsigned int len)
{
    return MXC_I2C_RevA_WriteTXFIFO((mxc_i2c_reva_regs_t *)i2c, bytes, len);
100137d0:	f000 b934 	b.w	10013a3c <MXC_I2C_RevA_WriteTXFIFO>

100137d4 <MXC_I2C_ClearRXFIFO>:
    return MXC_I2C_RevA_GetTXFIFOAvailable((mxc_i2c_reva_regs_t *)i2c);
}

void MXC_I2C_ClearRXFIFO(mxc_i2c_regs_t *i2c)
{
    MXC_I2C_RevA_ClearRXFIFO((mxc_i2c_reva_regs_t *)i2c);
100137d4:	f000 b94a 	b.w	10013a6c <MXC_I2C_RevA_ClearRXFIFO>

100137d8 <MXC_I2C_ClearTXFIFO>:
}

void MXC_I2C_ClearTXFIFO(mxc_i2c_regs_t *i2c)
{
    MXC_I2C_RevA_ClearTXFIFO((mxc_i2c_reva_regs_t *)i2c);
100137d8:	f000 b950 	b.w	10013a7c <MXC_I2C_RevA_ClearTXFIFO>

100137dc <MXC_I2C_ClearFlags>:
    return MXC_I2C_RevA_GetFlags((mxc_i2c_reva_regs_t *)i2c, flags0, flags1);
}

void MXC_I2C_ClearFlags(mxc_i2c_regs_t *i2c, unsigned int flags0, unsigned int flags1)
{
    MXC_I2C_RevA_ClearFlags((mxc_i2c_reva_regs_t *)i2c, flags0, flags1);
100137dc:	f000 b956 	b.w	10013a8c <MXC_I2C_RevA_ClearFlags>

100137e0 <MXC_I2C_Recover>:
    return MXC_I2C_RevA_GetTimeout((mxc_i2c_reva_regs_t *)i2c);
}

int MXC_I2C_Recover(mxc_i2c_regs_t *i2c, unsigned int retries)
{
    return MXC_I2C_RevA_Recover((mxc_i2c_reva_regs_t *)i2c, retries);
100137e0:	f000 b958 	b.w	10013a94 <MXC_I2C_RevA_Recover>

100137e4 <MXC_I2C_MasterTransaction>:
/* Transaction level functions                                               */
/* ************************************************************************* */

int MXC_I2C_MasterTransaction(mxc_i2c_req_t *req)
{
    return MXC_I2C_RevA_MasterTransaction((mxc_i2c_reva_req_t *)req);
100137e4:	f000 b9c2 	b.w	10013b6c <MXC_I2C_RevA_MasterTransaction>

100137e8 <MXC_I2C_SetRXThreshold>:
        (mxc_i2c_reva_regs_t *)i2c, (mxc_i2c_reva_slave_handler_t)callback, interruptCheck);
}

int MXC_I2C_SetRXThreshold(mxc_i2c_regs_t *i2c, unsigned int numBytes)
{
    return MXC_I2C_RevA_SetRXThreshold((mxc_i2c_reva_regs_t *)i2c, numBytes);
100137e8:	f000 ba90 	b.w	10013d0c <MXC_I2C_RevA_SetRXThreshold>

100137ec <MXC_I2C_SetTXThreshold>:
    return MXC_I2C_RevA_GetRXThreshold((mxc_i2c_reva_regs_t *)i2c);
}

int MXC_I2C_SetTXThreshold(mxc_i2c_regs_t *i2c, unsigned int numBytes)
{
    return MXC_I2C_RevA_SetTXThreshold((mxc_i2c_reva_regs_t *)i2c, numBytes);
100137ec:	f000 ba9e 	b.w	10013d2c <MXC_I2C_RevA_SetTXThreshold>

100137f0 <MXC_I2C_AsyncHandler>:
    MXC_I2C_RevA_AbortAsync((mxc_i2c_reva_regs_t *)i2c);
}

void MXC_I2C_AsyncHandler(mxc_i2c_regs_t *i2c)
{
    MXC_I2C_RevA_AsyncHandler((mxc_i2c_reva_regs_t *)i2c, interruptCheck);
100137f0:	4b01      	ldr	r3, [pc, #4]	@ (100137f8 <MXC_I2C_AsyncHandler+0x8>)
100137f2:	6819      	ldr	r1, [r3, #0]
100137f4:	f000 be08 	b.w	10014408 <MXC_I2C_RevA_AsyncHandler>
100137f8:	2000000c 	.word	0x2000000c

100137fc <MXC_I2C_RevA_Init>:

/* ************************************************************************* */
/* Control/Configuration functions                                           */
/* ************************************************************************* */
int MXC_I2C_RevA_Init(mxc_i2c_reva_regs_t *i2c, int masterMode, unsigned int slaveAddr)
{
100137fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int err;

    if (i2c == NULL) {
100137fe:	2800      	cmp	r0, #0
10013800:	d057      	beq.n	100138b2 <MXC_I2C_RevA_Init+0xb6>
        return E_NULL_PTR;
    }

    if ((err = MXC_I2C_Recover((mxc_i2c_regs_t *)i2c, 16)) != E_NO_ERROR) {
10013802:	460f      	mov	r7, r1
10013804:	2110      	movs	r1, #16
10013806:	4615      	mov	r5, r2
10013808:	4604      	mov	r4, r0
1001380a:	f7ff ffe9 	bl	100137e0 <MXC_I2C_Recover>
1001380e:	4606      	mov	r6, r0
10013810:	b108      	cbz	r0, 10013816 <MXC_I2C_RevA_Init+0x1a>
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_MST_MODE;
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 1;
    }

    return E_NO_ERROR;
}
10013812:	4630      	mov	r0, r6
10013814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    i2c->ctrl |= MXC_F_I2C_REVA_CTRL_EN;
10013816:	6823      	ldr	r3, [r4, #0]
10013818:	f043 0301 	orr.w	r3, r3, #1
1001381c:	6023      	str	r3, [r4, #0]
    MXC_I2C_ClearRXFIFO((mxc_i2c_regs_t *)i2c);
1001381e:	4620      	mov	r0, r4
10013820:	f7ff ffd8 	bl	100137d4 <MXC_I2C_ClearRXFIFO>
    MXC_I2C_ClearTXFIFO((mxc_i2c_regs_t *)i2c);
10013824:	4620      	mov	r0, r4
10013826:	f7ff ffd7 	bl	100137d8 <MXC_I2C_ClearTXFIFO>
    MXC_I2C_SetTXThreshold((mxc_i2c_regs_t *)i2c, 2); // set TX threshold to 2 bytes
1001382a:	2102      	movs	r1, #2
1001382c:	4620      	mov	r0, r4
1001382e:	f7ff ffdd 	bl	100137ec <MXC_I2C_SetTXThreshold>
    MXC_I2C_SetRXThreshold((mxc_i2c_regs_t *)i2c, 6); // set RX threshold to 6 bytes
10013832:	2106      	movs	r1, #6
10013834:	4620      	mov	r0, r4
10013836:	f7ff ffd7 	bl	100137e8 <MXC_I2C_SetRXThreshold>
    if (!masterMode) {
1001383a:	b1df      	cbz	r7, 10013874 <MXC_I2C_RevA_Init+0x78>
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_MST_MODE;
1001383c:	6823      	ldr	r3, [r4, #0]
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 1;
1001383e:	4a1e      	ldr	r2, [pc, #120]	@ (100138b8 <MXC_I2C_RevA_Init+0xbc>)
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_MST_MODE;
10013840:	f043 0302 	orr.w	r3, r3, #2
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 1;
10013844:	4294      	cmp	r4, r2
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_MST_MODE;
10013846:	6023      	str	r3, [r4, #0]
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 1;
10013848:	d02f      	beq.n	100138aa <MXC_I2C_RevA_Init+0xae>
1001384a:	4b1c      	ldr	r3, [pc, #112]	@ (100138bc <MXC_I2C_RevA_Init+0xc0>)
1001384c:	429c      	cmp	r4, r3
1001384e:	d00f      	beq.n	10013870 <MXC_I2C_RevA_Init+0x74>
10013850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10013854:	429c      	cmp	r4, r3
10013856:	bf14      	ite	ne
10013858:	f04f 34ff 	movne.w	r4, #4294967295	@ 0xffffffff
1001385c:	2402      	moveq	r4, #2
1001385e:	4b18      	ldr	r3, [pc, #96]	@ (100138c0 <MXC_I2C_RevA_Init+0xc4>)
10013860:	eb04 0444 	add.w	r4, r4, r4, lsl #1
10013864:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
10013868:	2201      	movs	r2, #1
1001386a:	605a      	str	r2, [r3, #4]
}
1001386c:	4630      	mov	r0, r6
1001386e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 1;
10013870:	2401      	movs	r4, #1
10013872:	e7f4      	b.n	1001385e <MXC_I2C_RevA_Init+0x62>
        MXC_I2C_SetSlaveAddr((mxc_i2c_regs_t *)i2c, slaveAddr, 0);
10013874:	463a      	mov	r2, r7
10013876:	4629      	mov	r1, r5
10013878:	4620      	mov	r0, r4
1001387a:	f7ff ff29 	bl	100136d0 <MXC_I2C_SetSlaveAddr>
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 0;
1001387e:	4b0e      	ldr	r3, [pc, #56]	@ (100138b8 <MXC_I2C_RevA_Init+0xbc>)
10013880:	429c      	cmp	r4, r3
10013882:	d009      	beq.n	10013898 <MXC_I2C_RevA_Init+0x9c>
10013884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10013888:	429c      	cmp	r4, r3
1001388a:	d010      	beq.n	100138ae <MXC_I2C_RevA_Init+0xb2>
1001388c:	4f0d      	ldr	r7, [pc, #52]	@ (100138c4 <MXC_I2C_RevA_Init+0xc8>)
1001388e:	42bc      	cmp	r4, r7
10013890:	bf14      	ite	ne
10013892:	f04f 37ff 	movne.w	r7, #4294967295	@ 0xffffffff
10013896:	2702      	moveq	r7, #2
10013898:	4b09      	ldr	r3, [pc, #36]	@ (100138c0 <MXC_I2C_RevA_Init+0xc4>)
1001389a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
1001389e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
100138a2:	2200      	movs	r2, #0
100138a4:	605a      	str	r2, [r3, #4]
}
100138a6:	4630      	mov	r0, r6
100138a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 1;
100138aa:	4634      	mov	r4, r6
100138ac:	e7d7      	b.n	1001385e <MXC_I2C_RevA_Init+0x62>
        states[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)].master = 0;
100138ae:	2701      	movs	r7, #1
100138b0:	e7f2      	b.n	10013898 <MXC_I2C_RevA_Init+0x9c>
        return E_NULL_PTR;
100138b2:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
100138b6:	e7ac      	b.n	10013812 <MXC_I2C_RevA_Init+0x16>
100138b8:	4001d000 	.word	0x4001d000
100138bc:	4001e000 	.word	0x4001e000
100138c0:	20001008 	.word	0x20001008
100138c4:	4001f000 	.word	0x4001f000

100138c8 <MXC_I2C_RevA_SetSlaveAddr>:

int MXC_I2C_RevA_SetSlaveAddr(mxc_i2c_reva_regs_t *i2c, unsigned int slaveAddr, int idx)
{
    if (i2c == NULL) {
100138c8:	4603      	mov	r3, r0
100138ca:	b1a0      	cbz	r0, 100138f6 <MXC_I2C_RevA_SetSlaveAddr+0x2e>
        return E_NULL_PTR;
    }

    if (idx != 0) {
100138cc:	b96a      	cbnz	r2, 100138ea <MXC_I2C_RevA_SetSlaveAddr+0x22>
        // Multiple slaves are not supported yet
        return E_NOT_SUPPORTED;
    }

    if (slaveAddr > MXC_F_I2C_REVA_SLAVE_ADDR) {
100138ce:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
100138d2:	d20d      	bcs.n	100138f0 <MXC_I2C_RevA_SetSlaveAddr+0x28>
        return E_BAD_PARAM;
    }

    i2c->slave = 0;

    if (slaveAddr > MXC_I2C_REVA_MAX_ADDR_WIDTH) {
100138d4:	297f      	cmp	r1, #127	@ 0x7f
    i2c->slave = 0;
100138d6:	64c2      	str	r2, [r0, #76]	@ 0x4c
        // Set for 10bit addressing mode
        i2c->slave = MXC_F_I2C_REVA_SLAVE_EXT_ADDR_EN;
100138d8:	bf84      	itt	hi
100138da:	f44f 4200 	movhi.w	r2, #32768	@ 0x8000
100138de:	64c2      	strhi	r2, [r0, #76]	@ 0x4c
    }

    i2c->slave |= slaveAddr;
100138e0:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
100138e2:	430a      	orrs	r2, r1

    return E_NO_ERROR;
100138e4:	2000      	movs	r0, #0
    i2c->slave |= slaveAddr;
100138e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    return E_NO_ERROR;
100138e8:	4770      	bx	lr
        return E_NOT_SUPPORTED;
100138ea:	f06f 0010 	mvn.w	r0, #16
100138ee:	4770      	bx	lr
        return E_BAD_PARAM;
100138f0:	f06f 0002 	mvn.w	r0, #2
}
100138f4:	4770      	bx	lr
        return E_NULL_PTR;
100138f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100138fa:	4770      	bx	lr

100138fc <MXC_I2C_RevA_SetFrequency>:

int MXC_I2C_RevA_SetFrequency(mxc_i2c_reva_regs_t *i2c, unsigned int hz)
{
    unsigned int ticksTotal, hiClks, lowClks;

    if (i2c == NULL) {
100138fc:	2800      	cmp	r0, #0
100138fe:	d03f      	beq.n	10013980 <MXC_I2C_RevA_SetFrequency+0x84>
{
10013900:	b410      	push	{r4}
        return E_NULL_PTR;
    }

    if (hz > MXC_I2C_REVA_FASTPLUS_SPEED && hz <= MXC_I2C_REVA_HIGH_SPEED) {
10013902:	4a21      	ldr	r2, [pc, #132]	@ (10013988 <MXC_I2C_RevA_SetFrequency+0x8c>)
10013904:	f5a1 2374 	sub.w	r3, r1, #999424	@ 0xf4000
10013908:	f46f 7410 	mvn.w	r4, #576	@ 0x240
1001390c:	4423      	add	r3, r4
1001390e:	4293      	cmp	r3, r2
10013910:	d313      	bcc.n	1001393a <MXC_I2C_RevA_SetFrequency+0x3e>

        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_HS_EN;

        hz = MXC_I2C_REVA_FAST_SPEED; // High speed preambles will be sent at 400kHz

    } else if (hz > MXC_I2C_REVA_HIGH_SPEED) {
10013912:	4b1e      	ldr	r3, [pc, #120]	@ (1001398c <MXC_I2C_RevA_SetFrequency+0x90>)
10013914:	4299      	cmp	r1, r3
10013916:	d82f      	bhi.n	10013978 <MXC_I2C_RevA_SetFrequency+0x7c>
        ticksTotal = PeripheralClock / hz;
10013918:	4b1d      	ldr	r3, [pc, #116]	@ (10013990 <MXC_I2C_RevA_SetFrequency+0x94>)
        return E_BAD_PARAM;
    }

    // Calculate the period of SCL, 50% duty cycle
    ticksTotal = PeripheralClock / hz;
1001391a:	681b      	ldr	r3, [r3, #0]
1001391c:	085b      	lsrs	r3, r3, #1
1001391e:	fbb3 f3f1 	udiv	r3, r3, r1
    hiClks = (ticksTotal >> 1) - 1;
10013922:	085b      	lsrs	r3, r3, #1
    if (ticksTotal % 1) {
        hiClks++;
    }

    // Check for maximum/minimum supported speeds
    if ((hiClks > MXC_F_I2C_REVA_CLKHI_HI) || (lowClks == 0)) {
10013924:	1e9a      	subs	r2, r3, #2
10013926:	f5b2 7fff 	cmp.w	r2, #510	@ 0x1fe
    hiClks = (ticksTotal >> 1) - 1;
1001392a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
    if ((hiClks > MXC_F_I2C_REVA_CLKHI_HI) || (lowClks == 0)) {
1001392e:	d823      	bhi.n	10013978 <MXC_I2C_RevA_SetFrequency+0x7c>
        return E_BAD_PARAM;
    }

    i2c->clklo = lowClks & MXC_F_I2C_REVA_CLKLO_LO;
10013930:	6343      	str	r3, [r0, #52]	@ 0x34
    i2c->clkhi = hiClks & MXC_F_I2C_REVA_CLKHI_HI;

    // Return the actual speed set, since it won't be exactly what's requested
    return MXC_I2C_GetFrequency((mxc_i2c_regs_t *)i2c);
}
10013932:	bc10      	pop	{r4}
    i2c->clkhi = hiClks & MXC_F_I2C_REVA_CLKHI_HI;
10013934:	6383      	str	r3, [r0, #56]	@ 0x38
    return MXC_I2C_GetFrequency((mxc_i2c_regs_t *)i2c);
10013936:	f7ff bf43 	b.w	100137c0 <MXC_I2C_GetFrequency>
        ticksTotal = PeripheralClock / hz;
1001393a:	4b15      	ldr	r3, [pc, #84]	@ (10013990 <MXC_I2C_RevA_SetFrequency+0x94>)
        hsLowClks = (ticksTotal * 2) / 3 - 1;
1001393c:	4c15      	ldr	r4, [pc, #84]	@ (10013994 <MXC_I2C_RevA_SetFrequency+0x98>)
        ticksTotal = PeripheralClock / hz;
1001393e:	681b      	ldr	r3, [r3, #0]
10013940:	085b      	lsrs	r3, r3, #1
10013942:	fbb3 f1f1 	udiv	r1, r3, r1
        hsLowClks = (ticksTotal * 2) / 3 - 1;
10013946:	004a      	lsls	r2, r1, #1
        hsHiClks = ticksTotal / 3 - 1;
10013948:	fba4 c101 	umull	ip, r1, r4, r1
1001394c:	0849      	lsrs	r1, r1, #1
        hsLowClks = (ticksTotal * 2) / 3 - 1;
1001394e:	fba4 4202 	umull	r4, r2, r4, r2
        hsHiClks = ticksTotal / 3 - 1;
10013952:	3901      	subs	r1, #1
        hsLowClks = (ticksTotal * 2) / 3 - 1;
10013954:	0852      	lsrs	r2, r2, #1
        if ((hsHiClks > 0xF) || (hsLowClks > 0xF)) {
10013956:	290f      	cmp	r1, #15
        hsLowClks = (ticksTotal * 2) / 3 - 1;
10013958:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
        if ((hsHiClks > 0xF) || (hsLowClks > 0xF)) {
1001395c:	dc0c      	bgt.n	10013978 <MXC_I2C_RevA_SetFrequency+0x7c>
1001395e:	2a0f      	cmp	r2, #15
10013960:	dc0a      	bgt.n	10013978 <MXC_I2C_RevA_SetFrequency+0x7c>
        hsHiClks = (hsHiClks << MXC_F_I2C_REVA_HSCLK_HI_POS) & MXC_F_I2C_REVA_HSCLK_HI;
10013962:	0209      	lsls	r1, r1, #8
10013964:	b289      	uxth	r1, r1
        i2c->hsclk = (hsLowClks | hsHiClks);
10013966:	b2d2      	uxtb	r2, r2
10013968:	430a      	orrs	r2, r1
1001396a:	63c2      	str	r2, [r0, #60]	@ 0x3c
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_HS_EN;
1001396c:	6802      	ldr	r2, [r0, #0]
        hz = MXC_I2C_REVA_FAST_SPEED; // High speed preambles will be sent at 400kHz
1001396e:	490a      	ldr	r1, [pc, #40]	@ (10013998 <MXC_I2C_RevA_SetFrequency+0x9c>)
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_HS_EN;
10013970:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
10013974:	6002      	str	r2, [r0, #0]
        hz = MXC_I2C_REVA_FAST_SPEED; // High speed preambles will be sent at 400kHz
10013976:	e7d2      	b.n	1001391e <MXC_I2C_RevA_SetFrequency+0x22>
            return E_BAD_PARAM;
10013978:	f06f 0002 	mvn.w	r0, #2
}
1001397c:	bc10      	pop	{r4}
1001397e:	4770      	bx	lr
        return E_NULL_PTR;
10013980:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
10013984:	4770      	bx	lr
10013986:	bf00      	nop
10013988:	00249f00 	.word	0x00249f00
1001398c:	0033e140 	.word	0x0033e140
10013990:	20001768 	.word	0x20001768
10013994:	aaaaaaab 	.word	0xaaaaaaab
10013998:	00061a80 	.word	0x00061a80

1001399c <MXC_I2C_RevA_GetFrequency>:
    unsigned int sclCycles = 0;

    // Calculate the speed based on what we've written into registers
    sclCycles = (i2c->clklo & MXC_F_I2C_REVA_CLKLO_LO) + (i2c->clkhi & MXC_F_I2C_REVA_CLKHI_HI);

    return PeripheralClock / sclCycles;
1001399c:	4906      	ldr	r1, [pc, #24]	@ (100139b8 <MXC_I2C_RevA_GetFrequency+0x1c>)
    sclCycles = (i2c->clklo & MXC_F_I2C_REVA_CLKLO_LO) + (i2c->clkhi & MXC_F_I2C_REVA_CLKHI_HI);
1001399e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
100139a0:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    return PeripheralClock / sclCycles;
100139a2:	6808      	ldr	r0, [r1, #0]
    sclCycles = (i2c->clklo & MXC_F_I2C_REVA_CLKLO_LO) + (i2c->clkhi & MXC_F_I2C_REVA_CLKHI_HI);
100139a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
100139a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
100139ac:	4413      	add	r3, r2
    return PeripheralClock / sclCycles;
100139ae:	0840      	lsrs	r0, r0, #1
}
100139b0:	fbb0 f0f3 	udiv	r0, r0, r3
100139b4:	4770      	bx	lr
100139b6:	bf00      	nop
100139b8:	20001768 	.word	0x20001768

100139bc <MXC_I2C_RevA_Start>:
/* ************************************************************************* */
/* Low-level functions                                                       */
/* ************************************************************************* */
int MXC_I2C_RevA_Start(mxc_i2c_reva_regs_t *i2c)
{
    if (i2c == NULL) {
100139bc:	b170      	cbz	r0, 100139dc <MXC_I2C_RevA_Start+0x20>
        return E_NULL_PTR;
    }

    // If we have an incomplete transfer, we need to do a restart
    if (i2c->mstctrl & MXC_F_I2C_REVA_MSTCTRL_START) {
100139be:	6b03      	ldr	r3, [r0, #48]	@ 0x30
100139c0:	f013 0f01 	tst.w	r3, #1
        i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_RESTART;
100139c4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    if (i2c->mstctrl & MXC_F_I2C_REVA_MSTCTRL_START) {
100139c6:	d104      	bne.n	100139d2 <MXC_I2C_RevA_Start+0x16>
    } else {
        i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_START; // No check for start generation
100139c8:	f043 0301 	orr.w	r3, r3, #1
100139cc:	6303      	str	r3, [r0, #48]	@ 0x30
    }

    return E_NO_ERROR;
100139ce:	2000      	movs	r0, #0
100139d0:	4770      	bx	lr
        i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_RESTART;
100139d2:	f043 0302 	orr.w	r3, r3, #2
100139d6:	6303      	str	r3, [r0, #48]	@ 0x30
    return E_NO_ERROR;
100139d8:	2000      	movs	r0, #0
100139da:	4770      	bx	lr
        return E_NULL_PTR;
100139dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
100139e0:	4770      	bx	lr
100139e2:	bf00      	nop

100139e4 <MXC_I2C_RevA_Stop>:

int MXC_I2C_RevA_Stop(mxc_i2c_reva_regs_t *i2c)
{
    if (i2c == NULL) {
100139e4:	b148      	cbz	r0, 100139fa <MXC_I2C_RevA_Stop+0x16>
        return E_NULL_PTR;
    }

    i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_STOP;
100139e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
100139e8:	f043 0304 	orr.w	r3, r3, #4
100139ec:	6303      	str	r3, [r0, #48]	@ 0x30

    while (i2c->mstctrl & MXC_F_I2C_REVA_MSTCTRL_STOP) {}
100139ee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
100139f0:	f013 0304 	ands.w	r3, r3, #4
100139f4:	d1fb      	bne.n	100139ee <MXC_I2C_RevA_Stop+0xa>

    return E_NO_ERROR;
100139f6:	4618      	mov	r0, r3
100139f8:	4770      	bx	lr
        return E_NULL_PTR;
100139fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
100139fe:	4770      	bx	lr

10013a00 <MXC_I2C_RevA_ReadRXFIFO>:
int MXC_I2C_RevA_ReadRXFIFO(mxc_i2c_reva_regs_t *i2c, volatile unsigned char *bytes,
                            unsigned int len)
{
    unsigned read = 0;

    if ((i2c == NULL) || (bytes == NULL)) {
10013a00:	b1c8      	cbz	r0, 10013a36 <MXC_I2C_RevA_ReadRXFIFO+0x36>
10013a02:	b1c1      	cbz	r1, 10013a36 <MXC_I2C_RevA_ReadRXFIFO+0x36>
        return E_NULL_PTR;
    }

    while ((len > read) && (!(i2c->status & MXC_F_I2C_REVA_STATUS_RX_EM))) {
10013a04:	b1aa      	cbz	r2, 10013a32 <MXC_I2C_RevA_ReadRXFIFO+0x32>
{
10013a06:	b500      	push	{lr}
    unsigned read = 0;
10013a08:	2300      	movs	r3, #0
        bytes[read++] = i2c->fifo;
10013a0a:	f101 3eff 	add.w	lr, r1, #4294967295	@ 0xffffffff
10013a0e:	e007      	b.n	10013a20 <MXC_I2C_RevA_ReadRXFIFO+0x20>
10013a10:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
10013a12:	3301      	adds	r3, #1
10013a14:	fa5f fc81 	uxtb.w	ip, r1
    while ((len > read) && (!(i2c->status & MXC_F_I2C_REVA_STATUS_RX_EM))) {
10013a18:	429a      	cmp	r2, r3
        bytes[read++] = i2c->fifo;
10013a1a:	f80e c003 	strb.w	ip, [lr, r3]
    while ((len > read) && (!(i2c->status & MXC_F_I2C_REVA_STATUS_RX_EM))) {
10013a1e:	d005      	beq.n	10013a2c <MXC_I2C_RevA_ReadRXFIFO+0x2c>
10013a20:	6841      	ldr	r1, [r0, #4]
10013a22:	0789      	lsls	r1, r1, #30
10013a24:	d5f4      	bpl.n	10013a10 <MXC_I2C_RevA_ReadRXFIFO+0x10>
    }

    return read;
10013a26:	4618      	mov	r0, r3
}
10013a28:	f85d fb04 	ldr.w	pc, [sp], #4
    return read;
10013a2c:	4610      	mov	r0, r2
}
10013a2e:	f85d fb04 	ldr.w	pc, [sp], #4
    while ((len > read) && (!(i2c->status & MXC_F_I2C_REVA_STATUS_RX_EM))) {
10013a32:	4610      	mov	r0, r2
10013a34:	4770      	bx	lr
        return E_NULL_PTR;
10013a36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
10013a3a:	4770      	bx	lr

10013a3c <MXC_I2C_RevA_WriteTXFIFO>:
int MXC_I2C_RevA_WriteTXFIFO(mxc_i2c_reva_regs_t *i2c, volatile unsigned char *bytes,
                             unsigned int len)
{
    unsigned written = 0;

    if ((i2c == NULL) || (bytes == NULL)) {
10013a3c:	b198      	cbz	r0, 10013a66 <MXC_I2C_RevA_WriteTXFIFO+0x2a>
10013a3e:	b191      	cbz	r1, 10013a66 <MXC_I2C_RevA_WriteTXFIFO+0x2a>
        return E_NULL_PTR;
    }

    while ((len > written) && (!(i2c->status & MXC_F_I2C_REVA_STATUS_TX_FULL))) {
10013a40:	b17a      	cbz	r2, 10013a62 <MXC_I2C_RevA_WriteTXFIFO+0x26>
    unsigned written = 0;
10013a42:	2300      	movs	r3, #0
        i2c->fifo = bytes[written++];
10013a44:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
10013a48:	e006      	b.n	10013a58 <MXC_I2C_RevA_WriteTXFIFO+0x1c>
10013a4a:	3301      	adds	r3, #1
    while ((len > written) && (!(i2c->status & MXC_F_I2C_REVA_STATUS_TX_FULL))) {
10013a4c:	429a      	cmp	r2, r3
        i2c->fifo = bytes[written++];
10013a4e:	f81c 1003 	ldrb.w	r1, [ip, r3]
10013a52:	b2c9      	uxtb	r1, r1
10013a54:	62c1      	str	r1, [r0, #44]	@ 0x2c
    while ((len > written) && (!(i2c->status & MXC_F_I2C_REVA_STATUS_TX_FULL))) {
10013a56:	d004      	beq.n	10013a62 <MXC_I2C_RevA_WriteTXFIFO+0x26>
10013a58:	6841      	ldr	r1, [r0, #4]
10013a5a:	06c9      	lsls	r1, r1, #27
10013a5c:	d5f5      	bpl.n	10013a4a <MXC_I2C_RevA_WriteTXFIFO+0xe>
    }

    return written;
10013a5e:	4618      	mov	r0, r3
10013a60:	4770      	bx	lr
10013a62:	4610      	mov	r0, r2
10013a64:	4770      	bx	lr
        return E_NULL_PTR;
10013a66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
10013a6a:	4770      	bx	lr

10013a6c <MXC_I2C_RevA_ClearRXFIFO>:
           ((i2c->txctrl1 & MXC_F_I2C_REVA_TXCTRL1_LVL) >> MXC_F_I2C_REVA_TXCTRL1_LVL_POS);
}

void MXC_I2C_RevA_ClearRXFIFO(mxc_i2c_reva_regs_t *i2c)
{
    i2c->rxctrl0 |= MXC_F_I2C_REVA_RXCTRL0_FLUSH;
10013a6c:	69c3      	ldr	r3, [r0, #28]
10013a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10013a72:	61c3      	str	r3, [r0, #28]

    while (i2c->rxctrl0 & MXC_F_I2C_REVA_RXCTRL0_FLUSH) {}
10013a74:	69c3      	ldr	r3, [r0, #28]
10013a76:	061b      	lsls	r3, r3, #24
10013a78:	d4fc      	bmi.n	10013a74 <MXC_I2C_RevA_ClearRXFIFO+0x8>
}
10013a7a:	4770      	bx	lr

10013a7c <MXC_I2C_RevA_ClearTXFIFO>:

void MXC_I2C_RevA_ClearTXFIFO(mxc_i2c_reva_regs_t *i2c)
{
    i2c->txctrl0 |= MXC_F_I2C_REVA_TXCTRL0_FLUSH;
10013a7c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
10013a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10013a82:	6243      	str	r3, [r0, #36]	@ 0x24

    while (i2c->txctrl0 & MXC_F_I2C_REVA_TXCTRL0_FLUSH) {}
10013a84:	6a43      	ldr	r3, [r0, #36]	@ 0x24
10013a86:	061b      	lsls	r3, r3, #24
10013a88:	d4fc      	bmi.n	10013a84 <MXC_I2C_RevA_ClearTXFIFO+0x8>
}
10013a8a:	4770      	bx	lr

10013a8c <MXC_I2C_RevA_ClearFlags>:
    return E_NO_ERROR;
}

void MXC_I2C_RevA_ClearFlags(mxc_i2c_reva_regs_t *i2c, unsigned int flags0, unsigned int flags1)
{
    i2c->intfl0 = flags0;
10013a8c:	6081      	str	r1, [r0, #8]
    i2c->intfl1 = flags1;
10013a8e:	6102      	str	r2, [r0, #16]
}
10013a90:	4770      	bx	lr
10013a92:	bf00      	nop

10013a94 <MXC_I2C_RevA_Recover>:
int MXC_I2C_RevA_Recover(mxc_i2c_reva_regs_t *i2c, unsigned int retries)
{
    int err;
    unsigned int i;

    if (i2c == NULL) {
10013a94:	2800      	cmp	r0, #0
10013a96:	d065      	beq.n	10013b64 <MXC_I2C_RevA_Recover+0xd0>
        return E_NULL_PTR;
    }

    err = E_COMM_ERR;

    i2c->ctrl |= MXC_F_I2C_REVA_CTRL_EN;
10013a98:	6803      	ldr	r3, [r0, #0]
10013a9a:	f043 0301 	orr.w	r3, r3, #1
{
10013a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    i2c->ctrl |= MXC_F_I2C_REVA_CTRL_EN;
10013aa2:	6003      	str	r3, [r0, #0]
    int swBit = i2c->ctrl & MXC_F_I2C_REVA_CTRL_BB_MODE;
10013aa4:	6807      	ldr	r7, [r0, #0]

    if (i2c == NULL) {
        return E_NULL_PTR;
    }

    i2c->ctrl |= MXC_F_I2C_REVA_CTRL_BB_MODE;
10013aa6:	6803      	ldr	r3, [r0, #0]
10013aa8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10013aac:	460e      	mov	r6, r1
10013aae:	4604      	mov	r4, r0
10013ab0:	f407 6780 	and.w	r7, r7, #1024	@ 0x400
10013ab4:	6003      	str	r3, [r0, #0]

    // Follow the procedure detailed in the header file
    // Delay 10uS between each step to give the line/slaves time to react
    for (i = 0; i < retries; i++) {
10013ab6:	2900      	cmp	r1, #0
10013ab8:	d043      	beq.n	10013b42 <MXC_I2C_RevA_Recover+0xae>
10013aba:	2500      	movs	r5, #0
10013abc:	e02b      	b.n	10013b16 <MXC_I2C_RevA_Recover+0x82>
        if (i2c->ctrl & MXC_F_I2C_REVA_CTRL_SCL) {
            i2c->ctrl |= MXC_F_I2C_REVA_CTRL_SCL_OUT | MXC_F_I2C_REVA_CTRL_SDA_OUT;
            continue; // Give up and try again
        }

        MXC_Delay(10);
10013abe:	f7ff faad 	bl	1001301c <MXC_Delay>
        i2c->ctrl &= ~MXC_F_I2C_REVA_CTRL_SDA_OUT;
10013ac2:	6823      	ldr	r3, [r4, #0]
10013ac4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
10013ac8:	6023      	str	r3, [r4, #0]

        MXC_Delay(10);
10013aca:	200a      	movs	r0, #10
10013acc:	f7ff faa6 	bl	1001301c <MXC_Delay>

        if (i2c->ctrl & MXC_F_I2C_REVA_CTRL_SDA) {
10013ad0:	6823      	ldr	r3, [r4, #0]
10013ad2:	f413 7800 	ands.w	r8, r3, #512	@ 0x200
            i2c->ctrl |= MXC_F_I2C_REVA_CTRL_SCL_OUT | MXC_F_I2C_REVA_CTRL_SDA_OUT;
            continue; // Give up and try again
        }

        MXC_Delay(10);
10013ad6:	f04f 000a 	mov.w	r0, #10
        if (i2c->ctrl & MXC_F_I2C_REVA_CTRL_SDA) {
10013ada:	d12b      	bne.n	10013b34 <MXC_I2C_RevA_Recover+0xa0>
        MXC_Delay(10);
10013adc:	f7ff fa9e 	bl	1001301c <MXC_Delay>
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_SDA_OUT;
10013ae0:	6823      	ldr	r3, [r4, #0]
10013ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10013ae6:	6023      	str	r3, [r4, #0]

        MXC_Delay(10);
10013ae8:	200a      	movs	r0, #10
10013aea:	f7ff fa97 	bl	1001301c <MXC_Delay>

        if (!(i2c->ctrl & MXC_F_I2C_REVA_CTRL_SDA)) {
10013aee:	6823      	ldr	r3, [r4, #0]
10013af0:	059a      	lsls	r2, r3, #22
            i2c->ctrl |= MXC_F_I2C_REVA_CTRL_SCL_OUT | MXC_F_I2C_REVA_CTRL_SDA_OUT;
            continue; // Give up and try again
        }

        MXC_Delay(10);
10013af2:	f04f 000a 	mov.w	r0, #10
        if (!(i2c->ctrl & MXC_F_I2C_REVA_CTRL_SDA)) {
10013af6:	d51d      	bpl.n	10013b34 <MXC_I2C_RevA_Recover+0xa0>
        MXC_Delay(10);
10013af8:	f7ff fa90 	bl	1001301c <MXC_Delay>
        i2c->ctrl |= MXC_F_I2C_REVA_CTRL_SCL_OUT;
10013afc:	6823      	ldr	r3, [r4, #0]
10013afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10013b02:	6023      	str	r3, [r4, #0]

        MXC_Delay(10);
10013b04:	200a      	movs	r0, #10
10013b06:	f7ff fa89 	bl	1001301c <MXC_Delay>

        if (i2c->ctrl & MXC_F_I2C_REVA_CTRL_SCL) {
10013b0a:	6823      	ldr	r3, [r4, #0]
10013b0c:	05db      	lsls	r3, r3, #23
10013b0e:	d425      	bmi.n	10013b5c <MXC_I2C_RevA_Recover+0xc8>
    for (i = 0; i < retries; i++) {
10013b10:	3501      	adds	r5, #1
10013b12:	42ae      	cmp	r6, r5
10013b14:	d015      	beq.n	10013b42 <MXC_I2C_RevA_Recover+0xae>
        MXC_Delay(10);
10013b16:	200a      	movs	r0, #10
10013b18:	f7ff fa80 	bl	1001301c <MXC_Delay>
        i2c->ctrl &= ~MXC_F_I2C_REVA_CTRL_SCL_OUT;
10013b1c:	6823      	ldr	r3, [r4, #0]
10013b1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
10013b22:	6023      	str	r3, [r4, #0]
        MXC_Delay(10);
10013b24:	200a      	movs	r0, #10
10013b26:	f7ff fa79 	bl	1001301c <MXC_Delay>
        if (i2c->ctrl & MXC_F_I2C_REVA_CTRL_SCL) {
10013b2a:	6823      	ldr	r3, [r4, #0]
10013b2c:	05d9      	lsls	r1, r3, #23
        MXC_Delay(10);
10013b2e:	f04f 000a 	mov.w	r0, #10
        if (i2c->ctrl & MXC_F_I2C_REVA_CTRL_SCL) {
10013b32:	d5c4      	bpl.n	10013abe <MXC_I2C_RevA_Recover+0x2a>
            i2c->ctrl |= MXC_F_I2C_REVA_CTRL_SCL_OUT | MXC_F_I2C_REVA_CTRL_SDA_OUT;
10013b34:	6823      	ldr	r3, [r4, #0]
    for (i = 0; i < retries; i++) {
10013b36:	3501      	adds	r5, #1
            i2c->ctrl |= MXC_F_I2C_REVA_CTRL_SCL_OUT | MXC_F_I2C_REVA_CTRL_SDA_OUT;
10013b38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
    for (i = 0; i < retries; i++) {
10013b3c:	42ae      	cmp	r6, r5
            i2c->ctrl |= MXC_F_I2C_REVA_CTRL_SCL_OUT | MXC_F_I2C_REVA_CTRL_SDA_OUT;
10013b3e:	6023      	str	r3, [r4, #0]
    for (i = 0; i < retries; i++) {
10013b40:	d1e9      	bne.n	10013b16 <MXC_I2C_RevA_Recover+0x82>
    err = E_COMM_ERR;
10013b42:	f06f 0008 	mvn.w	r0, #8
            err = E_NO_ERROR; // We have control
            break;
        }
    }

    if (swBit == 0) {
10013b46:	b91f      	cbnz	r7, 10013b50 <MXC_I2C_RevA_Recover+0xbc>
        i2c->ctrl &= ~MXC_F_I2C_REVA_CTRL_BB_MODE;
10013b48:	6823      	ldr	r3, [r4, #0]
10013b4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
10013b4e:	6023      	str	r3, [r4, #0]
    }

    i2c->ctrl &= ~MXC_F_I2C_REVA_CTRL_EN;
10013b50:	6823      	ldr	r3, [r4, #0]
10013b52:	f023 0301 	bic.w	r3, r3, #1
10013b56:	6023      	str	r3, [r4, #0]

    return err;
}
10013b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            err = E_NO_ERROR; // We have control
10013b5c:	4640      	mov	r0, r8
    if (swBit == 0) {
10013b5e:	2f00      	cmp	r7, #0
10013b60:	d1f6      	bne.n	10013b50 <MXC_I2C_RevA_Recover+0xbc>
10013b62:	e7f1      	b.n	10013b48 <MXC_I2C_RevA_Recover+0xb4>
        return E_NULL_PTR;
10013b64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
10013b68:	4770      	bx	lr
10013b6a:	bf00      	nop

10013b6c <MXC_I2C_RevA_MasterTransaction>:
/* ************************************************************************* */
/* Transaction level functions                                               */
/* ************************************************************************* */

int MXC_I2C_RevA_MasterTransaction(mxc_i2c_reva_req_t *req)
{
10013b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mxc_i2c_reva_regs_t *i2c = req->i2c; // Save off pointer for faster access
10013b70:	e9d0 4300 	ldrd	r4, r3, [r0]
    unsigned int written = 0;
    unsigned int read = 0;

    if (req->addr > MXC_I2C_REVA_MAX_ADDR_WIDTH) {
10013b74:	2b7f      	cmp	r3, #127	@ 0x7f
10013b76:	f200 80c3 	bhi.w	10013d00 <MXC_I2C_RevA_MasterTransaction+0x194>
        return E_NOT_SUPPORTED;
    }

    if (MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c) < 0) {
10013b7a:	4b63      	ldr	r3, [pc, #396]	@ (10013d08 <MXC_I2C_RevA_MasterTransaction+0x19c>)
10013b7c:	429c      	cmp	r4, r3
10013b7e:	4605      	mov	r5, r0
10013b80:	d008      	beq.n	10013b94 <MXC_I2C_RevA_MasterTransaction+0x28>
10013b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10013b86:	429c      	cmp	r4, r3
10013b88:	d004      	beq.n	10013b94 <MXC_I2C_RevA_MasterTransaction+0x28>
10013b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10013b8e:	429c      	cmp	r4, r3
10013b90:	f040 80b0 	bne.w	10013cf4 <MXC_I2C_RevA_MasterTransaction+0x188>
        return E_BAD_PARAM;
    }

    if (!(i2c->ctrl & MXC_F_I2C_REVA_CTRL_MST_MODE)) {
10013b94:	6823      	ldr	r3, [r4, #0]
10013b96:	079e      	lsls	r6, r3, #30
10013b98:	f140 80af 	bpl.w	10013cfa <MXC_I2C_RevA_MasterTransaction+0x18e>
    //  send addr w/ read bit
    //  read rx_len bytes acking all
    // stop or restart
    // return good or error

    MXC_I2C_ClearFlags((mxc_i2c_regs_t *)i2c, MXC_I2C_REVA_INTFL0_MASK,
10013b9c:	2207      	movs	r2, #7
10013b9e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
10013ba2:	4620      	mov	r0, r4
10013ba4:	f7ff fe1a 	bl	100137dc <MXC_I2C_ClearFlags>
                       MXC_I2C_REVA_INTFL1_MASK); // Clear all I2C Interrupts
    MXC_I2C_ClearTXFIFO((mxc_i2c_regs_t *)i2c);
10013ba8:	4620      	mov	r0, r4
10013baa:	f7ff fe15 	bl	100137d8 <MXC_I2C_ClearTXFIFO>
    MXC_I2C_ClearRXFIFO((mxc_i2c_regs_t *)i2c);
10013bae:	4620      	mov	r0, r4
10013bb0:	f7ff fe10 	bl	100137d4 <MXC_I2C_ClearRXFIFO>
    i2c->inten0 = 0;
    i2c->inten1 = 0;

    if ((req->rx_len == 0) || (req->tx_len != 0)) {
10013bb4:	696a      	ldr	r2, [r5, #20]
    i2c->inten0 = 0;
10013bb6:	2300      	movs	r3, #0
10013bb8:	60e3      	str	r3, [r4, #12]
    i2c->inten1 = 0;
10013bba:	6163      	str	r3, [r4, #20]
    if ((req->rx_len == 0) || (req->tx_len != 0)) {
10013bbc:	bb42      	cbnz	r2, 10013c10 <MXC_I2C_RevA_MasterTransaction+0xa4>
10013bbe:	68ea      	ldr	r2, [r5, #12]
        // Load the slave address with write bit set
        i2c->fifo = (req->addr << 1) & ~0x1;
10013bc0:	686b      	ldr	r3, [r5, #4]
10013bc2:	005b      	lsls	r3, r3, #1
10013bc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
        i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_START;
10013bc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
10013bc8:	f043 0301 	orr.w	r3, r3, #1
10013bcc:	2600      	movs	r6, #0
10013bce:	6323      	str	r3, [r4, #48]	@ 0x30

    while (req->tx_len > written) {
        if (i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_TX_THD) {
            written += MXC_I2C_WriteTXFIFO((mxc_i2c_regs_t *)i2c, &req->tx_buf[written],
                                           req->tx_len - written);
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_THD;
10013bd0:	2720      	movs	r7, #32
10013bd2:	e004      	b.n	10013bde <MXC_I2C_RevA_MasterTransaction+0x72>
        }

        if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10013bd4:	68a3      	ldr	r3, [r4, #8]
10013bd6:	f413 4ffe 	tst.w	r3, #32512	@ 0x7f00
10013bda:	d111      	bne.n	10013c00 <MXC_I2C_RevA_MasterTransaction+0x94>
    while (req->tx_len > written) {
10013bdc:	68ea      	ldr	r2, [r5, #12]
10013bde:	4296      	cmp	r6, r2
10013be0:	d219      	bcs.n	10013c16 <MXC_I2C_RevA_MasterTransaction+0xaa>
        if (i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_TX_THD) {
10013be2:	68a3      	ldr	r3, [r4, #8]
10013be4:	0698      	lsls	r0, r3, #26
10013be6:	d5f5      	bpl.n	10013bd4 <MXC_I2C_RevA_MasterTransaction+0x68>
            written += MXC_I2C_WriteTXFIFO((mxc_i2c_regs_t *)i2c, &req->tx_buf[written],
10013be8:	68a9      	ldr	r1, [r5, #8]
10013bea:	1b92      	subs	r2, r2, r6
10013bec:	4431      	add	r1, r6
10013bee:	4620      	mov	r0, r4
10013bf0:	f7ff fdee 	bl	100137d0 <MXC_I2C_WriteTXFIFO>
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_THD;
10013bf4:	60a7      	str	r7, [r4, #8]
        if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10013bf6:	68a3      	ldr	r3, [r4, #8]
10013bf8:	f413 4ffe 	tst.w	r3, #32512	@ 0x7f00
            written += MXC_I2C_WriteTXFIFO((mxc_i2c_regs_t *)i2c, &req->tx_buf[written],
10013bfc:	4406      	add	r6, r0
        if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10013bfe:	d0ed      	beq.n	10013bdc <MXC_I2C_RevA_MasterTransaction+0x70>
            req->tx_len = written;
10013c00:	60ee      	str	r6, [r5, #12]
            MXC_I2C_Stop((mxc_i2c_regs_t *)i2c);
10013c02:	4620      	mov	r0, r4
10013c04:	f7ff fde0 	bl	100137c8 <MXC_I2C_Stop>
            return E_COMM_ERR;
10013c08:	f06f 0008 	mvn.w	r0, #8
    if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
        return E_COMM_ERR;
    }

    return E_NO_ERROR;
}
10013c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((req->rx_len == 0) || (req->tx_len != 0)) {
10013c10:	68ea      	ldr	r2, [r5, #12]
10013c12:	2a00      	cmp	r2, #0
10013c14:	d1d4      	bne.n	10013bc0 <MXC_I2C_RevA_MasterTransaction+0x54>
    MXC_I2C_ClearFlags((mxc_i2c_regs_t *)i2c,
10013c16:	2200      	movs	r2, #0
10013c18:	2111      	movs	r1, #17
10013c1a:	4620      	mov	r0, r4
10013c1c:	f7ff fdde 	bl	100137dc <MXC_I2C_ClearFlags>
    if (req->rx_len != 0) {
10013c20:	696b      	ldr	r3, [r5, #20]
10013c22:	2b00      	cmp	r3, #0
10013c24:	d04a      	beq.n	10013cbc <MXC_I2C_RevA_MasterTransaction+0x150>
        if (req->rx_len > MXC_I2C_REVA_MAX_FIFO_TRANSACTION) {
10013c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
            i2c->rxctrl1 = 0;
10013c2a:	bf88      	it	hi
10013c2c:	2300      	movhi	r3, #0
            i2c->rxctrl1 = req->rx_len; // 0 for 256, otherwise number of bytes to read
10013c2e:	6223      	str	r3, [r4, #32]
        MXC_I2C_Start((mxc_i2c_regs_t *)i2c); // Start or Restart as needed
10013c30:	4620      	mov	r0, r4
10013c32:	f7ff fdc7 	bl	100137c4 <MXC_I2C_Start>
        while (i2c->mstctrl & MXC_F_I2C_REVA_MSTCTRL_RESTART) {}
10013c36:	6b26      	ldr	r6, [r4, #48]	@ 0x30
10013c38:	f016 0602 	ands.w	r6, r6, #2
10013c3c:	d1fb      	bne.n	10013c36 <MXC_I2C_RevA_MasterTransaction+0xca>
        i2c->fifo = (req->addr << 1) | 0x1; // Load slave address with read bit.
10013c3e:	686b      	ldr	r3, [r5, #4]
    while (req->rx_len > read) {
10013c40:	696a      	ldr	r2, [r5, #20]
        i2c->fifo = (req->addr << 1) | 0x1; // Load slave address with read bit.
10013c42:	005b      	lsls	r3, r3, #1
10013c44:	f043 0301 	orr.w	r3, r3, #1
10013c48:	62e3      	str	r3, [r4, #44]	@ 0x2c
    while (req->rx_len > read) {
10013c4a:	2a00      	cmp	r2, #0
10013c4c:	d036      	beq.n	10013cbc <MXC_I2C_RevA_MasterTransaction+0x150>
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RX_THD;
10013c4e:	2710      	movs	r7, #16
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_DONE;
10013c50:	f04f 0801 	mov.w	r8, #1
10013c54:	e01d      	b.n	10013c92 <MXC_I2C_RevA_MasterTransaction+0x126>
        if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10013c56:	68a3      	ldr	r3, [r4, #8]
10013c58:	f413 43fe 	ands.w	r3, r3, #32512	@ 0x7f00
10013c5c:	d129      	bne.n	10013cb2 <MXC_I2C_RevA_MasterTransaction+0x146>
        if ((i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_DONE) && (req->rx_len < read)) {
10013c5e:	68a1      	ldr	r1, [r4, #8]
10013c60:	696a      	ldr	r2, [r5, #20]
10013c62:	07c9      	lsls	r1, r1, #31
10013c64:	d513      	bpl.n	10013c8e <MXC_I2C_RevA_MasterTransaction+0x122>
10013c66:	4296      	cmp	r6, r2
            if ((req->rx_len - read) > MXC_I2C_REVA_MAX_FIFO_TRANSACTION) {
10013c68:	eba2 0106 	sub.w	r1, r2, r6
        if ((i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_DONE) && (req->rx_len < read)) {
10013c6c:	d90f      	bls.n	10013c8e <MXC_I2C_RevA_MasterTransaction+0x122>
            if ((req->rx_len - read) > MXC_I2C_REVA_MAX_FIFO_TRANSACTION) {
10013c6e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
                i2c->rxctrl1 = 0;
10013c72:	bf8c      	ite	hi
10013c74:	6223      	strhi	r3, [r4, #32]
                i2c->rxctrl1 = (req->rx_len - read); // 0 for 256, otherwise number of bytes to read
10013c76:	6221      	strls	r1, [r4, #32]
            i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_RESTART;
10013c78:	6b23      	ldr	r3, [r4, #48]	@ 0x30
10013c7a:	f043 0302 	orr.w	r3, r3, #2
10013c7e:	6323      	str	r3, [r4, #48]	@ 0x30
            i2c->fifo = (req->addr << 1) | 0x1; // Load slave address with read bit.
10013c80:	686b      	ldr	r3, [r5, #4]
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_DONE;
10013c82:	f8c4 8008 	str.w	r8, [r4, #8]
            i2c->fifo = (req->addr << 1) | 0x1; // Load slave address with read bit.
10013c86:	005b      	lsls	r3, r3, #1
10013c88:	f043 0301 	orr.w	r3, r3, #1
10013c8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    while (req->rx_len > read) {
10013c8e:	4296      	cmp	r6, r2
10013c90:	d214      	bcs.n	10013cbc <MXC_I2C_RevA_MasterTransaction+0x150>
        if (i2c->intfl0 & (MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL0_DONE)) {
10013c92:	68a3      	ldr	r3, [r4, #8]
10013c94:	f013 0f11 	tst.w	r3, #17
10013c98:	d0dd      	beq.n	10013c56 <MXC_I2C_RevA_MasterTransaction+0xea>
                MXC_I2C_ReadRXFIFO((mxc_i2c_regs_t *)i2c, &req->rx_buf[read], req->rx_len - read);
10013c9a:	6929      	ldr	r1, [r5, #16]
10013c9c:	1b92      	subs	r2, r2, r6
10013c9e:	4431      	add	r1, r6
10013ca0:	4620      	mov	r0, r4
10013ca2:	f7ff fd93 	bl	100137cc <MXC_I2C_ReadRXFIFO>
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RX_THD;
10013ca6:	60a7      	str	r7, [r4, #8]
        if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10013ca8:	68a3      	ldr	r3, [r4, #8]
10013caa:	f413 43fe 	ands.w	r3, r3, #32512	@ 0x7f00
            read +=
10013cae:	4406      	add	r6, r0
        if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10013cb0:	d0d5      	beq.n	10013c5e <MXC_I2C_RevA_MasterTransaction+0xf2>
            req->rx_len = read;
10013cb2:	616e      	str	r6, [r5, #20]
            MXC_I2C_Stop((mxc_i2c_regs_t *)i2c);
10013cb4:	4620      	mov	r0, r4
10013cb6:	f7ff fd87 	bl	100137c8 <MXC_I2C_Stop>
            return E_COMM_ERR;
10013cba:	e7a5      	b.n	10013c08 <MXC_I2C_RevA_MasterTransaction+0x9c>
    if (req->restart) {
10013cbc:	69ab      	ldr	r3, [r5, #24]
10013cbe:	b173      	cbz	r3, 10013cde <MXC_I2C_RevA_MasterTransaction+0x172>
        i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_RESTART;
10013cc0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
10013cc2:	f043 0302 	orr.w	r3, r3, #2
10013cc6:	6323      	str	r3, [r4, #48]	@ 0x30
    while (!(i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_DONE)) {}
10013cc8:	68a3      	ldr	r3, [r4, #8]
10013cca:	07db      	lsls	r3, r3, #31
10013ccc:	d5fc      	bpl.n	10013cc8 <MXC_I2C_RevA_MasterTransaction+0x15c>
    i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_DONE | MXC_F_I2C_REVA_INTFL0_STOP;
10013cce:	2341      	movs	r3, #65	@ 0x41
10013cd0:	60a3      	str	r3, [r4, #8]
    if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10013cd2:	68a0      	ldr	r0, [r4, #8]
10013cd4:	f410 40fe 	ands.w	r0, r0, #32512	@ 0x7f00
10013cd8:	d196      	bne.n	10013c08 <MXC_I2C_RevA_MasterTransaction+0x9c>
}
10013cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_STOP;
10013cde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
10013ce0:	f043 0304 	orr.w	r3, r3, #4
10013ce4:	6323      	str	r3, [r4, #48]	@ 0x30
        while (!(i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_STOP)) {}
10013ce6:	68a3      	ldr	r3, [r4, #8]
10013ce8:	065a      	lsls	r2, r3, #25
10013cea:	d5fc      	bpl.n	10013ce6 <MXC_I2C_RevA_MasterTransaction+0x17a>
    while (!(i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_DONE)) {}
10013cec:	68a3      	ldr	r3, [r4, #8]
10013cee:	07db      	lsls	r3, r3, #31
10013cf0:	d5ea      	bpl.n	10013cc8 <MXC_I2C_RevA_MasterTransaction+0x15c>
10013cf2:	e7ec      	b.n	10013cce <MXC_I2C_RevA_MasterTransaction+0x162>
        return E_BAD_PARAM;
10013cf4:	f06f 0002 	mvn.w	r0, #2
10013cf8:	e7ef      	b.n	10013cda <MXC_I2C_RevA_MasterTransaction+0x16e>
        return E_BAD_STATE;
10013cfa:	f06f 0006 	mvn.w	r0, #6
10013cfe:	e7ec      	b.n	10013cda <MXC_I2C_RevA_MasterTransaction+0x16e>
        return E_NOT_SUPPORTED;
10013d00:	f06f 0010 	mvn.w	r0, #16
10013d04:	e7e9      	b.n	10013cda <MXC_I2C_RevA_MasterTransaction+0x16e>
10013d06:	bf00      	nop
10013d08:	4001d000 	.word	0x4001d000

10013d0c <MXC_I2C_RevA_SetRXThreshold>:
    return E_NO_ERROR;
}

int MXC_I2C_RevA_SetRXThreshold(mxc_i2c_reva_regs_t *i2c, unsigned int numBytes)
{
    unsigned int rxFIFOlen = (i2c->fifolen & MXC_F_I2C_REVA_FIFOLEN_RX_DEPTH) >>
10013d0c:	6982      	ldr	r2, [r0, #24]
10013d0e:	b2d2      	uxtb	r2, r2
                             MXC_F_I2C_REVA_FIFOLEN_RX_DEPTH_POS;

    if (numBytes > rxFIFOlen) {
10013d10:	428a      	cmp	r2, r1
{
10013d12:	4603      	mov	r3, r0
    if (numBytes > rxFIFOlen) {
10013d14:	d307      	bcc.n	10013d26 <MXC_I2C_RevA_SetRXThreshold+0x1a>
        return E_BAD_PARAM;
    }

    i2c->rxctrl0 = (i2c->rxctrl0 & ~MXC_F_I2C_REVA_RXCTRL0_THD_LVL) |
10013d16:	69c2      	ldr	r2, [r0, #28]
10013d18:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
10013d1c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
                   (numBytes << MXC_F_I2C_REVA_RXCTRL0_THD_LVL_POS);
    return E_NO_ERROR;
10013d20:	2000      	movs	r0, #0
    i2c->rxctrl0 = (i2c->rxctrl0 & ~MXC_F_I2C_REVA_RXCTRL0_THD_LVL) |
10013d22:	61d9      	str	r1, [r3, #28]
    return E_NO_ERROR;
10013d24:	4770      	bx	lr
        return E_BAD_PARAM;
10013d26:	f06f 0002 	mvn.w	r0, #2
}
10013d2a:	4770      	bx	lr

10013d2c <MXC_I2C_RevA_SetTXThreshold>:
    return (i2c->rxctrl0 & MXC_F_I2C_REVA_RXCTRL0_THD_LVL) >> MXC_F_I2C_REVA_RXCTRL0_THD_LVL_POS;
}

int MXC_I2C_RevA_SetTXThreshold(mxc_i2c_reva_regs_t *i2c, unsigned int numBytes)
{
    unsigned int txFIFOlen = (i2c->fifolen & MXC_F_I2C_REVA_FIFOLEN_TX_DEPTH) >>
10013d2c:	6982      	ldr	r2, [r0, #24]
10013d2e:	f3c2 2207 	ubfx	r2, r2, #8, #8
                             MXC_F_I2C_REVA_FIFOLEN_TX_DEPTH_POS;

    if (numBytes > txFIFOlen) {
10013d32:	428a      	cmp	r2, r1
{
10013d34:	4603      	mov	r3, r0
    if (numBytes > txFIFOlen) {
10013d36:	d307      	bcc.n	10013d48 <MXC_I2C_RevA_SetTXThreshold+0x1c>
        return E_BAD_PARAM;
    }

    i2c->txctrl0 = (i2c->txctrl0 & ~MXC_F_I2C_REVA_TXCTRL0_THD_LVL) |
10013d38:	6a42      	ldr	r2, [r0, #36]	@ 0x24
10013d3a:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
10013d3e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
                   (numBytes << MXC_F_I2C_REVA_TXCTRL0_THD_LVL_POS);
    return E_NO_ERROR;
10013d42:	2000      	movs	r0, #0
    i2c->txctrl0 = (i2c->txctrl0 & ~MXC_F_I2C_REVA_TXCTRL0_THD_LVL) |
10013d44:	6259      	str	r1, [r3, #36]	@ 0x24
    return E_NO_ERROR;
10013d46:	4770      	bx	lr
        return E_BAD_PARAM;
10013d48:	f06f 0002 	mvn.w	r0, #2
}
10013d4c:	4770      	bx	lr
10013d4e:	bf00      	nop

10013d50 <MXC_I2C_RevA_MasterAsyncHandler>:
    MXC_I2C_RevA_AsyncCallback(i2c, E_ABORT);
    MXC_I2C_RevA_AsyncStop(i2c);
}

void MXC_I2C_RevA_MasterAsyncHandler(int i2cNum)
{
10013d50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned int written = AsyncWritten[i2cNum];
10013d54:	f8df a298 	ldr.w	sl, [pc, #664]	@ 10013ff0 <MXC_I2C_RevA_MasterAsyncHandler+0x2a0>
    unsigned int read = AsyncRead[i2cNum];
10013d58:	f8df 9298 	ldr.w	r9, [pc, #664]	@ 10013ff4 <MXC_I2C_RevA_MasterAsyncHandler+0x2a4>
    unsigned int written = AsyncWritten[i2cNum];
10013d5c:	f85a 6020 	ldr.w	r6, [sl, r0, lsl #2]
    unsigned int read = AsyncRead[i2cNum];
10013d60:	f859 8020 	ldr.w	r8, [r9, r0, lsl #2]
{
10013d64:	4605      	mov	r5, r0
    mxc_i2c_reva_regs_t *i2c = (mxc_i2c_reva_regs_t *)MXC_I2C_GET_BASE(i2cNum);
10013d66:	b320      	cbz	r0, 10013db2 <MXC_I2C_RevA_MasterAsyncHandler+0x62>
10013d68:	2801      	cmp	r0, #1
10013d6a:	f000 809c 	beq.w	10013ea6 <MXC_I2C_RevA_MasterAsyncHandler+0x156>
10013d6e:	4ca2      	ldr	r4, [pc, #648]	@ (10013ff8 <MXC_I2C_RevA_MasterAsyncHandler+0x2a8>)
    mxc_i2c_reva_req_t *req = (mxc_i2c_reva_req_t *)AsyncRequests[i2cNum];
10013d70:	f8df b288 	ldr.w	fp, [pc, #648]	@ 10013ffc <MXC_I2C_RevA_MasterAsyncHandler+0x2ac>
    mxc_i2c_reva_regs_t *i2c = (mxc_i2c_reva_regs_t *)MXC_I2C_GET_BASE(i2cNum);
10013d74:	2802      	cmp	r0, #2
10013d76:	bf0c      	ite	eq
10013d78:	4623      	moveq	r3, r4
10013d7a:	2300      	movne	r3, #0
    mxc_i2c_reva_req_t *req = (mxc_i2c_reva_req_t *)AsyncRequests[i2cNum];
10013d7c:	f85b 7020 	ldr.w	r7, [fp, r0, lsl #2]

    /* Check for errors */
    if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10013d80:	689b      	ldr	r3, [r3, #8]
10013d82:	f413 4ffe 	tst.w	r3, #32512	@ 0x7f00
10013d86:	f040 80b2 	bne.w	10013eee <MXC_I2C_RevA_MasterAsyncHandler+0x19e>

        return;
    }

    /* Write data to the TX FIFO */
    if (req->tx_len > written) {
10013d8a:	68fa      	ldr	r2, [r7, #12]
10013d8c:	42b2      	cmp	r2, r6
10013d8e:	4611      	mov	r1, r2
10013d90:	d82f      	bhi.n	10013df2 <MXC_I2C_RevA_MasterAsyncHandler+0xa2>
            i2c->inten0 |= (MXC_F_I2C_REVA_INTEN0_DONE);
        }
    }

    /* Read data in the RX FIFO */
    if (req->rx_len > read) {
10013d92:	697b      	ldr	r3, [r7, #20]
10013d94:	4543      	cmp	r3, r8
10013d96:	d946      	bls.n	10013e26 <MXC_I2C_RevA_MasterAsyncHandler+0xd6>
        if (i2c->intfl0 & (MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL0_DONE)) {
10013d98:	68a1      	ldr	r1, [r4, #8]
10013d9a:	f011 0f11 	tst.w	r1, #17
10013d9e:	d137      	bne.n	10013e10 <MXC_I2C_RevA_MasterAsyncHandler+0xc0>
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RX_THD;
        }
    }

    /* Done writing, still reading */
    if ((req->tx_len == written) && (req->rx_len - read) &&
10013da0:	42b2      	cmp	r2, r6
10013da2:	f000 80eb 	beq.w	10013f7c <MXC_I2C_RevA_MasterAsyncHandler+0x22c>

        /* Clear the async state */
        MXC_I2C_RevA_AsyncStop(i2c);

    } else {
        AsyncWritten[i2cNum] = written;
10013da6:	f84a 6025 	str.w	r6, [sl, r5, lsl #2]
        AsyncRead[i2cNum] = read;
10013daa:	f849 8025 	str.w	r8, [r9, r5, lsl #2]
    }
}
10013dae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10013db2:	4c93      	ldr	r4, [pc, #588]	@ (10014000 <MXC_I2C_RevA_MasterAsyncHandler+0x2b0>)
    mxc_i2c_reva_req_t *req = (mxc_i2c_reva_req_t *)AsyncRequests[i2cNum];
10013db4:	f8df b244 	ldr.w	fp, [pc, #580]	@ 10013ffc <MXC_I2C_RevA_MasterAsyncHandler+0x2ac>
    if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10013db8:	68a3      	ldr	r3, [r4, #8]
    mxc_i2c_reva_req_t *req = (mxc_i2c_reva_req_t *)AsyncRequests[i2cNum];
10013dba:	f8db 7000 	ldr.w	r7, [fp]
    if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10013dbe:	f413 4ffe 	tst.w	r3, #32512	@ 0x7f00
10013dc2:	d0e2      	beq.n	10013d8a <MXC_I2C_RevA_MasterAsyncHandler+0x3a>
        i2c->intfl0 = i2c->intfl0;
10013dc4:	68a3      	ldr	r3, [r4, #8]
10013dc6:	60a3      	str	r3, [r4, #8]
        i2c->intfl1 = i2c->intfl1;
10013dc8:	6923      	ldr	r3, [r4, #16]
10013dca:	6123      	str	r3, [r4, #16]
        MXC_I2C_Stop((mxc_i2c_regs_t *)i2c);
10013dcc:	4620      	mov	r0, r4
        i2c->inten0 = 0;
10013dce:	60e5      	str	r5, [r4, #12]
        i2c->inten1 = 0;
10013dd0:	6165      	str	r5, [r4, #20]
        MXC_I2C_Stop((mxc_i2c_regs_t *)i2c);
10013dd2:	f7ff fcf9 	bl	100137c8 <MXC_I2C_Stop>
    mxc_i2c_reva_req_t *req =
10013dd6:	f8db 0000 	ldr.w	r0, [fp]
    if (req->callback != NULL) {
10013dda:	69c3      	ldr	r3, [r0, #28]
10013ddc:	b113      	cbz	r3, 10013de4 <MXC_I2C_RevA_MasterAsyncHandler+0x94>
        req->callback(req, retVal);
10013dde:	f06f 0108 	mvn.w	r1, #8
10013de2:	4798      	blx	r3
    i2c->inten0 = 0;
10013de4:	60e5      	str	r5, [r4, #12]
    i2c->inten1 = 0;
10013de6:	6165      	str	r5, [r4, #20]
    i2c->intfl0 = i2c->intfl0;
10013de8:	68a3      	ldr	r3, [r4, #8]
10013dea:	60a3      	str	r3, [r4, #8]
    i2c->intfl1 = i2c->intfl1;
10013dec:	6923      	ldr	r3, [r4, #16]
10013dee:	6123      	str	r3, [r4, #16]
    AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10013df0:	e096      	b.n	10013f20 <MXC_I2C_RevA_MasterAsyncHandler+0x1d0>
        if (i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_TX_THD) {
10013df2:	68a3      	ldr	r3, [r4, #8]
10013df4:	0699      	lsls	r1, r3, #26
10013df6:	f100 8098 	bmi.w	10013f2a <MXC_I2C_RevA_MasterAsyncHandler+0x1da>
            i2c->inten0 |= MXC_F_I2C_REVA_INTEN0_TX_THD;
10013dfa:	68e3      	ldr	r3, [r4, #12]
10013dfc:	f043 0320 	orr.w	r3, r3, #32
10013e00:	60e3      	str	r3, [r4, #12]
        if ((req->tx_len == written) && (req->rx_len)) {
10013e02:	697b      	ldr	r3, [r7, #20]
    if (req->rx_len > read) {
10013e04:	4598      	cmp	r8, r3
10013e06:	d2ce      	bcs.n	10013da6 <MXC_I2C_RevA_MasterAsyncHandler+0x56>
        if (i2c->intfl0 & (MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL0_DONE)) {
10013e08:	68a1      	ldr	r1, [r4, #8]
10013e0a:	f011 0f11 	tst.w	r1, #17
10013e0e:	d0c7      	beq.n	10013da0 <MXC_I2C_RevA_MasterAsyncHandler+0x50>
                MXC_I2C_ReadRXFIFO((mxc_i2c_regs_t *)i2c, &req->rx_buf[read], req->rx_len - read);
10013e10:	6939      	ldr	r1, [r7, #16]
10013e12:	eba3 0208 	sub.w	r2, r3, r8
10013e16:	4441      	add	r1, r8
10013e18:	4620      	mov	r0, r4
10013e1a:	f7ff fcd7 	bl	100137cc <MXC_I2C_ReadRXFIFO>
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RX_THD;
10013e1e:	2310      	movs	r3, #16
    if ((req->tx_len == written) && (req->rx_len - read) &&
10013e20:	68f9      	ldr	r1, [r7, #12]
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RX_THD;
10013e22:	60a3      	str	r3, [r4, #8]
            read +=
10013e24:	4480      	add	r8, r0
    if ((req->tx_len == written) && (req->rx_len - read) &&
10013e26:	42b1      	cmp	r1, r6
10013e28:	d1bd      	bne.n	10013da6 <MXC_I2C_RevA_MasterAsyncHandler+0x56>
10013e2a:	697b      	ldr	r3, [r7, #20]
10013e2c:	4543      	cmp	r3, r8
10013e2e:	f040 80a5 	bne.w	10013f7c <MXC_I2C_RevA_MasterAsyncHandler+0x22c>
        i2c->inten0 = 0;
10013e32:	2300      	movs	r3, #0
10013e34:	60e3      	str	r3, [r4, #12]
        i2c->inten1 = 0;
10013e36:	6163      	str	r3, [r4, #20]
        i2c->intfl0 = i2c->intfl0;
10013e38:	68a3      	ldr	r3, [r4, #8]
10013e3a:	60a3      	str	r3, [r4, #8]
        if (req->restart) {
10013e3c:	69bb      	ldr	r3, [r7, #24]
        i2c->intfl1 = i2c->intfl1;
10013e3e:	6922      	ldr	r2, [r4, #16]
10013e40:	6122      	str	r2, [r4, #16]
        if (req->restart) {
10013e42:	2b00      	cmp	r3, #0
10013e44:	f040 80b3 	bne.w	10013fae <MXC_I2C_RevA_MasterAsyncHandler+0x25e>
            i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_STOP;
10013e48:	6b23      	ldr	r3, [r4, #48]	@ 0x30
10013e4a:	f043 0304 	orr.w	r3, r3, #4
10013e4e:	6323      	str	r3, [r4, #48]	@ 0x30
        if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10013e50:	68a3      	ldr	r3, [r4, #8]
10013e52:	f413 4ffe 	tst.w	r3, #32512	@ 0x7f00
        (mxc_i2c_reva_req_t *)AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)];
10013e56:	4b6a      	ldr	r3, [pc, #424]	@ (10014000 <MXC_I2C_RevA_MasterAsyncHandler+0x2b0>)
        if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10013e58:	f000 80bc 	beq.w	10013fd4 <MXC_I2C_RevA_MasterAsyncHandler+0x284>
        (mxc_i2c_reva_req_t *)AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)];
10013e5c:	429c      	cmp	r4, r3
10013e5e:	f000 80da 	beq.w	10014016 <MXC_I2C_RevA_MasterAsyncHandler+0x2c6>
10013e62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10013e66:	429c      	cmp	r4, r3
10013e68:	f000 8105 	beq.w	10014076 <MXC_I2C_RevA_MasterAsyncHandler+0x326>
    mxc_i2c_reva_req_t *req =
10013e6c:	f8db 0008 	ldr.w	r0, [fp, #8]
    if (req->callback != NULL) {
10013e70:	69c3      	ldr	r3, [r0, #28]
10013e72:	2b00      	cmp	r3, #0
10013e74:	f000 80e3 	beq.w	1001403e <MXC_I2C_RevA_MasterAsyncHandler+0x2ee>
        req->callback(req, retVal);
10013e78:	f06f 0108 	mvn.w	r1, #8
10013e7c:	4798      	blx	r3
    i2c->inten0 = 0;
10013e7e:	2300      	movs	r3, #0
10013e80:	60e3      	str	r3, [r4, #12]
    i2c->inten1 = 0;
10013e82:	6163      	str	r3, [r4, #20]
    i2c->intfl0 = i2c->intfl0;
10013e84:	68a3      	ldr	r3, [r4, #8]
10013e86:	60a3      	str	r3, [r4, #8]
    AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10013e88:	4b5d      	ldr	r3, [pc, #372]	@ (10014000 <MXC_I2C_RevA_MasterAsyncHandler+0x2b0>)
    i2c->intfl1 = i2c->intfl1;
10013e8a:	6922      	ldr	r2, [r4, #16]
10013e8c:	6122      	str	r2, [r4, #16]
    AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10013e8e:	429c      	cmp	r4, r3
10013e90:	f000 80cd 	beq.w	1001402e <MXC_I2C_RevA_MasterAsyncHandler+0x2de>
10013e94:	4b5b      	ldr	r3, [pc, #364]	@ (10014004 <MXC_I2C_RevA_MasterAsyncHandler+0x2b4>)
10013e96:	429c      	cmp	r4, r3
10013e98:	f000 80e4 	beq.w	10014064 <MXC_I2C_RevA_MasterAsyncHandler+0x314>
10013e9c:	2202      	movs	r2, #2
10013e9e:	2300      	movs	r3, #0
10013ea0:	f84b 3022 	str.w	r3, [fp, r2, lsl #2]
}
10013ea4:	e783      	b.n	10013dae <MXC_I2C_RevA_MasterAsyncHandler+0x5e>
    if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10013ea6:	4c57      	ldr	r4, [pc, #348]	@ (10014004 <MXC_I2C_RevA_MasterAsyncHandler+0x2b4>)
    mxc_i2c_reva_req_t *req = (mxc_i2c_reva_req_t *)AsyncRequests[i2cNum];
10013ea8:	f8df b150 	ldr.w	fp, [pc, #336]	@ 10013ffc <MXC_I2C_RevA_MasterAsyncHandler+0x2ac>
    if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10013eac:	68a3      	ldr	r3, [r4, #8]
    mxc_i2c_reva_req_t *req = (mxc_i2c_reva_req_t *)AsyncRequests[i2cNum];
10013eae:	f8db 7004 	ldr.w	r7, [fp, #4]
    if (i2c->intfl0 & MXC_I2C_REVA_ERROR) {
10013eb2:	f413 4ffe 	tst.w	r3, #32512	@ 0x7f00
10013eb6:	f43f af68 	beq.w	10013d8a <MXC_I2C_RevA_MasterAsyncHandler+0x3a>
        i2c->intfl0 = i2c->intfl0;
10013eba:	68a3      	ldr	r3, [r4, #8]
10013ebc:	60a3      	str	r3, [r4, #8]
        i2c->intfl1 = i2c->intfl1;
10013ebe:	6923      	ldr	r3, [r4, #16]
10013ec0:	6123      	str	r3, [r4, #16]
        i2c->inten0 = 0;
10013ec2:	2600      	movs	r6, #0
10013ec4:	60e6      	str	r6, [r4, #12]
        MXC_I2C_Stop((mxc_i2c_regs_t *)i2c);
10013ec6:	4620      	mov	r0, r4
        i2c->inten1 = 0;
10013ec8:	6166      	str	r6, [r4, #20]
        MXC_I2C_Stop((mxc_i2c_regs_t *)i2c);
10013eca:	f7ff fc7d 	bl	100137c8 <MXC_I2C_Stop>
    mxc_i2c_reva_req_t *req =
10013ece:	f8db 0004 	ldr.w	r0, [fp, #4]
    if (req->callback != NULL) {
10013ed2:	69c3      	ldr	r3, [r0, #28]
10013ed4:	2b00      	cmp	r3, #0
10013ed6:	f000 80c7 	beq.w	10014068 <MXC_I2C_RevA_MasterAsyncHandler+0x318>
        req->callback(req, retVal);
10013eda:	f06f 0108 	mvn.w	r1, #8
10013ede:	4798      	blx	r3
    i2c->inten0 = 0;
10013ee0:	60e6      	str	r6, [r4, #12]
    i2c->inten1 = 0;
10013ee2:	6166      	str	r6, [r4, #20]
    i2c->intfl0 = i2c->intfl0;
10013ee4:	68a3      	ldr	r3, [r4, #8]
10013ee6:	60a3      	str	r3, [r4, #8]
    i2c->intfl1 = i2c->intfl1;
10013ee8:	6923      	ldr	r3, [r4, #16]
10013eea:	6123      	str	r3, [r4, #16]
    AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10013eec:	e018      	b.n	10013f20 <MXC_I2C_RevA_MasterAsyncHandler+0x1d0>
        i2c->intfl0 = i2c->intfl0;
10013eee:	68a3      	ldr	r3, [r4, #8]
10013ef0:	60a3      	str	r3, [r4, #8]
        i2c->intfl1 = i2c->intfl1;
10013ef2:	6923      	ldr	r3, [r4, #16]
10013ef4:	6123      	str	r3, [r4, #16]
        i2c->inten0 = 0;
10013ef6:	2500      	movs	r5, #0
10013ef8:	60e5      	str	r5, [r4, #12]
        MXC_I2C_Stop((mxc_i2c_regs_t *)i2c);
10013efa:	4620      	mov	r0, r4
        i2c->inten1 = 0;
10013efc:	6165      	str	r5, [r4, #20]
        MXC_I2C_Stop((mxc_i2c_regs_t *)i2c);
10013efe:	f7ff fc63 	bl	100137c8 <MXC_I2C_Stop>
    mxc_i2c_reva_req_t *req =
10013f02:	f8db 0008 	ldr.w	r0, [fp, #8]
    if (req->callback != NULL) {
10013f06:	69c3      	ldr	r3, [r0, #28]
10013f08:	2b00      	cmp	r3, #0
10013f0a:	d07d      	beq.n	10014008 <MXC_I2C_RevA_MasterAsyncHandler+0x2b8>
        req->callback(req, retVal);
10013f0c:	f06f 0108 	mvn.w	r1, #8
10013f10:	4798      	blx	r3
    i2c->inten0 = 0;
10013f12:	60e5      	str	r5, [r4, #12]
    i2c->inten1 = 0;
10013f14:	6165      	str	r5, [r4, #20]
    i2c->intfl0 = i2c->intfl0;
10013f16:	68a3      	ldr	r3, [r4, #8]
10013f18:	60a3      	str	r3, [r4, #8]
    i2c->intfl1 = i2c->intfl1;
10013f1a:	6923      	ldr	r3, [r4, #16]
10013f1c:	6123      	str	r3, [r4, #16]
    AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10013f1e:	2502      	movs	r5, #2
10013f20:	2300      	movs	r3, #0
10013f22:	f84b 3025 	str.w	r3, [fp, r5, lsl #2]
}
10013f26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            written += MXC_I2C_WriteTXFIFO((mxc_i2c_regs_t *)i2c, &req->tx_buf[written],
10013f2a:	68b9      	ldr	r1, [r7, #8]
10013f2c:	1b92      	subs	r2, r2, r6
10013f2e:	4431      	add	r1, r6
10013f30:	4620      	mov	r0, r4
10013f32:	f7ff fc4d 	bl	100137d0 <MXC_I2C_WriteTXFIFO>
        if (written < req->tx_len) {
10013f36:	68fa      	ldr	r2, [r7, #12]
            written += MXC_I2C_WriteTXFIFO((mxc_i2c_regs_t *)i2c, &req->tx_buf[written],
10013f38:	4406      	add	r6, r0
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_THD;
10013f3a:	2320      	movs	r3, #32
        if (written < req->tx_len) {
10013f3c:	42b2      	cmp	r2, r6
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_THD;
10013f3e:	60a3      	str	r3, [r4, #8]
        if (written < req->tx_len) {
10013f40:	f63f af5b 	bhi.w	10013dfa <MXC_I2C_RevA_MasterAsyncHandler+0xaa>
            i2c->inten0 &= ~(MXC_F_I2C_REVA_INTEN0_TX_THD);
10013f44:	68e3      	ldr	r3, [r4, #12]
10013f46:	f023 0320 	bic.w	r3, r3, #32
10013f4a:	60e3      	str	r3, [r4, #12]
        if ((req->tx_len == written) && (req->rx_len)) {
10013f4c:	697b      	ldr	r3, [r7, #20]
10013f4e:	f47f af59 	bne.w	10013e04 <MXC_I2C_RevA_MasterAsyncHandler+0xb4>
10013f52:	2b00      	cmp	r3, #0
10013f54:	f43f af6a 	beq.w	10013e2c <MXC_I2C_RevA_MasterAsyncHandler+0xdc>
            i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_RESTART;
10013f58:	6b22      	ldr	r2, [r4, #48]	@ 0x30
10013f5a:	f042 0202 	orr.w	r2, r2, #2
10013f5e:	6322      	str	r2, [r4, #48]	@ 0x30
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_DONE;
10013f60:	2201      	movs	r2, #1
10013f62:	60a2      	str	r2, [r4, #8]
            i2c->inten0 |= (MXC_F_I2C_REVA_INTEN0_DONE);
10013f64:	68e2      	ldr	r2, [r4, #12]
    if (req->rx_len > read) {
10013f66:	4598      	cmp	r8, r3
            i2c->inten0 |= (MXC_F_I2C_REVA_INTEN0_DONE);
10013f68:	f042 0201 	orr.w	r2, r2, #1
10013f6c:	60e2      	str	r2, [r4, #12]
    if (req->rx_len > read) {
10013f6e:	f4bf af5d 	bcs.w	10013e2c <MXC_I2C_RevA_MasterAsyncHandler+0xdc>
        if (i2c->intfl0 & (MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL0_DONE)) {
10013f72:	68a2      	ldr	r2, [r4, #8]
10013f74:	f012 0f11 	tst.w	r2, #17
10013f78:	f47f af4a 	bne.w	10013e10 <MXC_I2C_RevA_MasterAsyncHandler+0xc0>
        (i2c->intfl0 & MXC_F_I2C_REVA_INTFL0_DONE)) {
10013f7c:	68a2      	ldr	r2, [r4, #8]
    if ((req->tx_len == written) && (req->rx_len - read) &&
10013f7e:	07d2      	lsls	r2, r2, #31
10013f80:	f57f af11 	bpl.w	10013da6 <MXC_I2C_RevA_MasterAsyncHandler+0x56>
        i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_DONE;
10013f84:	2201      	movs	r2, #1
10013f86:	60a2      	str	r2, [r4, #8]
        if (read == 0) {
10013f88:	f1b8 0f00 	cmp.w	r8, #0
10013f8c:	d114      	bne.n	10013fb8 <MXC_I2C_RevA_MasterAsyncHandler+0x268>
            i2c->fifo = (req->addr << 1) | 0x1; // Load slave address with read bit.
10013f8e:	687a      	ldr	r2, [r7, #4]
10013f90:	0052      	lsls	r2, r2, #1
        if ((req->rx_len - read) > MXC_I2C_REVA_MAX_FIFO_TRANSACTION) {
10013f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
            i2c->fifo = (req->addr << 1) | 0x1; // Load slave address with read bit.
10013f96:	f042 0201 	orr.w	r2, r2, #1
10013f9a:	62e2      	str	r2, [r4, #44]	@ 0x2c
            i2c->rxctrl1 = 0;
10013f9c:	bf8c      	ite	hi
10013f9e:	f8c4 8020 	strhi.w	r8, [r4, #32]
            i2c->rxctrl1 = (req->rx_len - read); // 0 for 256, otherwise number of bytes to read
10013fa2:	6223      	strls	r3, [r4, #32]
            i2c->inten0 |= (MXC_F_I2C_REVA_INTEN0_RX_THD | MXC_F_I2C_REVA_INTEN0_DONE);
10013fa4:	68e3      	ldr	r3, [r4, #12]
10013fa6:	f043 0311 	orr.w	r3, r3, #17
10013faa:	60e3      	str	r3, [r4, #12]
10013fac:	e6fb      	b.n	10013da6 <MXC_I2C_RevA_MasterAsyncHandler+0x56>
            i2c->mstctrl |= MXC_F_I2C_REVA_MSTCTRL_RESTART;
10013fae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
10013fb0:	f043 0302 	orr.w	r3, r3, #2
10013fb4:	6323      	str	r3, [r4, #48]	@ 0x30
10013fb6:	e74b      	b.n	10013e50 <MXC_I2C_RevA_MasterAsyncHandler+0x100>
        if ((req->rx_len - read) > MXC_I2C_REVA_MAX_FIFO_TRANSACTION) {
10013fb8:	eba3 0208 	sub.w	r2, r3, r8
10013fbc:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
            i2c->rxctrl1 = 0;
10013fc0:	bf88      	it	hi
10013fc2:	2200      	movhi	r2, #0
        if (read < req->rx_len) {
10013fc4:	4598      	cmp	r8, r3
            i2c->rxctrl1 = (req->rx_len - read); // 0 for 256, otherwise number of bytes to read
10013fc6:	6222      	str	r2, [r4, #32]
        if (read < req->rx_len) {
10013fc8:	d3ec      	bcc.n	10013fa4 <MXC_I2C_RevA_MasterAsyncHandler+0x254>
            i2c->inten0 &= ~(MXC_F_I2C_REVA_INTEN0_RX_THD | MXC_F_I2C_REVA_INTEN0_DONE);
10013fca:	68e3      	ldr	r3, [r4, #12]
10013fcc:	f023 0311 	bic.w	r3, r3, #17
10013fd0:	60e3      	str	r3, [r4, #12]
10013fd2:	e6e8      	b.n	10013da6 <MXC_I2C_RevA_MasterAsyncHandler+0x56>
        (mxc_i2c_reva_req_t *)AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)];
10013fd4:	429c      	cmp	r4, r3
10013fd6:	d02c      	beq.n	10014032 <MXC_I2C_RevA_MasterAsyncHandler+0x2e2>
10013fd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10013fdc:	429c      	cmp	r4, r3
10013fde:	d036      	beq.n	1001404e <MXC_I2C_RevA_MasterAsyncHandler+0x2fe>
    mxc_i2c_reva_req_t *req =
10013fe0:	f8db 0008 	ldr.w	r0, [fp, #8]
    if (req->callback != NULL) {
10013fe4:	69c3      	ldr	r3, [r0, #28]
10013fe6:	b353      	cbz	r3, 1001403e <MXC_I2C_RevA_MasterAsyncHandler+0x2ee>
        req->callback(req, retVal);
10013fe8:	2100      	movs	r1, #0
10013fea:	4798      	blx	r3
10013fec:	e747      	b.n	10013e7e <MXC_I2C_RevA_MasterAsyncHandler+0x12e>
10013fee:	bf00      	nop
10013ff0:	20000fec 	.word	0x20000fec
10013ff4:	20000fe0 	.word	0x20000fe0
10013ff8:	4001f000 	.word	0x4001f000
10013ffc:	20000ff8 	.word	0x20000ff8
10014000:	4001d000 	.word	0x4001d000
10014004:	4001e000 	.word	0x4001e000
    i2c->inten0 = 0;
10014008:	60e3      	str	r3, [r4, #12]
    i2c->inten1 = 0;
1001400a:	6163      	str	r3, [r4, #20]
    i2c->intfl0 = i2c->intfl0;
1001400c:	68a3      	ldr	r3, [r4, #8]
1001400e:	60a3      	str	r3, [r4, #8]
    i2c->intfl1 = i2c->intfl1;
10014010:	6923      	ldr	r3, [r4, #16]
10014012:	6123      	str	r3, [r4, #16]
    AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014014:	e783      	b.n	10013f1e <MXC_I2C_RevA_MasterAsyncHandler+0x1ce>
    mxc_i2c_reva_req_t *req =
10014016:	f8db 0000 	ldr.w	r0, [fp]
    if (req->callback != NULL) {
1001401a:	69c3      	ldr	r3, [r0, #28]
1001401c:	2b00      	cmp	r3, #0
1001401e:	f47f af2b 	bne.w	10013e78 <MXC_I2C_RevA_MasterAsyncHandler+0x128>
    i2c->inten0 = 0;
10014022:	60e3      	str	r3, [r4, #12]
    i2c->inten1 = 0;
10014024:	6163      	str	r3, [r4, #20]
    i2c->intfl0 = i2c->intfl0;
10014026:	68a3      	ldr	r3, [r4, #8]
10014028:	60a3      	str	r3, [r4, #8]
    i2c->intfl1 = i2c->intfl1;
1001402a:	6923      	ldr	r3, [r4, #16]
1001402c:	6123      	str	r3, [r4, #16]
    AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
1001402e:	2200      	movs	r2, #0
10014030:	e735      	b.n	10013e9e <MXC_I2C_RevA_MasterAsyncHandler+0x14e>
    mxc_i2c_reva_req_t *req =
10014032:	f8db 0000 	ldr.w	r0, [fp]
    if (req->callback != NULL) {
10014036:	69c3      	ldr	r3, [r0, #28]
10014038:	2b00      	cmp	r3, #0
1001403a:	d1d5      	bne.n	10013fe8 <MXC_I2C_RevA_MasterAsyncHandler+0x298>
1001403c:	e7f1      	b.n	10014022 <MXC_I2C_RevA_MasterAsyncHandler+0x2d2>
    i2c->inten0 = 0;
1001403e:	4a11      	ldr	r2, [pc, #68]	@ (10014084 <MXC_I2C_RevA_MasterAsyncHandler+0x334>)
10014040:	60d3      	str	r3, [r2, #12]
    i2c->inten1 = 0;
10014042:	6153      	str	r3, [r2, #20]
    i2c->intfl0 = i2c->intfl0;
10014044:	6893      	ldr	r3, [r2, #8]
10014046:	6093      	str	r3, [r2, #8]
    i2c->intfl1 = i2c->intfl1;
10014048:	6913      	ldr	r3, [r2, #16]
1001404a:	6113      	str	r3, [r2, #16]
    AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
1001404c:	e726      	b.n	10013e9c <MXC_I2C_RevA_MasterAsyncHandler+0x14c>
    mxc_i2c_reva_req_t *req =
1001404e:	f8db 0004 	ldr.w	r0, [fp, #4]
    if (req->callback != NULL) {
10014052:	69c3      	ldr	r3, [r0, #28]
10014054:	2b00      	cmp	r3, #0
10014056:	d1c7      	bne.n	10013fe8 <MXC_I2C_RevA_MasterAsyncHandler+0x298>
    i2c->inten0 = 0;
10014058:	60e3      	str	r3, [r4, #12]
    i2c->inten1 = 0;
1001405a:	6163      	str	r3, [r4, #20]
    i2c->intfl0 = i2c->intfl0;
1001405c:	68a3      	ldr	r3, [r4, #8]
1001405e:	60a3      	str	r3, [r4, #8]
    i2c->intfl1 = i2c->intfl1;
10014060:	6923      	ldr	r3, [r4, #16]
10014062:	6123      	str	r3, [r4, #16]
    AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014064:	2201      	movs	r2, #1
10014066:	e71a      	b.n	10013e9e <MXC_I2C_RevA_MasterAsyncHandler+0x14e>
    i2c->inten0 = 0;
10014068:	60e3      	str	r3, [r4, #12]
    i2c->inten1 = 0;
1001406a:	6163      	str	r3, [r4, #20]
    i2c->intfl0 = i2c->intfl0;
1001406c:	68a3      	ldr	r3, [r4, #8]
1001406e:	60a3      	str	r3, [r4, #8]
    i2c->intfl1 = i2c->intfl1;
10014070:	6923      	ldr	r3, [r4, #16]
10014072:	6123      	str	r3, [r4, #16]
    AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014074:	e754      	b.n	10013f20 <MXC_I2C_RevA_MasterAsyncHandler+0x1d0>
    mxc_i2c_reva_req_t *req =
10014076:	f8db 0004 	ldr.w	r0, [fp, #4]
    if (req->callback != NULL) {
1001407a:	69c3      	ldr	r3, [r0, #28]
1001407c:	2b00      	cmp	r3, #0
1001407e:	f47f aefb 	bne.w	10013e78 <MXC_I2C_RevA_MasterAsyncHandler+0x128>
10014082:	e7e9      	b.n	10014058 <MXC_I2C_RevA_MasterAsyncHandler+0x308>
10014084:	4001f000 	.word	0x4001f000

10014088 <MXC_I2C_RevA_SlaveAsyncHandler>:

void MXC_I2C_RevA_SlaveAsyncHandler(mxc_i2c_reva_regs_t *i2c, mxc_i2c_reva_slave_handler_t callback,
                                    uint32_t *int_en, int *retVal)
{
10014088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1001408c:	4615      	mov	r5, r2
1001408e:	460e      	mov	r6, r1
    // I2C_EVT_RX_THRESH
    // I2C_EVT_TX_THRESH
    // I2C_EVT_TRANS_COMP
    // I2C_EVT_UNDERFLOW
    // I2C_EVT_OVERFLOW
    if (!(int_en[0] & (MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH | MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH |
10014090:	6812      	ldr	r2, [r2, #0]
10014092:	49b2      	ldr	r1, [pc, #712]	@ (1001435c <MXC_I2C_RevA_SlaveAsyncHandler+0x2d4>)
    uint32_t tFlags = i2c->intfl0;
10014094:	f8d0 9008 	ldr.w	r9, [r0, #8]
    *retVal = E_NO_ERROR;
10014098:	2700      	movs	r7, #0
    if (!(int_en[0] & (MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH | MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH |
1001409a:	4011      	ands	r1, r2
    *retVal = E_NO_ERROR;
1001409c:	601f      	str	r7, [r3, #0]
{
1001409e:	4604      	mov	r4, r0
    uint32_t readFlag = i2c->ctrl & MXC_F_I2C_REVA_CTRL_READ;
100140a0:	6807      	ldr	r7, [r0, #0]
{
100140a2:	4698      	mov	r8, r3
    if (!(int_en[0] & (MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH | MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH |
100140a4:	2900      	cmp	r1, #0
100140a6:	d15a      	bne.n	1001415e <MXC_I2C_RevA_SlaveAsyncHandler+0xd6>
                       MXC_F_I2C_REVA_INTFL0_ADDR_MATCH))) {
        // The STOPERR/STARTERR interrupt that's enabled here could fire before we are addressed
        // (fires anytime a stop/start is detected out of sequence).
        if (tFlags & MXC_I2C_REVA_ERROR) {
100140a8:	f419 4ffe 	tst.w	r9, #32512	@ 0x7f00
100140ac:	f040 80cf 	bne.w	1001424e <MXC_I2C_RevA_SlaveAsyncHandler+0x1c6>
            int_en[0] = 0;
            int_en[1] = 0;
            AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
        }

        if (int_en[0] & MXC_F_I2C_REVA_INTFL0_RX_THD || int_en[1] & MXC_F_I2C_REVA_INTFL1_RX_OV) {
100140b0:	06d3      	lsls	r3, r2, #27
100140b2:	f140 81a4 	bpl.w	100143fe <MXC_I2C_RevA_SlaveAsyncHandler+0x376>
            if (tFlags & MXC_F_I2C_REVA_INTFL0_RX_THD) {
100140b6:	f019 0f10 	tst.w	r9, #16
100140ba:	f000 8148 	beq.w	1001434e <MXC_I2C_RevA_SlaveAsyncHandler+0x2c6>
                if (callback != NULL) {
100140be:	2e00      	cmp	r6, #0
100140c0:	f000 815c 	beq.w	1001437c <MXC_I2C_RevA_SlaveAsyncHandler+0x2f4>
                    callback(i2c, MXC_I2C_REVA_EVT_RX_THRESH, NULL);
100140c4:	2200      	movs	r2, #0
100140c6:	2102      	movs	r1, #2
100140c8:	4620      	mov	r0, r4
100140ca:	47b0      	blx	r6
                }

                i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RX_THD;
100140cc:	2310      	movs	r3, #16
100140ce:	60a3      	str	r3, [r4, #8]
            }

            if (i2c->intfl1 & MXC_F_I2C_REVA_INTFL1_RX_OV) {
100140d0:	6923      	ldr	r3, [r4, #16]
100140d2:	07da      	lsls	r2, r3, #31
100140d4:	d505      	bpl.n	100140e2 <MXC_I2C_RevA_SlaveAsyncHandler+0x5a>
                if (callback != NULL) {
                    callback(i2c, MXC_I2C_REVA_EVT_OVERFLOW, NULL);
100140d6:	2200      	movs	r2, #0
100140d8:	2106      	movs	r1, #6
100140da:	4620      	mov	r0, r4
100140dc:	47b0      	blx	r6
                }

                i2c->intfl1 = MXC_F_I2C_REVA_INTFL1_RX_OV;
100140de:	2301      	movs	r3, #1
100140e0:	6123      	str	r3, [r4, #16]
100140e2:	682a      	ldr	r2, [r5, #0]
            }
        }

        if (int_en[0] & (MXC_F_I2C_REVA_INTFL0_TX_THD | MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) ||
100140e4:	f248 0320 	movw	r3, #32800	@ 0x8020
100140e8:	4213      	tst	r3, r2
100140ea:	f000 80df 	beq.w	100142ac <MXC_I2C_RevA_SlaveAsyncHandler+0x224>
            int_en[1] & MXC_F_I2C_REVA_INTFL1_TX_UN) {
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_THD) {
100140ee:	f019 0f20 	tst.w	r9, #32
                }

                i2c->intfl1 = MXC_F_I2C_REVA_INTFL1_TX_UN;
            }

            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) {
100140f2:	f409 4a00 	and.w	sl, r9, #32768	@ 0x8000
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_THD) {
100140f6:	f000 80fc 	beq.w	100142f2 <MXC_I2C_RevA_SlaveAsyncHandler+0x26a>
                if (callback != NULL) {
100140fa:	2e00      	cmp	r6, #0
100140fc:	f000 8145 	beq.w	1001438a <MXC_I2C_RevA_SlaveAsyncHandler+0x302>
                    callback(i2c, MXC_I2C_REVA_EVT_TX_THRESH, NULL);
10014100:	2103      	movs	r1, #3
10014102:	2200      	movs	r2, #0
10014104:	4620      	mov	r0, r4
10014106:	47b0      	blx	r6
                i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_THD;
10014108:	2320      	movs	r3, #32
1001410a:	60a3      	str	r3, [r4, #8]
            if (i2c->intfl1 & MXC_F_I2C_REVA_INTFL1_TX_UN) {
1001410c:	6923      	ldr	r3, [r4, #16]
1001410e:	0799      	lsls	r1, r3, #30
10014110:	f100 80f5 	bmi.w	100142fe <MXC_I2C_RevA_SlaveAsyncHandler+0x276>
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) {
10014114:	f1ba 0f00 	cmp.w	sl, #0
10014118:	f040 80fa 	bne.w	10014310 <MXC_I2C_RevA_SlaveAsyncHandler+0x288>
                int_en[1] = 0;
                AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
            }
        }

        if (tFlags & MXC_F_I2C_REVA_INTFL0_STOP) {
1001411c:	f019 0f40 	tst.w	r9, #64	@ 0x40
10014120:	f000 8168 	beq.w	100143f4 <MXC_I2C_RevA_SlaveAsyncHandler+0x36c>
            *retVal = E_NO_ERROR;
10014124:	f8c8 a000 	str.w	sl, [r8]

            if (callback != NULL) {
                callback(i2c, MXC_I2C_REVA_EVT_TRANS_COMP, retVal);
10014128:	4642      	mov	r2, r8
1001412a:	2104      	movs	r1, #4
1001412c:	4620      	mov	r0, r4
1001412e:	47b0      	blx	r6
            }

            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_STOP;
            int_en[0] = 0;
            int_en[1] = 0;
            AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014130:	4a8b      	ldr	r2, [pc, #556]	@ (10014360 <MXC_I2C_RevA_SlaveAsyncHandler+0x2d8>)
            int_en[0] = 0;
10014132:	2300      	movs	r3, #0
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_STOP;
10014134:	2140      	movs	r1, #64	@ 0x40
            AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014136:	4294      	cmp	r4, r2
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_STOP;
10014138:	60a1      	str	r1, [r4, #8]
            int_en[0] = 0;
1001413a:	602b      	str	r3, [r5, #0]
1001413c:	606b      	str	r3, [r5, #4]
            AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
1001413e:	d00a      	beq.n	10014156 <MXC_I2C_RevA_SlaveAsyncHandler+0xce>
10014140:	4b88      	ldr	r3, [pc, #544]	@ (10014364 <MXC_I2C_RevA_SlaveAsyncHandler+0x2dc>)
10014142:	429c      	cmp	r4, r3
10014144:	f000 8131 	beq.w	100143aa <MXC_I2C_RevA_SlaveAsyncHandler+0x322>
10014148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001414c:	429c      	cmp	r4, r3
1001414e:	bf0c      	ite	eq
10014150:	2302      	moveq	r3, #2
10014152:	f04f 33ff 	movne.w	r3, #4294967295	@ 0xffffffff
10014156:	4a84      	ldr	r2, [pc, #528]	@ (10014368 <MXC_I2C_RevA_SlaveAsyncHandler+0x2e0>)
10014158:	2100      	movs	r1, #0
1001415a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
    }

    if (tFlags & MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH) {
1001415e:	f419 0f80 	tst.w	r9, #4194304	@ 0x400000
10014162:	d011      	beq.n	10014188 <MXC_I2C_RevA_SlaveAsyncHandler+0x100>
        if (callback != NULL) {
10014164:	b11e      	cbz	r6, 1001416e <MXC_I2C_RevA_SlaveAsyncHandler+0xe6>
            callback(i2c, MXC_I2C_REVA_EVT_MASTER_WR, NULL);
10014166:	2200      	movs	r2, #0
10014168:	4611      	mov	r1, r2
1001416a:	4620      	mov	r0, r4
1001416c:	47b0      	blx	r6
        }

        i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH;
1001416e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
10014172:	60a3      	str	r3, [r4, #8]
        i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
10014174:	2308      	movs	r3, #8
10014176:	60a3      	str	r3, [r4, #8]
        i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT;
10014178:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
1001417c:	60a3      	str	r3, [r4, #8]

        int_en[0] = MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL0_DONE | MXC_I2C_REVA_ERROR;
1001417e:	f647 7311 	movw	r3, #32529	@ 0x7f11
10014182:	602b      	str	r3, [r5, #0]
10014184:	2301      	movs	r3, #1
10014186:	606b      	str	r3, [r5, #4]
        int_en[1] = MXC_F_I2C_REVA_INTFL1_RX_OV;
    }

    if (tFlags & MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH) {
10014188:	f419 0f00 	tst.w	r9, #8388608	@ 0x800000
1001418c:	d00e      	beq.n	100141ac <MXC_I2C_RevA_SlaveAsyncHandler+0x124>
        if (callback != NULL) {
1001418e:	b11e      	cbz	r6, 10014198 <MXC_I2C_RevA_SlaveAsyncHandler+0x110>
            callback(i2c, MXC_I2C_REVA_EVT_MASTER_RD, NULL);
10014190:	2200      	movs	r2, #0
10014192:	2101      	movs	r1, #1
10014194:	4620      	mov	r0, r4
10014196:	47b0      	blx	r6
        }

        i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH;
10014198:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
1001419c:	60a3      	str	r3, [r4, #8]
        i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
1001419e:	2308      	movs	r3, #8
100141a0:	60a3      	str	r3, [r4, #8]
        int_en[0] = MXC_F_I2C_REVA_INTFL0_TX_THD | MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT |
100141a2:	f64f 7320 	movw	r3, #65312	@ 0xff20
100141a6:	602b      	str	r3, [r5, #0]
100141a8:	2302      	movs	r3, #2
100141aa:	606b      	str	r3, [r5, #4]
                    MXC_I2C_REVA_ERROR;
        int_en[1] = MXC_F_I2C_REVA_INTFL1_TX_UN;
    }

    if (tFlags & MXC_F_I2C_REVA_INTFL0_ADDR_MATCH) {
100141ac:	f019 0f08 	tst.w	r9, #8
100141b0:	d017      	beq.n	100141e2 <MXC_I2C_RevA_SlaveAsyncHandler+0x15a>
        if (readFlag & MXC_F_I2C_REVA_CTRL_READ) {
100141b2:	f417 6200 	ands.w	r2, r7, #2048	@ 0x800
100141b6:	f000 808c 	beq.w	100142d2 <MXC_I2C_RevA_SlaveAsyncHandler+0x24a>
            if (callback != NULL) {
100141ba:	b11e      	cbz	r6, 100141c4 <MXC_I2C_RevA_SlaveAsyncHandler+0x13c>
                callback(i2c, MXC_I2C_REVA_EVT_MASTER_RD, NULL);
100141bc:	2200      	movs	r2, #0
100141be:	2101      	movs	r1, #1
100141c0:	4620      	mov	r0, r4
100141c2:	47b0      	blx	r6
            }

            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH;
100141c4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
100141c8:	2308      	movs	r3, #8
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH;
100141ca:	60a2      	str	r2, [r4, #8]
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT;
100141cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
100141d0:	60a3      	str	r3, [r4, #8]

            int_en[0] = MXC_F_I2C_REVA_INTFL0_TX_THD | MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT |
100141d2:	f64f 7220 	movw	r2, #65312	@ 0xff20
100141d6:	2302      	movs	r3, #2
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT;
100141d8:	60a1      	str	r1, [r4, #8]
            int_en[0] = MXC_F_I2C_REVA_INTFL0_TX_THD | MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT |
100141da:	602a      	str	r2, [r5, #0]
100141dc:	606b      	str	r3, [r5, #4]
        MXC_I2C_RevA_ClearRXFIFO(i2c);
        int_en[0] = 0;
        int_en[1] = 0;
        AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
    }
}
100141de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (tFlags & MXC_I2C_REVA_ERROR) {
100141e2:	f419 4ffe 	tst.w	r9, #32512	@ 0x7f00
100141e6:	d0fa      	beq.n	100141de <MXC_I2C_RevA_SlaveAsyncHandler+0x156>
        *retVal = E_COMM_ERR;
100141e8:	f06f 0308 	mvn.w	r3, #8
100141ec:	f8c8 3000 	str.w	r3, [r8]
        if (callback != NULL) {
100141f0:	b11e      	cbz	r6, 100141fa <MXC_I2C_RevA_SlaveAsyncHandler+0x172>
            callback(i2c, MXC_I2C_REVA_EVT_TRANS_COMP, retVal);
100141f2:	4642      	mov	r2, r8
100141f4:	2104      	movs	r1, #4
100141f6:	4620      	mov	r0, r4
100141f8:	47b0      	blx	r6
    i2c->intfl1 = flags1;
100141fa:	2307      	movs	r3, #7
    i2c->intfl0 = flags0;
100141fc:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
10014200:	60a2      	str	r2, [r4, #8]
    i2c->intfl1 = flags1;
10014202:	6123      	str	r3, [r4, #16]
    i2c->txctrl0 |= MXC_F_I2C_REVA_TXCTRL0_FLUSH;
10014204:	6a63      	ldr	r3, [r4, #36]	@ 0x24
10014206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1001420a:	6263      	str	r3, [r4, #36]	@ 0x24
    while (i2c->txctrl0 & MXC_F_I2C_REVA_TXCTRL0_FLUSH) {}
1001420c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
1001420e:	061b      	lsls	r3, r3, #24
10014210:	d4fc      	bmi.n	1001420c <MXC_I2C_RevA_SlaveAsyncHandler+0x184>
    i2c->rxctrl0 |= MXC_F_I2C_REVA_RXCTRL0_FLUSH;
10014212:	69e3      	ldr	r3, [r4, #28]
10014214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10014218:	61e3      	str	r3, [r4, #28]
    while (i2c->rxctrl0 & MXC_F_I2C_REVA_RXCTRL0_FLUSH) {}
1001421a:	69e3      	ldr	r3, [r4, #28]
1001421c:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
10014220:	d1fb      	bne.n	1001421a <MXC_I2C_RevA_SlaveAsyncHandler+0x192>
        AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014222:	4a4f      	ldr	r2, [pc, #316]	@ (10014360 <MXC_I2C_RevA_SlaveAsyncHandler+0x2d8>)
        int_en[0] = 0;
10014224:	602b      	str	r3, [r5, #0]
        AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014226:	4294      	cmp	r4, r2
        int_en[0] = 0;
10014228:	606b      	str	r3, [r5, #4]
        AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
1001422a:	d00a      	beq.n	10014242 <MXC_I2C_RevA_SlaveAsyncHandler+0x1ba>
1001422c:	4b4d      	ldr	r3, [pc, #308]	@ (10014364 <MXC_I2C_RevA_SlaveAsyncHandler+0x2dc>)
1001422e:	429c      	cmp	r4, r3
10014230:	f000 80bf 	beq.w	100143b2 <MXC_I2C_RevA_SlaveAsyncHandler+0x32a>
10014234:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014238:	429c      	cmp	r4, r3
1001423a:	bf14      	ite	ne
1001423c:	f04f 33ff 	movne.w	r3, #4294967295	@ 0xffffffff
10014240:	2302      	moveq	r3, #2
10014242:	4a49      	ldr	r2, [pc, #292]	@ (10014368 <MXC_I2C_RevA_SlaveAsyncHandler+0x2e0>)
10014244:	2100      	movs	r1, #0
10014246:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
1001424a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            *retVal = E_COMM_ERR;
1001424e:	f06f 0308 	mvn.w	r3, #8
10014252:	f8c8 3000 	str.w	r3, [r8]
            if (callback != NULL) {
10014256:	b116      	cbz	r6, 1001425e <MXC_I2C_RevA_SlaveAsyncHandler+0x1d6>
                callback(i2c, MXC_I2C_REVA_EVT_TRANS_COMP, retVal);
10014258:	4642      	mov	r2, r8
1001425a:	2104      	movs	r1, #4
1001425c:	47b0      	blx	r6
            MXC_I2C_ClearFlags((mxc_i2c_regs_t *)i2c, MXC_I2C_REVA_INTFL0_MASK,
1001425e:	2207      	movs	r2, #7
10014260:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
10014264:	4620      	mov	r0, r4
10014266:	f7ff fab9 	bl	100137dc <MXC_I2C_ClearFlags>
            MXC_I2C_ClearTXFIFO((mxc_i2c_regs_t *)i2c);
1001426a:	4620      	mov	r0, r4
1001426c:	f7ff fab4 	bl	100137d8 <MXC_I2C_ClearTXFIFO>
            MXC_I2C_ClearRXFIFO((mxc_i2c_regs_t *)i2c);
10014270:	4620      	mov	r0, r4
10014272:	f7ff faaf 	bl	100137d4 <MXC_I2C_ClearRXFIFO>
            AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014276:	4a3a      	ldr	r2, [pc, #232]	@ (10014360 <MXC_I2C_RevA_SlaveAsyncHandler+0x2d8>)
            int_en[0] = 0;
10014278:	2300      	movs	r3, #0
            AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
1001427a:	4294      	cmp	r4, r2
            int_en[0] = 0;
1001427c:	602b      	str	r3, [r5, #0]
1001427e:	606b      	str	r3, [r5, #4]
            AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014280:	d00a      	beq.n	10014298 <MXC_I2C_RevA_SlaveAsyncHandler+0x210>
10014282:	4b38      	ldr	r3, [pc, #224]	@ (10014364 <MXC_I2C_RevA_SlaveAsyncHandler+0x2dc>)
10014284:	429c      	cmp	r4, r3
10014286:	f000 8092 	beq.w	100143ae <MXC_I2C_RevA_SlaveAsyncHandler+0x326>
1001428a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001428e:	429c      	cmp	r4, r3
10014290:	bf0c      	ite	eq
10014292:	2302      	moveq	r3, #2
10014294:	f04f 33ff 	movne.w	r3, #4294967295	@ 0xffffffff
10014298:	4a33      	ldr	r2, [pc, #204]	@ (10014368 <MXC_I2C_RevA_SlaveAsyncHandler+0x2e0>)
1001429a:	2100      	movs	r1, #0
1001429c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (int_en[0] & MXC_F_I2C_REVA_INTFL0_RX_THD || int_en[1] & MXC_F_I2C_REVA_INTFL1_RX_OV) {
100142a0:	682a      	ldr	r2, [r5, #0]
        if (int_en[0] & (MXC_F_I2C_REVA_INTFL0_TX_THD | MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) ||
100142a2:	f248 0320 	movw	r3, #32800	@ 0x8020
100142a6:	4213      	tst	r3, r2
100142a8:	f47f af21 	bne.w	100140ee <MXC_I2C_RevA_SlaveAsyncHandler+0x66>
            int_en[1] & MXC_F_I2C_REVA_INTFL1_TX_UN) {
100142ac:	686b      	ldr	r3, [r5, #4]
        if (int_en[0] & (MXC_F_I2C_REVA_INTFL0_TX_THD | MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) ||
100142ae:	0798      	lsls	r0, r3, #30
100142b0:	f53f af1d 	bmi.w	100140ee <MXC_I2C_RevA_SlaveAsyncHandler+0x66>
        if (tFlags & MXC_F_I2C_REVA_INTFL0_STOP) {
100142b4:	f019 0f40 	tst.w	r9, #64	@ 0x40
100142b8:	f43f af51 	beq.w	1001415e <MXC_I2C_RevA_SlaveAsyncHandler+0xd6>
            *retVal = E_NO_ERROR;
100142bc:	2300      	movs	r3, #0
100142be:	f8c8 3000 	str.w	r3, [r8]
            if (callback != NULL) {
100142c2:	2e00      	cmp	r6, #0
100142c4:	f43f af34 	beq.w	10014130 <MXC_I2C_RevA_SlaveAsyncHandler+0xa8>
                callback(i2c, MXC_I2C_REVA_EVT_TRANS_COMP, retVal);
100142c8:	4642      	mov	r2, r8
100142ca:	2104      	movs	r1, #4
100142cc:	4620      	mov	r0, r4
100142ce:	47b0      	blx	r6
100142d0:	e72e      	b.n	10014130 <MXC_I2C_RevA_SlaveAsyncHandler+0xa8>
            if (callback != NULL) {
100142d2:	b116      	cbz	r6, 100142da <MXC_I2C_RevA_SlaveAsyncHandler+0x252>
                callback(i2c, MXC_I2C_REVA_EVT_MASTER_WR, NULL);
100142d4:	4611      	mov	r1, r2
100142d6:	4620      	mov	r0, r4
100142d8:	47b0      	blx	r6
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
100142da:	2308      	movs	r3, #8
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH;
100142dc:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
100142e0:	60a1      	str	r1, [r4, #8]
            int_en[0] = MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL0_DONE |
100142e2:	f647 7211 	movw	r2, #32529	@ 0x7f11
            i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_ADDR_MATCH;
100142e6:	60a3      	str	r3, [r4, #8]
            int_en[0] = MXC_F_I2C_REVA_INTFL0_RX_THD | MXC_F_I2C_REVA_INTFL0_DONE |
100142e8:	2301      	movs	r3, #1
100142ea:	602a      	str	r2, [r5, #0]
100142ec:	606b      	str	r3, [r5, #4]
}
100142ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (i2c->intfl1 & MXC_F_I2C_REVA_INTFL1_TX_UN) {
100142f2:	6923      	ldr	r3, [r4, #16]
100142f4:	f013 0302 	ands.w	r3, r3, #2
100142f8:	d038      	beq.n	1001436c <MXC_I2C_RevA_SlaveAsyncHandler+0x2e4>
                if (callback != NULL) {
100142fa:	2e00      	cmp	r6, #0
100142fc:	d05b      	beq.n	100143b6 <MXC_I2C_RevA_SlaveAsyncHandler+0x32e>
                    callback(i2c, MXC_I2C_REVA_EVT_UNDERFLOW, NULL);
100142fe:	2200      	movs	r2, #0
10014300:	2105      	movs	r1, #5
10014302:	4620      	mov	r0, r4
10014304:	47b0      	blx	r6
                i2c->intfl1 = MXC_F_I2C_REVA_INTFL1_TX_UN;
10014306:	2302      	movs	r3, #2
10014308:	6123      	str	r3, [r4, #16]
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) {
1001430a:	f1ba 0f00 	cmp.w	sl, #0
1001430e:	d0d1      	beq.n	100142b4 <MXC_I2C_RevA_SlaveAsyncHandler+0x22c>
                *retVal = E_NO_ERROR;
10014310:	2300      	movs	r3, #0
10014312:	f8c8 3000 	str.w	r3, [r8]
                    callback(i2c, MXC_I2C_REVA_EVT_TRANS_COMP, retVal);
10014316:	4642      	mov	r2, r8
10014318:	2104      	movs	r1, #4
1001431a:	4620      	mov	r0, r4
1001431c:	47b0      	blx	r6
                AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
1001431e:	4a10      	ldr	r2, [pc, #64]	@ (10014360 <MXC_I2C_RevA_SlaveAsyncHandler+0x2d8>)
                int_en[0] = 0;
10014320:	2300      	movs	r3, #0
                i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT;
10014322:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
                AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
10014326:	4294      	cmp	r4, r2
                i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT;
10014328:	60a1      	str	r1, [r4, #8]
                int_en[0] = 0;
1001432a:	602b      	str	r3, [r5, #0]
1001432c:	606b      	str	r3, [r5, #4]
                AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
1001432e:	d009      	beq.n	10014344 <MXC_I2C_RevA_SlaveAsyncHandler+0x2bc>
10014330:	4b0c      	ldr	r3, [pc, #48]	@ (10014364 <MXC_I2C_RevA_SlaveAsyncHandler+0x2dc>)
10014332:	429c      	cmp	r4, r3
10014334:	d059      	beq.n	100143ea <MXC_I2C_RevA_SlaveAsyncHandler+0x362>
10014336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001433a:	429c      	cmp	r4, r3
1001433c:	bf0c      	ite	eq
1001433e:	2302      	moveq	r3, #2
10014340:	f04f 33ff 	movne.w	r3, #4294967295	@ 0xffffffff
10014344:	4a08      	ldr	r2, [pc, #32]	@ (10014368 <MXC_I2C_RevA_SlaveAsyncHandler+0x2e0>)
10014346:	2100      	movs	r1, #0
10014348:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
1001434c:	e7b2      	b.n	100142b4 <MXC_I2C_RevA_SlaveAsyncHandler+0x22c>
            if (i2c->intfl1 & MXC_F_I2C_REVA_INTFL1_RX_OV) {
1001434e:	6923      	ldr	r3, [r4, #16]
10014350:	07db      	lsls	r3, r3, #31
10014352:	d5a6      	bpl.n	100142a2 <MXC_I2C_RevA_SlaveAsyncHandler+0x21a>
                if (callback != NULL) {
10014354:	2e00      	cmp	r6, #0
10014356:	f47f aebe 	bne.w	100140d6 <MXC_I2C_RevA_SlaveAsyncHandler+0x4e>
1001435a:	e6c0      	b.n	100140de <MXC_I2C_RevA_SlaveAsyncHandler+0x56>
1001435c:	00c00008 	.word	0x00c00008
10014360:	4001d000 	.word	0x4001d000
10014364:	4001e000 	.word	0x4001e000
10014368:	20000ff8 	.word	0x20000ff8
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) {
1001436c:	f1ba 0f00 	cmp.w	sl, #0
10014370:	d0a0      	beq.n	100142b4 <MXC_I2C_RevA_SlaveAsyncHandler+0x22c>
                *retVal = E_NO_ERROR;
10014372:	f8c8 3000 	str.w	r3, [r8]
                if (callback != NULL) {
10014376:	2e00      	cmp	r6, #0
10014378:	d0d1      	beq.n	1001431e <MXC_I2C_RevA_SlaveAsyncHandler+0x296>
1001437a:	e7cc      	b.n	10014316 <MXC_I2C_RevA_SlaveAsyncHandler+0x28e>
                i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_RX_THD;
1001437c:	2310      	movs	r3, #16
1001437e:	60a3      	str	r3, [r4, #8]
            if (i2c->intfl1 & MXC_F_I2C_REVA_INTFL1_RX_OV) {
10014380:	6923      	ldr	r3, [r4, #16]
10014382:	07d9      	lsls	r1, r3, #31
10014384:	f53f aeab 	bmi.w	100140de <MXC_I2C_RevA_SlaveAsyncHandler+0x56>
10014388:	e6ab      	b.n	100140e2 <MXC_I2C_RevA_SlaveAsyncHandler+0x5a>
                i2c->intfl0 = MXC_F_I2C_REVA_INTFL0_TX_THD;
1001438a:	2320      	movs	r3, #32
1001438c:	60a3      	str	r3, [r4, #8]
            if (i2c->intfl1 & MXC_F_I2C_REVA_INTFL1_TX_UN) {
1001438e:	6923      	ldr	r3, [r4, #16]
10014390:	079a      	lsls	r2, r3, #30
10014392:	d421      	bmi.n	100143d8 <MXC_I2C_RevA_SlaveAsyncHandler+0x350>
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) {
10014394:	f1ba 0f00 	cmp.w	sl, #0
10014398:	d123      	bne.n	100143e2 <MXC_I2C_RevA_SlaveAsyncHandler+0x35a>
        if (tFlags & MXC_F_I2C_REVA_INTFL0_STOP) {
1001439a:	f019 0f40 	tst.w	r9, #64	@ 0x40
1001439e:	d126      	bne.n	100143ee <MXC_I2C_RevA_SlaveAsyncHandler+0x366>
    if (tFlags & MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH) {
100143a0:	f419 0f80 	tst.w	r9, #4194304	@ 0x400000
100143a4:	f47f aee3 	bne.w	1001416e <MXC_I2C_RevA_SlaveAsyncHandler+0xe6>
100143a8:	e6ee      	b.n	10014188 <MXC_I2C_RevA_SlaveAsyncHandler+0x100>
            AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
100143aa:	2301      	movs	r3, #1
100143ac:	e6d3      	b.n	10014156 <MXC_I2C_RevA_SlaveAsyncHandler+0xce>
            AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
100143ae:	2301      	movs	r3, #1
100143b0:	e772      	b.n	10014298 <MXC_I2C_RevA_SlaveAsyncHandler+0x210>
        AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
100143b2:	2301      	movs	r3, #1
100143b4:	e745      	b.n	10014242 <MXC_I2C_RevA_SlaveAsyncHandler+0x1ba>
                i2c->intfl1 = MXC_F_I2C_REVA_INTFL1_TX_UN;
100143b6:	2302      	movs	r3, #2
100143b8:	6123      	str	r3, [r4, #16]
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) {
100143ba:	f1ba 0f00 	cmp.w	sl, #0
100143be:	d110      	bne.n	100143e2 <MXC_I2C_RevA_SlaveAsyncHandler+0x35a>
        if (tFlags & MXC_F_I2C_REVA_INTFL0_STOP) {
100143c0:	f019 0f40 	tst.w	r9, #64	@ 0x40
100143c4:	d113      	bne.n	100143ee <MXC_I2C_RevA_SlaveAsyncHandler+0x366>
    if (tFlags & MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH) {
100143c6:	f419 0f80 	tst.w	r9, #4194304	@ 0x400000
100143ca:	f47f aed0 	bne.w	1001416e <MXC_I2C_RevA_SlaveAsyncHandler+0xe6>
    if (tFlags & MXC_F_I2C_REVA_INTFL0_WR_ADDR_MATCH) {
100143ce:	f419 0f00 	tst.w	r9, #8388608	@ 0x800000
100143d2:	f47f aee1 	bne.w	10014198 <MXC_I2C_RevA_SlaveAsyncHandler+0x110>
100143d6:	e6e9      	b.n	100141ac <MXC_I2C_RevA_SlaveAsyncHandler+0x124>
                i2c->intfl1 = MXC_F_I2C_REVA_INTFL1_TX_UN;
100143d8:	2302      	movs	r3, #2
100143da:	6123      	str	r3, [r4, #16]
            if (tFlags & MXC_F_I2C_REVA_INTFL0_TX_LOCKOUT) {
100143dc:	f1ba 0f00 	cmp.w	sl, #0
100143e0:	d0db      	beq.n	1001439a <MXC_I2C_RevA_SlaveAsyncHandler+0x312>
                *retVal = E_NO_ERROR;
100143e2:	2300      	movs	r3, #0
100143e4:	f8c8 3000 	str.w	r3, [r8]
                if (callback != NULL) {
100143e8:	e799      	b.n	1001431e <MXC_I2C_RevA_SlaveAsyncHandler+0x296>
                AsyncRequests[MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c)] = NULL;
100143ea:	2301      	movs	r3, #1
100143ec:	e7aa      	b.n	10014344 <MXC_I2C_RevA_SlaveAsyncHandler+0x2bc>
            *retVal = E_NO_ERROR;
100143ee:	f8c8 6000 	str.w	r6, [r8]
            if (callback != NULL) {
100143f2:	e69d      	b.n	10014130 <MXC_I2C_RevA_SlaveAsyncHandler+0xa8>
    if (tFlags & MXC_F_I2C_REVA_INTFL0_RD_ADDR_MATCH) {
100143f4:	f419 0f80 	tst.w	r9, #4194304	@ 0x400000
100143f8:	f47f aeb5 	bne.w	10014166 <MXC_I2C_RevA_SlaveAsyncHandler+0xde>
100143fc:	e6c4      	b.n	10014188 <MXC_I2C_RevA_SlaveAsyncHandler+0x100>
        if (int_en[0] & MXC_F_I2C_REVA_INTFL0_RX_THD || int_en[1] & MXC_F_I2C_REVA_INTFL1_RX_OV) {
100143fe:	686b      	ldr	r3, [r5, #4]
10014400:	07d8      	lsls	r0, r3, #31
10014402:	f53f ae58 	bmi.w	100140b6 <MXC_I2C_RevA_SlaveAsyncHandler+0x2e>
10014406:	e74c      	b.n	100142a2 <MXC_I2C_RevA_SlaveAsyncHandler+0x21a>

10014408 <MXC_I2C_RevA_AsyncHandler>:

void MXC_I2C_RevA_AsyncHandler(mxc_i2c_reva_regs_t *i2c, uint32_t interruptCheck)
{
10014408:	b530      	push	{r4, r5, lr}
    int i2cNum = MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c);
1001440a:	4b17      	ldr	r3, [pc, #92]	@ (10014468 <MXC_I2C_RevA_AsyncHandler+0x60>)
1001440c:	4298      	cmp	r0, r3
{
1001440e:	b085      	sub	sp, #20
10014410:	4604      	mov	r4, r0
    int i2cNum = MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c);
10014412:	d024      	beq.n	1001445e <MXC_I2C_RevA_AsyncHandler+0x56>
10014414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014418:	4298      	cmp	r0, r3
1001441a:	d005      	beq.n	10014428 <MXC_I2C_RevA_AsyncHandler+0x20>
1001441c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014420:	4298      	cmp	r0, r3
10014422:	d01e      	beq.n	10014462 <MXC_I2C_RevA_AsyncHandler+0x5a>
        MXC_I2C_RevA_SlaveAsyncHandler(i2c, callback, int_en, &slaveRetVal);

        i2c->inten0 = int_en[0];
        i2c->inten1 = int_en[1];
    }
}
10014424:	b005      	add	sp, #20
10014426:	bd30      	pop	{r4, r5, pc}
    int i2cNum = MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c);
10014428:	2001      	movs	r0, #1
    if (i2c->ctrl & MXC_F_I2C_REVA_CTRL_MST_MODE) {
1001442a:	6823      	ldr	r3, [r4, #0]
1001442c:	079b      	lsls	r3, r3, #30
1001442e:	d504      	bpl.n	1001443a <MXC_I2C_RevA_AsyncHandler+0x32>
}
10014430:	b005      	add	sp, #20
10014432:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        MXC_I2C_RevA_MasterAsyncHandler(i2cNum);
10014436:	f7ff bc8b 	b.w	10013d50 <MXC_I2C_RevA_MasterAsyncHandler>
        int_en[0] = i2c->inten0;
1001443a:	68e5      	ldr	r5, [r4, #12]
        mxc_i2c_reva_slave_handler_t callback = (mxc_i2c_reva_slave_handler_t)AsyncRequests[i2cNum];
1001443c:	4b0b      	ldr	r3, [pc, #44]	@ (1001446c <MXC_I2C_RevA_AsyncHandler+0x64>)
        int_en[1] = i2c->inten1;
1001443e:	6962      	ldr	r2, [r4, #20]
        MXC_I2C_RevA_SlaveAsyncHandler(i2c, callback, int_en, &slaveRetVal);
10014440:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
        int_en[1] = i2c->inten1;
10014444:	e9cd 5202 	strd	r5, r2, [sp, #8]
        MXC_I2C_RevA_SlaveAsyncHandler(i2c, callback, int_en, &slaveRetVal);
10014448:	ab01      	add	r3, sp, #4
1001444a:	aa02      	add	r2, sp, #8
1001444c:	4620      	mov	r0, r4
1001444e:	f7ff fe1b 	bl	10014088 <MXC_I2C_RevA_SlaveAsyncHandler>
        i2c->inten1 = int_en[1];
10014452:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        i2c->inten0 = int_en[0];
10014456:	60e2      	str	r2, [r4, #12]
        i2c->inten1 = int_en[1];
10014458:	6163      	str	r3, [r4, #20]
}
1001445a:	b005      	add	sp, #20
1001445c:	bd30      	pop	{r4, r5, pc}
    int i2cNum = MXC_I2C_GET_IDX((mxc_i2c_regs_t *)i2c);
1001445e:	2000      	movs	r0, #0
10014460:	e7e3      	b.n	1001442a <MXC_I2C_RevA_AsyncHandler+0x22>
10014462:	2002      	movs	r0, #2
10014464:	e7e1      	b.n	1001442a <MXC_I2C_RevA_AsyncHandler+0x22>
10014466:	bf00      	nop
10014468:	4001d000 	.word	0x4001d000
1001446c:	20000ff8 	.word	0x20000ff8

10014470 <MXC_ICC_Enable>:
    return MXC_ICC_RevA_ID((mxc_icc_reva_regs_t *)icc, cid);
}

void MXC_ICC_Enable(mxc_icc_regs_t *icc)
{
    MXC_ICC_RevA_Enable((mxc_icc_reva_regs_t *)icc);
10014470:	f000 b802 	b.w	10014478 <MXC_ICC_RevA_Enable>

10014474 <MXC_ICC_Disable>:
}

void MXC_ICC_Disable(mxc_icc_regs_t *icc)
{
    MXC_ICC_RevA_Disable((mxc_icc_reva_regs_t *)icc);
10014474:	f000 b818 	b.w	100144a8 <MXC_ICC_RevA_Disable>

10014478 <MXC_ICC_RevA_Enable>:
}

void MXC_ICC_RevA_Enable(mxc_icc_reva_regs_t *icc)
{
    // Invalidate cache and wait until ready
    icc->ctrl &= ~MXC_F_ICC_REVA_CTRL_EN;
10014478:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
    icc->invalidate = 1;
1001447c:	2201      	movs	r2, #1
    icc->ctrl &= ~MXC_F_ICC_REVA_CTRL_EN;
1001447e:	f023 0301 	bic.w	r3, r3, #1
10014482:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
    icc->invalidate = 1;
10014486:	f8c0 2700 	str.w	r2, [r0, #1792]	@ 0x700
    return (icc->ctrl & MXC_F_ICC_REVA_CTRL_RDY);
1001448a:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100

    while (!(MXC_ICC_Ready(icc))) {}
1001448e:	03da      	lsls	r2, r3, #15
10014490:	d5fb      	bpl.n	1001448a <MXC_ICC_RevA_Enable+0x12>

    // Enable Cache
    icc->ctrl |= MXC_F_ICC_REVA_CTRL_EN;
10014492:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
10014496:	f043 0301 	orr.w	r3, r3, #1
1001449a:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
    return (icc->ctrl & MXC_F_ICC_REVA_CTRL_RDY);
1001449e:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
    while (!(MXC_ICC_Ready(icc))) {}
100144a2:	03db      	lsls	r3, r3, #15
100144a4:	d5fb      	bpl.n	1001449e <MXC_ICC_RevA_Enable+0x26>
}
100144a6:	4770      	bx	lr

100144a8 <MXC_ICC_RevA_Disable>:

void MXC_ICC_RevA_Disable(mxc_icc_reva_regs_t *icc)
{
    // Disable Cache
    icc->ctrl &= ~MXC_F_ICC_REVA_CTRL_EN;
100144a8:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
100144ac:	f023 0301 	bic.w	r3, r3, #1
100144b0:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
}
100144b4:	4770      	bx	lr
100144b6:	bf00      	nop

100144b8 <MXC_UART_Shutdown>:

    return MXC_UART_RevB_Init((mxc_uart_revb_regs_t *)uart, baud, clock);
}

int MXC_UART_Shutdown(mxc_uart_regs_t *uart)
{
100144b8:	b508      	push	{r3, lr}
    switch (MXC_UART_GET_IDX(uart)) {
100144ba:	4b16      	ldr	r3, [pc, #88]	@ (10014514 <MXC_UART_Shutdown+0x5c>)
100144bc:	4298      	cmp	r0, r3
100144be:	d010      	beq.n	100144e2 <MXC_UART_Shutdown+0x2a>
100144c0:	4b15      	ldr	r3, [pc, #84]	@ (10014518 <MXC_UART_Shutdown+0x60>)
100144c2:	4298      	cmp	r0, r3
100144c4:	d014      	beq.n	100144f0 <MXC_UART_Shutdown+0x38>
100144c6:	4b15      	ldr	r3, [pc, #84]	@ (1001451c <MXC_UART_Shutdown+0x64>)
100144c8:	4298      	cmp	r0, r3
100144ca:	d018      	beq.n	100144fe <MXC_UART_Shutdown+0x46>
100144cc:	4b14      	ldr	r3, [pc, #80]	@ (10014520 <MXC_UART_Shutdown+0x68>)
100144ce:	4298      	cmp	r0, r3
100144d0:	d11c      	bne.n	1001450c <MXC_UART_Shutdown+0x54>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET0_UART2);
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_UART2);
        break;

    case 3:
        MXC_SYS_Reset_Periph(MXC_SYS_RESET_UART3);
100144d2:	2044      	movs	r0, #68	@ 0x44
100144d4:	f7fe fec0 	bl	10013258 <MXC_SYS_Reset_Periph>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_UART3);
100144d8:	2044      	movs	r0, #68	@ 0x44
100144da:	f7fe fe01 	bl	100130e0 <MXC_SYS_ClockDisable>

    default:
        return E_BAD_PARAM;
    }

    return E_NO_ERROR;
100144de:	2000      	movs	r0, #0
}
100144e0:	bd08      	pop	{r3, pc}
        MXC_SYS_Reset_Periph(MXC_SYS_RESET0_UART0);
100144e2:	200b      	movs	r0, #11
100144e4:	f7fe feb8 	bl	10013258 <MXC_SYS_Reset_Periph>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_UART0);
100144e8:	2009      	movs	r0, #9
100144ea:	f7fe fdf9 	bl	100130e0 <MXC_SYS_ClockDisable>
        break;
100144ee:	e7f6      	b.n	100144de <MXC_UART_Shutdown+0x26>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET0_UART1);
100144f0:	200c      	movs	r0, #12
100144f2:	f7fe feb1 	bl	10013258 <MXC_SYS_Reset_Periph>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_UART1);
100144f6:	200a      	movs	r0, #10
100144f8:	f7fe fdf2 	bl	100130e0 <MXC_SYS_ClockDisable>
        break;
100144fc:	e7ef      	b.n	100144de <MXC_UART_Shutdown+0x26>
        MXC_SYS_Reset_Periph(MXC_SYS_RESET0_UART2);
100144fe:	201c      	movs	r0, #28
10014500:	f7fe feaa 	bl	10013258 <MXC_SYS_Reset_Periph>
        MXC_SYS_ClockDisable(MXC_SYS_PERIPH_CLOCK_UART2);
10014504:	2021      	movs	r0, #33	@ 0x21
10014506:	f7fe fdeb 	bl	100130e0 <MXC_SYS_ClockDisable>
        break;
1001450a:	e7e8      	b.n	100144de <MXC_UART_Shutdown+0x26>
        return E_BAD_PARAM;
1001450c:	f06f 0002 	mvn.w	r0, #2
}
10014510:	bd08      	pop	{r3, pc}
10014512:	bf00      	nop
10014514:	40042000 	.word	0x40042000
10014518:	40043000 	.word	0x40043000
1001451c:	40044000 	.word	0x40044000
10014520:	40081400 	.word	0x40081400

10014524 <MXC_UART_Init>:
{
10014524:	b570      	push	{r4, r5, r6, lr}
10014526:	4604      	mov	r4, r0
10014528:	460e      	mov	r6, r1
1001452a:	4615      	mov	r5, r2
    retval = MXC_UART_Shutdown(uart);
1001452c:	f7ff ffc4 	bl	100144b8 <MXC_UART_Shutdown>
    if (retval) {
10014530:	bba8      	cbnz	r0, 1001459e <MXC_UART_Init+0x7a>
    switch (clock) {
10014532:	2d02      	cmp	r5, #2
10014534:	d02d      	beq.n	10014592 <MXC_UART_Init+0x6e>
10014536:	2d04      	cmp	r5, #4
10014538:	d018      	beq.n	1001456c <MXC_UART_Init+0x48>
    switch (MXC_UART_GET_IDX(uart)) {
1001453a:	4b20      	ldr	r3, [pc, #128]	@ (100145bc <MXC_UART_Init+0x98>)
1001453c:	429c      	cmp	r4, r3
1001453e:	d01b      	beq.n	10014578 <MXC_UART_Init+0x54>
10014540:	4b1f      	ldr	r3, [pc, #124]	@ (100145c0 <MXC_UART_Init+0x9c>)
10014542:	429c      	cmp	r4, r3
10014544:	d02c      	beq.n	100145a0 <MXC_UART_Init+0x7c>
10014546:	4b1f      	ldr	r3, [pc, #124]	@ (100145c4 <MXC_UART_Init+0xa0>)
10014548:	429c      	cmp	r4, r3
1001454a:	d030      	beq.n	100145ae <MXC_UART_Init+0x8a>
1001454c:	4b1e      	ldr	r3, [pc, #120]	@ (100145c8 <MXC_UART_Init+0xa4>)
1001454e:	429c      	cmp	r4, r3
10014550:	d123      	bne.n	1001459a <MXC_UART_Init+0x76>
        MXC_GPIO_Config(&gpio_cfg_uart3);
10014552:	481e      	ldr	r0, [pc, #120]	@ (100145cc <MXC_UART_Init+0xa8>)
10014554:	f7fe ff1a 	bl	1001338c <MXC_GPIO_Config>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_UART3);
10014558:	2044      	movs	r0, #68	@ 0x44
1001455a:	f7fe fde1 	bl	10013120 <MXC_SYS_ClockEnable>
    return MXC_UART_RevB_Init((mxc_uart_revb_regs_t *)uart, baud, clock);
1001455e:	462a      	mov	r2, r5
10014560:	4631      	mov	r1, r6
10014562:	4620      	mov	r0, r4
}
10014564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return MXC_UART_RevB_Init((mxc_uart_revb_regs_t *)uart, baud, clock);
10014568:	f000 b8f8 	b.w	1001475c <MXC_UART_RevB_Init>
        MXC_SYS_ClockSourceEnable(MXC_SYS_CLOCK_ERTCO);
1001456c:	2006      	movs	r0, #6
1001456e:	f7fe fdf9 	bl	10013164 <MXC_SYS_ClockSourceEnable>
    switch (MXC_UART_GET_IDX(uart)) {
10014572:	4b12      	ldr	r3, [pc, #72]	@ (100145bc <MXC_UART_Init+0x98>)
10014574:	429c      	cmp	r4, r3
10014576:	d1e3      	bne.n	10014540 <MXC_UART_Init+0x1c>
        MXC_GPIO_Config(&gpio_cfg_uart0);
10014578:	4815      	ldr	r0, [pc, #84]	@ (100145d0 <MXC_UART_Init+0xac>)
1001457a:	f7fe ff07 	bl	1001338c <MXC_GPIO_Config>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_UART0);
1001457e:	2009      	movs	r0, #9
10014580:	f7fe fdce 	bl	10013120 <MXC_SYS_ClockEnable>
    return MXC_UART_RevB_Init((mxc_uart_revb_regs_t *)uart, baud, clock);
10014584:	462a      	mov	r2, r5
10014586:	4631      	mov	r1, r6
10014588:	4620      	mov	r0, r4
}
1001458a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return MXC_UART_RevB_Init((mxc_uart_revb_regs_t *)uart, baud, clock);
1001458e:	f000 b8e5 	b.w	1001475c <MXC_UART_RevB_Init>
        MXC_SYS_ClockSourceEnable(MXC_SYS_CLOCK_IBRO);
10014592:	2005      	movs	r0, #5
10014594:	f7fe fde6 	bl	10013164 <MXC_SYS_ClockSourceEnable>
        break;
10014598:	e7cf      	b.n	1001453a <MXC_UART_Init+0x16>
        return E_BAD_PARAM;
1001459a:	f06f 0002 	mvn.w	r0, #2
}
1001459e:	bd70      	pop	{r4, r5, r6, pc}
        MXC_GPIO_Config(&gpio_cfg_uart1);
100145a0:	480c      	ldr	r0, [pc, #48]	@ (100145d4 <MXC_UART_Init+0xb0>)
100145a2:	f7fe fef3 	bl	1001338c <MXC_GPIO_Config>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_UART1);
100145a6:	200a      	movs	r0, #10
100145a8:	f7fe fdba 	bl	10013120 <MXC_SYS_ClockEnable>
        break;
100145ac:	e7d7      	b.n	1001455e <MXC_UART_Init+0x3a>
        MXC_GPIO_Config(&gpio_cfg_uart2);
100145ae:	480a      	ldr	r0, [pc, #40]	@ (100145d8 <MXC_UART_Init+0xb4>)
100145b0:	f7fe feec 	bl	1001338c <MXC_GPIO_Config>
        MXC_SYS_ClockEnable(MXC_SYS_PERIPH_CLOCK_UART2);
100145b4:	2021      	movs	r0, #33	@ 0x21
100145b6:	f7fe fdb3 	bl	10013120 <MXC_SYS_ClockEnable>
        break;
100145ba:	e7d0      	b.n	1001455e <MXC_UART_Init+0x3a>
100145bc:	40042000 	.word	0x40042000
100145c0:	40043000 	.word	0x40043000
100145c4:	40044000 	.word	0x40044000
100145c8:	40081400 	.word	0x40081400
100145cc:	10025384 	.word	0x10025384
100145d0:	100253a8 	.word	0x100253a8
100145d4:	1002539c 	.word	0x1002539c
100145d8:	10025390 	.word	0x10025390

100145dc <MXC_UART_SetFrequency>:
}

int MXC_UART_SetFrequency(mxc_uart_regs_t *uart, unsigned int baud, mxc_uart_clock_t clock)
{
    int frequency, clkDiv = 0, mod = 0;
    if (MXC_UART_GET_IDX(uart) < 0) {
100145dc:	4b31      	ldr	r3, [pc, #196]	@ (100146a4 <MXC_UART_SetFrequency+0xc8>)
100145de:	4298      	cmp	r0, r3
{
100145e0:	b510      	push	{r4, lr}
100145e2:	4604      	mov	r4, r0
    if (MXC_UART_GET_IDX(uart) < 0) {
100145e4:	d015      	beq.n	10014612 <MXC_UART_SetFrequency+0x36>
100145e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100145ea:	4298      	cmp	r0, r3
100145ec:	d011      	beq.n	10014612 <MXC_UART_SetFrequency+0x36>
100145ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100145f2:	4298      	cmp	r0, r3
100145f4:	d00d      	beq.n	10014612 <MXC_UART_SetFrequency+0x36>
100145f6:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
100145fa:	4298      	cmp	r0, r3
100145fc:	d106      	bne.n	1001460c <MXC_UART_SetFrequency+0x30>
    }

    // check if the uart is LPUART
    if (uart == MXC_UART3) {
        // OSR default value
        uart->osr = 5;
100145fe:	2305      	movs	r3, #5

        switch (clock) {
10014600:	2a02      	cmp	r2, #2
        uart->osr = 5;
10014602:	6143      	str	r3, [r0, #20]
        switch (clock) {
10014604:	d014      	beq.n	10014630 <MXC_UART_SetFrequency+0x54>
10014606:	2a04      	cmp	r2, #4
10014608:	d032      	beq.n	10014670 <MXC_UART_SetFrequency+0x94>
1001460a:	b18a      	cbz	r2, 10014630 <MXC_UART_SetFrequency+0x54>
        return E_BAD_PARAM;
1001460c:	f06f 0002 	mvn.w	r0, #2
        uart->ctrl |= MXC_F_UART_CTRL_BCLKEN;
        while (((uart->ctrl & MXC_F_UART_CTRL_BCLKRDY) >> MXC_F_UART_CTRL_BCLKRDY_POS) == 0) {}
    }

    return frequency;
}
10014610:	bd10      	pop	{r4, pc}
        if (clock == MXC_UART_ERTCO_CLK) {
10014612:	2a04      	cmp	r2, #4
10014614:	d0fa      	beq.n	1001460c <MXC_UART_SetFrequency+0x30>
        frequency = MXC_UART_RevB_SetFrequency((mxc_uart_revb_regs_t *)uart, baud, clock);
10014616:	4620      	mov	r0, r4
10014618:	f000 f8d8 	bl	100147cc <MXC_UART_RevB_SetFrequency>
    if (frequency > 0) {
1001461c:	2800      	cmp	r0, #0
1001461e:	ddf7      	ble.n	10014610 <MXC_UART_SetFrequency+0x34>
        uart->ctrl |= MXC_F_UART_CTRL_BCLKEN;
10014620:	6823      	ldr	r3, [r4, #0]
10014622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
10014626:	6023      	str	r3, [r4, #0]
        while (((uart->ctrl & MXC_F_UART_CTRL_BCLKRDY) >> MXC_F_UART_CTRL_BCLKRDY_POS) == 0) {}
10014628:	6823      	ldr	r3, [r4, #0]
1001462a:	031b      	lsls	r3, r3, #12
1001462c:	d5fc      	bpl.n	10014628 <MXC_UART_SetFrequency+0x4c>
}
1001462e:	bd10      	pop	{r4, pc}
            clkDiv = ((IBRO_FREQ) / baud);
10014630:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
10014634:	fbb3 f3f1 	udiv	r3, r3, r1
            mod = ((IBRO_FREQ) % baud);
10014638:	fb01 f203 	mul.w	r2, r1, r3
1001463c:	f5c2 02e1 	rsb	r2, r2, #7372800	@ 0x708000
        if (!clkDiv || mod > (baud / 2)) {
10014640:	b113      	cbz	r3, 10014648 <MXC_UART_SetFrequency+0x6c>
10014642:	ebb2 0f51 	cmp.w	r2, r1, lsr #1
10014646:	d900      	bls.n	1001464a <MXC_UART_SetFrequency+0x6e>
            clkDiv++;
10014648:	3301      	adds	r3, #1
        uart->clkdiv = clkDiv;
1001464a:	4a17      	ldr	r2, [pc, #92]	@ (100146a8 <MXC_UART_SetFrequency+0xcc>)
1001464c:	6113      	str	r3, [r2, #16]
        return E_BAD_PARAM;
    }

    // check if UARt is LP UART
    if (uart == MXC_UART3) {
        if ((uart->ctrl & MXC_F_UART_CTRL_BCLKSRC) == MXC_S_UART_CTRL_BCLKSRC_EXTERNAL_CLOCK) {
1001464e:	6810      	ldr	r0, [r2, #0]
10014650:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
10014654:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
10014658:	d005      	beq.n	10014666 <MXC_UART_SetFrequency+0x8a>
            periphClock = ERTCO_FREQ * 2;
        } else if ((uart->ctrl & MXC_F_UART_CTRL_BCLKSRC) ==
1001465a:	6813      	ldr	r3, [r2, #0]
1001465c:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
10014660:	d1d4      	bne.n	1001460c <MXC_UART_SetFrequency+0x30>
10014662:	f44f 00e1 	mov.w	r0, #7372800	@ 0x708000
                   MXC_S_UART_CTRL_BCLKSRC_PERIPHERAL_CLOCK) {
            periphClock = IBRO_FREQ;
        } else {
            return E_BAD_PARAM;
        }
        return (periphClock / uart->clkdiv);
10014666:	4b10      	ldr	r3, [pc, #64]	@ (100146a8 <MXC_UART_SetFrequency+0xcc>)
10014668:	691b      	ldr	r3, [r3, #16]
1001466a:	fbb0 f0f3 	udiv	r0, r0, r3
1001466e:	e7d5      	b.n	1001461c <MXC_UART_SetFrequency+0x40>
            uart->ctrl |= MXC_S_UART_CTRL_BCLKSRC_EXTERNAL_CLOCK;
10014670:	6803      	ldr	r3, [r0, #0]
10014672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10014676:	6003      	str	r3, [r0, #0]
            uart->ctrl |= MXC_F_UART_CTRL_FDM;
10014678:	6803      	ldr	r3, [r0, #0]
            if (baud > 2400) {
1001467a:	f5b1 6f16 	cmp.w	r1, #2400	@ 0x960
            uart->ctrl |= MXC_F_UART_CTRL_FDM;
1001467e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
10014682:	6003      	str	r3, [r0, #0]
            if (baud > 2400) {
10014684:	d90a      	bls.n	1001469c <MXC_UART_SetFrequency+0xc0>
                uart->osr = 0;
10014686:	2300      	movs	r3, #0
10014688:	6143      	str	r3, [r0, #20]
            clkDiv = ((ERTCO_FREQ * 2) / baud);
1001468a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
1001468e:	fbb3 f3f1 	udiv	r3, r3, r1
            mod = ((ERTCO_FREQ * 2) % baud);
10014692:	fb01 f203 	mul.w	r2, r1, r3
10014696:	f5c2 3280 	rsb	r2, r2, #65536	@ 0x10000
1001469a:	e7d1      	b.n	10014640 <MXC_UART_SetFrequency+0x64>
                uart->osr = 1;
1001469c:	2301      	movs	r3, #1
1001469e:	6143      	str	r3, [r0, #20]
100146a0:	e7f3      	b.n	1001468a <MXC_UART_SetFrequency+0xae>
100146a2:	bf00      	nop
100146a4:	40042000 	.word	0x40042000
100146a8:	40081400 	.word	0x40081400

100146ac <MXC_UART_GetFrequency>:
    if (MXC_UART_GET_IDX(uart) < 0) {
100146ac:	4b12      	ldr	r3, [pc, #72]	@ (100146f8 <MXC_UART_GetFrequency+0x4c>)
100146ae:	4298      	cmp	r0, r3
100146b0:	d01c      	beq.n	100146ec <MXC_UART_GetFrequency+0x40>
100146b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100146b6:	4298      	cmp	r0, r3
100146b8:	d018      	beq.n	100146ec <MXC_UART_GetFrequency+0x40>
100146ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100146be:	4298      	cmp	r0, r3
100146c0:	d014      	beq.n	100146ec <MXC_UART_GetFrequency+0x40>
100146c2:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
100146c6:	4298      	cmp	r0, r3
100146c8:	d112      	bne.n	100146f0 <MXC_UART_GetFrequency+0x44>
        if ((uart->ctrl & MXC_F_UART_CTRL_BCLKSRC) == MXC_S_UART_CTRL_BCLKSRC_EXTERNAL_CLOCK) {
100146ca:	6803      	ldr	r3, [r0, #0]
100146cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
100146d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
100146d4:	d005      	beq.n	100146e2 <MXC_UART_GetFrequency+0x36>
        } else if ((uart->ctrl & MXC_F_UART_CTRL_BCLKSRC) ==
100146d6:	6803      	ldr	r3, [r0, #0]
100146d8:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
100146dc:	d108      	bne.n	100146f0 <MXC_UART_GetFrequency+0x44>
100146de:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
        return (periphClock / uart->clkdiv);
100146e2:	4a06      	ldr	r2, [pc, #24]	@ (100146fc <MXC_UART_GetFrequency+0x50>)
100146e4:	6910      	ldr	r0, [r2, #16]
100146e6:	fbb3 f0f0 	udiv	r0, r3, r0
100146ea:	4770      	bx	lr
    } else {
        return MXC_UART_RevB_GetFrequency((mxc_uart_revb_regs_t *)uart);
100146ec:	f000 b8ba 	b.w	10014864 <MXC_UART_RevB_GetFrequency>
        return E_BAD_PARAM;
100146f0:	f06f 0002 	mvn.w	r0, #2
    }
}
100146f4:	4770      	bx	lr
100146f6:	bf00      	nop
100146f8:	40042000 	.word	0x40042000
100146fc:	40081400 	.word	0x40081400

10014700 <MXC_UART_SetDataSize>:

int MXC_UART_SetDataSize(mxc_uart_regs_t *uart, int dataSize)
{
    return MXC_UART_RevB_SetDataSize((mxc_uart_revb_regs_t *)uart, dataSize);
10014700:	f000 b8f0 	b.w	100148e4 <MXC_UART_RevB_SetDataSize>

10014704 <MXC_UART_SetStopBits>:
}

int MXC_UART_SetStopBits(mxc_uart_regs_t *uart, mxc_uart_stop_t stopBits)
{
    return MXC_UART_RevB_SetStopBits((mxc_uart_revb_regs_t *)uart, stopBits);
10014704:	f000 b90e 	b.w	10014924 <MXC_UART_RevB_SetStopBits>

10014708 <MXC_UART_SetParity>:
}

int MXC_UART_SetParity(mxc_uart_regs_t *uart, mxc_uart_parity_t parity)
{
    return MXC_UART_RevB_SetParity((mxc_uart_revb_regs_t *)uart, parity);
10014708:	f000 b930 	b.w	1001496c <MXC_UART_RevB_SetParity>

1001470c <MXC_UART_ReadCharacterRaw>:
    return MXC_UART_RevB_AbortTransmission((mxc_uart_revb_regs_t *)uart);
}

int MXC_UART_ReadCharacterRaw(mxc_uart_regs_t *uart)
{
    return MXC_UART_RevB_ReadCharacterRaw((mxc_uart_revb_regs_t *)uart);
1001470c:	f000 b984 	b.w	10014a18 <MXC_UART_RevB_ReadCharacterRaw>

10014710 <MXC_UART_WriteCharacterRaw>:
}

int MXC_UART_WriteCharacterRaw(mxc_uart_regs_t *uart, uint8_t character)
{
    return MXC_UART_RevB_WriteCharacterRaw((mxc_uart_revb_regs_t *)uart, character);
10014710:	f000 b99e 	b.w	10014a50 <MXC_UART_RevB_WriteCharacterRaw>

10014714 <MXC_UART_ReadCharacter>:
}

int MXC_UART_ReadCharacter(mxc_uart_regs_t *uart)
{
    return MXC_UART_Common_ReadCharacter(uart);
10014714:	f000 b808 	b.w	10014728 <MXC_UART_Common_ReadCharacter>

10014718 <MXC_UART_WriteCharacter>:
}

int MXC_UART_WriteCharacter(mxc_uart_regs_t *uart, uint8_t character)
{
    return MXC_UART_Common_WriteCharacter(uart, character);
10014718:	f000 b812 	b.w	10014740 <MXC_UART_Common_WriteCharacter>

1001471c <MXC_UART_GetRXFIFOAvailable>:
    return MXC_UART_RevB_ReadRXFIFODMA((mxc_uart_revb_regs_t *)uart, bytes, len, callback, config);
}

unsigned int MXC_UART_GetRXFIFOAvailable(mxc_uart_regs_t *uart)
{
    return MXC_UART_RevB_GetRXFIFOAvailable((mxc_uart_revb_regs_t *)uart);
1001471c:	f000 b9b6 	b.w	10014a8c <MXC_UART_RevB_GetRXFIFOAvailable>

10014720 <MXC_UART_GetTXFIFOAvailable>:
    return MXC_UART_RevB_WriteTXFIFODMA((mxc_uart_revb_regs_t *)uart, bytes, len, callback, config);
}

unsigned int MXC_UART_GetTXFIFOAvailable(mxc_uart_regs_t *uart)
{
    return MXC_UART_RevB_GetTXFIFOAvailable((mxc_uart_revb_regs_t *)uart);
10014720:	f000 b9b8 	b.w	10014a94 <MXC_UART_RevB_GetTXFIFOAvailable>

10014724 <MXC_UART_SetRXThreshold>:
    return MXC_UART_RevB_ClearTXFIFO((mxc_uart_revb_regs_t *)uart);
}

int MXC_UART_SetRXThreshold(mxc_uart_regs_t *uart, unsigned int numBytes)
{
    return MXC_UART_RevB_SetRXThreshold((mxc_uart_revb_regs_t *)uart, numBytes);
10014724:	f000 b9bc 	b.w	10014aa0 <MXC_UART_RevB_SetRXThreshold>

10014728 <MXC_UART_Common_ReadCharacter>:

#include "uart_common.h"
#include "uart.h"

int MXC_UART_Common_ReadCharacter(mxc_uart_regs_t *uart)
{
10014728:	b510      	push	{r4, lr}
1001472a:	4604      	mov	r4, r0
    // Wait until FIFO has a character ready.
    while (MXC_UART_GetRXFIFOAvailable(uart) < 1) {}
1001472c:	4620      	mov	r0, r4
1001472e:	f7ff fff5 	bl	1001471c <MXC_UART_GetRXFIFOAvailable>
10014732:	2800      	cmp	r0, #0
10014734:	d0fa      	beq.n	1001472c <MXC_UART_Common_ReadCharacter+0x4>

    // Read the character using the non-blocking function.
    return MXC_UART_ReadCharacterRaw(uart);
10014736:	4620      	mov	r0, r4
}
10014738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return MXC_UART_ReadCharacterRaw(uart);
1001473c:	f7ff bfe6 	b.w	1001470c <MXC_UART_ReadCharacterRaw>

10014740 <MXC_UART_Common_WriteCharacter>:

int MXC_UART_Common_WriteCharacter(mxc_uart_regs_t *uart, uint8_t character)
{
10014740:	b538      	push	{r3, r4, r5, lr}
10014742:	4604      	mov	r4, r0
10014744:	460d      	mov	r5, r1
    // Wait until FIFO has space for the character.
    while (MXC_UART_GetTXFIFOAvailable(uart) < 1) {}
10014746:	4620      	mov	r0, r4
10014748:	f7ff ffea 	bl	10014720 <MXC_UART_GetTXFIFOAvailable>
1001474c:	2800      	cmp	r0, #0
1001474e:	d0fa      	beq.n	10014746 <MXC_UART_Common_WriteCharacter+0x6>

    // Write the character using the non-blocking function.
    return MXC_UART_WriteCharacterRaw(uart, character);
10014750:	4629      	mov	r1, r5
10014752:	4620      	mov	r0, r4
}
10014754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return MXC_UART_WriteCharacterRaw(uart, character);
10014758:	f7ff bfda 	b.w	10014710 <MXC_UART_WriteCharacterRaw>

1001475c <MXC_UART_RevB_Init>:
/* ************************************************************************* */
int MXC_UART_RevB_Init(mxc_uart_revb_regs_t *uart, unsigned int baud, mxc_uart_revb_clock_t clock)
{
    int err;

    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
1001475c:	4b1a      	ldr	r3, [pc, #104]	@ (100147c8 <MXC_UART_RevB_Init+0x6c>)
1001475e:	4298      	cmp	r0, r3
{
10014760:	b570      	push	{r4, r5, r6, lr}
10014762:	4604      	mov	r4, r0
10014764:	460d      	mov	r5, r1
10014766:	4616      	mov	r6, r2
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
10014768:	d00b      	beq.n	10014782 <MXC_UART_RevB_Init+0x26>
1001476a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001476e:	4298      	cmp	r0, r3
10014770:	d007      	beq.n	10014782 <MXC_UART_RevB_Init+0x26>
10014772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014776:	4298      	cmp	r0, r3
10014778:	d003      	beq.n	10014782 <MXC_UART_RevB_Init+0x26>
1001477a:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
1001477e:	4298      	cmp	r0, r3
10014780:	d11f      	bne.n	100147c2 <MXC_UART_RevB_Init+0x66>
        return E_BAD_PARAM;
    }

    // Initialize UART
    if ((err = MXC_UART_SetRXThreshold((mxc_uart_regs_t *)uart, 1)) !=
10014782:	2101      	movs	r1, #1
10014784:	4620      	mov	r0, r4
10014786:	f7ff ffcd 	bl	10014724 <MXC_UART_SetRXThreshold>
1001478a:	b100      	cbz	r0, 1001478e <MXC_UART_RevB_Init+0x32>
        E_NO_ERROR) {
        return err;
    }

    return E_NO_ERROR;
}
1001478c:	bd70      	pop	{r4, r5, r6, pc}
    if ((err = MXC_UART_SetDataSize((mxc_uart_regs_t *)uart, 8)) !=
1001478e:	2108      	movs	r1, #8
10014790:	4620      	mov	r0, r4
10014792:	f7ff ffb5 	bl	10014700 <MXC_UART_SetDataSize>
10014796:	2800      	cmp	r0, #0
10014798:	d1f8      	bne.n	1001478c <MXC_UART_RevB_Init+0x30>
    if ((err = MXC_UART_SetParity((mxc_uart_regs_t *)uart, MXC_UART_PARITY_DISABLE)) !=
1001479a:	4601      	mov	r1, r0
1001479c:	4620      	mov	r0, r4
1001479e:	f7ff ffb3 	bl	10014708 <MXC_UART_SetParity>
100147a2:	2800      	cmp	r0, #0
100147a4:	d1f2      	bne.n	1001478c <MXC_UART_RevB_Init+0x30>
    if ((err = MXC_UART_SetStopBits((mxc_uart_regs_t *)uart, MXC_UART_STOP_1)) != E_NO_ERROR) {
100147a6:	4601      	mov	r1, r0
100147a8:	4620      	mov	r0, r4
100147aa:	f7ff ffab 	bl	10014704 <MXC_UART_SetStopBits>
100147ae:	2800      	cmp	r0, #0
100147b0:	d1ec      	bne.n	1001478c <MXC_UART_RevB_Init+0x30>
    if ((err = MXC_UART_SetFrequency((mxc_uart_regs_t *)uart, baud, (mxc_uart_clock_t)clock)) <
100147b2:	4632      	mov	r2, r6
100147b4:	4629      	mov	r1, r5
100147b6:	4620      	mov	r0, r4
100147b8:	f7ff ff10 	bl	100145dc <MXC_UART_SetFrequency>
100147bc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
}
100147c0:	bd70      	pop	{r4, r5, r6, pc}
        return E_BAD_PARAM;
100147c2:	f06f 0002 	mvn.w	r0, #2
}
100147c6:	bd70      	pop	{r4, r5, r6, pc}
100147c8:	40042000 	.word	0x40042000

100147cc <MXC_UART_RevB_SetFrequency>:

int MXC_UART_RevB_SetFrequency(mxc_uart_revb_regs_t *uart, unsigned int baud,
                               mxc_uart_revb_clock_t clock)
{
    unsigned clkDiv = 0, mod = 0;
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
100147cc:	4b22      	ldr	r3, [pc, #136]	@ (10014858 <MXC_UART_RevB_SetFrequency+0x8c>)
100147ce:	4298      	cmp	r0, r3
100147d0:	d00b      	beq.n	100147ea <MXC_UART_RevB_SetFrequency+0x1e>
100147d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100147d6:	4298      	cmp	r0, r3
100147d8:	d007      	beq.n	100147ea <MXC_UART_RevB_SetFrequency+0x1e>
100147da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100147de:	4298      	cmp	r0, r3
100147e0:	d003      	beq.n	100147ea <MXC_UART_RevB_SetFrequency+0x1e>
100147e2:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
100147e6:	4298      	cmp	r0, r3
100147e8:	d132      	bne.n	10014850 <MXC_UART_RevB_SetFrequency+0x84>
        return E_BAD_PARAM;
    }

    // OSR default value
    uart->osr = 5;
100147ea:	2305      	movs	r3, #5

    switch (clock) {
100147ec:	2a01      	cmp	r2, #1
{
100147ee:	b410      	push	{r4}
    uart->osr = 5;
100147f0:	6143      	str	r3, [r0, #20]
    switch (clock) {
100147f2:	d023      	beq.n	1001483c <MXC_UART_RevB_SetFrequency+0x70>
100147f4:	2a02      	cmp	r2, #2
100147f6:	d014      	beq.n	10014822 <MXC_UART_RevB_SetFrequency+0x56>
100147f8:	b11a      	cbz	r2, 10014802 <MXC_UART_RevB_SetFrequency+0x36>
    if (!clkDiv || mod > (baud / 2)) {
        clkDiv++;
    }
    uart->clkdiv = clkDiv;
    return MXC_UART_GetFrequency((mxc_uart_regs_t *)uart);
}
100147fa:	f06f 0002 	mvn.w	r0, #2
100147fe:	bc10      	pop	{r4}
10014800:	4770      	bx	lr
        clkDiv = (PeripheralClock / baud);
10014802:	4b16      	ldr	r3, [pc, #88]	@ (1001485c <MXC_UART_RevB_SetFrequency+0x90>)
10014804:	681a      	ldr	r2, [r3, #0]
10014806:	0852      	lsrs	r2, r2, #1
10014808:	fbb2 f3f1 	udiv	r3, r2, r1
        mod = (PeripheralClock % baud);
1001480c:	fb01 2213 	mls	r2, r1, r3, r2
    if (!clkDiv || mod > (baud / 2)) {
10014810:	b113      	cbz	r3, 10014818 <MXC_UART_RevB_SetFrequency+0x4c>
10014812:	ebb2 0f51 	cmp.w	r2, r1, lsr #1
10014816:	d900      	bls.n	1001481a <MXC_UART_RevB_SetFrequency+0x4e>
        clkDiv++;
10014818:	3301      	adds	r3, #1
}
1001481a:	bc10      	pop	{r4}
    uart->clkdiv = clkDiv;
1001481c:	6103      	str	r3, [r0, #16]
    return MXC_UART_GetFrequency((mxc_uart_regs_t *)uart);
1001481e:	f7ff bf45 	b.w	100146ac <MXC_UART_GetFrequency>
        uart->ctrl |= MXC_S_UART_REVB_CTRL_BCLKSRC_CLK2;
10014822:	6804      	ldr	r4, [r0, #0]
        clkDiv = (IBRO_FREQ / baud);
10014824:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
        uart->ctrl |= MXC_S_UART_REVB_CTRL_BCLKSRC_CLK2;
10014828:	f444 3400 	orr.w	r4, r4, #131072	@ 0x20000
        clkDiv = (IBRO_FREQ / baud);
1001482c:	fbb3 f3f1 	udiv	r3, r3, r1
        mod = (IBRO_FREQ % baud);
10014830:	fb01 f203 	mul.w	r2, r1, r3
10014834:	f5c2 02e1 	rsb	r2, r2, #7372800	@ 0x708000
        uart->ctrl |= MXC_S_UART_REVB_CTRL_BCLKSRC_CLK2;
10014838:	6004      	str	r4, [r0, #0]
        break;
1001483a:	e7e9      	b.n	10014810 <MXC_UART_RevB_SetFrequency+0x44>
        uart->ctrl |= MXC_S_UART_REVB_CTRL_BCLKSRC_EXTERNAL_CLOCK;
1001483c:	6804      	ldr	r4, [r0, #0]
        clkDiv = UART_EXTCLK_FREQ / baud;
1001483e:	4a08      	ldr	r2, [pc, #32]	@ (10014860 <MXC_UART_RevB_SetFrequency+0x94>)
10014840:	fbb2 f3f1 	udiv	r3, r2, r1
        uart->ctrl |= MXC_S_UART_REVB_CTRL_BCLKSRC_EXTERNAL_CLOCK;
10014844:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
10014848:	6004      	str	r4, [r0, #0]
        mod = UART_EXTCLK_FREQ % baud;
1001484a:	fb01 2213 	mls	r2, r1, r3, r2
        break;
1001484e:	e7df      	b.n	10014810 <MXC_UART_RevB_SetFrequency+0x44>
}
10014850:	f06f 0002 	mvn.w	r0, #2
10014854:	4770      	bx	lr
10014856:	bf00      	nop
10014858:	40042000 	.word	0x40042000
1001485c:	20001768 	.word	0x20001768
10014860:	047868c0 	.word	0x047868c0

10014864 <MXC_UART_RevB_GetFrequency>:

int MXC_UART_RevB_GetFrequency(mxc_uart_revb_regs_t *uart)
{
    int periphClock = 0;

    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
10014864:	4b1c      	ldr	r3, [pc, #112]	@ (100148d8 <MXC_UART_RevB_GetFrequency+0x74>)
10014866:	4298      	cmp	r0, r3
10014868:	d00b      	beq.n	10014882 <MXC_UART_RevB_GetFrequency+0x1e>
1001486a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001486e:	4298      	cmp	r0, r3
10014870:	d007      	beq.n	10014882 <MXC_UART_RevB_GetFrequency+0x1e>
10014872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014876:	4298      	cmp	r0, r3
10014878:	d003      	beq.n	10014882 <MXC_UART_RevB_GetFrequency+0x1e>
1001487a:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
1001487e:	4298      	cmp	r0, r3
10014880:	d122      	bne.n	100148c8 <MXC_UART_RevB_GetFrequency+0x64>
        return E_BAD_PARAM;
    }

    if ((uart->ctrl & MXC_F_UART_REVB_CTRL_BCLKSRC) ==
10014882:	6803      	ldr	r3, [r0, #0]
10014884:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
10014888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
1001488c:	d017      	beq.n	100148be <MXC_UART_RevB_GetFrequency+0x5a>
        MXC_S_UART_REVB_CTRL_BCLKSRC_EXTERNAL_CLOCK) {
        periphClock = UART_EXTCLK_FREQ;
    } else if ((uart->ctrl & MXC_F_UART_REVB_CTRL_BCLKSRC) ==
1001488e:	6803      	ldr	r3, [r0, #0]
10014890:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
10014894:	d00c      	beq.n	100148b0 <MXC_UART_RevB_GetFrequency+0x4c>
               MXC_S_UART_REVB_CTRL_BCLKSRC_PERIPHERAL_CLOCK) {
        periphClock = PeripheralClock;
    } else if ((uart->ctrl & MXC_F_UART_REVB_CTRL_BCLKSRC) == MXC_S_UART_REVB_CTRL_BCLKSRC_CLK2) {
10014896:	6803      	ldr	r3, [r0, #0]
10014898:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
1001489c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
100148a0:	bf08      	it	eq
100148a2:	f44f 03e1 	moveq.w	r3, #7372800	@ 0x708000
100148a6:	d112      	bne.n	100148ce <MXC_UART_RevB_GetFrequency+0x6a>
#endif
    } else {
        return E_BAD_PARAM;
    }

    return (periphClock / uart->clkdiv);
100148a8:	6900      	ldr	r0, [r0, #16]
100148aa:	fbb3 f0f0 	udiv	r0, r3, r0
100148ae:	4770      	bx	lr
        periphClock = PeripheralClock;
100148b0:	4b0a      	ldr	r3, [pc, #40]	@ (100148dc <MXC_UART_RevB_GetFrequency+0x78>)
    return (periphClock / uart->clkdiv);
100148b2:	6900      	ldr	r0, [r0, #16]
        periphClock = PeripheralClock;
100148b4:	681b      	ldr	r3, [r3, #0]
100148b6:	085b      	lsrs	r3, r3, #1
    return (periphClock / uart->clkdiv);
100148b8:	fbb3 f0f0 	udiv	r0, r3, r0
100148bc:	4770      	bx	lr
100148be:	4b08      	ldr	r3, [pc, #32]	@ (100148e0 <MXC_UART_RevB_GetFrequency+0x7c>)
100148c0:	6900      	ldr	r0, [r0, #16]
100148c2:	fbb3 f0f0 	udiv	r0, r3, r0
100148c6:	4770      	bx	lr
        return E_BAD_PARAM;
100148c8:	f06f 0002 	mvn.w	r0, #2
}
100148cc:	4770      	bx	lr
    } else if ((uart->ctrl & MXC_F_UART_REVB_CTRL_BCLKSRC) == MXC_S_UART_REVB_CTRL_BCLKSRC_CLK3) {
100148ce:	6803      	ldr	r3, [r0, #0]
        return E_BAD_PARAM;
100148d0:	f06f 0002 	mvn.w	r0, #2
        return E_BAD_PARAM;
100148d4:	4770      	bx	lr
100148d6:	bf00      	nop
100148d8:	40042000 	.word	0x40042000
100148dc:	20001768 	.word	0x20001768
100148e0:	047868c0 	.word	0x047868c0

100148e4 <MXC_UART_RevB_SetDataSize>:

int MXC_UART_RevB_SetDataSize(mxc_uart_revb_regs_t *uart, int dataSize)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
100148e4:	4a0e      	ldr	r2, [pc, #56]	@ (10014920 <MXC_UART_RevB_SetDataSize+0x3c>)
100148e6:	4290      	cmp	r0, r2
{
100148e8:	4603      	mov	r3, r0
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
100148ea:	d00b      	beq.n	10014904 <MXC_UART_RevB_SetDataSize+0x20>
100148ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
100148f0:	4290      	cmp	r0, r2
100148f2:	d007      	beq.n	10014904 <MXC_UART_RevB_SetDataSize+0x20>
100148f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
100148f8:	4290      	cmp	r0, r2
100148fa:	d003      	beq.n	10014904 <MXC_UART_RevB_SetDataSize+0x20>
100148fc:	f502 3275 	add.w	r2, r2, #250880	@ 0x3d400
10014900:	4290      	cmp	r0, r2
10014902:	d10a      	bne.n	1001491a <MXC_UART_RevB_SetDataSize+0x36>
        return E_BAD_PARAM;
    }

    if (dataSize < 5 || dataSize > 8) {
10014904:	3905      	subs	r1, #5
10014906:	2903      	cmp	r1, #3
10014908:	d807      	bhi.n	1001491a <MXC_UART_RevB_SetDataSize+0x36>
        return E_BAD_PARAM;
    }

    dataSize = (dataSize - 5) << MXC_F_UART_REVB_CTRL_CHAR_SIZE_POS;

    MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_CHAR_SIZE, dataSize);
1001490a:	681a      	ldr	r2, [r3, #0]
1001490c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
10014910:	ea42 2281 	orr.w	r2, r2, r1, lsl #10

    return E_NO_ERROR;
10014914:	2000      	movs	r0, #0
    MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_CHAR_SIZE, dataSize);
10014916:	601a      	str	r2, [r3, #0]
    return E_NO_ERROR;
10014918:	4770      	bx	lr
        return E_BAD_PARAM;
1001491a:	f06f 0002 	mvn.w	r0, #2
}
1001491e:	4770      	bx	lr
10014920:	40042000 	.word	0x40042000

10014924 <MXC_UART_RevB_SetStopBits>:

int MXC_UART_RevB_SetStopBits(mxc_uart_revb_regs_t *uart, mxc_uart_stop_t stopBits)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
10014924:	4b10      	ldr	r3, [pc, #64]	@ (10014968 <MXC_UART_RevB_SetStopBits+0x44>)
10014926:	4298      	cmp	r0, r3
10014928:	d00b      	beq.n	10014942 <MXC_UART_RevB_SetStopBits+0x1e>
1001492a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001492e:	4298      	cmp	r0, r3
10014930:	d007      	beq.n	10014942 <MXC_UART_RevB_SetStopBits+0x1e>
10014932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014936:	4298      	cmp	r0, r3
10014938:	d003      	beq.n	10014942 <MXC_UART_RevB_SetStopBits+0x1e>
1001493a:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
1001493e:	4298      	cmp	r0, r3
10014940:	d108      	bne.n	10014954 <MXC_UART_RevB_SetStopBits+0x30>
        return E_BAD_PARAM;
    }

    switch (stopBits) {
10014942:	b151      	cbz	r1, 1001495a <MXC_UART_RevB_SetStopBits+0x36>
10014944:	2901      	cmp	r1, #1
10014946:	d105      	bne.n	10014954 <MXC_UART_RevB_SetStopBits+0x30>
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_STOPBITS,
                     0 << MXC_F_UART_REVB_CTRL_STOPBITS_POS);
        break;

    case MXC_UART_STOP_2:
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_STOPBITS,
10014948:	6803      	ldr	r3, [r0, #0]
1001494a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
1001494e:	6003      	str	r3, [r0, #0]
    default:
        return E_BAD_PARAM;
        break;
    }

    return E_NO_ERROR;
10014950:	2000      	movs	r0, #0
10014952:	4770      	bx	lr
10014954:	f06f 0002 	mvn.w	r0, #2
}
10014958:	4770      	bx	lr
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_STOPBITS,
1001495a:	6803      	ldr	r3, [r0, #0]
1001495c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
10014960:	6003      	str	r3, [r0, #0]
    return E_NO_ERROR;
10014962:	2000      	movs	r0, #0
10014964:	4770      	bx	lr
10014966:	bf00      	nop
10014968:	40042000 	.word	0x40042000

1001496c <MXC_UART_RevB_SetParity>:

int MXC_UART_RevB_SetParity(mxc_uart_revb_regs_t *uart, mxc_uart_parity_t parity)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
1001496c:	4b29      	ldr	r3, [pc, #164]	@ (10014a14 <MXC_UART_RevB_SetParity+0xa8>)
1001496e:	4298      	cmp	r0, r3
10014970:	d00b      	beq.n	1001498a <MXC_UART_RevB_SetParity+0x1e>
10014972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014976:	4298      	cmp	r0, r3
10014978:	d007      	beq.n	1001498a <MXC_UART_RevB_SetParity+0x1e>
1001497a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1001497e:	4298      	cmp	r0, r3
10014980:	d003      	beq.n	1001498a <MXC_UART_RevB_SetParity+0x1e>
10014982:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
10014986:	4298      	cmp	r0, r3
10014988:	d141      	bne.n	10014a0e <MXC_UART_RevB_SetParity+0xa2>
        return E_BAD_PARAM;
    }

    switch (parity) {
1001498a:	2904      	cmp	r1, #4
1001498c:	d83f      	bhi.n	10014a0e <MXC_UART_RevB_SetParity+0xa2>
1001498e:	e8df f001 	tbb	[pc, r1]
10014992:	1711      	.short	0x1711
10014994:	3124      	.short	0x3124
10014996:	03          	.byte	0x03
10014997:	00          	.byte	0x00
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EO, 1 << MXC_F_UART_REVB_CTRL_PAR_EO_POS);
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_MD, 0 << MXC_F_UART_REVB_CTRL_PAR_MD_POS);
        break;

    case MXC_UART_PARITY_ODD_1:
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EN, 1 << MXC_F_UART_REVB_CTRL_PAR_EN_POS);
10014998:	6803      	ldr	r3, [r0, #0]
1001499a:	f043 0310 	orr.w	r3, r3, #16
1001499e:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EO, 1 << MXC_F_UART_REVB_CTRL_PAR_EO_POS);
100149a0:	6803      	ldr	r3, [r0, #0]
100149a2:	f043 0320 	orr.w	r3, r3, #32
100149a6:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_MD, 1 << MXC_F_UART_REVB_CTRL_PAR_MD_POS);
100149a8:	6803      	ldr	r3, [r0, #0]
100149aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100149ae:	6003      	str	r3, [r0, #0]
    default:
        return E_BAD_PARAM;
        break;
    }

    return E_NO_ERROR;
100149b0:	2000      	movs	r0, #0
100149b2:	4770      	bx	lr
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EN, 0 << MXC_F_UART_REVB_CTRL_PAR_EN_POS);
100149b4:	6803      	ldr	r3, [r0, #0]
100149b6:	f023 0310 	bic.w	r3, r3, #16
100149ba:	6003      	str	r3, [r0, #0]
    return E_NO_ERROR;
100149bc:	2000      	movs	r0, #0
100149be:	4770      	bx	lr
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EN, 1 << MXC_F_UART_REVB_CTRL_PAR_EN_POS);
100149c0:	6803      	ldr	r3, [r0, #0]
100149c2:	f043 0310 	orr.w	r3, r3, #16
100149c6:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EO, 0 << MXC_F_UART_REVB_CTRL_PAR_EO_POS);
100149c8:	6803      	ldr	r3, [r0, #0]
100149ca:	f023 0320 	bic.w	r3, r3, #32
100149ce:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_MD, 0 << MXC_F_UART_REVB_CTRL_PAR_MD_POS);
100149d0:	6803      	ldr	r3, [r0, #0]
100149d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
100149d6:	6003      	str	r3, [r0, #0]
        break;
100149d8:	e7ea      	b.n	100149b0 <MXC_UART_RevB_SetParity+0x44>
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EN, 1 << MXC_F_UART_REVB_CTRL_PAR_EN_POS);
100149da:	6803      	ldr	r3, [r0, #0]
100149dc:	f043 0310 	orr.w	r3, r3, #16
100149e0:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EO, 0 << MXC_F_UART_REVB_CTRL_PAR_EO_POS);
100149e2:	6803      	ldr	r3, [r0, #0]
100149e4:	f023 0320 	bic.w	r3, r3, #32
100149e8:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_MD, 1 << MXC_F_UART_REVB_CTRL_PAR_MD_POS);
100149ea:	6803      	ldr	r3, [r0, #0]
100149ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100149f0:	6003      	str	r3, [r0, #0]
        break;
100149f2:	e7dd      	b.n	100149b0 <MXC_UART_RevB_SetParity+0x44>
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EN, 1 << MXC_F_UART_REVB_CTRL_PAR_EN_POS);
100149f4:	6803      	ldr	r3, [r0, #0]
100149f6:	f043 0310 	orr.w	r3, r3, #16
100149fa:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_EO, 1 << MXC_F_UART_REVB_CTRL_PAR_EO_POS);
100149fc:	6803      	ldr	r3, [r0, #0]
100149fe:	f043 0320 	orr.w	r3, r3, #32
10014a02:	6003      	str	r3, [r0, #0]
        MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_PAR_MD, 0 << MXC_F_UART_REVB_CTRL_PAR_MD_POS);
10014a04:	6803      	ldr	r3, [r0, #0]
10014a06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
10014a0a:	6003      	str	r3, [r0, #0]
        break;
10014a0c:	e7d0      	b.n	100149b0 <MXC_UART_RevB_SetParity+0x44>
    switch (parity) {
10014a0e:	f06f 0002 	mvn.w	r0, #2
}
10014a12:	4770      	bx	lr
10014a14:	40042000 	.word	0x40042000

10014a18 <MXC_UART_RevB_ReadCharacterRaw>:
    return E_NO_ERROR;
}

int MXC_UART_RevB_ReadCharacterRaw(mxc_uart_revb_regs_t *uart)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
10014a18:	4b0c      	ldr	r3, [pc, #48]	@ (10014a4c <MXC_UART_RevB_ReadCharacterRaw+0x34>)
10014a1a:	4298      	cmp	r0, r3
10014a1c:	d00b      	beq.n	10014a36 <MXC_UART_RevB_ReadCharacterRaw+0x1e>
10014a1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014a22:	4298      	cmp	r0, r3
10014a24:	d007      	beq.n	10014a36 <MXC_UART_RevB_ReadCharacterRaw+0x1e>
10014a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10014a2a:	4298      	cmp	r0, r3
10014a2c:	d003      	beq.n	10014a36 <MXC_UART_RevB_ReadCharacterRaw+0x1e>
10014a2e:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
10014a32:	4298      	cmp	r0, r3
10014a34:	d104      	bne.n	10014a40 <MXC_UART_RevB_ReadCharacterRaw+0x28>
        return E_BAD_PARAM;
    }

    if (uart->status & MXC_F_UART_REVB_STATUS_RX_EM) {
10014a36:	6843      	ldr	r3, [r0, #4]
10014a38:	06db      	lsls	r3, r3, #27
10014a3a:	d404      	bmi.n	10014a46 <MXC_UART_RevB_ReadCharacterRaw+0x2e>
        return E_UNDERFLOW;
    }

    return uart->fifo;
10014a3c:	6a00      	ldr	r0, [r0, #32]
10014a3e:	4770      	bx	lr
        return E_BAD_PARAM;
10014a40:	f06f 0002 	mvn.w	r0, #2
10014a44:	4770      	bx	lr
        return E_UNDERFLOW;
10014a46:	f06f 000c 	mvn.w	r0, #12
}
10014a4a:	4770      	bx	lr
10014a4c:	40042000 	.word	0x40042000

10014a50 <MXC_UART_RevB_WriteCharacterRaw>:

int MXC_UART_RevB_WriteCharacterRaw(mxc_uart_revb_regs_t *uart, uint8_t character)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
10014a50:	4a0d      	ldr	r2, [pc, #52]	@ (10014a88 <MXC_UART_RevB_WriteCharacterRaw+0x38>)
10014a52:	4290      	cmp	r0, r2
{
10014a54:	4603      	mov	r3, r0
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
10014a56:	d00b      	beq.n	10014a70 <MXC_UART_RevB_WriteCharacterRaw+0x20>
10014a58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
10014a5c:	4290      	cmp	r0, r2
10014a5e:	d007      	beq.n	10014a70 <MXC_UART_RevB_WriteCharacterRaw+0x20>
10014a60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
10014a64:	4290      	cmp	r0, r2
10014a66:	d003      	beq.n	10014a70 <MXC_UART_RevB_WriteCharacterRaw+0x20>
10014a68:	f502 3275 	add.w	r2, r2, #250880	@ 0x3d400
10014a6c:	4290      	cmp	r0, r2
10014a6e:	d105      	bne.n	10014a7c <MXC_UART_RevB_WriteCharacterRaw+0x2c>
        return E_BAD_PARAM;
    }

    // Require the TX FIFO to be empty, so that we write out the expected character
    // Return error if the FIFO is full
    if (uart->status & MXC_F_UART_REVB_STATUS_TX_FULL) {
10014a70:	6858      	ldr	r0, [r3, #4]
10014a72:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
10014a76:	d104      	bne.n	10014a82 <MXC_UART_RevB_WriteCharacterRaw+0x32>
        return E_OVERFLOW;
    }

    uart->fifo = character;
10014a78:	6219      	str	r1, [r3, #32]

    return E_NO_ERROR;
10014a7a:	4770      	bx	lr
        return E_BAD_PARAM;
10014a7c:	f06f 0002 	mvn.w	r0, #2
10014a80:	4770      	bx	lr
        return E_OVERFLOW;
10014a82:	f06f 000b 	mvn.w	r0, #11
}
10014a86:	4770      	bx	lr
10014a88:	40042000 	.word	0x40042000

10014a8c <MXC_UART_RevB_GetRXFIFOAvailable>:
    return read;
}

unsigned int MXC_UART_RevB_GetRXFIFOAvailable(mxc_uart_revb_regs_t *uart)
{
    return (uart->status & MXC_F_UART_REVB_STATUS_RX_LVL) >> MXC_F_UART_REVB_STATUS_RX_LVL_POS;
10014a8c:	6840      	ldr	r0, [r0, #4]
}
10014a8e:	f3c0 2003 	ubfx	r0, r0, #8, #4
10014a92:	4770      	bx	lr

10014a94 <MXC_UART_RevB_GetTXFIFOAvailable>:
    return written;
}

unsigned int MXC_UART_RevB_GetTXFIFOAvailable(mxc_uart_revb_regs_t *uart)
{
    int txCnt = (uart->status & MXC_F_UART_REVB_STATUS_TX_LVL) >> MXC_F_UART_REVB_STATUS_TX_LVL_POS;
10014a94:	6840      	ldr	r0, [r0, #4]
10014a96:	f3c0 3003 	ubfx	r0, r0, #12, #4
    return MXC_UART_FIFO_DEPTH - txCnt;
}
10014a9a:	f1c0 0008 	rsb	r0, r0, #8
10014a9e:	4770      	bx	lr

10014aa0 <MXC_UART_RevB_SetRXThreshold>:
    return E_NO_ERROR;
}

int MXC_UART_RevB_SetRXThreshold(mxc_uart_revb_regs_t *uart, unsigned int numBytes)
{
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
10014aa0:	4a0e      	ldr	r2, [pc, #56]	@ (10014adc <MXC_UART_RevB_SetRXThreshold+0x3c>)
10014aa2:	4290      	cmp	r0, r2
{
10014aa4:	4603      	mov	r3, r0
    if (MXC_UART_GET_IDX((mxc_uart_regs_t *)uart) < 0) {
10014aa6:	d00b      	beq.n	10014ac0 <MXC_UART_RevB_SetRXThreshold+0x20>
10014aa8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
10014aac:	4290      	cmp	r0, r2
10014aae:	d007      	beq.n	10014ac0 <MXC_UART_RevB_SetRXThreshold+0x20>
10014ab0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
10014ab4:	4290      	cmp	r0, r2
10014ab6:	d003      	beq.n	10014ac0 <MXC_UART_RevB_SetRXThreshold+0x20>
10014ab8:	f502 3275 	add.w	r2, r2, #250880	@ 0x3d400
10014abc:	4290      	cmp	r0, r2
10014abe:	d109      	bne.n	10014ad4 <MXC_UART_RevB_SetRXThreshold+0x34>
        return E_BAD_PARAM;
    }

    if (numBytes < 1 || numBytes > MXC_UART_FIFO_DEPTH) {
10014ac0:	1e4a      	subs	r2, r1, #1
10014ac2:	2a07      	cmp	r2, #7
10014ac4:	d806      	bhi.n	10014ad4 <MXC_UART_RevB_SetRXThreshold+0x34>
        return E_BAD_PARAM;
    }

    numBytes <<= MXC_F_UART_REVB_CTRL_RX_THD_VAL_POS;
    MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_RX_THD_VAL, numBytes);
10014ac6:	681a      	ldr	r2, [r3, #0]
10014ac8:	f022 020f 	bic.w	r2, r2, #15
10014acc:	4311      	orrs	r1, r2

    return E_NO_ERROR;
10014ace:	2000      	movs	r0, #0
    MXC_SETFIELD(uart->ctrl, MXC_F_UART_REVB_CTRL_RX_THD_VAL, numBytes);
10014ad0:	6019      	str	r1, [r3, #0]
    return E_NO_ERROR;
10014ad2:	4770      	bx	lr
        return E_BAD_PARAM;
10014ad4:	f06f 0002 	mvn.w	r0, #2
}
10014ad8:	4770      	bx	lr
10014ada:	bf00      	nop
10014adc:	40042000 	.word	0x40042000

10014ae0 <MXC_GPIO_Common_Init>:
static void *cbparam[MXC_CFG_GPIO_INSTANCES][MXC_CFG_GPIO_PINS_PORT];
static uint8_t initialized = 0;

/* **** Functions **** */
int MXC_GPIO_Common_Init(uint32_t portmask)
{
10014ae0:	b510      	push	{r4, lr}
    if (!initialized) {
10014ae2:	4c06      	ldr	r4, [pc, #24]	@ (10014afc <MXC_GPIO_Common_Init+0x1c>)
10014ae4:	7821      	ldrb	r1, [r4, #0]
10014ae6:	b931      	cbnz	r1, 10014af6 <MXC_GPIO_Common_Init+0x16>
        int i, j;

        for (i = 0; i < MXC_CFG_GPIO_INSTANCES; i++) {
            // Initialize call back arrays
            for (j = 0; j < MXC_CFG_GPIO_PINS_PORT; j++) {
                callback[i][j] = NULL;
10014ae8:	4805      	ldr	r0, [pc, #20]	@ (10014b00 <MXC_GPIO_Common_Init+0x20>)
10014aea:	f44f 7200 	mov.w	r2, #512	@ 0x200
10014aee:	f004 fd65 	bl	100195bc <memset>
            }
        }

        initialized = 1;
10014af2:	2301      	movs	r3, #1
10014af4:	7023      	strb	r3, [r4, #0]
    }

    return E_NO_ERROR;
}
10014af6:	2000      	movs	r0, #0
10014af8:	bd10      	pop	{r4, pc}
10014afa:	bf00      	nop
10014afc:	20001050 	.word	0x20001050
10014b00:	20001254 	.word	0x20001254

10014b04 <MXC_GPIO_Common_Handler>:
void MXC_GPIO_Common_Handler(unsigned int port)
{
    uint32_t stat;
    unsigned int pin;

    MXC_ASSERT(port < MXC_CFG_GPIO_INSTANCES);
10014b04:	2803      	cmp	r0, #3
{
10014b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014b08:	4607      	mov	r7, r0
    MXC_ASSERT(port < MXC_CFG_GPIO_INSTANCES);
10014b0a:	d81d      	bhi.n	10014b48 <MXC_GPIO_Common_Handler+0x44>

    mxc_gpio_regs_t *gpio = MXC_GPIO_GET_GPIO(port);
10014b0c:	bb18      	cbnz	r0, 10014b56 <MXC_GPIO_Common_Handler+0x52>
10014b0e:	4d14      	ldr	r5, [pc, #80]	@ (10014b60 <MXC_GPIO_Common_Handler+0x5c>)

    stat = MXC_GPIO_GetFlags(gpio);
10014b10:	4628      	mov	r0, r5
10014b12:	f7fe fd7d 	bl	10013610 <MXC_GPIO_GetFlags>
10014b16:	4604      	mov	r4, r0
    MXC_GPIO_ClearFlags(gpio, stat);
10014b18:	4601      	mov	r1, r0
10014b1a:	4628      	mov	r0, r5
10014b1c:	f7fe fd6c 	bl	100135f8 <MXC_GPIO_ClearFlags>

    pin = 0;

    while (stat) {
10014b20:	b18c      	cbz	r4, 10014b46 <MXC_GPIO_Common_Handler+0x42>
10014b22:	4e10      	ldr	r6, [pc, #64]	@ (10014b64 <MXC_GPIO_Common_Handler+0x60>)
10014b24:	4d10      	ldr	r5, [pc, #64]	@ (10014b68 <MXC_GPIO_Common_Handler+0x64>)
10014b26:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
10014b2a:	eb05 15c7 	add.w	r5, r5, r7, lsl #7
        if (stat & 1) {
10014b2e:	07e3      	lsls	r3, r4, #31
10014b30:	d503      	bpl.n	10014b3a <MXC_GPIO_Common_Handler+0x36>
            if (callback[port][pin]) {
10014b32:	682b      	ldr	r3, [r5, #0]
10014b34:	b10b      	cbz	r3, 10014b3a <MXC_GPIO_Common_Handler+0x36>
                callback[port][pin](cbparam[port][pin]);
10014b36:	6830      	ldr	r0, [r6, #0]
10014b38:	4798      	blx	r3
    while (stat) {
10014b3a:	0864      	lsrs	r4, r4, #1
10014b3c:	f106 0604 	add.w	r6, r6, #4
10014b40:	f105 0504 	add.w	r5, r5, #4
10014b44:	d1f3      	bne.n	10014b2e <MXC_GPIO_Common_Handler+0x2a>
        }

        pin++;
        stat >>= 1;
    }
}
10014b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MXC_ASSERT(port < MXC_CFG_GPIO_INSTANCES);
10014b48:	4908      	ldr	r1, [pc, #32]	@ (10014b6c <MXC_GPIO_Common_Handler+0x68>)
10014b4a:	4809      	ldr	r0, [pc, #36]	@ (10014b70 <MXC_GPIO_Common_Handler+0x6c>)
10014b4c:	225a      	movs	r2, #90	@ 0x5a
10014b4e:	f7fd ff73 	bl	10012a38 <mxc_assert>
10014b52:	2500      	movs	r5, #0
10014b54:	e7dc      	b.n	10014b10 <MXC_GPIO_Common_Handler+0xc>
10014b56:	4b07      	ldr	r3, [pc, #28]	@ (10014b74 <MXC_GPIO_Common_Handler+0x70>)
10014b58:	1e42      	subs	r2, r0, #1
10014b5a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
10014b5e:	e7d7      	b.n	10014b10 <MXC_GPIO_Common_Handler+0xc>
10014b60:	40008000 	.word	0x40008000
10014b64:	20001054 	.word	0x20001054
10014b68:	20001254 	.word	0x20001254
10014b6c:	100253e4 	.word	0x100253e4
10014b70:	10025448 	.word	0x10025448
10014b74:	10025468 	.word	0x10025468

10014b78 <malloc>:
10014b78:	4b02      	ldr	r3, [pc, #8]	@ (10014b84 <malloc+0xc>)
10014b7a:	4601      	mov	r1, r0
10014b7c:	6818      	ldr	r0, [r3, #0]
10014b7e:	f000 b80b 	b.w	10014b98 <_malloc_r>
10014b82:	bf00      	nop
10014b84:	20000598 	.word	0x20000598

10014b88 <free>:
10014b88:	4b02      	ldr	r3, [pc, #8]	@ (10014b94 <free+0xc>)
10014b8a:	4601      	mov	r1, r0
10014b8c:	6818      	ldr	r0, [r3, #0]
10014b8e:	f006 ba17 	b.w	1001afc0 <_free_r>
10014b92:	bf00      	nop
10014b94:	20000598 	.word	0x20000598

10014b98 <_malloc_r>:
10014b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10014b9c:	f101 050b 	add.w	r5, r1, #11
10014ba0:	2d16      	cmp	r5, #22
10014ba2:	b085      	sub	sp, #20
10014ba4:	4606      	mov	r6, r0
10014ba6:	d824      	bhi.n	10014bf2 <_malloc_r+0x5a>
10014ba8:	2910      	cmp	r1, #16
10014baa:	f200 80b1 	bhi.w	10014d10 <_malloc_r+0x178>
10014bae:	f003 f989 	bl	10017ec4 <__malloc_lock>
10014bb2:	2510      	movs	r5, #16
10014bb4:	2318      	movs	r3, #24
10014bb6:	f04f 0c02 	mov.w	ip, #2
10014bba:	4fba      	ldr	r7, [pc, #744]	@ (10014ea4 <_malloc_r+0x30c>)
10014bbc:	443b      	add	r3, r7
10014bbe:	f1a3 0208 	sub.w	r2, r3, #8
10014bc2:	685c      	ldr	r4, [r3, #4]
10014bc4:	4294      	cmp	r4, r2
10014bc6:	f000 8122 	beq.w	10014e0e <_malloc_r+0x276>
10014bca:	6863      	ldr	r3, [r4, #4]
10014bcc:	68e2      	ldr	r2, [r4, #12]
10014bce:	68a1      	ldr	r1, [r4, #8]
10014bd0:	f023 0303 	bic.w	r3, r3, #3
10014bd4:	60ca      	str	r2, [r1, #12]
10014bd6:	4423      	add	r3, r4
10014bd8:	4630      	mov	r0, r6
10014bda:	6091      	str	r1, [r2, #8]
10014bdc:	685a      	ldr	r2, [r3, #4]
10014bde:	f042 0201 	orr.w	r2, r2, #1
10014be2:	605a      	str	r2, [r3, #4]
10014be4:	3408      	adds	r4, #8
10014be6:	f003 f973 	bl	10017ed0 <__malloc_unlock>
10014bea:	4620      	mov	r0, r4
10014bec:	b005      	add	sp, #20
10014bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10014bf2:	f035 0507 	bics.w	r5, r5, #7
10014bf6:	f100 808b 	bmi.w	10014d10 <_malloc_r+0x178>
10014bfa:	42a9      	cmp	r1, r5
10014bfc:	f200 8088 	bhi.w	10014d10 <_malloc_r+0x178>
10014c00:	f003 f960 	bl	10017ec4 <__malloc_lock>
10014c04:	f5b5 7ffc 	cmp.w	r5, #504	@ 0x1f8
10014c08:	f0c0 8173 	bcc.w	10014ef2 <_malloc_r+0x35a>
10014c0c:	0a6b      	lsrs	r3, r5, #9
10014c0e:	f000 8083 	beq.w	10014d18 <_malloc_r+0x180>
10014c12:	2b04      	cmp	r3, #4
10014c14:	f200 8122 	bhi.w	10014e5c <_malloc_r+0x2c4>
10014c18:	09ab      	lsrs	r3, r5, #6
10014c1a:	f103 0c39 	add.w	ip, r3, #57	@ 0x39
10014c1e:	f103 0e38 	add.w	lr, r3, #56	@ 0x38
10014c22:	ea4f 03cc 	mov.w	r3, ip, lsl #3
10014c26:	4f9f      	ldr	r7, [pc, #636]	@ (10014ea4 <_malloc_r+0x30c>)
10014c28:	443b      	add	r3, r7
10014c2a:	f1a3 0008 	sub.w	r0, r3, #8
10014c2e:	685c      	ldr	r4, [r3, #4]
10014c30:	42a0      	cmp	r0, r4
10014c32:	d107      	bne.n	10014c44 <_malloc_r+0xac>
10014c34:	e00d      	b.n	10014c52 <_malloc_r+0xba>
10014c36:	2a00      	cmp	r2, #0
10014c38:	68e1      	ldr	r1, [r4, #12]
10014c3a:	f280 80e2 	bge.w	10014e02 <_malloc_r+0x26a>
10014c3e:	4288      	cmp	r0, r1
10014c40:	d007      	beq.n	10014c52 <_malloc_r+0xba>
10014c42:	460c      	mov	r4, r1
10014c44:	6863      	ldr	r3, [r4, #4]
10014c46:	f023 0303 	bic.w	r3, r3, #3
10014c4a:	1b5a      	subs	r2, r3, r5
10014c4c:	2a0f      	cmp	r2, #15
10014c4e:	ddf2      	ble.n	10014c36 <_malloc_r+0x9e>
10014c50:	46f4      	mov	ip, lr
10014c52:	f8df 8254 	ldr.w	r8, [pc, #596]	@ 10014ea8 <_malloc_r+0x310>
10014c56:	693c      	ldr	r4, [r7, #16]
10014c58:	4544      	cmp	r4, r8
10014c5a:	f000 80bf 	beq.w	10014ddc <_malloc_r+0x244>
10014c5e:	6863      	ldr	r3, [r4, #4]
10014c60:	f023 0903 	bic.w	r9, r3, #3
10014c64:	eba9 0305 	sub.w	r3, r9, r5
10014c68:	2b0f      	cmp	r3, #15
10014c6a:	f300 8147 	bgt.w	10014efc <_malloc_r+0x364>
10014c6e:	2b00      	cmp	r3, #0
10014c70:	e9c7 8804 	strd	r8, r8, [r7, #16]
10014c74:	f280 8131 	bge.w	10014eda <_malloc_r+0x342>
10014c78:	f5b9 7f00 	cmp.w	r9, #512	@ 0x200
10014c7c:	f8d7 e004 	ldr.w	lr, [r7, #4]
10014c80:	f080 80cc 	bcs.w	10014e1c <_malloc_r+0x284>
10014c84:	ea4f 01d9 	mov.w	r1, r9, lsr #3
10014c88:	3101      	adds	r1, #1
10014c8a:	ea4f 1959 	mov.w	r9, r9, lsr #5
10014c8e:	2301      	movs	r3, #1
10014c90:	fa03 f309 	lsl.w	r3, r3, r9
10014c94:	f857 2031 	ldr.w	r2, [r7, r1, lsl #3]
10014c98:	60a2      	str	r2, [r4, #8]
10014c9a:	ea4e 0e03 	orr.w	lr, lr, r3
10014c9e:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
10014ca2:	3b08      	subs	r3, #8
10014ca4:	60e3      	str	r3, [r4, #12]
10014ca6:	f8c7 e004 	str.w	lr, [r7, #4]
10014caa:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
10014cae:	60d4      	str	r4, [r2, #12]
10014cb0:	ea4f 03ac 	mov.w	r3, ip, asr #2
10014cb4:	2001      	movs	r0, #1
10014cb6:	4098      	lsls	r0, r3
10014cb8:	4570      	cmp	r0, lr
10014cba:	d834      	bhi.n	10014d26 <_malloc_r+0x18e>
10014cbc:	ea10 0f0e 	tst.w	r0, lr
10014cc0:	d107      	bne.n	10014cd2 <_malloc_r+0x13a>
10014cc2:	f02c 0c03 	bic.w	ip, ip, #3
10014cc6:	0040      	lsls	r0, r0, #1
10014cc8:	ea10 0f0e 	tst.w	r0, lr
10014ccc:	f10c 0c04 	add.w	ip, ip, #4
10014cd0:	d0f9      	beq.n	10014cc6 <_malloc_r+0x12e>
10014cd2:	eb07 0acc 	add.w	sl, r7, ip, lsl #3
10014cd6:	4652      	mov	r2, sl
10014cd8:	46e1      	mov	r9, ip
10014cda:	68d1      	ldr	r1, [r2, #12]
10014cdc:	e00e      	b.n	10014cfc <_malloc_r+0x164>
10014cde:	684b      	ldr	r3, [r1, #4]
10014ce0:	f023 0303 	bic.w	r3, r3, #3
10014ce4:	eba3 0e05 	sub.w	lr, r3, r5
10014ce8:	f1be 0f0f 	cmp.w	lr, #15
10014cec:	460c      	mov	r4, r1
10014cee:	68c9      	ldr	r1, [r1, #12]
10014cf0:	f300 80c1 	bgt.w	10014e76 <_malloc_r+0x2de>
10014cf4:	f1be 0f00 	cmp.w	lr, #0
10014cf8:	f280 80e2 	bge.w	10014ec0 <_malloc_r+0x328>
10014cfc:	428a      	cmp	r2, r1
10014cfe:	d1ee      	bne.n	10014cde <_malloc_r+0x146>
10014d00:	f109 0901 	add.w	r9, r9, #1
10014d04:	f019 0f03 	tst.w	r9, #3
10014d08:	f102 0208 	add.w	r2, r2, #8
10014d0c:	d1e5      	bne.n	10014cda <_malloc_r+0x142>
10014d0e:	e121      	b.n	10014f54 <_malloc_r+0x3bc>
10014d10:	230c      	movs	r3, #12
10014d12:	6033      	str	r3, [r6, #0]
10014d14:	2400      	movs	r4, #0
10014d16:	e768      	b.n	10014bea <_malloc_r+0x52>
10014d18:	f44f 7300 	mov.w	r3, #512	@ 0x200
10014d1c:	f04f 0c40 	mov.w	ip, #64	@ 0x40
10014d20:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
10014d24:	e77f      	b.n	10014c26 <_malloc_r+0x8e>
10014d26:	68bc      	ldr	r4, [r7, #8]
10014d28:	6863      	ldr	r3, [r4, #4]
10014d2a:	f023 0903 	bic.w	r9, r3, #3
10014d2e:	45a9      	cmp	r9, r5
10014d30:	d303      	bcc.n	10014d3a <_malloc_r+0x1a2>
10014d32:	eba9 0305 	sub.w	r3, r9, r5
10014d36:	2b0f      	cmp	r3, #15
10014d38:	dc53      	bgt.n	10014de2 <_malloc_r+0x24a>
10014d3a:	4b5c      	ldr	r3, [pc, #368]	@ (10014eac <_malloc_r+0x314>)
10014d3c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 10014eb0 <_malloc_r+0x318>
10014d40:	681b      	ldr	r3, [r3, #0]
10014d42:	2008      	movs	r0, #8
10014d44:	f103 0810 	add.w	r8, r3, #16
10014d48:	f004 fd60 	bl	1001980c <sysconf>
10014d4c:	f8db 3000 	ldr.w	r3, [fp]
10014d50:	9001      	str	r0, [sp, #4]
10014d52:	3301      	adds	r3, #1
10014d54:	44a8      	add	r8, r5
10014d56:	eb04 0209 	add.w	r2, r4, r9
10014d5a:	d005      	beq.n	10014d68 <_malloc_r+0x1d0>
10014d5c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
10014d60:	4480      	add	r8, r0
10014d62:	4243      	negs	r3, r0
10014d64:	ea03 0808 	and.w	r8, r3, r8
10014d68:	4641      	mov	r1, r8
10014d6a:	4630      	mov	r0, r6
10014d6c:	9202      	str	r2, [sp, #8]
10014d6e:	f004 fd1f 	bl	100197b0 <_sbrk_r>
10014d72:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
10014d76:	9a02      	ldr	r2, [sp, #8]
10014d78:	4682      	mov	sl, r0
10014d7a:	f000 80dc 	beq.w	10014f36 <_malloc_r+0x39e>
10014d7e:	4282      	cmp	r2, r0
10014d80:	f200 80d7 	bhi.w	10014f32 <_malloc_r+0x39a>
10014d84:	4b4b      	ldr	r3, [pc, #300]	@ (10014eb4 <_malloc_r+0x31c>)
10014d86:	9901      	ldr	r1, [sp, #4]
10014d88:	6818      	ldr	r0, [r3, #0]
10014d8a:	4440      	add	r0, r8
10014d8c:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
10014d90:	6018      	str	r0, [r3, #0]
10014d92:	4684      	mov	ip, r0
10014d94:	f040 80fc 	bne.w	10014f90 <_malloc_r+0x3f8>
10014d98:	ea1a 0f01 	tst.w	sl, r1
10014d9c:	f040 80f8 	bne.w	10014f90 <_malloc_r+0x3f8>
10014da0:	f8d7 a008 	ldr.w	sl, [r7, #8]
10014da4:	44c8      	add	r8, r9
10014da6:	f048 0201 	orr.w	r2, r8, #1
10014daa:	f8ca 2004 	str.w	r2, [sl, #4]
10014dae:	4b42      	ldr	r3, [pc, #264]	@ (10014eb8 <_malloc_r+0x320>)
10014db0:	6819      	ldr	r1, [r3, #0]
10014db2:	4281      	cmp	r1, r0
10014db4:	bf38      	it	cc
10014db6:	6018      	strcc	r0, [r3, #0]
10014db8:	4b40      	ldr	r3, [pc, #256]	@ (10014ebc <_malloc_r+0x324>)
10014dba:	6819      	ldr	r1, [r3, #0]
10014dbc:	4281      	cmp	r1, r0
10014dbe:	bf38      	it	cc
10014dc0:	6018      	strcc	r0, [r3, #0]
10014dc2:	4654      	mov	r4, sl
10014dc4:	f022 0803 	bic.w	r8, r2, #3
10014dc8:	45a8      	cmp	r8, r5
10014dca:	eba8 0305 	sub.w	r3, r8, r5
10014dce:	d301      	bcc.n	10014dd4 <_malloc_r+0x23c>
10014dd0:	2b0f      	cmp	r3, #15
10014dd2:	dc06      	bgt.n	10014de2 <_malloc_r+0x24a>
10014dd4:	4630      	mov	r0, r6
10014dd6:	f003 f87b 	bl	10017ed0 <__malloc_unlock>
10014dda:	e79b      	b.n	10014d14 <_malloc_r+0x17c>
10014ddc:	f8d7 e004 	ldr.w	lr, [r7, #4]
10014de0:	e766      	b.n	10014cb0 <_malloc_r+0x118>
10014de2:	1962      	adds	r2, r4, r5
10014de4:	f043 0301 	orr.w	r3, r3, #1
10014de8:	f045 0501 	orr.w	r5, r5, #1
10014dec:	6065      	str	r5, [r4, #4]
10014dee:	4630      	mov	r0, r6
10014df0:	60ba      	str	r2, [r7, #8]
10014df2:	6053      	str	r3, [r2, #4]
10014df4:	f003 f86c 	bl	10017ed0 <__malloc_unlock>
10014df8:	3408      	adds	r4, #8
10014dfa:	4620      	mov	r0, r4
10014dfc:	b005      	add	sp, #20
10014dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10014e02:	68a2      	ldr	r2, [r4, #8]
10014e04:	4423      	add	r3, r4
10014e06:	60d1      	str	r1, [r2, #12]
10014e08:	4630      	mov	r0, r6
10014e0a:	608a      	str	r2, [r1, #8]
10014e0c:	e6e6      	b.n	10014bdc <_malloc_r+0x44>
10014e0e:	68dc      	ldr	r4, [r3, #12]
10014e10:	42a3      	cmp	r3, r4
10014e12:	f47f aeda 	bne.w	10014bca <_malloc_r+0x32>
10014e16:	f10c 0c02 	add.w	ip, ip, #2
10014e1a:	e71a      	b.n	10014c52 <_malloc_r+0xba>
10014e1c:	f5b9 6f20 	cmp.w	r9, #2560	@ 0xa00
10014e20:	ea4f 2259 	mov.w	r2, r9, lsr #9
10014e24:	d37e      	bcc.n	10014f24 <_malloc_r+0x38c>
10014e26:	2a14      	cmp	r2, #20
10014e28:	f200 8115 	bhi.w	10015056 <_malloc_r+0x4be>
10014e2c:	f102 035c 	add.w	r3, r2, #92	@ 0x5c
10014e30:	00db      	lsls	r3, r3, #3
10014e32:	325b      	adds	r2, #91	@ 0x5b
10014e34:	18f9      	adds	r1, r7, r3
10014e36:	58fb      	ldr	r3, [r7, r3]
10014e38:	3908      	subs	r1, #8
10014e3a:	4299      	cmp	r1, r3
10014e3c:	d103      	bne.n	10014e46 <_malloc_r+0x2ae>
10014e3e:	e0f0      	b.n	10015022 <_malloc_r+0x48a>
10014e40:	689b      	ldr	r3, [r3, #8]
10014e42:	4299      	cmp	r1, r3
10014e44:	d004      	beq.n	10014e50 <_malloc_r+0x2b8>
10014e46:	685a      	ldr	r2, [r3, #4]
10014e48:	f022 0203 	bic.w	r2, r2, #3
10014e4c:	454a      	cmp	r2, r9
10014e4e:	d8f7      	bhi.n	10014e40 <_malloc_r+0x2a8>
10014e50:	68d9      	ldr	r1, [r3, #12]
10014e52:	e9c4 3102 	strd	r3, r1, [r4, #8]
10014e56:	608c      	str	r4, [r1, #8]
10014e58:	60dc      	str	r4, [r3, #12]
10014e5a:	e729      	b.n	10014cb0 <_malloc_r+0x118>
10014e5c:	2b14      	cmp	r3, #20
10014e5e:	d96d      	bls.n	10014f3c <_malloc_r+0x3a4>
10014e60:	2b54      	cmp	r3, #84	@ 0x54
10014e62:	f200 8101 	bhi.w	10015068 <_malloc_r+0x4d0>
10014e66:	0b2b      	lsrs	r3, r5, #12
10014e68:	f103 0c6f 	add.w	ip, r3, #111	@ 0x6f
10014e6c:	f103 0e6e 	add.w	lr, r3, #110	@ 0x6e
10014e70:	ea4f 03cc 	mov.w	r3, ip, lsl #3
10014e74:	e6d7      	b.n	10014c26 <_malloc_r+0x8e>
10014e76:	4630      	mov	r0, r6
10014e78:	68a6      	ldr	r6, [r4, #8]
10014e7a:	1962      	adds	r2, r4, r5
10014e7c:	f045 0501 	orr.w	r5, r5, #1
10014e80:	6065      	str	r5, [r4, #4]
10014e82:	60f1      	str	r1, [r6, #12]
10014e84:	608e      	str	r6, [r1, #8]
10014e86:	f04e 0101 	orr.w	r1, lr, #1
10014e8a:	e9c7 2204 	strd	r2, r2, [r7, #16]
10014e8e:	f8c2 8008 	str.w	r8, [r2, #8]
10014e92:	f8c2 800c 	str.w	r8, [r2, #12]
10014e96:	6051      	str	r1, [r2, #4]
10014e98:	f844 e003 	str.w	lr, [r4, r3]
10014e9c:	f003 f818 	bl	10017ed0 <__malloc_unlock>
10014ea0:	3408      	adds	r4, #8
10014ea2:	e6a2      	b.n	10014bea <_malloc_r+0x52>
10014ea4:	20000018 	.word	0x20000018
10014ea8:	20000020 	.word	0x20000020
10014eac:	20001484 	.word	0x20001484
10014eb0:	20000010 	.word	0x20000010
10014eb4:	20001454 	.word	0x20001454
10014eb8:	20001480 	.word	0x20001480
10014ebc:	2000147c 	.word	0x2000147c
10014ec0:	4423      	add	r3, r4
10014ec2:	4630      	mov	r0, r6
10014ec4:	685a      	ldr	r2, [r3, #4]
10014ec6:	f042 0201 	orr.w	r2, r2, #1
10014eca:	605a      	str	r2, [r3, #4]
10014ecc:	f854 3f08 	ldr.w	r3, [r4, #8]!
10014ed0:	60d9      	str	r1, [r3, #12]
10014ed2:	608b      	str	r3, [r1, #8]
10014ed4:	f002 fffc 	bl	10017ed0 <__malloc_unlock>
10014ed8:	e687      	b.n	10014bea <_malloc_r+0x52>
10014eda:	44a1      	add	r9, r4
10014edc:	4630      	mov	r0, r6
10014ede:	f8d9 3004 	ldr.w	r3, [r9, #4]
10014ee2:	f043 0301 	orr.w	r3, r3, #1
10014ee6:	f8c9 3004 	str.w	r3, [r9, #4]
10014eea:	3408      	adds	r4, #8
10014eec:	f002 fff0 	bl	10017ed0 <__malloc_unlock>
10014ef0:	e67b      	b.n	10014bea <_malloc_r+0x52>
10014ef2:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
10014ef6:	f105 0308 	add.w	r3, r5, #8
10014efa:	e65e      	b.n	10014bba <_malloc_r+0x22>
10014efc:	1962      	adds	r2, r4, r5
10014efe:	f043 0101 	orr.w	r1, r3, #1
10014f02:	f045 0501 	orr.w	r5, r5, #1
10014f06:	6065      	str	r5, [r4, #4]
10014f08:	4630      	mov	r0, r6
10014f0a:	e9c7 2204 	strd	r2, r2, [r7, #16]
10014f0e:	f8c2 8008 	str.w	r8, [r2, #8]
10014f12:	f8c2 800c 	str.w	r8, [r2, #12]
10014f16:	6051      	str	r1, [r2, #4]
10014f18:	f844 3009 	str.w	r3, [r4, r9]
10014f1c:	f002 ffd8 	bl	10017ed0 <__malloc_unlock>
10014f20:	3408      	adds	r4, #8
10014f22:	e662      	b.n	10014bea <_malloc_r+0x52>
10014f24:	ea4f 1299 	mov.w	r2, r9, lsr #6
10014f28:	f102 0339 	add.w	r3, r2, #57	@ 0x39
10014f2c:	00db      	lsls	r3, r3, #3
10014f2e:	3238      	adds	r2, #56	@ 0x38
10014f30:	e780      	b.n	10014e34 <_malloc_r+0x29c>
10014f32:	42bc      	cmp	r4, r7
10014f34:	d024      	beq.n	10014f80 <_malloc_r+0x3e8>
10014f36:	68bc      	ldr	r4, [r7, #8]
10014f38:	6862      	ldr	r2, [r4, #4]
10014f3a:	e743      	b.n	10014dc4 <_malloc_r+0x22c>
10014f3c:	f103 0c5c 	add.w	ip, r3, #92	@ 0x5c
10014f40:	f103 0e5b 	add.w	lr, r3, #91	@ 0x5b
10014f44:	ea4f 03cc 	mov.w	r3, ip, lsl #3
10014f48:	e66d      	b.n	10014c26 <_malloc_r+0x8e>
10014f4a:	f85a 3908 	ldr.w	r3, [sl], #-8
10014f4e:	4553      	cmp	r3, sl
10014f50:	f040 80d8 	bne.w	10015104 <_malloc_r+0x56c>
10014f54:	f01c 0f03 	tst.w	ip, #3
10014f58:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
10014f5c:	d1f5      	bne.n	10014f4a <_malloc_r+0x3b2>
10014f5e:	687b      	ldr	r3, [r7, #4]
10014f60:	ea23 0300 	bic.w	r3, r3, r0
10014f64:	607b      	str	r3, [r7, #4]
10014f66:	0040      	lsls	r0, r0, #1
10014f68:	4298      	cmp	r0, r3
10014f6a:	f63f aedc 	bhi.w	10014d26 <_malloc_r+0x18e>
10014f6e:	b918      	cbnz	r0, 10014f78 <_malloc_r+0x3e0>
10014f70:	e6d9      	b.n	10014d26 <_malloc_r+0x18e>
10014f72:	0040      	lsls	r0, r0, #1
10014f74:	f109 0904 	add.w	r9, r9, #4
10014f78:	4218      	tst	r0, r3
10014f7a:	d0fa      	beq.n	10014f72 <_malloc_r+0x3da>
10014f7c:	46cc      	mov	ip, r9
10014f7e:	e6a8      	b.n	10014cd2 <_malloc_r+0x13a>
10014f80:	4b61      	ldr	r3, [pc, #388]	@ (10015108 <_malloc_r+0x570>)
10014f82:	9901      	ldr	r1, [sp, #4]
10014f84:	6818      	ldr	r0, [r3, #0]
10014f86:	eb08 0c00 	add.w	ip, r8, r0
10014f8a:	3901      	subs	r1, #1
10014f8c:	f8c3 c000 	str.w	ip, [r3]
10014f90:	f8db 0000 	ldr.w	r0, [fp]
10014f94:	3001      	adds	r0, #1
10014f96:	bf1b      	ittet	ne
10014f98:	ebaa 0202 	subne.w	r2, sl, r2
10014f9c:	4462      	addne	r2, ip
10014f9e:	f8cb a000 	streq.w	sl, [fp]
10014fa2:	601a      	strne	r2, [r3, #0]
10014fa4:	f01a 0207 	ands.w	r2, sl, #7
10014fa8:	e9cd 2302 	strd	r2, r3, [sp, #8]
10014fac:	d042      	beq.n	10015034 <_malloc_r+0x49c>
10014fae:	f1c2 0208 	rsb	r2, r2, #8
10014fb2:	9b01      	ldr	r3, [sp, #4]
10014fb4:	4492      	add	sl, r2
10014fb6:	44d0      	add	r8, sl
10014fb8:	4413      	add	r3, r2
10014fba:	ea08 0001 	and.w	r0, r8, r1
10014fbe:	1a1a      	subs	r2, r3, r0
10014fc0:	ea02 0b01 	and.w	fp, r2, r1
10014fc4:	4659      	mov	r1, fp
10014fc6:	4630      	mov	r0, r6
10014fc8:	f004 fbf2 	bl	100197b0 <_sbrk_r>
10014fcc:	1c42      	adds	r2, r0, #1
10014fce:	9b03      	ldr	r3, [sp, #12]
10014fd0:	d07a      	beq.n	100150c8 <_malloc_r+0x530>
10014fd2:	eba0 000a 	sub.w	r0, r0, sl
10014fd6:	eb00 080b 	add.w	r8, r0, fp
10014fda:	6818      	ldr	r0, [r3, #0]
10014fdc:	f8c7 a008 	str.w	sl, [r7, #8]
10014fe0:	f048 0201 	orr.w	r2, r8, #1
10014fe4:	4458      	add	r0, fp
10014fe6:	42bc      	cmp	r4, r7
10014fe8:	f8ca 2004 	str.w	r2, [sl, #4]
10014fec:	6018      	str	r0, [r3, #0]
10014fee:	f43f aede 	beq.w	10014dae <_malloc_r+0x216>
10014ff2:	f1b9 0f0f 	cmp.w	r9, #15
10014ff6:	d942      	bls.n	1001507e <_malloc_r+0x4e6>
10014ff8:	6861      	ldr	r1, [r4, #4]
10014ffa:	f1a9 020c 	sub.w	r2, r9, #12
10014ffe:	f022 0207 	bic.w	r2, r2, #7
10015002:	f001 0101 	and.w	r1, r1, #1
10015006:	4311      	orrs	r1, r2
10015008:	6061      	str	r1, [r4, #4]
1001500a:	18a1      	adds	r1, r4, r2
1001500c:	f04f 0c05 	mov.w	ip, #5
10015010:	2a0f      	cmp	r2, #15
10015012:	f8c1 c004 	str.w	ip, [r1, #4]
10015016:	f8c1 c008 	str.w	ip, [r1, #8]
1001501a:	d84a      	bhi.n	100150b2 <_malloc_r+0x51a>
1001501c:	f8da 2004 	ldr.w	r2, [sl, #4]
10015020:	e6c5      	b.n	10014dae <_malloc_r+0x216>
10015022:	1092      	asrs	r2, r2, #2
10015024:	2001      	movs	r0, #1
10015026:	fa00 f202 	lsl.w	r2, r0, r2
1001502a:	ea4e 0e02 	orr.w	lr, lr, r2
1001502e:	f8c7 e004 	str.w	lr, [r7, #4]
10015032:	e70e      	b.n	10014e52 <_malloc_r+0x2ba>
10015034:	9b01      	ldr	r3, [sp, #4]
10015036:	eb0a 0208 	add.w	r2, sl, r8
1001503a:	400a      	ands	r2, r1
1001503c:	1a9a      	subs	r2, r3, r2
1001503e:	ea02 0b01 	and.w	fp, r2, r1
10015042:	4659      	mov	r1, fp
10015044:	4630      	mov	r0, r6
10015046:	f004 fbb3 	bl	100197b0 <_sbrk_r>
1001504a:	1c43      	adds	r3, r0, #1
1001504c:	9b03      	ldr	r3, [sp, #12]
1001504e:	d1c0      	bne.n	10014fd2 <_malloc_r+0x43a>
10015050:	f8dd b008 	ldr.w	fp, [sp, #8]
10015054:	e7c1      	b.n	10014fda <_malloc_r+0x442>
10015056:	2a54      	cmp	r2, #84	@ 0x54
10015058:	d815      	bhi.n	10015086 <_malloc_r+0x4ee>
1001505a:	ea4f 3219 	mov.w	r2, r9, lsr #12
1001505e:	f102 036f 	add.w	r3, r2, #111	@ 0x6f
10015062:	00db      	lsls	r3, r3, #3
10015064:	326e      	adds	r2, #110	@ 0x6e
10015066:	e6e5      	b.n	10014e34 <_malloc_r+0x29c>
10015068:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
1001506c:	d815      	bhi.n	1001509a <_malloc_r+0x502>
1001506e:	0beb      	lsrs	r3, r5, #15
10015070:	f103 0c78 	add.w	ip, r3, #120	@ 0x78
10015074:	f103 0e77 	add.w	lr, r3, #119	@ 0x77
10015078:	ea4f 03cc 	mov.w	r3, ip, lsl #3
1001507c:	e5d3      	b.n	10014c26 <_malloc_r+0x8e>
1001507e:	2301      	movs	r3, #1
10015080:	f8ca 3004 	str.w	r3, [sl, #4]
10015084:	e6a6      	b.n	10014dd4 <_malloc_r+0x23c>
10015086:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
1001508a:	d825      	bhi.n	100150d8 <_malloc_r+0x540>
1001508c:	ea4f 32d9 	mov.w	r2, r9, lsr #15
10015090:	f102 0378 	add.w	r3, r2, #120	@ 0x78
10015094:	00db      	lsls	r3, r3, #3
10015096:	3277      	adds	r2, #119	@ 0x77
10015098:	e6cc      	b.n	10014e34 <_malloc_r+0x29c>
1001509a:	f240 5254 	movw	r2, #1364	@ 0x554
1001509e:	4293      	cmp	r3, r2
100150a0:	d825      	bhi.n	100150ee <_malloc_r+0x556>
100150a2:	0cab      	lsrs	r3, r5, #18
100150a4:	f103 0c7d 	add.w	ip, r3, #125	@ 0x7d
100150a8:	f103 0e7c 	add.w	lr, r3, #124	@ 0x7c
100150ac:	ea4f 03cc 	mov.w	r3, ip, lsl #3
100150b0:	e5b9      	b.n	10014c26 <_malloc_r+0x8e>
100150b2:	4630      	mov	r0, r6
100150b4:	f104 0108 	add.w	r1, r4, #8
100150b8:	9301      	str	r3, [sp, #4]
100150ba:	f005 ff81 	bl	1001afc0 <_free_r>
100150be:	9b01      	ldr	r3, [sp, #4]
100150c0:	f8d7 a008 	ldr.w	sl, [r7, #8]
100150c4:	6818      	ldr	r0, [r3, #0]
100150c6:	e7a9      	b.n	1001501c <_malloc_r+0x484>
100150c8:	9a02      	ldr	r2, [sp, #8]
100150ca:	3a08      	subs	r2, #8
100150cc:	4490      	add	r8, r2
100150ce:	eba8 080a 	sub.w	r8, r8, sl
100150d2:	f04f 0b00 	mov.w	fp, #0
100150d6:	e780      	b.n	10014fda <_malloc_r+0x442>
100150d8:	f240 5354 	movw	r3, #1364	@ 0x554
100150dc:	429a      	cmp	r2, r3
100150de:	d80d      	bhi.n	100150fc <_malloc_r+0x564>
100150e0:	ea4f 4299 	mov.w	r2, r9, lsr #18
100150e4:	f102 037d 	add.w	r3, r2, #125	@ 0x7d
100150e8:	00db      	lsls	r3, r3, #3
100150ea:	327c      	adds	r2, #124	@ 0x7c
100150ec:	e6a2      	b.n	10014e34 <_malloc_r+0x29c>
100150ee:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
100150f2:	f04f 0c7f 	mov.w	ip, #127	@ 0x7f
100150f6:	f04f 0e7e 	mov.w	lr, #126	@ 0x7e
100150fa:	e594      	b.n	10014c26 <_malloc_r+0x8e>
100150fc:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
10015100:	227e      	movs	r2, #126	@ 0x7e
10015102:	e697      	b.n	10014e34 <_malloc_r+0x29c>
10015104:	687b      	ldr	r3, [r7, #4]
10015106:	e72e      	b.n	10014f66 <_malloc_r+0x3ce>
10015108:	20001454 	.word	0x20001454

1001510c <printf>:
1001510c:	b40f      	push	{r0, r1, r2, r3}
1001510e:	b500      	push	{lr}
10015110:	4907      	ldr	r1, [pc, #28]	@ (10015130 <printf+0x24>)
10015112:	b083      	sub	sp, #12
10015114:	ab04      	add	r3, sp, #16
10015116:	6808      	ldr	r0, [r1, #0]
10015118:	f853 2b04 	ldr.w	r2, [r3], #4
1001511c:	6881      	ldr	r1, [r0, #8]
1001511e:	9301      	str	r3, [sp, #4]
10015120:	f000 f808 	bl	10015134 <_vfprintf_r>
10015124:	b003      	add	sp, #12
10015126:	f85d eb04 	ldr.w	lr, [sp], #4
1001512a:	b004      	add	sp, #16
1001512c:	4770      	bx	lr
1001512e:	bf00      	nop
10015130:	20000598 	.word	0x20000598

10015134 <_vfprintf_r>:
10015134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10015138:	b0df      	sub	sp, #380	@ 0x17c
1001513a:	461c      	mov	r4, r3
1001513c:	9107      	str	r1, [sp, #28]
1001513e:	4691      	mov	r9, r2
10015140:	4683      	mov	fp, r0
10015142:	f004 fac7 	bl	100196d4 <_localeconv_r>
10015146:	6803      	ldr	r3, [r0, #0]
10015148:	9319      	str	r3, [sp, #100]	@ 0x64
1001514a:	4618      	mov	r0, r3
1001514c:	f004 fe18 	bl	10019d80 <strlen>
10015150:	2208      	movs	r2, #8
10015152:	9018      	str	r0, [sp, #96]	@ 0x60
10015154:	2100      	movs	r1, #0
10015156:	a82e      	add	r0, sp, #184	@ 0xb8
10015158:	940d      	str	r4, [sp, #52]	@ 0x34
1001515a:	f004 fa2f 	bl	100195bc <memset>
1001515e:	f1bb 0f00 	cmp.w	fp, #0
10015162:	d004      	beq.n	1001516e <_vfprintf_r+0x3a>
10015164:	f8db 3034 	ldr.w	r3, [fp, #52]	@ 0x34
10015168:	2b00      	cmp	r3, #0
1001516a:	f001 807f 	beq.w	1001626c <_vfprintf_r+0x1138>
1001516e:	9b07      	ldr	r3, [sp, #28]
10015170:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
10015172:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
10015176:	07d5      	lsls	r5, r2, #31
10015178:	d402      	bmi.n	10015180 <_vfprintf_r+0x4c>
1001517a:	0598      	lsls	r0, r3, #22
1001517c:	f140 869f 	bpl.w	10015ebe <_vfprintf_r+0xd8a>
10015180:	0499      	lsls	r1, r3, #18
10015182:	d407      	bmi.n	10015194 <_vfprintf_r+0x60>
10015184:	9907      	ldr	r1, [sp, #28]
10015186:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
10015188:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
1001518c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
10015190:	818b      	strh	r3, [r1, #12]
10015192:	664a      	str	r2, [r1, #100]	@ 0x64
10015194:	071a      	lsls	r2, r3, #28
10015196:	f140 80cc 	bpl.w	10015332 <_vfprintf_r+0x1fe>
1001519a:	9a07      	ldr	r2, [sp, #28]
1001519c:	6912      	ldr	r2, [r2, #16]
1001519e:	2a00      	cmp	r2, #0
100151a0:	f000 80c7 	beq.w	10015332 <_vfprintf_r+0x1fe>
100151a4:	f003 021a 	and.w	r2, r3, #26
100151a8:	2a0a      	cmp	r2, #10
100151aa:	f000 80d1 	beq.w	10015350 <_vfprintf_r+0x21c>
100151ae:	2300      	movs	r3, #0
100151b0:	e9cd 3333 	strd	r3, r3, [sp, #204]	@ 0xcc
100151b4:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
100151b8:	e9cd 331d 	strd	r3, r3, [sp, #116]	@ 0x74
100151bc:	9313      	str	r3, [sp, #76]	@ 0x4c
100151be:	931a      	str	r3, [sp, #104]	@ 0x68
100151c0:	930a      	str	r3, [sp, #40]	@ 0x28
100151c2:	2400      	movs	r4, #0
100151c4:	2300      	movs	r3, #0
100151c6:	e9cd 3416 	strd	r3, r4, [sp, #88]	@ 0x58
100151ca:	aa35      	add	r2, sp, #212	@ 0xd4
100151cc:	9232      	str	r2, [sp, #200]	@ 0xc8
100151ce:	4690      	mov	r8, r2
100151d0:	f8cd b020 	str.w	fp, [sp, #32]
100151d4:	464d      	mov	r5, r9
100151d6:	9f08      	ldr	r7, [sp, #32]
100151d8:	462e      	mov	r6, r5
100151da:	4b8d      	ldr	r3, [pc, #564]	@ (10015410 <_vfprintf_r+0x2dc>)
100151dc:	f8d3 40e4 	ldr.w	r4, [r3, #228]	@ 0xe4
100151e0:	f004 fa72 	bl	100196c8 <__locale_mb_cur_max>
100151e4:	4603      	mov	r3, r0
100151e6:	a82e      	add	r0, sp, #184	@ 0xb8
100151e8:	9000      	str	r0, [sp, #0]
100151ea:	4632      	mov	r2, r6
100151ec:	a92a      	add	r1, sp, #168	@ 0xa8
100151ee:	4638      	mov	r0, r7
100151f0:	47a0      	blx	r4
100151f2:	2800      	cmp	r0, #0
100151f4:	f000 80cb 	beq.w	1001538e <_vfprintf_r+0x25a>
100151f8:	f2c0 80c1 	blt.w	1001537e <_vfprintf_r+0x24a>
100151fc:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
100151fe:	2a25      	cmp	r2, #37	@ 0x25
10015200:	4603      	mov	r3, r0
10015202:	d001      	beq.n	10015208 <_vfprintf_r+0xd4>
10015204:	441e      	add	r6, r3
10015206:	e7e8      	b.n	100151da <_vfprintf_r+0xa6>
10015208:	1b77      	subs	r7, r6, r5
1001520a:	4604      	mov	r4, r0
1001520c:	f040 80c2 	bne.w	10015394 <_vfprintf_r+0x260>
10015210:	2300      	movs	r3, #0
10015212:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
10015216:	4699      	mov	r9, r3
10015218:	930b      	str	r3, [sp, #44]	@ 0x2c
1001521a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1001521e:	7873      	ldrb	r3, [r6, #1]
10015220:	9209      	str	r2, [sp, #36]	@ 0x24
10015222:	1c74      	adds	r4, r6, #1
10015224:	3401      	adds	r4, #1
10015226:	f1a3 0220 	sub.w	r2, r3, #32
1001522a:	2a5a      	cmp	r2, #90	@ 0x5a
1001522c:	f200 80f2 	bhi.w	10015414 <_vfprintf_r+0x2e0>
10015230:	e8df f012 	tbh	[pc, r2, lsl #1]
10015234:	00f002c7 	.word	0x00f002c7
10015238:	02c300f0 	.word	0x02c300f0
1001523c:	00f000f0 	.word	0x00f000f0
10015240:	006a00f0 	.word	0x006a00f0
10015244:	00f000f0 	.word	0x00f000f0
10015248:	02a0027d 	.word	0x02a0027d
1001524c:	028800f0 	.word	0x028800f0
10015250:	00f002a9 	.word	0x00f002a9
10015254:	005b02a5 	.word	0x005b02a5
10015258:	005b005b 	.word	0x005b005b
1001525c:	005b005b 	.word	0x005b005b
10015260:	005b005b 	.word	0x005b005b
10015264:	005b005b 	.word	0x005b005b
10015268:	00f000f0 	.word	0x00f000f0
1001526c:	00f000f0 	.word	0x00f000f0
10015270:	00f000f0 	.word	0x00f000f0
10015274:	017100f0 	.word	0x017100f0
10015278:	020800f0 	.word	0x020800f0
1001527c:	01710322 	.word	0x01710322
10015280:	01710171 	.word	0x01710171
10015284:	00f000f0 	.word	0x00f000f0
10015288:	00f000f0 	.word	0x00f000f0
1001528c:	00f0031e 	.word	0x00f0031e
10015290:	02da00f0 	.word	0x02da00f0
10015294:	00f000f0 	.word	0x00f000f0
10015298:	022600f0 	.word	0x022600f0
1001529c:	030b00f0 	.word	0x030b00f0
100152a0:	00f000f0 	.word	0x00f000f0
100152a4:	00f00717 	.word	0x00f00717
100152a8:	00f000f0 	.word	0x00f000f0
100152ac:	00f000f0 	.word	0x00f000f0
100152b0:	00f000f0 	.word	0x00f000f0
100152b4:	017100f0 	.word	0x017100f0
100152b8:	020800f0 	.word	0x020800f0
100152bc:	01710258 	.word	0x01710258
100152c0:	01710171 	.word	0x01710171
100152c4:	02580296 	.word	0x02580296
100152c8:	00f00204 	.word	0x00f00204
100152cc:	00f0028c 	.word	0x00f0028c
100152d0:	073f034d 	.word	0x073f034d
100152d4:	0204033b 	.word	0x0204033b
100152d8:	022600f0 	.word	0x022600f0
100152dc:	073a007d 	.word	0x073a007d
100152e0:	00f000f0 	.word	0x00f000f0
100152e4:	00f00743 	.word	0x00f00743
100152e8:	007d      	.short	0x007d
100152ea:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
100152ee:	2100      	movs	r1, #0
100152f0:	f814 3b01 	ldrb.w	r3, [r4], #1
100152f4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
100152f8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
100152fc:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
10015300:	2a09      	cmp	r2, #9
10015302:	d9f5      	bls.n	100152f0 <_vfprintf_r+0x1bc>
10015304:	910b      	str	r1, [sp, #44]	@ 0x2c
10015306:	e78e      	b.n	10015226 <_vfprintf_r+0xf2>
10015308:	9f08      	ldr	r7, [sp, #32]
1001530a:	4638      	mov	r0, r7
1001530c:	f004 f9e2 	bl	100196d4 <_localeconv_r>
10015310:	6843      	ldr	r3, [r0, #4]
10015312:	931d      	str	r3, [sp, #116]	@ 0x74
10015314:	4618      	mov	r0, r3
10015316:	f004 fd33 	bl	10019d80 <strlen>
1001531a:	901e      	str	r0, [sp, #120]	@ 0x78
1001531c:	4606      	mov	r6, r0
1001531e:	4638      	mov	r0, r7
10015320:	f004 f9d8 	bl	100196d4 <_localeconv_r>
10015324:	6883      	ldr	r3, [r0, #8]
10015326:	931b      	str	r3, [sp, #108]	@ 0x6c
10015328:	2e00      	cmp	r6, #0
1001532a:	f040 8621 	bne.w	10015f70 <_vfprintf_r+0xe3c>
1001532e:	7823      	ldrb	r3, [r4, #0]
10015330:	e778      	b.n	10015224 <_vfprintf_r+0xf0>
10015332:	9d07      	ldr	r5, [sp, #28]
10015334:	4658      	mov	r0, fp
10015336:	4629      	mov	r1, r5
10015338:	f003 fe26 	bl	10018f88 <__swsetup_r>
1001533c:	2800      	cmp	r0, #0
1001533e:	f041 83a6 	bne.w	10016a8e <_vfprintf_r+0x195a>
10015342:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
10015346:	f003 021a 	and.w	r2, r3, #26
1001534a:	2a0a      	cmp	r2, #10
1001534c:	f47f af2f 	bne.w	100151ae <_vfprintf_r+0x7a>
10015350:	9907      	ldr	r1, [sp, #28]
10015352:	f9b1 200e 	ldrsh.w	r2, [r1, #14]
10015356:	2a00      	cmp	r2, #0
10015358:	f6ff af29 	blt.w	100151ae <_vfprintf_r+0x7a>
1001535c:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
1001535e:	07d5      	lsls	r5, r2, #31
10015360:	d402      	bmi.n	10015368 <_vfprintf_r+0x234>
10015362:	0598      	lsls	r0, r3, #22
10015364:	f141 81bf 	bpl.w	100166e6 <_vfprintf_r+0x15b2>
10015368:	9907      	ldr	r1, [sp, #28]
1001536a:	4623      	mov	r3, r4
1001536c:	464a      	mov	r2, r9
1001536e:	4658      	mov	r0, fp
10015370:	f001 fd04 	bl	10016d7c <__sbprintf>
10015374:	900a      	str	r0, [sp, #40]	@ 0x28
10015376:	980a      	ldr	r0, [sp, #40]	@ 0x28
10015378:	b05f      	add	sp, #380	@ 0x17c
1001537a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001537e:	2208      	movs	r2, #8
10015380:	2100      	movs	r1, #0
10015382:	a82e      	add	r0, sp, #184	@ 0xb8
10015384:	f004 f91a 	bl	100195bc <memset>
10015388:	2301      	movs	r3, #1
1001538a:	441e      	add	r6, r3
1001538c:	e725      	b.n	100151da <_vfprintf_r+0xa6>
1001538e:	1b77      	subs	r7, r6, r5
10015390:	4604      	mov	r4, r0
10015392:	d011      	beq.n	100153b8 <_vfprintf_r+0x284>
10015394:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
10015396:	443b      	add	r3, r7
10015398:	9334      	str	r3, [sp, #208]	@ 0xd0
1001539a:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001539c:	3301      	adds	r3, #1
1001539e:	2b07      	cmp	r3, #7
100153a0:	e9c8 5700 	strd	r5, r7, [r8]
100153a4:	9333      	str	r3, [sp, #204]	@ 0xcc
100153a6:	dc13      	bgt.n	100153d0 <_vfprintf_r+0x29c>
100153a8:	f108 0808 	add.w	r8, r8, #8
100153ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100153ae:	443b      	add	r3, r7
100153b0:	930a      	str	r3, [sp, #40]	@ 0x28
100153b2:	2c00      	cmp	r4, #0
100153b4:	f47f af2c 	bne.w	10015210 <_vfprintf_r+0xdc>
100153b8:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
100153ba:	f8dd b020 	ldr.w	fp, [sp, #32]
100153be:	2b00      	cmp	r3, #0
100153c0:	f041 80d6 	bne.w	10016570 <_vfprintf_r+0x143c>
100153c4:	9b07      	ldr	r3, [sp, #28]
100153c6:	2200      	movs	r2, #0
100153c8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
100153cc:	9233      	str	r2, [sp, #204]	@ 0xcc
100153ce:	e012      	b.n	100153f6 <_vfprintf_r+0x2c2>
100153d0:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
100153d4:	aa32      	add	r2, sp, #200	@ 0xc8
100153d6:	f001 fd4d 	bl	10016e74 <__sprint_r>
100153da:	b948      	cbnz	r0, 100153f0 <_vfprintf_r+0x2bc>
100153dc:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100153e0:	e7e4      	b.n	100153ac <_vfprintf_r+0x278>
100153e2:	46bb      	mov	fp, r7
100153e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100153e6:	b11b      	cbz	r3, 100153f0 <_vfprintf_r+0x2bc>
100153e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
100153ea:	4658      	mov	r0, fp
100153ec:	f005 fde8 	bl	1001afc0 <_free_r>
100153f0:	9b07      	ldr	r3, [sp, #28]
100153f2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
100153f6:	9a07      	ldr	r2, [sp, #28]
100153f8:	6e52      	ldr	r2, [r2, #100]	@ 0x64
100153fa:	07d4      	lsls	r4, r2, #31
100153fc:	f140 8114 	bpl.w	10015628 <_vfprintf_r+0x4f4>
10015400:	0659      	lsls	r1, r3, #25
10015402:	f101 8350 	bmi.w	10016aa6 <_vfprintf_r+0x1972>
10015406:	980a      	ldr	r0, [sp, #40]	@ 0x28
10015408:	b05f      	add	sp, #380	@ 0x17c
1001540a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001540e:	bf00      	nop
10015410:	2000042c 	.word	0x2000042c
10015414:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10015418:	2b00      	cmp	r3, #0
1001541a:	d0cd      	beq.n	100153b8 <_vfprintf_r+0x284>
1001541c:	2200      	movs	r2, #0
1001541e:	f88d 3114 	strb.w	r3, [sp, #276]	@ 0x114
10015422:	2301      	movs	r3, #1
10015424:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
10015428:	9306      	str	r3, [sp, #24]
1001542a:	920c      	str	r2, [sp, #48]	@ 0x30
1001542c:	469b      	mov	fp, r3
1001542e:	9209      	str	r2, [sp, #36]	@ 0x24
10015430:	9214      	str	r2, [sp, #80]	@ 0x50
10015432:	9210      	str	r2, [sp, #64]	@ 0x40
10015434:	9212      	str	r2, [sp, #72]	@ 0x48
10015436:	ad45      	add	r5, sp, #276	@ 0x114
10015438:	f019 0302 	ands.w	r3, r9, #2
1001543c:	d002      	beq.n	10015444 <_vfprintf_r+0x310>
1001543e:	9906      	ldr	r1, [sp, #24]
10015440:	3102      	adds	r1, #2
10015442:	9106      	str	r1, [sp, #24]
10015444:	f019 0784 	ands.w	r7, r9, #132	@ 0x84
10015448:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001544a:	d105      	bne.n	10015458 <_vfprintf_r+0x324>
1001544c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1001544e:	9806      	ldr	r0, [sp, #24]
10015450:	1a0e      	subs	r6, r1, r0
10015452:	2e00      	cmp	r6, #0
10015454:	f300 80a7 	bgt.w	100155a6 <_vfprintf_r+0x472>
10015458:	b182      	cbz	r2, 1001547c <_vfprintf_r+0x348>
1001545a:	2201      	movs	r2, #1
1001545c:	f8c8 2004 	str.w	r2, [r8, #4]
10015460:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
10015462:	3201      	adds	r2, #1
10015464:	3401      	adds	r4, #1
10015466:	f10d 019f 	add.w	r1, sp, #159	@ 0x9f
1001546a:	2a07      	cmp	r2, #7
1001546c:	9434      	str	r4, [sp, #208]	@ 0xd0
1001546e:	9233      	str	r2, [sp, #204]	@ 0xcc
10015470:	f8c8 1000 	str.w	r1, [r8]
10015474:	f300 83e1 	bgt.w	10015c3a <_vfprintf_r+0xb06>
10015478:	f108 0808 	add.w	r8, r8, #8
1001547c:	b183      	cbz	r3, 100154a0 <_vfprintf_r+0x36c>
1001547e:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10015480:	aa28      	add	r2, sp, #160	@ 0xa0
10015482:	3301      	adds	r3, #1
10015484:	3402      	adds	r4, #2
10015486:	f8c8 2000 	str.w	r2, [r8]
1001548a:	2b07      	cmp	r3, #7
1001548c:	f04f 0202 	mov.w	r2, #2
10015490:	9434      	str	r4, [sp, #208]	@ 0xd0
10015492:	9333      	str	r3, [sp, #204]	@ 0xcc
10015494:	f8c8 2004 	str.w	r2, [r8, #4]
10015498:	f300 83dd 	bgt.w	10015c56 <_vfprintf_r+0xb22>
1001549c:	f108 0808 	add.w	r8, r8, #8
100154a0:	2f80      	cmp	r7, #128	@ 0x80
100154a2:	f000 82be 	beq.w	10015a22 <_vfprintf_r+0x8ee>
100154a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100154a8:	eba3 060b 	sub.w	r6, r3, fp
100154ac:	2e00      	cmp	r6, #0
100154ae:	f300 82fd 	bgt.w	10015aac <_vfprintf_r+0x978>
100154b2:	f419 7f80 	tst.w	r9, #256	@ 0x100
100154b6:	f040 8219 	bne.w	100158ec <_vfprintf_r+0x7b8>
100154ba:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
100154bc:	f8c8 5000 	str.w	r5, [r8]
100154c0:	3301      	adds	r3, #1
100154c2:	445c      	add	r4, fp
100154c4:	2b07      	cmp	r3, #7
100154c6:	f8c8 b004 	str.w	fp, [r8, #4]
100154ca:	9434      	str	r4, [sp, #208]	@ 0xd0
100154cc:	9333      	str	r3, [sp, #204]	@ 0xcc
100154ce:	f300 834d 	bgt.w	10015b6c <_vfprintf_r+0xa38>
100154d2:	f108 0808 	add.w	r8, r8, #8
100154d6:	f019 0f04 	tst.w	r9, #4
100154da:	d005      	beq.n	100154e8 <_vfprintf_r+0x3b4>
100154dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
100154de:	9a06      	ldr	r2, [sp, #24]
100154e0:	1a9d      	subs	r5, r3, r2
100154e2:	2d00      	cmp	r5, #0
100154e4:	f300 83c3 	bgt.w	10015c6e <_vfprintf_r+0xb3a>
100154e8:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	@ 0x28
100154ec:	9906      	ldr	r1, [sp, #24]
100154ee:	428a      	cmp	r2, r1
100154f0:	bfac      	ite	ge
100154f2:	189b      	addge	r3, r3, r2
100154f4:	185b      	addlt	r3, r3, r1
100154f6:	930a      	str	r3, [sp, #40]	@ 0x28
100154f8:	2c00      	cmp	r4, #0
100154fa:	f040 830f 	bne.w	10015b1c <_vfprintf_r+0x9e8>
100154fe:	2300      	movs	r3, #0
10015500:	9333      	str	r3, [sp, #204]	@ 0xcc
10015502:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10015504:	b11b      	cbz	r3, 1001550e <_vfprintf_r+0x3da>
10015506:	990c      	ldr	r1, [sp, #48]	@ 0x30
10015508:	9808      	ldr	r0, [sp, #32]
1001550a:	f005 fd59 	bl	1001afc0 <_free_r>
1001550e:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10015512:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10015514:	e65f      	b.n	100151d6 <_vfprintf_r+0xa2>
10015516:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001551a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001551c:	3307      	adds	r3, #7
1001551e:	f023 0307 	bic.w	r3, r3, #7
10015522:	e8f3 6702 	ldrd	r6, r7, [r3], #8
10015526:	930d      	str	r3, [sp, #52]	@ 0x34
10015528:	f027 4300 	bic.w	r3, r7, #2147483648	@ 0x80000000
1001552c:	9323      	str	r3, [sp, #140]	@ 0x8c
1001552e:	9622      	str	r6, [sp, #136]	@ 0x88
10015530:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	@ 0x88
10015534:	4ba8      	ldr	r3, [pc, #672]	@ (100157d8 <_vfprintf_r+0x6a4>)
10015536:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1001553a:	4650      	mov	r0, sl
1001553c:	4659      	mov	r1, fp
1001553e:	e9cd 6716 	strd	r6, r7, [sp, #88]	@ 0x58
10015542:	f00c ffe1 	bl	10022508 <__aeabi_dcmpun>
10015546:	2800      	cmp	r0, #0
10015548:	f040 8530 	bne.w	10015fac <_vfprintf_r+0xe78>
1001554c:	4ba2      	ldr	r3, [pc, #648]	@ (100157d8 <_vfprintf_r+0x6a4>)
1001554e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10015552:	4650      	mov	r0, sl
10015554:	4659      	mov	r1, fp
10015556:	f00c ffb9 	bl	100224cc <__aeabi_dcmple>
1001555a:	2800      	cmp	r0, #0
1001555c:	f040 8526 	bne.w	10015fac <_vfprintf_r+0xe78>
10015560:	2200      	movs	r2, #0
10015562:	2300      	movs	r3, #0
10015564:	4630      	mov	r0, r6
10015566:	4639      	mov	r1, r7
10015568:	f00c ffa6 	bl	100224b8 <__aeabi_dcmplt>
1001556c:	2800      	cmp	r0, #0
1001556e:	f041 810f 	bne.w	10016790 <_vfprintf_r+0x165c>
10015572:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10015576:	4d99      	ldr	r5, [pc, #612]	@ (100157dc <_vfprintf_r+0x6a8>)
10015578:	4b99      	ldr	r3, [pc, #612]	@ (100157e0 <_vfprintf_r+0x6ac>)
1001557a:	f029 0980 	bic.w	r9, r9, #128	@ 0x80
1001557e:	990e      	ldr	r1, [sp, #56]	@ 0x38
10015580:	2947      	cmp	r1, #71	@ 0x47
10015582:	bfc8      	it	gt
10015584:	461d      	movgt	r5, r3
10015586:	2300      	movs	r3, #0
10015588:	2103      	movs	r1, #3
1001558a:	930c      	str	r3, [sp, #48]	@ 0x30
1001558c:	9106      	str	r1, [sp, #24]
1001558e:	468b      	mov	fp, r1
10015590:	9309      	str	r3, [sp, #36]	@ 0x24
10015592:	9314      	str	r3, [sp, #80]	@ 0x50
10015594:	9310      	str	r3, [sp, #64]	@ 0x40
10015596:	9312      	str	r3, [sp, #72]	@ 0x48
10015598:	2a00      	cmp	r2, #0
1001559a:	f43f af4d 	beq.w	10015438 <_vfprintf_r+0x304>
1001559e:	9b06      	ldr	r3, [sp, #24]
100155a0:	3301      	adds	r3, #1
100155a2:	9306      	str	r3, [sp, #24]
100155a4:	e748      	b.n	10015438 <_vfprintf_r+0x304>
100155a6:	2e10      	cmp	r6, #16
100155a8:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
100155aa:	f341 823d 	ble.w	10016a28 <_vfprintf_r+0x18f4>
100155ae:	488d      	ldr	r0, [pc, #564]	@ (100157e4 <_vfprintf_r+0x6b0>)
100155b0:	9521      	str	r5, [sp, #132]	@ 0x84
100155b2:	e9cd 371f 	strd	r3, r7, [sp, #124]	@ 0x7c
100155b6:	4621      	mov	r1, r4
100155b8:	9d07      	ldr	r5, [sp, #28]
100155ba:	9c08      	ldr	r4, [sp, #32]
100155bc:	9015      	str	r0, [sp, #84]	@ 0x54
100155be:	f04f 0a10 	mov.w	sl, #16
100155c2:	4607      	mov	r7, r0
100155c4:	e004      	b.n	100155d0 <_vfprintf_r+0x49c>
100155c6:	3e10      	subs	r6, #16
100155c8:	2e10      	cmp	r6, #16
100155ca:	f108 0808 	add.w	r8, r8, #8
100155ce:	dd16      	ble.n	100155fe <_vfprintf_r+0x4ca>
100155d0:	3201      	adds	r2, #1
100155d2:	3110      	adds	r1, #16
100155d4:	2a07      	cmp	r2, #7
100155d6:	e9c8 7a00 	strd	r7, sl, [r8]
100155da:	e9cd 2133 	strd	r2, r1, [sp, #204]	@ 0xcc
100155de:	ddf2      	ble.n	100155c6 <_vfprintf_r+0x492>
100155e0:	aa32      	add	r2, sp, #200	@ 0xc8
100155e2:	4629      	mov	r1, r5
100155e4:	4620      	mov	r0, r4
100155e6:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100155ea:	f001 fc43 	bl	10016e74 <__sprint_r>
100155ee:	2800      	cmp	r0, #0
100155f0:	f040 8636 	bne.w	10016260 <_vfprintf_r+0x112c>
100155f4:	3e10      	subs	r6, #16
100155f6:	2e10      	cmp	r6, #16
100155f8:	e9dd 2133 	ldrd	r2, r1, [sp, #204]	@ 0xcc
100155fc:	dce8      	bgt.n	100155d0 <_vfprintf_r+0x49c>
100155fe:	e9dd 371f 	ldrd	r3, r7, [sp, #124]	@ 0x7c
10015602:	9d21      	ldr	r5, [sp, #132]	@ 0x84
10015604:	460c      	mov	r4, r1
10015606:	3201      	adds	r2, #1
10015608:	9915      	ldr	r1, [sp, #84]	@ 0x54
1001560a:	f8c8 1000 	str.w	r1, [r8]
1001560e:	4434      	add	r4, r6
10015610:	2a07      	cmp	r2, #7
10015612:	e9cd 2433 	strd	r2, r4, [sp, #204]	@ 0xcc
10015616:	f8c8 6004 	str.w	r6, [r8, #4]
1001561a:	f300 8610 	bgt.w	1001623e <_vfprintf_r+0x110a>
1001561e:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10015622:	f108 0808 	add.w	r8, r8, #8
10015626:	e717      	b.n	10015458 <_vfprintf_r+0x324>
10015628:	0598      	lsls	r0, r3, #22
1001562a:	f53f aee9 	bmi.w	10015400 <_vfprintf_r+0x2cc>
1001562e:	9c07      	ldr	r4, [sp, #28]
10015630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10015632:	f004 faa3 	bl	10019b7c <__retarget_lock_release_recursive>
10015636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001563a:	e6e1      	b.n	10015400 <_vfprintf_r+0x2cc>
1001563c:	7823      	ldrb	r3, [r4, #0]
1001563e:	f049 0920 	orr.w	r9, r9, #32
10015642:	e5ef      	b.n	10015224 <_vfprintf_r+0xf0>
10015644:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10015646:	2b43      	cmp	r3, #67	@ 0x43
10015648:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001564c:	f102 0404 	add.w	r4, r2, #4
10015650:	f000 8562 	beq.w	10016118 <_vfprintf_r+0xfe4>
10015654:	f019 0f10 	tst.w	r9, #16
10015658:	f040 855e 	bne.w	10016118 <_vfprintf_r+0xfe4>
1001565c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001565e:	681b      	ldr	r3, [r3, #0]
10015660:	f88d 3114 	strb.w	r3, [sp, #276]	@ 0x114
10015664:	2301      	movs	r3, #1
10015666:	9306      	str	r3, [sp, #24]
10015668:	469b      	mov	fp, r3
1001566a:	ad45      	add	r5, sp, #276	@ 0x114
1001566c:	2200      	movs	r2, #0
1001566e:	940d      	str	r4, [sp, #52]	@ 0x34
10015670:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
10015674:	920c      	str	r2, [sp, #48]	@ 0x30
10015676:	9209      	str	r2, [sp, #36]	@ 0x24
10015678:	9214      	str	r2, [sp, #80]	@ 0x50
1001567a:	9210      	str	r2, [sp, #64]	@ 0x40
1001567c:	9212      	str	r2, [sp, #72]	@ 0x48
1001567e:	e6db      	b.n	10015438 <_vfprintf_r+0x304>
10015680:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10015682:	f856 5b04 	ldr.w	r5, [r6], #4
10015686:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001568a:	2300      	movs	r3, #0
1001568c:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
10015690:	2d00      	cmp	r5, #0
10015692:	f000 8530 	beq.w	100160f6 <_vfprintf_r+0xfc2>
10015696:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10015698:	2b53      	cmp	r3, #83	@ 0x53
1001569a:	f000 8601 	beq.w	100162a0 <_vfprintf_r+0x116c>
1001569e:	f019 0310 	ands.w	r3, r9, #16
100156a2:	9312      	str	r3, [sp, #72]	@ 0x48
100156a4:	f040 85fc 	bne.w	100162a0 <_vfprintf_r+0x116c>
100156a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100156aa:	1c5a      	adds	r2, r3, #1
100156ac:	f000 876a 	beq.w	10016584 <_vfprintf_r+0x1450>
100156b0:	9912      	ldr	r1, [sp, #72]	@ 0x48
100156b2:	461a      	mov	r2, r3
100156b4:	4628      	mov	r0, r5
100156b6:	f004 fa6b 	bl	10019b90 <memchr>
100156ba:	900c      	str	r0, [sp, #48]	@ 0x30
100156bc:	2800      	cmp	r0, #0
100156be:	f001 82c5 	beq.w	10016c4c <_vfprintf_r+0x1b18>
100156c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100156c4:	960d      	str	r6, [sp, #52]	@ 0x34
100156c6:	eba3 0b05 	sub.w	fp, r3, r5
100156ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
100156cc:	9309      	str	r3, [sp, #36]	@ 0x24
100156ce:	ea2b 71eb 	bic.w	r1, fp, fp, asr #31
100156d2:	9314      	str	r3, [sp, #80]	@ 0x50
100156d4:	9310      	str	r3, [sp, #64]	@ 0x40
100156d6:	930c      	str	r3, [sp, #48]	@ 0x30
100156d8:	2373      	movs	r3, #115	@ 0x73
100156da:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
100156de:	9106      	str	r1, [sp, #24]
100156e0:	930e      	str	r3, [sp, #56]	@ 0x38
100156e2:	e759      	b.n	10015598 <_vfprintf_r+0x464>
100156e4:	f019 0f20 	tst.w	r9, #32
100156e8:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
100156ec:	f000 80cc 	beq.w	10015888 <_vfprintf_r+0x754>
100156f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100156f2:	3307      	adds	r3, #7
100156f4:	f023 0307 	bic.w	r3, r3, #7
100156f8:	461a      	mov	r2, r3
100156fa:	6859      	ldr	r1, [r3, #4]
100156fc:	f852 3b08 	ldr.w	r3, [r2], #8
10015700:	920d      	str	r2, [sp, #52]	@ 0x34
10015702:	460a      	mov	r2, r1
10015704:	2900      	cmp	r1, #0
10015706:	f2c0 8425 	blt.w	10015f54 <_vfprintf_r+0xe20>
1001570a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001570c:	3101      	adds	r1, #1
1001570e:	f000 8285 	beq.w	10015c1c <_vfprintf_r+0xae8>
10015712:	ea53 0102 	orrs.w	r1, r3, r2
10015716:	f029 0480 	bic.w	r4, r9, #128	@ 0x80
1001571a:	f040 8280 	bne.w	10015c1e <_vfprintf_r+0xaea>
1001571e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10015720:	2a00      	cmp	r2, #0
10015722:	f040 8281 	bne.w	10015c28 <_vfprintf_r+0xaf4>
10015726:	46a1      	mov	r9, r4
10015728:	4693      	mov	fp, r2
1001572a:	ad5e      	add	r5, sp, #376	@ 0x178
1001572c:	e150      	b.n	100159d0 <_vfprintf_r+0x89c>
1001572e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10015730:	f853 2b04 	ldr.w	r2, [r3], #4
10015734:	920b      	str	r2, [sp, #44]	@ 0x2c
10015736:	2a00      	cmp	r2, #0
10015738:	f280 83ce 	bge.w	10015ed8 <_vfprintf_r+0xda4>
1001573c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1001573e:	930d      	str	r3, [sp, #52]	@ 0x34
10015740:	4252      	negs	r2, r2
10015742:	920b      	str	r2, [sp, #44]	@ 0x2c
10015744:	7823      	ldrb	r3, [r4, #0]
10015746:	f049 0904 	orr.w	r9, r9, #4
1001574a:	e56b      	b.n	10015224 <_vfprintf_r+0xf0>
1001574c:	7823      	ldrb	r3, [r4, #0]
1001574e:	2b6c      	cmp	r3, #108	@ 0x6c
10015750:	bf03      	ittte	eq
10015752:	7863      	ldrbeq	r3, [r4, #1]
10015754:	f049 0920 	orreq.w	r9, r9, #32
10015758:	3401      	addeq	r4, #1
1001575a:	f049 0910 	orrne.w	r9, r9, #16
1001575e:	e561      	b.n	10015224 <_vfprintf_r+0xf0>
10015760:	7823      	ldrb	r3, [r4, #0]
10015762:	2b68      	cmp	r3, #104	@ 0x68
10015764:	bf03      	ittte	eq
10015766:	7863      	ldrbeq	r3, [r4, #1]
10015768:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
1001576c:	3401      	addeq	r4, #1
1001576e:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
10015772:	e557      	b.n	10015224 <_vfprintf_r+0xf0>
10015774:	232b      	movs	r3, #43	@ 0x2b
10015776:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
1001577a:	7823      	ldrb	r3, [r4, #0]
1001577c:	e552      	b.n	10015224 <_vfprintf_r+0xf0>
1001577e:	7823      	ldrb	r3, [r4, #0]
10015780:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
10015784:	e54e      	b.n	10015224 <_vfprintf_r+0xf0>
10015786:	4621      	mov	r1, r4
10015788:	f811 3b01 	ldrb.w	r3, [r1], #1
1001578c:	2b2a      	cmp	r3, #42	@ 0x2a
1001578e:	f001 82db 	beq.w	10016d48 <_vfprintf_r+0x1c14>
10015792:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
10015796:	2a09      	cmp	r2, #9
10015798:	460c      	mov	r4, r1
1001579a:	bf98      	it	ls
1001579c:	2100      	movls	r1, #0
1001579e:	f201 8172 	bhi.w	10016a86 <_vfprintf_r+0x1952>
100157a2:	f814 3b01 	ldrb.w	r3, [r4], #1
100157a6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
100157aa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
100157ae:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
100157b2:	2a09      	cmp	r2, #9
100157b4:	d9f5      	bls.n	100157a2 <_vfprintf_r+0x66e>
100157b6:	9109      	str	r1, [sp, #36]	@ 0x24
100157b8:	e535      	b.n	10015226 <_vfprintf_r+0xf2>
100157ba:	7823      	ldrb	r3, [r4, #0]
100157bc:	f049 0901 	orr.w	r9, r9, #1
100157c0:	e530      	b.n	10015224 <_vfprintf_r+0xf0>
100157c2:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
100157c6:	7823      	ldrb	r3, [r4, #0]
100157c8:	2a00      	cmp	r2, #0
100157ca:	f47f ad2b 	bne.w	10015224 <_vfprintf_r+0xf0>
100157ce:	2220      	movs	r2, #32
100157d0:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
100157d4:	e526      	b.n	10015224 <_vfprintf_r+0xf0>
100157d6:	bf00      	nop
100157d8:	7fefffff 	.word	0x7fefffff
100157dc:	10025474 	.word	0x10025474
100157e0:	10025478 	.word	0x10025478
100157e4:	100254c8 	.word	0x100254c8
100157e8:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
100157ec:	f049 0910 	orr.w	r9, r9, #16
100157f0:	f019 0220 	ands.w	r2, r9, #32
100157f4:	f000 8354 	beq.w	10015ea0 <_vfprintf_r+0xd6c>
100157f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100157fa:	3307      	adds	r3, #7
100157fc:	f023 0307 	bic.w	r3, r3, #7
10015800:	4619      	mov	r1, r3
10015802:	685a      	ldr	r2, [r3, #4]
10015804:	f851 3b08 	ldr.w	r3, [r1], #8
10015808:	910d      	str	r1, [sp, #52]	@ 0x34
1001580a:	f429 6480 	bic.w	r4, r9, #1024	@ 0x400
1001580e:	2100      	movs	r1, #0
10015810:	2000      	movs	r0, #0
10015812:	9d09      	ldr	r5, [sp, #36]	@ 0x24
10015814:	f88d 009f 	strb.w	r0, [sp, #159]	@ 0x9f
10015818:	1c6f      	adds	r7, r5, #1
1001581a:	f000 80c2 	beq.w	100159a2 <_vfprintf_r+0x86e>
1001581e:	ea53 0002 	orrs.w	r0, r3, r2
10015822:	f024 0980 	bic.w	r9, r4, #128	@ 0x80
10015826:	f040 80bb 	bne.w	100159a0 <_vfprintf_r+0x86c>
1001582a:	2d00      	cmp	r5, #0
1001582c:	f040 8523 	bne.w	10016276 <_vfprintf_r+0x1142>
10015830:	2900      	cmp	r1, #0
10015832:	f040 8496 	bne.w	10016162 <_vfprintf_r+0x102e>
10015836:	f014 0b01 	ands.w	fp, r4, #1
1001583a:	f000 8351 	beq.w	10015ee0 <_vfprintf_r+0xdac>
1001583e:	2330      	movs	r3, #48	@ 0x30
10015840:	f88d 3177 	strb.w	r3, [sp, #375]	@ 0x177
10015844:	f20d 1577 	addw	r5, sp, #375	@ 0x177
10015848:	e0c2      	b.n	100159d0 <_vfprintf_r+0x89c>
1001584a:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001584e:	f049 0410 	orr.w	r4, r9, #16
10015852:	f014 0220 	ands.w	r2, r4, #32
10015856:	f000 8315 	beq.w	10015e84 <_vfprintf_r+0xd50>
1001585a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001585c:	3307      	adds	r3, #7
1001585e:	f023 0307 	bic.w	r3, r3, #7
10015862:	4619      	mov	r1, r3
10015864:	685a      	ldr	r2, [r3, #4]
10015866:	f851 3b08 	ldr.w	r3, [r1], #8
1001586a:	910d      	str	r1, [sp, #52]	@ 0x34
1001586c:	2101      	movs	r1, #1
1001586e:	e7cf      	b.n	10015810 <_vfprintf_r+0x6dc>
10015870:	7823      	ldrb	r3, [r4, #0]
10015872:	f049 0908 	orr.w	r9, r9, #8
10015876:	e4d5      	b.n	10015224 <_vfprintf_r+0xf0>
10015878:	f049 0910 	orr.w	r9, r9, #16
1001587c:	f019 0f20 	tst.w	r9, #32
10015880:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10015884:	f47f af34 	bne.w	100156f0 <_vfprintf_r+0x5bc>
10015888:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1001588a:	f019 0f10 	tst.w	r9, #16
1001588e:	f852 3b04 	ldr.w	r3, [r2], #4
10015892:	920d      	str	r2, [sp, #52]	@ 0x34
10015894:	f040 8359 	bne.w	10015f4a <_vfprintf_r+0xe16>
10015898:	f019 0f40 	tst.w	r9, #64	@ 0x40
1001589c:	f000 8351 	beq.w	10015f42 <_vfprintf_r+0xe0e>
100158a0:	f343 32c0 	sbfx	r2, r3, #15, #1
100158a4:	4611      	mov	r1, r2
100158a6:	b21b      	sxth	r3, r3
100158a8:	e72c      	b.n	10015704 <_vfprintf_r+0x5d0>
100158aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
100158ac:	940f      	str	r4, [sp, #60]	@ 0x3c
100158ae:	f852 3b04 	ldr.w	r3, [r2], #4
100158b2:	920d      	str	r2, [sp, #52]	@ 0x34
100158b4:	f647 0230 	movw	r2, #30768	@ 0x7830
100158b8:	f8ad 20a0 	strh.w	r2, [sp, #160]	@ 0xa0
100158bc:	2078      	movs	r0, #120	@ 0x78
100158be:	4ab1      	ldr	r2, [pc, #708]	@ (10015b84 <_vfprintf_r+0xa50>)
100158c0:	921a      	str	r2, [sp, #104]	@ 0x68
100158c2:	f049 0402 	orr.w	r4, r9, #2
100158c6:	2200      	movs	r2, #0
100158c8:	2102      	movs	r1, #2
100158ca:	900e      	str	r0, [sp, #56]	@ 0x38
100158cc:	e7a0      	b.n	10015810 <_vfprintf_r+0x6dc>
100158ce:	f019 0f20 	tst.w	r9, #32
100158d2:	940f      	str	r4, [sp, #60]	@ 0x3c
100158d4:	f000 8359 	beq.w	10015f8a <_vfprintf_r+0xe56>
100158d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100158da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100158dc:	681b      	ldr	r3, [r3, #0]
100158de:	601a      	str	r2, [r3, #0]
100158e0:	17d2      	asrs	r2, r2, #31
100158e2:	605a      	str	r2, [r3, #4]
100158e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100158e6:	3304      	adds	r3, #4
100158e8:	930d      	str	r3, [sp, #52]	@ 0x34
100158ea:	e612      	b.n	10015512 <_vfprintf_r+0x3de>
100158ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100158ee:	2b65      	cmp	r3, #101	@ 0x65
100158f0:	f340 814e 	ble.w	10015b90 <_vfprintf_r+0xa5c>
100158f4:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
100158f8:	2200      	movs	r2, #0
100158fa:	2300      	movs	r3, #0
100158fc:	f00c fdd2 	bl	100224a4 <__aeabi_dcmpeq>
10015900:	2800      	cmp	r0, #0
10015902:	f000 81ee 	beq.w	10015ce2 <_vfprintf_r+0xbae>
10015906:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10015908:	4a9f      	ldr	r2, [pc, #636]	@ (10015b88 <_vfprintf_r+0xa54>)
1001590a:	f8c8 2000 	str.w	r2, [r8]
1001590e:	3301      	adds	r3, #1
10015910:	3401      	adds	r4, #1
10015912:	2201      	movs	r2, #1
10015914:	2b07      	cmp	r3, #7
10015916:	9434      	str	r4, [sp, #208]	@ 0xd0
10015918:	9333      	str	r3, [sp, #204]	@ 0xcc
1001591a:	f8c8 2004 	str.w	r2, [r8, #4]
1001591e:	f300 84af 	bgt.w	10016280 <_vfprintf_r+0x114c>
10015922:	f108 0808 	add.w	r8, r8, #8
10015926:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
10015928:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
1001592a:	4293      	cmp	r3, r2
1001592c:	f280 82cf 	bge.w	10015ece <_vfprintf_r+0xd9a>
10015930:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10015932:	9a19      	ldr	r2, [sp, #100]	@ 0x64
10015934:	441c      	add	r4, r3
10015936:	e9c8 2300 	strd	r2, r3, [r8]
1001593a:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001593c:	9434      	str	r4, [sp, #208]	@ 0xd0
1001593e:	3301      	adds	r3, #1
10015940:	2b07      	cmp	r3, #7
10015942:	9333      	str	r3, [sp, #204]	@ 0xcc
10015944:	f300 83cb 	bgt.w	100160de <_vfprintf_r+0xfaa>
10015948:	f108 0808 	add.w	r8, r8, #8
1001594c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001594e:	1e5d      	subs	r5, r3, #1
10015950:	2d00      	cmp	r5, #0
10015952:	f77f adc0 	ble.w	100154d6 <_vfprintf_r+0x3a2>
10015956:	2d10      	cmp	r5, #16
10015958:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001595a:	f340 84fa 	ble.w	10016352 <_vfprintf_r+0x121e>
1001595e:	4f8b      	ldr	r7, [pc, #556]	@ (10015b8c <_vfprintf_r+0xa58>)
10015960:	9715      	str	r7, [sp, #84]	@ 0x54
10015962:	e9dd ab07 	ldrd	sl, fp, [sp, #28]
10015966:	2610      	movs	r6, #16
10015968:	e005      	b.n	10015976 <_vfprintf_r+0x842>
1001596a:	f108 0808 	add.w	r8, r8, #8
1001596e:	3d10      	subs	r5, #16
10015970:	2d10      	cmp	r5, #16
10015972:	f340 84f0 	ble.w	10016356 <_vfprintf_r+0x1222>
10015976:	3301      	adds	r3, #1
10015978:	3410      	adds	r4, #16
1001597a:	2b07      	cmp	r3, #7
1001597c:	e9c8 7600 	strd	r7, r6, [r8]
10015980:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10015984:	ddf1      	ble.n	1001596a <_vfprintf_r+0x836>
10015986:	aa32      	add	r2, sp, #200	@ 0xc8
10015988:	4651      	mov	r1, sl
1001598a:	4658      	mov	r0, fp
1001598c:	f001 fa72 	bl	10016e74 <__sprint_r>
10015990:	2800      	cmp	r0, #0
10015992:	f47f ad27 	bne.w	100153e4 <_vfprintf_r+0x2b0>
10015996:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
1001599a:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001599e:	e7e6      	b.n	1001596e <_vfprintf_r+0x83a>
100159a0:	464c      	mov	r4, r9
100159a2:	2901      	cmp	r1, #1
100159a4:	f000 813b 	beq.w	10015c1e <_vfprintf_r+0xaea>
100159a8:	2902      	cmp	r1, #2
100159aa:	ad5e      	add	r5, sp, #376	@ 0x178
100159ac:	d11e      	bne.n	100159ec <_vfprintf_r+0x8b8>
100159ae:	981a      	ldr	r0, [sp, #104]	@ 0x68
100159b0:	f003 010f 	and.w	r1, r3, #15
100159b4:	091b      	lsrs	r3, r3, #4
100159b6:	5c41      	ldrb	r1, [r0, r1]
100159b8:	f805 1d01 	strb.w	r1, [r5, #-1]!
100159bc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
100159c0:	0912      	lsrs	r2, r2, #4
100159c2:	ea53 0102 	orrs.w	r1, r3, r2
100159c6:	d1f3      	bne.n	100159b0 <_vfprintf_r+0x87c>
100159c8:	ab5e      	add	r3, sp, #376	@ 0x178
100159ca:	46a1      	mov	r9, r4
100159cc:	eba3 0b05 	sub.w	fp, r3, r5
100159d0:	9909      	ldr	r1, [sp, #36]	@ 0x24
100159d2:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
100159d6:	4559      	cmp	r1, fp
100159d8:	f04f 0300 	mov.w	r3, #0
100159dc:	bfb8      	it	lt
100159de:	4659      	movlt	r1, fp
100159e0:	930c      	str	r3, [sp, #48]	@ 0x30
100159e2:	9106      	str	r1, [sp, #24]
100159e4:	9314      	str	r3, [sp, #80]	@ 0x50
100159e6:	9310      	str	r3, [sp, #64]	@ 0x40
100159e8:	9312      	str	r3, [sp, #72]	@ 0x48
100159ea:	e5d5      	b.n	10015598 <_vfprintf_r+0x464>
100159ec:	f003 0107 	and.w	r1, r3, #7
100159f0:	08db      	lsrs	r3, r3, #3
100159f2:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
100159f6:	08d2      	lsrs	r2, r2, #3
100159f8:	3130      	adds	r1, #48	@ 0x30
100159fa:	ea53 0602 	orrs.w	r6, r3, r2
100159fe:	4628      	mov	r0, r5
10015a00:	f805 1d01 	strb.w	r1, [r5, #-1]!
10015a04:	d1f2      	bne.n	100159ec <_vfprintf_r+0x8b8>
10015a06:	07e6      	lsls	r6, r4, #31
10015a08:	d5de      	bpl.n	100159c8 <_vfprintf_r+0x894>
10015a0a:	2930      	cmp	r1, #48	@ 0x30
10015a0c:	d0dc      	beq.n	100159c8 <_vfprintf_r+0x894>
10015a0e:	2330      	movs	r3, #48	@ 0x30
10015a10:	3802      	subs	r0, #2
10015a12:	f805 3c01 	strb.w	r3, [r5, #-1]
10015a16:	ab5e      	add	r3, sp, #376	@ 0x178
10015a18:	46a1      	mov	r9, r4
10015a1a:	eba3 0b00 	sub.w	fp, r3, r0
10015a1e:	4605      	mov	r5, r0
10015a20:	e7d6      	b.n	100159d0 <_vfprintf_r+0x89c>
10015a22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10015a24:	9a06      	ldr	r2, [sp, #24]
10015a26:	1a9e      	subs	r6, r3, r2
10015a28:	2e00      	cmp	r6, #0
10015a2a:	f77f ad3c 	ble.w	100154a6 <_vfprintf_r+0x372>
10015a2e:	2e10      	cmp	r6, #16
10015a30:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10015a32:	f341 80ad 	ble.w	10016b90 <_vfprintf_r+0x1a5c>
10015a36:	4855      	ldr	r0, [pc, #340]	@ (10015b8c <_vfprintf_r+0xa58>)
10015a38:	f8dd a020 	ldr.w	sl, [sp, #32]
10015a3c:	9015      	str	r0, [sp, #84]	@ 0x54
10015a3e:	4621      	mov	r1, r4
10015a40:	2710      	movs	r7, #16
10015a42:	461a      	mov	r2, r3
10015a44:	4604      	mov	r4, r0
10015a46:	e004      	b.n	10015a52 <_vfprintf_r+0x91e>
10015a48:	3e10      	subs	r6, #16
10015a4a:	2e10      	cmp	r6, #16
10015a4c:	f108 0808 	add.w	r8, r8, #8
10015a50:	dd16      	ble.n	10015a80 <_vfprintf_r+0x94c>
10015a52:	3201      	adds	r2, #1
10015a54:	3110      	adds	r1, #16
10015a56:	2a07      	cmp	r2, #7
10015a58:	e9c8 4700 	strd	r4, r7, [r8]
10015a5c:	e9cd 2133 	strd	r2, r1, [sp, #204]	@ 0xcc
10015a60:	ddf2      	ble.n	10015a48 <_vfprintf_r+0x914>
10015a62:	9907      	ldr	r1, [sp, #28]
10015a64:	aa32      	add	r2, sp, #200	@ 0xc8
10015a66:	4650      	mov	r0, sl
10015a68:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10015a6c:	f001 fa02 	bl	10016e74 <__sprint_r>
10015a70:	2800      	cmp	r0, #0
10015a72:	f040 83f8 	bne.w	10016266 <_vfprintf_r+0x1132>
10015a76:	3e10      	subs	r6, #16
10015a78:	2e10      	cmp	r6, #16
10015a7a:	e9dd 2133 	ldrd	r2, r1, [sp, #204]	@ 0xcc
10015a7e:	dce8      	bgt.n	10015a52 <_vfprintf_r+0x91e>
10015a80:	460c      	mov	r4, r1
10015a82:	4613      	mov	r3, r2
10015a84:	3301      	adds	r3, #1
10015a86:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10015a88:	f8c8 2000 	str.w	r2, [r8]
10015a8c:	4434      	add	r4, r6
10015a8e:	2b07      	cmp	r3, #7
10015a90:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10015a94:	f8c8 6004 	str.w	r6, [r8, #4]
10015a98:	f300 8314 	bgt.w	100160c4 <_vfprintf_r+0xf90>
10015a9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10015a9e:	eba3 060b 	sub.w	r6, r3, fp
10015aa2:	2e00      	cmp	r6, #0
10015aa4:	f108 0808 	add.w	r8, r8, #8
10015aa8:	f77f ad03 	ble.w	100154b2 <_vfprintf_r+0x37e>
10015aac:	4a37      	ldr	r2, [pc, #220]	@ (10015b8c <_vfprintf_r+0xa58>)
10015aae:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10015ab0:	9215      	str	r2, [sp, #84]	@ 0x54
10015ab2:	2e10      	cmp	r6, #16
10015ab4:	dd23      	ble.n	10015afe <_vfprintf_r+0x9ca>
10015ab6:	4622      	mov	r2, r4
10015ab8:	f04f 0a10 	mov.w	sl, #16
10015abc:	e9dd 4707 	ldrd	r4, r7, [sp, #28]
10015ac0:	e004      	b.n	10015acc <_vfprintf_r+0x998>
10015ac2:	3e10      	subs	r6, #16
10015ac4:	2e10      	cmp	r6, #16
10015ac6:	f108 0808 	add.w	r8, r8, #8
10015aca:	dd17      	ble.n	10015afc <_vfprintf_r+0x9c8>
10015acc:	3301      	adds	r3, #1
10015ace:	492f      	ldr	r1, [pc, #188]	@ (10015b8c <_vfprintf_r+0xa58>)
10015ad0:	3210      	adds	r2, #16
10015ad2:	2b07      	cmp	r3, #7
10015ad4:	e9c8 1a00 	strd	r1, sl, [r8]
10015ad8:	e9cd 3233 	strd	r3, r2, [sp, #204]	@ 0xcc
10015adc:	ddf1      	ble.n	10015ac2 <_vfprintf_r+0x98e>
10015ade:	aa32      	add	r2, sp, #200	@ 0xc8
10015ae0:	4621      	mov	r1, r4
10015ae2:	4638      	mov	r0, r7
10015ae4:	f001 f9c6 	bl	10016e74 <__sprint_r>
10015ae8:	2800      	cmp	r0, #0
10015aea:	f47f ac7a 	bne.w	100153e2 <_vfprintf_r+0x2ae>
10015aee:	3e10      	subs	r6, #16
10015af0:	2e10      	cmp	r6, #16
10015af2:	e9dd 3233 	ldrd	r3, r2, [sp, #204]	@ 0xcc
10015af6:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10015afa:	dce7      	bgt.n	10015acc <_vfprintf_r+0x998>
10015afc:	4614      	mov	r4, r2
10015afe:	3301      	adds	r3, #1
10015b00:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10015b02:	f8c8 2000 	str.w	r2, [r8]
10015b06:	4434      	add	r4, r6
10015b08:	2b07      	cmp	r3, #7
10015b0a:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10015b0e:	f8c8 6004 	str.w	r6, [r8, #4]
10015b12:	f300 81aa 	bgt.w	10015e6a <_vfprintf_r+0xd36>
10015b16:	f108 0808 	add.w	r8, r8, #8
10015b1a:	e4ca      	b.n	100154b2 <_vfprintf_r+0x37e>
10015b1c:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10015b20:	aa32      	add	r2, sp, #200	@ 0xc8
10015b22:	f001 f9a7 	bl	10016e74 <__sprint_r>
10015b26:	2800      	cmp	r0, #0
10015b28:	f43f ace9 	beq.w	100154fe <_vfprintf_r+0x3ca>
10015b2c:	f8dd b020 	ldr.w	fp, [sp, #32]
10015b30:	e458      	b.n	100153e4 <_vfprintf_r+0x2b0>
10015b32:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10015b34:	9919      	ldr	r1, [sp, #100]	@ 0x64
10015b36:	441c      	add	r4, r3
10015b38:	e9c8 1300 	strd	r1, r3, [r8]
10015b3c:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10015b3e:	9434      	str	r4, [sp, #208]	@ 0xd0
10015b40:	3301      	adds	r3, #1
10015b42:	2b07      	cmp	r3, #7
10015b44:	9333      	str	r3, [sp, #204]	@ 0xcc
10015b46:	f300 85bf 	bgt.w	100166c8 <_vfprintf_r+0x1594>
10015b4a:	f108 0808 	add.w	r8, r8, #8
10015b4e:	2a00      	cmp	r2, #0
10015b50:	f2c0 87ae 	blt.w	10016ab0 <_vfprintf_r+0x197c>
10015b54:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
10015b56:	f8c8 5000 	str.w	r5, [r8]
10015b5a:	3301      	adds	r3, #1
10015b5c:	4414      	add	r4, r2
10015b5e:	2b07      	cmp	r3, #7
10015b60:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10015b64:	f8c8 2004 	str.w	r2, [r8, #4]
10015b68:	f77f acb3 	ble.w	100154d2 <_vfprintf_r+0x39e>
10015b6c:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10015b70:	aa32      	add	r2, sp, #200	@ 0xc8
10015b72:	f001 f97f 	bl	10016e74 <__sprint_r>
10015b76:	2800      	cmp	r0, #0
10015b78:	d1d8      	bne.n	10015b2c <_vfprintf_r+0x9f8>
10015b7a:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10015b7c:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10015b80:	e4a9      	b.n	100154d6 <_vfprintf_r+0x3a2>
10015b82:	bf00      	nop
10015b84:	10025484 	.word	0x10025484
10015b88:	100254b4 	.word	0x100254b4
10015b8c:	100254b8 	.word	0x100254b8
10015b90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10015b92:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
10015b94:	2b01      	cmp	r3, #1
10015b96:	f104 0401 	add.w	r4, r4, #1
10015b9a:	f106 0601 	add.w	r6, r6, #1
10015b9e:	f108 0708 	add.w	r7, r8, #8
10015ba2:	f340 811d 	ble.w	10015de0 <_vfprintf_r+0xcac>
10015ba6:	2301      	movs	r3, #1
10015ba8:	2e07      	cmp	r6, #7
10015baa:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10015bae:	f8c8 5000 	str.w	r5, [r8]
10015bb2:	f8c8 3004 	str.w	r3, [r8, #4]
10015bb6:	f300 82e4 	bgt.w	10016182 <_vfprintf_r+0x104e>
10015bba:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10015bbc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
10015bbe:	3601      	adds	r6, #1
10015bc0:	441c      	add	r4, r3
10015bc2:	2e07      	cmp	r6, #7
10015bc4:	e9c7 2300 	strd	r2, r3, [r7]
10015bc8:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10015bcc:	f300 82cd 	bgt.w	1001616a <_vfprintf_r+0x1036>
10015bd0:	3708      	adds	r7, #8
10015bd2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10015bd4:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
10015bd8:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
10015bdc:	2200      	movs	r2, #0
10015bde:	2300      	movs	r3, #0
10015be0:	f00c fc60 	bl	100224a4 <__aeabi_dcmpeq>
10015be4:	2800      	cmp	r0, #0
10015be6:	f040 8115 	bne.w	10015e14 <_vfprintf_r+0xce0>
10015bea:	3601      	adds	r6, #1
10015bec:	3501      	adds	r5, #1
10015bee:	4444      	add	r4, r8
10015bf0:	2e07      	cmp	r6, #7
10015bf2:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10015bf6:	603d      	str	r5, [r7, #0]
10015bf8:	f8c7 8004 	str.w	r8, [r7, #4]
10015bfc:	f300 80fe 	bgt.w	10015dfc <_vfprintf_r+0xcc8>
10015c00:	3708      	adds	r7, #8
10015c02:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
10015c04:	607b      	str	r3, [r7, #4]
10015c06:	3601      	adds	r6, #1
10015c08:	441c      	add	r4, r3
10015c0a:	2e07      	cmp	r6, #7
10015c0c:	ab2c      	add	r3, sp, #176	@ 0xb0
10015c0e:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10015c12:	603b      	str	r3, [r7, #0]
10015c14:	dcaa      	bgt.n	10015b6c <_vfprintf_r+0xa38>
10015c16:	f107 0808 	add.w	r8, r7, #8
10015c1a:	e45c      	b.n	100154d6 <_vfprintf_r+0x3a2>
10015c1c:	464c      	mov	r4, r9
10015c1e:	2b0a      	cmp	r3, #10
10015c20:	f172 0100 	sbcs.w	r1, r2, #0
10015c24:	f080 82b9 	bcs.w	1001619a <_vfprintf_r+0x1066>
10015c28:	3330      	adds	r3, #48	@ 0x30
10015c2a:	f88d 3177 	strb.w	r3, [sp, #375]	@ 0x177
10015c2e:	46a1      	mov	r9, r4
10015c30:	f04f 0b01 	mov.w	fp, #1
10015c34:	f20d 1577 	addw	r5, sp, #375	@ 0x177
10015c38:	e6ca      	b.n	100159d0 <_vfprintf_r+0x89c>
10015c3a:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10015c3e:	aa32      	add	r2, sp, #200	@ 0xc8
10015c40:	9315      	str	r3, [sp, #84]	@ 0x54
10015c42:	f001 f917 	bl	10016e74 <__sprint_r>
10015c46:	2800      	cmp	r0, #0
10015c48:	f47f af70 	bne.w	10015b2c <_vfprintf_r+0x9f8>
10015c4c:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10015c4e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
10015c50:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10015c54:	e412      	b.n	1001547c <_vfprintf_r+0x348>
10015c56:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10015c5a:	aa32      	add	r2, sp, #200	@ 0xc8
10015c5c:	f001 f90a 	bl	10016e74 <__sprint_r>
10015c60:	2800      	cmp	r0, #0
10015c62:	f47f af63 	bne.w	10015b2c <_vfprintf_r+0x9f8>
10015c66:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10015c68:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10015c6c:	e418      	b.n	100154a0 <_vfprintf_r+0x36c>
10015c6e:	2d10      	cmp	r5, #16
10015c70:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10015c72:	f340 8752 	ble.w	10016b1a <_vfprintf_r+0x19e6>
10015c76:	4fbb      	ldr	r7, [pc, #748]	@ (10015f64 <_vfprintf_r+0xe30>)
10015c78:	9715      	str	r7, [sp, #84]	@ 0x54
10015c7a:	e9dd a907 	ldrd	sl, r9, [sp, #28]
10015c7e:	2610      	movs	r6, #16
10015c80:	e004      	b.n	10015c8c <_vfprintf_r+0xb58>
10015c82:	3d10      	subs	r5, #16
10015c84:	2d10      	cmp	r5, #16
10015c86:	f108 0808 	add.w	r8, r8, #8
10015c8a:	dd16      	ble.n	10015cba <_vfprintf_r+0xb86>
10015c8c:	3301      	adds	r3, #1
10015c8e:	3410      	adds	r4, #16
10015c90:	2b07      	cmp	r3, #7
10015c92:	e9c8 7600 	strd	r7, r6, [r8]
10015c96:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10015c9a:	ddf2      	ble.n	10015c82 <_vfprintf_r+0xb4e>
10015c9c:	aa32      	add	r2, sp, #200	@ 0xc8
10015c9e:	4651      	mov	r1, sl
10015ca0:	4648      	mov	r0, r9
10015ca2:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10015ca6:	f001 f8e5 	bl	10016e74 <__sprint_r>
10015caa:	2800      	cmp	r0, #0
10015cac:	f040 82f5 	bne.w	1001629a <_vfprintf_r+0x1166>
10015cb0:	3d10      	subs	r5, #16
10015cb2:	2d10      	cmp	r5, #16
10015cb4:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
10015cb8:	dce8      	bgt.n	10015c8c <_vfprintf_r+0xb58>
10015cba:	3301      	adds	r3, #1
10015cbc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10015cbe:	442c      	add	r4, r5
10015cc0:	2b07      	cmp	r3, #7
10015cc2:	e9c8 2500 	strd	r2, r5, [r8]
10015cc6:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10015cca:	f77f ac0d 	ble.w	100154e8 <_vfprintf_r+0x3b4>
10015cce:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10015cd2:	aa32      	add	r2, sp, #200	@ 0xc8
10015cd4:	f001 f8ce 	bl	10016e74 <__sprint_r>
10015cd8:	2800      	cmp	r0, #0
10015cda:	f47f af27 	bne.w	10015b2c <_vfprintf_r+0x9f8>
10015cde:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10015ce0:	e402      	b.n	100154e8 <_vfprintf_r+0x3b4>
10015ce2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
10015ce4:	2a00      	cmp	r2, #0
10015ce6:	f340 80fd 	ble.w	10015ee4 <_vfprintf_r+0xdb0>
10015cea:	e9dd 7312 	ldrd	r7, r3, [sp, #72]	@ 0x48
10015cee:	429f      	cmp	r7, r3
10015cf0:	bfa8      	it	ge
10015cf2:	461f      	movge	r7, r3
10015cf4:	2f00      	cmp	r7, #0
10015cf6:	eb05 0b03 	add.w	fp, r5, r3
10015cfa:	dd0b      	ble.n	10015d14 <_vfprintf_r+0xbe0>
10015cfc:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10015cfe:	3301      	adds	r3, #1
10015d00:	443c      	add	r4, r7
10015d02:	2b07      	cmp	r3, #7
10015d04:	e9c8 5700 	strd	r5, r7, [r8]
10015d08:	9434      	str	r4, [sp, #208]	@ 0xd0
10015d0a:	9333      	str	r3, [sp, #204]	@ 0xcc
10015d0c:	f300 866f 	bgt.w	100169ee <_vfprintf_r+0x18ba>
10015d10:	f108 0808 	add.w	r8, r8, #8
10015d14:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10015d16:	2f00      	cmp	r7, #0
10015d18:	bfa8      	it	ge
10015d1a:	1bf6      	subge	r6, r6, r7
10015d1c:	2e00      	cmp	r6, #0
10015d1e:	f300 8347 	bgt.w	100163b0 <_vfprintf_r+0x127c>
10015d22:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
10015d26:	f419 6f80 	tst.w	r9, #1024	@ 0x400
10015d2a:	44aa      	add	sl, r5
10015d2c:	f040 857a 	bne.w	10016824 <_vfprintf_r+0x16f0>
10015d30:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
10015d32:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10015d34:	429d      	cmp	r5, r3
10015d36:	db03      	blt.n	10015d40 <_vfprintf_r+0xc0c>
10015d38:	f019 0f01 	tst.w	r9, #1
10015d3c:	f000 8404 	beq.w	10016548 <_vfprintf_r+0x1414>
10015d40:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10015d42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
10015d44:	441c      	add	r4, r3
10015d46:	e9c8 2300 	strd	r2, r3, [r8]
10015d4a:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10015d4c:	9434      	str	r4, [sp, #208]	@ 0xd0
10015d4e:	3301      	adds	r3, #1
10015d50:	2b07      	cmp	r3, #7
10015d52:	9333      	str	r3, [sp, #204]	@ 0xcc
10015d54:	f300 865a 	bgt.w	10016a0c <_vfprintf_r+0x18d8>
10015d58:	f108 0808 	add.w	r8, r8, #8
10015d5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10015d5e:	ebab 060a 	sub.w	r6, fp, sl
10015d62:	1b5d      	subs	r5, r3, r5
10015d64:	42ae      	cmp	r6, r5
10015d66:	bfa8      	it	ge
10015d68:	462e      	movge	r6, r5
10015d6a:	2e00      	cmp	r6, #0
10015d6c:	dd0d      	ble.n	10015d8a <_vfprintf_r+0xc56>
10015d6e:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10015d70:	f8c8 a000 	str.w	sl, [r8]
10015d74:	3301      	adds	r3, #1
10015d76:	4434      	add	r4, r6
10015d78:	2b07      	cmp	r3, #7
10015d7a:	f8c8 6004 	str.w	r6, [r8, #4]
10015d7e:	9434      	str	r4, [sp, #208]	@ 0xd0
10015d80:	9333      	str	r3, [sp, #204]	@ 0xcc
10015d82:	f300 8655 	bgt.w	10016a30 <_vfprintf_r+0x18fc>
10015d86:	f108 0808 	add.w	r8, r8, #8
10015d8a:	2e00      	cmp	r6, #0
10015d8c:	bfa8      	it	ge
10015d8e:	1bad      	subge	r5, r5, r6
10015d90:	2d00      	cmp	r5, #0
10015d92:	f77f aba0 	ble.w	100154d6 <_vfprintf_r+0x3a2>
10015d96:	2d10      	cmp	r5, #16
10015d98:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10015d9a:	f340 82da 	ble.w	10016352 <_vfprintf_r+0x121e>
10015d9e:	4f72      	ldr	r7, [pc, #456]	@ (10015f68 <_vfprintf_r+0xe34>)
10015da0:	9715      	str	r7, [sp, #84]	@ 0x54
10015da2:	e9dd ab07 	ldrd	sl, fp, [sp, #28]
10015da6:	2610      	movs	r6, #16
10015da8:	e005      	b.n	10015db6 <_vfprintf_r+0xc82>
10015daa:	f108 0808 	add.w	r8, r8, #8
10015dae:	3d10      	subs	r5, #16
10015db0:	2d10      	cmp	r5, #16
10015db2:	f340 82d0 	ble.w	10016356 <_vfprintf_r+0x1222>
10015db6:	3301      	adds	r3, #1
10015db8:	3410      	adds	r4, #16
10015dba:	2b07      	cmp	r3, #7
10015dbc:	e9c8 7600 	strd	r7, r6, [r8]
10015dc0:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10015dc4:	ddf1      	ble.n	10015daa <_vfprintf_r+0xc76>
10015dc6:	aa32      	add	r2, sp, #200	@ 0xc8
10015dc8:	4651      	mov	r1, sl
10015dca:	4658      	mov	r0, fp
10015dcc:	f001 f852 	bl	10016e74 <__sprint_r>
10015dd0:	2800      	cmp	r0, #0
10015dd2:	f47f ab07 	bne.w	100153e4 <_vfprintf_r+0x2b0>
10015dd6:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
10015dda:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10015dde:	e7e6      	b.n	10015dae <_vfprintf_r+0xc7a>
10015de0:	f019 0f01 	tst.w	r9, #1
10015de4:	f47f aedf 	bne.w	10015ba6 <_vfprintf_r+0xa72>
10015de8:	2301      	movs	r3, #1
10015dea:	2e07      	cmp	r6, #7
10015dec:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10015df0:	f8c8 5000 	str.w	r5, [r8]
10015df4:	f8c8 3004 	str.w	r3, [r8, #4]
10015df8:	f77f af03 	ble.w	10015c02 <_vfprintf_r+0xace>
10015dfc:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10015e00:	aa32      	add	r2, sp, #200	@ 0xc8
10015e02:	f001 f837 	bl	10016e74 <__sprint_r>
10015e06:	2800      	cmp	r0, #0
10015e08:	f47f ae90 	bne.w	10015b2c <_vfprintf_r+0x9f8>
10015e0c:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
10015e10:	af35      	add	r7, sp, #212	@ 0xd4
10015e12:	e6f6      	b.n	10015c02 <_vfprintf_r+0xace>
10015e14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10015e16:	2b01      	cmp	r3, #1
10015e18:	f77f aef3 	ble.w	10015c02 <_vfprintf_r+0xace>
10015e1c:	2b11      	cmp	r3, #17
10015e1e:	4b52      	ldr	r3, [pc, #328]	@ (10015f68 <_vfprintf_r+0xe34>)
10015e20:	9315      	str	r3, [sp, #84]	@ 0x54
10015e22:	f340 82b9 	ble.w	10016398 <_vfprintf_r+0x1264>
10015e26:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
10015e2a:	e9dd ba07 	ldrd	fp, sl, [sp, #28]
10015e2e:	2510      	movs	r5, #16
10015e30:	4699      	mov	r9, r3
10015e32:	e006      	b.n	10015e42 <_vfprintf_r+0xd0e>
10015e34:	3708      	adds	r7, #8
10015e36:	f1a8 0810 	sub.w	r8, r8, #16
10015e3a:	f1b8 0f10 	cmp.w	r8, #16
10015e3e:	f340 82a9 	ble.w	10016394 <_vfprintf_r+0x1260>
10015e42:	3601      	adds	r6, #1
10015e44:	3410      	adds	r4, #16
10015e46:	2e07      	cmp	r6, #7
10015e48:	e9c7 9500 	strd	r9, r5, [r7]
10015e4c:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
10015e50:	ddf0      	ble.n	10015e34 <_vfprintf_r+0xd00>
10015e52:	aa32      	add	r2, sp, #200	@ 0xc8
10015e54:	4659      	mov	r1, fp
10015e56:	4650      	mov	r0, sl
10015e58:	f001 f80c 	bl	10016e74 <__sprint_r>
10015e5c:	2800      	cmp	r0, #0
10015e5e:	f040 8202 	bne.w	10016266 <_vfprintf_r+0x1132>
10015e62:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
10015e66:	af35      	add	r7, sp, #212	@ 0xd4
10015e68:	e7e5      	b.n	10015e36 <_vfprintf_r+0xd02>
10015e6a:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10015e6e:	aa32      	add	r2, sp, #200	@ 0xc8
10015e70:	f001 f800 	bl	10016e74 <__sprint_r>
10015e74:	2800      	cmp	r0, #0
10015e76:	f47f ae59 	bne.w	10015b2c <_vfprintf_r+0x9f8>
10015e7a:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10015e7c:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10015e80:	f7ff bb17 	b.w	100154b2 <_vfprintf_r+0x37e>
10015e84:	990d      	ldr	r1, [sp, #52]	@ 0x34
10015e86:	f851 3b04 	ldr.w	r3, [r1], #4
10015e8a:	910d      	str	r1, [sp, #52]	@ 0x34
10015e8c:	f014 0110 	ands.w	r1, r4, #16
10015e90:	d155      	bne.n	10015f3e <_vfprintf_r+0xe0a>
10015e92:	f014 0040 	ands.w	r0, r4, #64	@ 0x40
10015e96:	d04d      	beq.n	10015f34 <_vfprintf_r+0xe00>
10015e98:	460a      	mov	r2, r1
10015e9a:	b29b      	uxth	r3, r3
10015e9c:	2101      	movs	r1, #1
10015e9e:	e4b7      	b.n	10015810 <_vfprintf_r+0x6dc>
10015ea0:	990d      	ldr	r1, [sp, #52]	@ 0x34
10015ea2:	f851 3b04 	ldr.w	r3, [r1], #4
10015ea6:	910d      	str	r1, [sp, #52]	@ 0x34
10015ea8:	f019 0110 	ands.w	r1, r9, #16
10015eac:	f47f acad 	bne.w	1001580a <_vfprintf_r+0x6d6>
10015eb0:	f019 0040 	ands.w	r0, r9, #64	@ 0x40
10015eb4:	f000 82a9 	beq.w	1001640a <_vfprintf_r+0x12d6>
10015eb8:	b29b      	uxth	r3, r3
10015eba:	460a      	mov	r2, r1
10015ebc:	e4a5      	b.n	1001580a <_vfprintf_r+0x6d6>
10015ebe:	9d07      	ldr	r5, [sp, #28]
10015ec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
10015ec2:	f003 fe59 	bl	10019b78 <__retarget_lock_acquire_recursive>
10015ec6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
10015eca:	f7ff b959 	b.w	10015180 <_vfprintf_r+0x4c>
10015ece:	f019 0f01 	tst.w	r9, #1
10015ed2:	f43f ab00 	beq.w	100154d6 <_vfprintf_r+0x3a2>
10015ed6:	e52b      	b.n	10015930 <_vfprintf_r+0x7fc>
10015ed8:	930d      	str	r3, [sp, #52]	@ 0x34
10015eda:	7823      	ldrb	r3, [r4, #0]
10015edc:	f7ff b9a2 	b.w	10015224 <_vfprintf_r+0xf0>
10015ee0:	ad5e      	add	r5, sp, #376	@ 0x178
10015ee2:	e575      	b.n	100159d0 <_vfprintf_r+0x89c>
10015ee4:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10015ee6:	4921      	ldr	r1, [pc, #132]	@ (10015f6c <_vfprintf_r+0xe38>)
10015ee8:	f8c8 1000 	str.w	r1, [r8]
10015eec:	3301      	adds	r3, #1
10015eee:	3401      	adds	r4, #1
10015ef0:	2101      	movs	r1, #1
10015ef2:	2b07      	cmp	r3, #7
10015ef4:	9434      	str	r4, [sp, #208]	@ 0xd0
10015ef6:	9333      	str	r3, [sp, #204]	@ 0xcc
10015ef8:	f8c8 1004 	str.w	r1, [r8, #4]
10015efc:	f300 8551 	bgt.w	100169a2 <_vfprintf_r+0x186e>
10015f00:	f108 0808 	add.w	r8, r8, #8
10015f04:	2a00      	cmp	r2, #0
10015f06:	f47f ae14 	bne.w	10015b32 <_vfprintf_r+0x9fe>
10015f0a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
10015f0c:	f009 0301 	and.w	r3, r9, #1
10015f10:	4313      	orrs	r3, r2
10015f12:	f43f aae0 	beq.w	100154d6 <_vfprintf_r+0x3a2>
10015f16:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10015f18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
10015f1a:	441c      	add	r4, r3
10015f1c:	e9c8 2300 	strd	r2, r3, [r8]
10015f20:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
10015f22:	9434      	str	r4, [sp, #208]	@ 0xd0
10015f24:	3301      	adds	r3, #1
10015f26:	2b07      	cmp	r3, #7
10015f28:	9333      	str	r3, [sp, #204]	@ 0xcc
10015f2a:	f300 83cd 	bgt.w	100166c8 <_vfprintf_r+0x1594>
10015f2e:	f108 0808 	add.w	r8, r8, #8
10015f32:	e60f      	b.n	10015b54 <_vfprintf_r+0xa20>
10015f34:	f414 7200 	ands.w	r2, r4, #512	@ 0x200
10015f38:	bf1c      	itt	ne
10015f3a:	b2db      	uxtbne	r3, r3
10015f3c:	4602      	movne	r2, r0
10015f3e:	2101      	movs	r1, #1
10015f40:	e466      	b.n	10015810 <_vfprintf_r+0x6dc>
10015f42:	f419 7f00 	tst.w	r9, #512	@ 0x200
10015f46:	f040 8307 	bne.w	10016558 <_vfprintf_r+0x1424>
10015f4a:	17da      	asrs	r2, r3, #31
10015f4c:	4611      	mov	r1, r2
10015f4e:	2900      	cmp	r1, #0
10015f50:	f6bf abdb 	bge.w	1001570a <_vfprintf_r+0x5d6>
10015f54:	425b      	negs	r3, r3
10015f56:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
10015f5a:	464c      	mov	r4, r9
10015f5c:	202d      	movs	r0, #45	@ 0x2d
10015f5e:	2101      	movs	r1, #1
10015f60:	e457      	b.n	10015812 <_vfprintf_r+0x6de>
10015f62:	bf00      	nop
10015f64:	100254c8 	.word	0x100254c8
10015f68:	100254b8 	.word	0x100254b8
10015f6c:	100254b4 	.word	0x100254b4
10015f70:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
10015f72:	7823      	ldrb	r3, [r4, #0]
10015f74:	2a00      	cmp	r2, #0
10015f76:	f43f a955 	beq.w	10015224 <_vfprintf_r+0xf0>
10015f7a:	7812      	ldrb	r2, [r2, #0]
10015f7c:	2a00      	cmp	r2, #0
10015f7e:	f43f a951 	beq.w	10015224 <_vfprintf_r+0xf0>
10015f82:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
10015f86:	f7ff b94d 	b.w	10015224 <_vfprintf_r+0xf0>
10015f8a:	f019 0f10 	tst.w	r9, #16
10015f8e:	f040 81fb 	bne.w	10016388 <_vfprintf_r+0x1254>
10015f92:	f019 0f40 	tst.w	r9, #64	@ 0x40
10015f96:	f040 82e5 	bne.w	10016564 <_vfprintf_r+0x1430>
10015f9a:	f419 7f00 	tst.w	r9, #512	@ 0x200
10015f9e:	f000 81f3 	beq.w	10016388 <_vfprintf_r+0x1254>
10015fa2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10015fa4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10015fa6:	681b      	ldr	r3, [r3, #0]
10015fa8:	701a      	strb	r2, [r3, #0]
10015faa:	e49b      	b.n	100158e4 <_vfprintf_r+0x7b0>
10015fac:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
10015fb0:	4602      	mov	r2, r0
10015fb2:	460b      	mov	r3, r1
10015fb4:	f00c faa8 	bl	10022508 <__aeabi_dcmpun>
10015fb8:	2800      	cmp	r0, #0
10015fba:	f040 8638 	bne.w	10016c2e <_vfprintf_r+0x1afa>
10015fbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10015fc0:	2b61      	cmp	r3, #97	@ 0x61
10015fc2:	f000 8521 	beq.w	10016a08 <_vfprintf_r+0x18d4>
10015fc6:	2b41      	cmp	r3, #65	@ 0x41
10015fc8:	f000 82e3 	beq.w	10016592 <_vfprintf_r+0x145e>
10015fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10015fce:	3301      	adds	r3, #1
10015fd0:	f000 8617 	beq.w	10016c02 <_vfprintf_r+0x1ace>
10015fd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10015fd6:	f023 0320 	bic.w	r3, r3, #32
10015fda:	2b47      	cmp	r3, #71	@ 0x47
10015fdc:	d104      	bne.n	10015fe8 <_vfprintf_r+0xeb4>
10015fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10015fe0:	2b00      	cmp	r3, #0
10015fe2:	bf08      	it	eq
10015fe4:	2301      	moveq	r3, #1
10015fe6:	9309      	str	r3, [sp, #36]	@ 0x24
10015fe8:	e9dd 1216 	ldrd	r1, r2, [sp, #88]	@ 0x58
10015fec:	f449 7080 	orr.w	r0, r9, #256	@ 0x100
10015ff0:	2a00      	cmp	r2, #0
10015ff2:	9015      	str	r0, [sp, #84]	@ 0x54
10015ff4:	f8cd 9018 	str.w	r9, [sp, #24]
10015ff8:	f04f 0300 	mov.w	r3, #0
10015ffc:	f2c0 84df 	blt.w	100169be <_vfprintf_r+0x188a>
10016000:	e9cd 1224 	strd	r1, r2, [sp, #144]	@ 0x90
10016004:	931f      	str	r3, [sp, #124]	@ 0x7c
10016006:	930c      	str	r3, [sp, #48]	@ 0x30
10016008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001600a:	3b41      	subs	r3, #65	@ 0x41
1001600c:	2b25      	cmp	r3, #37	@ 0x25
1001600e:	f200 8203 	bhi.w	10016418 <_vfprintf_r+0x12e4>
10016012:	e8df f013 	tbh	[pc, r3, lsl #1]
10016016:	0374      	.short	0x0374
10016018:	02010201 	.word	0x02010201
1001601c:	036d0201 	.word	0x036d0201
10016020:	02010371 	.word	0x02010371
10016024:	02010201 	.word	0x02010201
10016028:	02010201 	.word	0x02010201
1001602c:	02010201 	.word	0x02010201
10016030:	02010201 	.word	0x02010201
10016034:	02010201 	.word	0x02010201
10016038:	02010201 	.word	0x02010201
1001603c:	02010201 	.word	0x02010201
10016040:	02010201 	.word	0x02010201
10016044:	02010201 	.word	0x02010201
10016048:	02010201 	.word	0x02010201
1001604c:	02010201 	.word	0x02010201
10016050:	02010201 	.word	0x02010201
10016054:	02010201 	.word	0x02010201
10016058:	02010201 	.word	0x02010201
1001605c:	036d0201 	.word	0x036d0201
10016060:	0371      	.short	0x0371
10016062:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
10016066:	4bc3      	ldr	r3, [pc, #780]	@ (10016374 <_vfprintf_r+0x1240>)
10016068:	931a      	str	r3, [sp, #104]	@ 0x68
1001606a:	f019 0220 	ands.w	r2, r9, #32
1001606e:	d06a      	beq.n	10016146 <_vfprintf_r+0x1012>
10016070:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10016072:	3307      	adds	r3, #7
10016074:	f023 0307 	bic.w	r3, r3, #7
10016078:	4619      	mov	r1, r3
1001607a:	685a      	ldr	r2, [r3, #4]
1001607c:	f851 3b08 	ldr.w	r3, [r1], #8
10016080:	910d      	str	r1, [sp, #52]	@ 0x34
10016082:	f019 0f01 	tst.w	r9, #1
10016086:	d00a      	beq.n	1001609e <_vfprintf_r+0xf6a>
10016088:	ea53 0102 	orrs.w	r1, r3, r2
1001608c:	d007      	beq.n	1001609e <_vfprintf_r+0xf6a>
1001608e:	990e      	ldr	r1, [sp, #56]	@ 0x38
10016090:	f88d 10a1 	strb.w	r1, [sp, #161]	@ 0xa1
10016094:	2130      	movs	r1, #48	@ 0x30
10016096:	f049 0902 	orr.w	r9, r9, #2
1001609a:	f88d 10a0 	strb.w	r1, [sp, #160]	@ 0xa0
1001609e:	f429 6480 	bic.w	r4, r9, #1024	@ 0x400
100160a2:	2102      	movs	r1, #2
100160a4:	f7ff bbb4 	b.w	10015810 <_vfprintf_r+0x6dc>
100160a8:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
100160ac:	464c      	mov	r4, r9
100160ae:	f7ff bbd0 	b.w	10015852 <_vfprintf_r+0x71e>
100160b2:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
100160b6:	f7ff bb9b 	b.w	100157f0 <_vfprintf_r+0x6bc>
100160ba:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
100160be:	4bae      	ldr	r3, [pc, #696]	@ (10016378 <_vfprintf_r+0x1244>)
100160c0:	931a      	str	r3, [sp, #104]	@ 0x68
100160c2:	e7d2      	b.n	1001606a <_vfprintf_r+0xf36>
100160c4:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
100160c8:	aa32      	add	r2, sp, #200	@ 0xc8
100160ca:	f000 fed3 	bl	10016e74 <__sprint_r>
100160ce:	2800      	cmp	r0, #0
100160d0:	f47f ad2c 	bne.w	10015b2c <_vfprintf_r+0x9f8>
100160d4:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
100160d6:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100160da:	f7ff b9e4 	b.w	100154a6 <_vfprintf_r+0x372>
100160de:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
100160e2:	aa32      	add	r2, sp, #200	@ 0xc8
100160e4:	f000 fec6 	bl	10016e74 <__sprint_r>
100160e8:	2800      	cmp	r0, #0
100160ea:	f47f ad1f 	bne.w	10015b2c <_vfprintf_r+0x9f8>
100160ee:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
100160f0:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100160f4:	e42a      	b.n	1001594c <_vfprintf_r+0x818>
100160f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100160f8:	950c      	str	r5, [sp, #48]	@ 0x30
100160fa:	2b06      	cmp	r3, #6
100160fc:	4629      	mov	r1, r5
100160fe:	bf28      	it	cs
10016100:	2306      	movcs	r3, #6
10016102:	9509      	str	r5, [sp, #36]	@ 0x24
10016104:	462a      	mov	r2, r5
10016106:	9306      	str	r3, [sp, #24]
10016108:	4d9c      	ldr	r5, [pc, #624]	@ (1001637c <_vfprintf_r+0x1248>)
1001610a:	960d      	str	r6, [sp, #52]	@ 0x34
1001610c:	469b      	mov	fp, r3
1001610e:	9114      	str	r1, [sp, #80]	@ 0x50
10016110:	9110      	str	r1, [sp, #64]	@ 0x40
10016112:	9112      	str	r1, [sp, #72]	@ 0x48
10016114:	f7ff ba40 	b.w	10015598 <_vfprintf_r+0x464>
10016118:	2208      	movs	r2, #8
1001611a:	2100      	movs	r1, #0
1001611c:	a830      	add	r0, sp, #192	@ 0xc0
1001611e:	f003 fa4d 	bl	100195bc <memset>
10016122:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10016124:	9808      	ldr	r0, [sp, #32]
10016126:	681a      	ldr	r2, [r3, #0]
10016128:	ad45      	add	r5, sp, #276	@ 0x114
1001612a:	ab30      	add	r3, sp, #192	@ 0xc0
1001612c:	4629      	mov	r1, r5
1001612e:	f003 feb3 	bl	10019e98 <_wcrtomb_r>
10016132:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
10016136:	4683      	mov	fp, r0
10016138:	f000 8544 	beq.w	10016bc4 <_vfprintf_r+0x1a90>
1001613c:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
10016140:	9306      	str	r3, [sp, #24]
10016142:	f7ff ba93 	b.w	1001566c <_vfprintf_r+0x538>
10016146:	990d      	ldr	r1, [sp, #52]	@ 0x34
10016148:	f851 3b04 	ldr.w	r3, [r1], #4
1001614c:	910d      	str	r1, [sp, #52]	@ 0x34
1001614e:	f019 0110 	ands.w	r1, r9, #16
10016152:	d196      	bne.n	10016082 <_vfprintf_r+0xf4e>
10016154:	f019 0040 	ands.w	r0, r9, #64	@ 0x40
10016158:	f000 8151 	beq.w	100163fe <_vfprintf_r+0x12ca>
1001615c:	b29b      	uxth	r3, r3
1001615e:	460a      	mov	r2, r1
10016160:	e78f      	b.n	10016082 <_vfprintf_r+0xf4e>
10016162:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
10016166:	ad5e      	add	r5, sp, #376	@ 0x178
10016168:	e432      	b.n	100159d0 <_vfprintf_r+0x89c>
1001616a:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
1001616e:	aa32      	add	r2, sp, #200	@ 0xc8
10016170:	f000 fe80 	bl	10016e74 <__sprint_r>
10016174:	2800      	cmp	r0, #0
10016176:	f47f acd9 	bne.w	10015b2c <_vfprintf_r+0x9f8>
1001617a:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
1001617e:	af35      	add	r7, sp, #212	@ 0xd4
10016180:	e527      	b.n	10015bd2 <_vfprintf_r+0xa9e>
10016182:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10016186:	aa32      	add	r2, sp, #200	@ 0xc8
10016188:	f000 fe74 	bl	10016e74 <__sprint_r>
1001618c:	2800      	cmp	r0, #0
1001618e:	f47f accd 	bne.w	10015b2c <_vfprintf_r+0x9f8>
10016192:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
10016196:	af35      	add	r7, sp, #212	@ 0xd4
10016198:	e50f      	b.n	10015bba <_vfprintf_r+0xa86>
1001619a:	f404 6b80 	and.w	fp, r4, #1024	@ 0x400
1001619e:	2100      	movs	r1, #0
100161a0:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
100161a4:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 10016380 <_vfprintf_r+0x124c>
100161a8:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
100161ac:	9406      	str	r4, [sp, #24]
100161ae:	ad5e      	add	r5, sp, #376	@ 0x178
100161b0:	f04f 3acc 	mov.w	sl, #3435973836	@ 0xcccccccc
100161b4:	2705      	movs	r7, #5
100161b6:	468c      	mov	ip, r1
100161b8:	465e      	mov	r6, fp
100161ba:	e005      	b.n	100161c8 <_vfprintf_r+0x1094>
100161bc:	2b0a      	cmp	r3, #10
100161be:	f172 0200 	sbcs.w	r2, r2, #0
100161c2:	d333      	bcc.n	1001622c <_vfprintf_r+0x10f8>
100161c4:	465b      	mov	r3, fp
100161c6:	4622      	mov	r2, r4
100161c8:	1899      	adds	r1, r3, r2
100161ca:	f141 0100 	adc.w	r1, r1, #0
100161ce:	fba9 0401 	umull	r0, r4, r9, r1
100161d2:	f024 0003 	bic.w	r0, r4, #3
100161d6:	eb00 0094 	add.w	r0, r0, r4, lsr #2
100161da:	1a09      	subs	r1, r1, r0
100161dc:	1a58      	subs	r0, r3, r1
100161de:	f162 0e00 	sbc.w	lr, r2, #0
100161e2:	fb0a f400 	mul.w	r4, sl, r0
100161e6:	fba0 b009 	umull	fp, r0, r0, r9
100161ea:	fb09 440e 	mla	r4, r9, lr, r4
100161ee:	f00b 0e01 	and.w	lr, fp, #1
100161f2:	4404      	add	r4, r0
100161f4:	fbae 0e07 	umull	r0, lr, lr, r7
100161f8:	1840      	adds	r0, r0, r1
100161fa:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
100161fe:	3030      	adds	r0, #48	@ 0x30
10016200:	f805 0c01 	strb.w	r0, [r5, #-1]
10016204:	ea4b 7bc4 	orr.w	fp, fp, r4, lsl #31
10016208:	f10c 0c01 	add.w	ip, ip, #1
1001620c:	3d01      	subs	r5, #1
1001620e:	0864      	lsrs	r4, r4, #1
10016210:	2e00      	cmp	r6, #0
10016212:	d0d3      	beq.n	100161bc <_vfprintf_r+0x1088>
10016214:	f898 1000 	ldrb.w	r1, [r8]
10016218:	458c      	cmp	ip, r1
1001621a:	d1cf      	bne.n	100161bc <_vfprintf_r+0x1088>
1001621c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
10016220:	d0cc      	beq.n	100161bc <_vfprintf_r+0x1088>
10016222:	2b0a      	cmp	r3, #10
10016224:	f172 0200 	sbcs.w	r2, r2, #0
10016228:	f080 82c5 	bcs.w	100167b6 <_vfprintf_r+0x1682>
1001622c:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
10016230:	9c06      	ldr	r4, [sp, #24]
10016232:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
10016236:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
1001623a:	f7ff bbc5 	b.w	100159c8 <_vfprintf_r+0x894>
1001623e:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10016242:	aa32      	add	r2, sp, #200	@ 0xc8
10016244:	9315      	str	r3, [sp, #84]	@ 0x54
10016246:	f000 fe15 	bl	10016e74 <__sprint_r>
1001624a:	2800      	cmp	r0, #0
1001624c:	f47f ac6e 	bne.w	10015b2c <_vfprintf_r+0x9f8>
10016250:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10016254:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10016256:	9b15      	ldr	r3, [sp, #84]	@ 0x54
10016258:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001625c:	f7ff b8fc 	b.w	10015458 <_vfprintf_r+0x324>
10016260:	46a3      	mov	fp, r4
10016262:	f7ff b8bf 	b.w	100153e4 <_vfprintf_r+0x2b0>
10016266:	46d3      	mov	fp, sl
10016268:	f7ff b8bc 	b.w	100153e4 <_vfprintf_r+0x2b0>
1001626c:	4658      	mov	r0, fp
1001626e:	f002 fb0f 	bl	10018890 <__sinit>
10016272:	f7fe bf7c 	b.w	1001516e <_vfprintf_r+0x3a>
10016276:	2901      	cmp	r1, #1
10016278:	464c      	mov	r4, r9
1001627a:	f47f ab95 	bne.w	100159a8 <_vfprintf_r+0x874>
1001627e:	e4d3      	b.n	10015c28 <_vfprintf_r+0xaf4>
10016280:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10016284:	aa32      	add	r2, sp, #200	@ 0xc8
10016286:	f000 fdf5 	bl	10016e74 <__sprint_r>
1001628a:	2800      	cmp	r0, #0
1001628c:	f47f ac4e 	bne.w	10015b2c <_vfprintf_r+0x9f8>
10016290:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10016292:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10016296:	f7ff bb46 	b.w	10015926 <_vfprintf_r+0x7f2>
1001629a:	46cb      	mov	fp, r9
1001629c:	f7ff b8a2 	b.w	100153e4 <_vfprintf_r+0x2b0>
100162a0:	af30      	add	r7, sp, #192	@ 0xc0
100162a2:	2208      	movs	r2, #8
100162a4:	2100      	movs	r1, #0
100162a6:	4638      	mov	r0, r7
100162a8:	952b      	str	r5, [sp, #172]	@ 0xac
100162aa:	f003 f987 	bl	100195bc <memset>
100162ae:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
100162b2:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
100162b6:	f000 8270 	beq.w	1001679a <_vfprintf_r+0x1666>
100162ba:	2400      	movs	r4, #0
100162bc:	f8cd 9018 	str.w	r9, [sp, #24]
100162c0:	46a3      	mov	fp, r4
100162c2:	f8dd 9020 	ldr.w	r9, [sp, #32]
100162c6:	e00c      	b.n	100162e2 <_vfprintf_r+0x11ae>
100162c8:	a945      	add	r1, sp, #276	@ 0x114
100162ca:	4648      	mov	r0, r9
100162cc:	f003 fde4 	bl	10019e98 <_wcrtomb_r>
100162d0:	1c41      	adds	r1, r0, #1
100162d2:	4458      	add	r0, fp
100162d4:	f000 8476 	beq.w	10016bc4 <_vfprintf_r+0x1a90>
100162d8:	4550      	cmp	r0, sl
100162da:	dc08      	bgt.n	100162ee <_vfprintf_r+0x11ba>
100162dc:	f000 84c3 	beq.w	10016c66 <_vfprintf_r+0x1b32>
100162e0:	4683      	mov	fp, r0
100162e2:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
100162e4:	5912      	ldr	r2, [r2, r4]
100162e6:	463b      	mov	r3, r7
100162e8:	3404      	adds	r4, #4
100162ea:	2a00      	cmp	r2, #0
100162ec:	d1ec      	bne.n	100162c8 <_vfprintf_r+0x1194>
100162ee:	f8dd 9018 	ldr.w	r9, [sp, #24]
100162f2:	f1bb 0f00 	cmp.w	fp, #0
100162f6:	f000 8343 	beq.w	10016980 <_vfprintf_r+0x184c>
100162fa:	f1bb 0f63 	cmp.w	fp, #99	@ 0x63
100162fe:	f340 83fa 	ble.w	10016af6 <_vfprintf_r+0x19c2>
10016302:	9808      	ldr	r0, [sp, #32]
10016304:	f10b 0101 	add.w	r1, fp, #1
10016308:	f7fe fc46 	bl	10014b98 <_malloc_r>
1001630c:	4605      	mov	r5, r0
1001630e:	2800      	cmp	r0, #0
10016310:	f000 8458 	beq.w	10016bc4 <_vfprintf_r+0x1a90>
10016314:	900c      	str	r0, [sp, #48]	@ 0x30
10016316:	2208      	movs	r2, #8
10016318:	2100      	movs	r1, #0
1001631a:	4638      	mov	r0, r7
1001631c:	f003 f94e 	bl	100195bc <memset>
10016320:	9808      	ldr	r0, [sp, #32]
10016322:	9700      	str	r7, [sp, #0]
10016324:	465b      	mov	r3, fp
10016326:	aa2b      	add	r2, sp, #172	@ 0xac
10016328:	4629      	mov	r1, r5
1001632a:	f003 fddb 	bl	10019ee4 <_wcsrtombs_r>
1001632e:	4583      	cmp	fp, r0
10016330:	f040 8519 	bne.w	10016d66 <_vfprintf_r+0x1c32>
10016334:	2300      	movs	r3, #0
10016336:	f805 300b 	strb.w	r3, [r5, fp]
1001633a:	ea2b 71eb 	bic.w	r1, fp, fp, asr #31
1001633e:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10016342:	960d      	str	r6, [sp, #52]	@ 0x34
10016344:	9309      	str	r3, [sp, #36]	@ 0x24
10016346:	9106      	str	r1, [sp, #24]
10016348:	9314      	str	r3, [sp, #80]	@ 0x50
1001634a:	9310      	str	r3, [sp, #64]	@ 0x40
1001634c:	9312      	str	r3, [sp, #72]	@ 0x48
1001634e:	f7ff b923 	b.w	10015598 <_vfprintf_r+0x464>
10016352:	4a0c      	ldr	r2, [pc, #48]	@ (10016384 <_vfprintf_r+0x1250>)
10016354:	9215      	str	r2, [sp, #84]	@ 0x54
10016356:	3301      	adds	r3, #1
10016358:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1001635a:	f8c8 2000 	str.w	r2, [r8]
1001635e:	442c      	add	r4, r5
10016360:	2b07      	cmp	r3, #7
10016362:	f8c8 5004 	str.w	r5, [r8, #4]
10016366:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001636a:	f77f a8b2 	ble.w	100154d2 <_vfprintf_r+0x39e>
1001636e:	f7ff bbfd 	b.w	10015b6c <_vfprintf_r+0xa38>
10016372:	bf00      	nop
10016374:	10025498 	.word	0x10025498
10016378:	10025484 	.word	0x10025484
1001637c:	100254ac 	.word	0x100254ac
10016380:	cccccccd 	.word	0xcccccccd
10016384:	100254b8 	.word	0x100254b8
10016388:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001638a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001638c:	681b      	ldr	r3, [r3, #0]
1001638e:	601a      	str	r2, [r3, #0]
10016390:	f7ff baa8 	b.w	100158e4 <_vfprintf_r+0x7b0>
10016394:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
10016398:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1001639a:	603b      	str	r3, [r7, #0]
1001639c:	3601      	adds	r6, #1
1001639e:	4444      	add	r4, r8
100163a0:	2e07      	cmp	r6, #7
100163a2:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
100163a6:	f8c7 8004 	str.w	r8, [r7, #4]
100163aa:	f77f ac29 	ble.w	10015c00 <_vfprintf_r+0xacc>
100163ae:	e525      	b.n	10015dfc <_vfprintf_r+0xcc8>
100163b0:	2e10      	cmp	r6, #16
100163b2:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
100163b4:	f340 84ad 	ble.w	10016d12 <_vfprintf_r+0x1bde>
100163b8:	4898      	ldr	r0, [pc, #608]	@ (1001661c <_vfprintf_r+0x14e8>)
100163ba:	9015      	str	r0, [sp, #84]	@ 0x54
100163bc:	4642      	mov	r2, r8
100163be:	4621      	mov	r1, r4
100163c0:	46a8      	mov	r8, r5
100163c2:	e9dd 4a07 	ldrd	r4, sl, [sp, #28]
100163c6:	2710      	movs	r7, #16
100163c8:	4605      	mov	r5, r0
100163ca:	e004      	b.n	100163d6 <_vfprintf_r+0x12a2>
100163cc:	3208      	adds	r2, #8
100163ce:	3e10      	subs	r6, #16
100163d0:	2e10      	cmp	r6, #16
100163d2:	f340 81ca 	ble.w	1001676a <_vfprintf_r+0x1636>
100163d6:	3301      	adds	r3, #1
100163d8:	3110      	adds	r1, #16
100163da:	2b07      	cmp	r3, #7
100163dc:	e9c2 5700 	strd	r5, r7, [r2]
100163e0:	e9cd 3133 	strd	r3, r1, [sp, #204]	@ 0xcc
100163e4:	ddf2      	ble.n	100163cc <_vfprintf_r+0x1298>
100163e6:	aa32      	add	r2, sp, #200	@ 0xc8
100163e8:	4621      	mov	r1, r4
100163ea:	4650      	mov	r0, sl
100163ec:	f000 fd42 	bl	10016e74 <__sprint_r>
100163f0:	2800      	cmp	r0, #0
100163f2:	f47f af38 	bne.w	10016266 <_vfprintf_r+0x1132>
100163f6:	e9dd 3133 	ldrd	r3, r1, [sp, #204]	@ 0xcc
100163fa:	aa35      	add	r2, sp, #212	@ 0xd4
100163fc:	e7e7      	b.n	100163ce <_vfprintf_r+0x129a>
100163fe:	f419 7200 	ands.w	r2, r9, #512	@ 0x200
10016402:	bf1c      	itt	ne
10016404:	b2db      	uxtbne	r3, r3
10016406:	4602      	movne	r2, r0
10016408:	e63b      	b.n	10016082 <_vfprintf_r+0xf4e>
1001640a:	f419 7200 	ands.w	r2, r9, #512	@ 0x200
1001640e:	bf1c      	itt	ne
10016410:	b2db      	uxtbne	r3, r3
10016412:	4602      	movne	r2, r0
10016414:	f7ff b9f9 	b.w	1001580a <_vfprintf_r+0x6d6>
10016418:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1001641a:	2302      	movs	r3, #2
1001641c:	e9cd 3600 	strd	r3, r6, [sp]
10016420:	ab30      	add	r3, sp, #192	@ 0xc0
10016422:	9304      	str	r3, [sp, #16]
10016424:	ab2b      	add	r3, sp, #172	@ 0xac
10016426:	9303      	str	r3, [sp, #12]
10016428:	ab29      	add	r3, sp, #164	@ 0xa4
1001642a:	9302      	str	r3, [sp, #8]
1001642c:	9808      	ldr	r0, [sp, #32]
1001642e:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
10016432:	f003 fe45 	bl	1001a0c0 <_dtoa_r>
10016436:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10016438:	2b67      	cmp	r3, #103	@ 0x67
1001643a:	4605      	mov	r5, r0
1001643c:	f000 8177 	beq.w	1001672e <_vfprintf_r+0x15fa>
10016440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10016442:	2b47      	cmp	r3, #71	@ 0x47
10016444:	f000 8173 	beq.w	1001672e <_vfprintf_r+0x15fa>
10016448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001644a:	f023 0720 	bic.w	r7, r3, #32
1001644e:	2f46      	cmp	r7, #70	@ 0x46
10016450:	eb00 0406 	add.w	r4, r0, r6
10016454:	d105      	bne.n	10016462 <_vfprintf_r+0x132e>
10016456:	7803      	ldrb	r3, [r0, #0]
10016458:	2b30      	cmp	r3, #48	@ 0x30
1001645a:	f000 83db 	beq.w	10016c14 <_vfprintf_r+0x1ae0>
1001645e:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
10016460:	4434      	add	r4, r6
10016462:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
10016466:	2200      	movs	r2, #0
10016468:	2300      	movs	r3, #0
1001646a:	f00c f81b 	bl	100224a4 <__aeabi_dcmpeq>
1001646e:	2800      	cmp	r0, #0
10016470:	f000 81cc 	beq.w	1001680c <_vfprintf_r+0x16d8>
10016474:	4623      	mov	r3, r4
10016476:	1b5b      	subs	r3, r3, r5
10016478:	9313      	str	r3, [sp, #76]	@ 0x4c
1001647a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
1001647c:	9212      	str	r2, [sp, #72]	@ 0x48
1001647e:	2f47      	cmp	r7, #71	@ 0x47
10016480:	f000 815d 	beq.w	1001673e <_vfprintf_r+0x160a>
10016484:	2f46      	cmp	r7, #70	@ 0x46
10016486:	f000 82e3 	beq.w	10016a50 <_vfprintf_r+0x191c>
1001648a:	990e      	ldr	r1, [sp, #56]	@ 0x38
1001648c:	1e53      	subs	r3, r2, #1
1001648e:	2961      	cmp	r1, #97	@ 0x61
10016490:	9329      	str	r3, [sp, #164]	@ 0xa4
10016492:	f000 8441 	beq.w	10016d18 <_vfprintf_r+0x1be4>
10016496:	2941      	cmp	r1, #65	@ 0x41
10016498:	f040 815c 	bne.w	10016754 <_vfprintf_r+0x1620>
1001649c:	2150      	movs	r1, #80	@ 0x50
1001649e:	2001      	movs	r0, #1
100164a0:	2b00      	cmp	r3, #0
100164a2:	bfb6      	itet	lt
100164a4:	f1c2 0301 	rsblt	r3, r2, #1
100164a8:	222b      	movge	r2, #43	@ 0x2b
100164aa:	222d      	movlt	r2, #45	@ 0x2d
100164ac:	2b09      	cmp	r3, #9
100164ae:	f88d 10b0 	strb.w	r1, [sp, #176]	@ 0xb0
100164b2:	f88d 20b1 	strb.w	r2, [sp, #177]	@ 0xb1
100164b6:	f340 8377 	ble.w	10016ba8 <_vfprintf_r+0x1a74>
100164ba:	f10d 04c7 	add.w	r4, sp, #199	@ 0xc7
100164be:	4e58      	ldr	r6, [pc, #352]	@ (10016620 <_vfprintf_r+0x14ec>)
100164c0:	4622      	mov	r2, r4
100164c2:	4610      	mov	r0, r2
100164c4:	fba6 1203 	umull	r1, r2, r6, r3
100164c8:	08d2      	lsrs	r2, r2, #3
100164ca:	eb02 0182 	add.w	r1, r2, r2, lsl #2
100164ce:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
100164d2:	3130      	adds	r1, #48	@ 0x30
100164d4:	f800 1c01 	strb.w	r1, [r0, #-1]
100164d8:	4619      	mov	r1, r3
100164da:	2963      	cmp	r1, #99	@ 0x63
100164dc:	4613      	mov	r3, r2
100164de:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
100164e2:	dcee      	bgt.n	100164c2 <_vfprintf_r+0x138e>
100164e4:	3330      	adds	r3, #48	@ 0x30
100164e6:	f802 3c01 	strb.w	r3, [r2, #-1]
100164ea:	1e83      	subs	r3, r0, #2
100164ec:	42a3      	cmp	r3, r4
100164ee:	f080 840c 	bcs.w	10016d0a <_vfprintf_r+0x1bd6>
100164f2:	f10d 02b1 	add.w	r2, sp, #177	@ 0xb1
100164f6:	f813 1b01 	ldrb.w	r1, [r3], #1
100164fa:	f802 1f01 	strb.w	r1, [r2, #1]!
100164fe:	42a3      	cmp	r3, r4
10016500:	d1f9      	bne.n	100164f6 <_vfprintf_r+0x13c2>
10016502:	ab5e      	add	r3, sp, #376	@ 0x178
10016504:	1a18      	subs	r0, r3, r0
10016506:	f1a0 03ad 	sub.w	r3, r0, #173	@ 0xad
1001650a:	931c      	str	r3, [sp, #112]	@ 0x70
1001650c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001650e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
10016510:	2b01      	cmp	r3, #1
10016512:	eb03 0b02 	add.w	fp, r3, r2
10016516:	f340 8378 	ble.w	10016c0a <_vfprintf_r+0x1ad6>
1001651a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001651c:	449b      	add	fp, r3
1001651e:	9b06      	ldr	r3, [sp, #24]
10016520:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
10016524:	f443 7980 	orr.w	r9, r3, #256	@ 0x100
10016528:	ea2b 72eb 	bic.w	r2, fp, fp, asr #31
1001652c:	2300      	movs	r3, #0
1001652e:	9314      	str	r3, [sp, #80]	@ 0x50
10016530:	9206      	str	r2, [sp, #24]
10016532:	9310      	str	r3, [sp, #64]	@ 0x40
10016534:	9312      	str	r3, [sp, #72]	@ 0x48
10016536:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
10016538:	2b00      	cmp	r3, #0
1001653a:	f040 810f 	bne.w	1001675c <_vfprintf_r+0x1628>
1001653e:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10016542:	9309      	str	r3, [sp, #36]	@ 0x24
10016544:	f7ff b828 	b.w	10015598 <_vfprintf_r+0x464>
10016548:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001654a:	ebab 060a 	sub.w	r6, fp, sl
1001654e:	1b5d      	subs	r5, r3, r5
10016550:	42ae      	cmp	r6, r5
10016552:	bfa8      	it	ge
10016554:	462e      	movge	r6, r5
10016556:	e418      	b.n	10015d8a <_vfprintf_r+0xc56>
10016558:	f343 12c0 	sbfx	r2, r3, #7, #1
1001655c:	4611      	mov	r1, r2
1001655e:	b25b      	sxtb	r3, r3
10016560:	f7ff b8d0 	b.w	10015704 <_vfprintf_r+0x5d0>
10016564:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10016566:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10016568:	681b      	ldr	r3, [r3, #0]
1001656a:	801a      	strh	r2, [r3, #0]
1001656c:	f7ff b9ba 	b.w	100158e4 <_vfprintf_r+0x7b0>
10016570:	9907      	ldr	r1, [sp, #28]
10016572:	aa32      	add	r2, sp, #200	@ 0xc8
10016574:	4658      	mov	r0, fp
10016576:	f000 fc7d 	bl	10016e74 <__sprint_r>
1001657a:	2800      	cmp	r0, #0
1001657c:	f43e af22 	beq.w	100153c4 <_vfprintf_r+0x290>
10016580:	f7fe bf36 	b.w	100153f0 <_vfprintf_r+0x2bc>
10016584:	4628      	mov	r0, r5
10016586:	960d      	str	r6, [sp, #52]	@ 0x34
10016588:	f003 fbfa 	bl	10019d80 <strlen>
1001658c:	4683      	mov	fp, r0
1001658e:	f7ff b89c 	b.w	100156ca <_vfprintf_r+0x596>
10016592:	2358      	movs	r3, #88	@ 0x58
10016594:	f88d 30a1 	strb.w	r3, [sp, #161]	@ 0xa1
10016598:	2330      	movs	r3, #48	@ 0x30
1001659a:	f88d 30a0 	strb.w	r3, [sp, #160]	@ 0xa0
1001659e:	f049 0302 	orr.w	r3, r9, #2
100165a2:	9306      	str	r3, [sp, #24]
100165a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100165a6:	2b63      	cmp	r3, #99	@ 0x63
100165a8:	f300 82f6 	bgt.w	10016b98 <_vfprintf_r+0x1a64>
100165ac:	2300      	movs	r3, #0
100165ae:	930c      	str	r3, [sp, #48]	@ 0x30
100165b0:	ad45      	add	r5, sp, #276	@ 0x114
100165b2:	f449 7381 	orr.w	r3, r9, #258	@ 0x102
100165b6:	9315      	str	r3, [sp, #84]	@ 0x54
100165b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
100165ba:	2b00      	cmp	r3, #0
100165bc:	f2c0 8200 	blt.w	100169c0 <_vfprintf_r+0x188c>
100165c0:	2300      	movs	r3, #0
100165c2:	931f      	str	r3, [sp, #124]	@ 0x7c
100165c4:	e9dd 3416 	ldrd	r3, r4, [sp, #88]	@ 0x58
100165c8:	e9cd 3424 	strd	r3, r4, [sp, #144]	@ 0x90
100165cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100165ce:	2b61      	cmp	r3, #97	@ 0x61
100165d0:	f47f ad1a 	bne.w	10016008 <_vfprintf_r+0xed4>
100165d4:	aa29      	add	r2, sp, #164	@ 0xa4
100165d6:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
100165da:	f003 fc91 	bl	10019f00 <frexp>
100165de:	2200      	movs	r2, #0
100165e0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
100165e4:	f00b fcf6 	bl	10021fd4 <__aeabi_dmul>
100165e8:	4602      	mov	r2, r0
100165ea:	460b      	mov	r3, r1
100165ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
100165f0:	2200      	movs	r2, #0
100165f2:	2300      	movs	r3, #0
100165f4:	f00b ff56 	bl	100224a4 <__aeabi_dcmpeq>
100165f8:	2800      	cmp	r0, #0
100165fa:	f040 82f8 	bne.w	10016bee <_vfprintf_r+0x1aba>
100165fe:	4b09      	ldr	r3, [pc, #36]	@ (10016624 <_vfprintf_r+0x14f0>)
10016600:	9312      	str	r3, [sp, #72]	@ 0x48
10016602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10016604:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
10016608:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
1001660c:	462e      	mov	r6, r5
1001660e:	9514      	str	r5, [sp, #80]	@ 0x50
10016610:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
10016614:	464d      	mov	r5, r9
10016616:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	@ 0x40
1001661a:	e00b      	b.n	10016634 <_vfprintf_r+0x1500>
1001661c:	100254b8 	.word	0x100254b8
10016620:	cccccccd 	.word	0xcccccccd
10016624:	10025484 	.word	0x10025484
10016628:	2200      	movs	r2, #0
1001662a:	2300      	movs	r3, #0
1001662c:	f00b ff3a 	bl	100224a4 <__aeabi_dcmpeq>
10016630:	b9f0      	cbnz	r0, 10016670 <_vfprintf_r+0x153c>
10016632:	463d      	mov	r5, r7
10016634:	4ba9      	ldr	r3, [pc, #676]	@ (100168dc <_vfprintf_r+0x17a8>)
10016636:	2200      	movs	r2, #0
10016638:	4640      	mov	r0, r8
1001663a:	4649      	mov	r1, r9
1001663c:	f00b fcca 	bl	10021fd4 <__aeabi_dmul>
10016640:	4689      	mov	r9, r1
10016642:	4680      	mov	r8, r0
10016644:	f00b ff76 	bl	10022534 <__aeabi_d2iz>
10016648:	4604      	mov	r4, r0
1001664a:	f00b fc59 	bl	10021f00 <__aeabi_i2d>
1001664e:	4602      	mov	r2, r0
10016650:	460b      	mov	r3, r1
10016652:	4640      	mov	r0, r8
10016654:	4649      	mov	r1, r9
10016656:	f00b fb05 	bl	10021c64 <__aeabi_dsub>
1001665a:	f81b 3004 	ldrb.w	r3, [fp, r4]
1001665e:	1c6a      	adds	r2, r5, #1
10016660:	46b2      	mov	sl, r6
10016662:	f105 37ff 	add.w	r7, r5, #4294967295	@ 0xffffffff
10016666:	f806 3b01 	strb.w	r3, [r6], #1
1001666a:	4680      	mov	r8, r0
1001666c:	4689      	mov	r9, r1
1001666e:	d1db      	bne.n	10016628 <_vfprintf_r+0x14f4>
10016670:	46cb      	mov	fp, r9
10016672:	4657      	mov	r7, sl
10016674:	46c2      	mov	sl, r8
10016676:	4b9a      	ldr	r3, [pc, #616]	@ (100168e0 <_vfprintf_r+0x17ac>)
10016678:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
1001667c:	2200      	movs	r2, #0
1001667e:	4650      	mov	r0, sl
10016680:	4659      	mov	r1, fp
10016682:	46a9      	mov	r9, r5
10016684:	9d14      	ldr	r5, [sp, #80]	@ 0x50
10016686:	f00b ff35 	bl	100224f4 <__aeabi_dcmpgt>
1001668a:	2800      	cmp	r0, #0
1001668c:	f040 8264 	bne.w	10016b58 <_vfprintf_r+0x1a24>
10016690:	4b93      	ldr	r3, [pc, #588]	@ (100168e0 <_vfprintf_r+0x17ac>)
10016692:	4650      	mov	r0, sl
10016694:	4659      	mov	r1, fp
10016696:	2200      	movs	r2, #0
10016698:	f00b ff04 	bl	100224a4 <__aeabi_dcmpeq>
1001669c:	b110      	cbz	r0, 100166a4 <_vfprintf_r+0x1570>
1001669e:	07e3      	lsls	r3, r4, #31
100166a0:	f100 825a 	bmi.w	10016b58 <_vfprintf_r+0x1a24>
100166a4:	f1b9 0f00 	cmp.w	r9, #0
100166a8:	f2c0 8270 	blt.w	10016b8c <_vfprintf_r+0x1a58>
100166ac:	f109 0301 	add.w	r3, r9, #1
100166b0:	4433      	add	r3, r6
100166b2:	2230      	movs	r2, #48	@ 0x30
100166b4:	f806 2b01 	strb.w	r2, [r6], #1
100166b8:	42b3      	cmp	r3, r6
100166ba:	d1fb      	bne.n	100166b4 <_vfprintf_r+0x1580>
100166bc:	1b5b      	subs	r3, r3, r5
100166be:	9313      	str	r3, [sp, #76]	@ 0x4c
100166c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100166c2:	f023 0720 	bic.w	r7, r3, #32
100166c6:	e6d8      	b.n	1001647a <_vfprintf_r+0x1346>
100166c8:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
100166cc:	aa32      	add	r2, sp, #200	@ 0xc8
100166ce:	f000 fbd1 	bl	10016e74 <__sprint_r>
100166d2:	2800      	cmp	r0, #0
100166d4:	f47f aa2a 	bne.w	10015b2c <_vfprintf_r+0x9f8>
100166d8:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
100166dc:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
100166de:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100166e2:	f7ff ba34 	b.w	10015b4e <_vfprintf_r+0xa1a>
100166e6:	6d88      	ldr	r0, [r1, #88]	@ 0x58
100166e8:	f003 fa48 	bl	10019b7c <__retarget_lock_release_recursive>
100166ec:	f7fe be3c 	b.w	10015368 <_vfprintf_r+0x234>
100166f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100166f2:	1c5e      	adds	r6, r3, #1
100166f4:	2302      	movs	r3, #2
100166f6:	e691      	b.n	1001641c <_vfprintf_r+0x12e8>
100166f8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
100166fa:	2303      	movs	r3, #3
100166fc:	e68e      	b.n	1001641c <_vfprintf_r+0x12e8>
100166fe:	aa29      	add	r2, sp, #164	@ 0xa4
10016700:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
10016704:	f003 fbfc 	bl	10019f00 <frexp>
10016708:	2200      	movs	r2, #0
1001670a:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
1001670e:	f00b fc61 	bl	10021fd4 <__aeabi_dmul>
10016712:	4602      	mov	r2, r0
10016714:	460b      	mov	r3, r1
10016716:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
1001671a:	2200      	movs	r2, #0
1001671c:	2300      	movs	r3, #0
1001671e:	f00b fec1 	bl	100224a4 <__aeabi_dcmpeq>
10016722:	2800      	cmp	r0, #0
10016724:	f040 8263 	bne.w	10016bee <_vfprintf_r+0x1aba>
10016728:	4b6e      	ldr	r3, [pc, #440]	@ (100168e4 <_vfprintf_r+0x17b0>)
1001672a:	9312      	str	r3, [sp, #72]	@ 0x48
1001672c:	e769      	b.n	10016602 <_vfprintf_r+0x14ce>
1001672e:	9b06      	ldr	r3, [sp, #24]
10016730:	07df      	lsls	r7, r3, #31
10016732:	f100 81e4 	bmi.w	10016afe <_vfprintf_r+0x19ca>
10016736:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
10016738:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
1001673a:	1b5b      	subs	r3, r3, r5
1001673c:	9313      	str	r3, [sp, #76]	@ 0x4c
1001673e:	1cd3      	adds	r3, r2, #3
10016740:	9212      	str	r2, [sp, #72]	@ 0x48
10016742:	db02      	blt.n	1001674a <_vfprintf_r+0x1616>
10016744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10016746:	4293      	cmp	r3, r2
10016748:	da44      	bge.n	100167d4 <_vfprintf_r+0x16a0>
1001674a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001674c:	3b02      	subs	r3, #2
1001674e:	930e      	str	r3, [sp, #56]	@ 0x38
10016750:	1e53      	subs	r3, r2, #1
10016752:	9329      	str	r3, [sp, #164]	@ 0xa4
10016754:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
10016758:	2000      	movs	r0, #0
1001675a:	e6a1      	b.n	100164a0 <_vfprintf_r+0x136c>
1001675c:	222d      	movs	r2, #45	@ 0x2d
1001675e:	2300      	movs	r3, #0
10016760:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
10016764:	9309      	str	r3, [sp, #36]	@ 0x24
10016766:	f7fe bf1a 	b.w	1001559e <_vfprintf_r+0x46a>
1001676a:	4645      	mov	r5, r8
1001676c:	460c      	mov	r4, r1
1001676e:	4690      	mov	r8, r2
10016770:	3301      	adds	r3, #1
10016772:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10016774:	f8c8 2000 	str.w	r2, [r8]
10016778:	4434      	add	r4, r6
1001677a:	2b07      	cmp	r3, #7
1001677c:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10016780:	f8c8 6004 	str.w	r6, [r8, #4]
10016784:	f300 8226 	bgt.w	10016bd4 <_vfprintf_r+0x1aa0>
10016788:	f108 0808 	add.w	r8, r8, #8
1001678c:	f7ff bac9 	b.w	10015d22 <_vfprintf_r+0xbee>
10016790:	222d      	movs	r2, #45	@ 0x2d
10016792:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
10016796:	f7fe beee 	b.w	10015576 <_vfprintf_r+0x442>
1001679a:	2300      	movs	r3, #0
1001679c:	9808      	ldr	r0, [sp, #32]
1001679e:	9700      	str	r7, [sp, #0]
100167a0:	aa2b      	add	r2, sp, #172	@ 0xac
100167a2:	4619      	mov	r1, r3
100167a4:	f003 fb9e 	bl	10019ee4 <_wcsrtombs_r>
100167a8:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
100167ac:	4683      	mov	fp, r0
100167ae:	f000 8209 	beq.w	10016bc4 <_vfprintf_r+0x1a90>
100167b2:	952b      	str	r5, [sp, #172]	@ 0xac
100167b4:	e59d      	b.n	100162f2 <_vfprintf_r+0x11be>
100167b6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
100167b8:	991d      	ldr	r1, [sp, #116]	@ 0x74
100167ba:	1aed      	subs	r5, r5, r3
100167bc:	461a      	mov	r2, r3
100167be:	4628      	mov	r0, r5
100167c0:	f002 ff4e 	bl	10019660 <strncpy>
100167c4:	f898 3001 	ldrb.w	r3, [r8, #1]
100167c8:	b10b      	cbz	r3, 100167ce <_vfprintf_r+0x169a>
100167ca:	f108 0801 	add.w	r8, r8, #1
100167ce:	f04f 0c00 	mov.w	ip, #0
100167d2:	e4f7      	b.n	100161c4 <_vfprintf_r+0x1090>
100167d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
100167d6:	4293      	cmp	r3, r2
100167d8:	f300 8194 	bgt.w	10016b04 <_vfprintf_r+0x19d0>
100167dc:	9b06      	ldr	r3, [sp, #24]
100167de:	07dc      	lsls	r4, r3, #31
100167e0:	f140 824a 	bpl.w	10016c78 <_vfprintf_r+0x1b44>
100167e4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
100167e6:	eb02 0b03 	add.w	fp, r2, r3
100167ea:	9b06      	ldr	r3, [sp, #24]
100167ec:	0558      	lsls	r0, r3, #21
100167ee:	d502      	bpl.n	100167f6 <_vfprintf_r+0x16c2>
100167f0:	2a00      	cmp	r2, #0
100167f2:	f300 824a 	bgt.w	10016c8a <_vfprintf_r+0x1b56>
100167f6:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
100167fa:	9306      	str	r3, [sp, #24]
100167fc:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
10016800:	2367      	movs	r3, #103	@ 0x67
10016802:	930e      	str	r3, [sp, #56]	@ 0x38
10016804:	2300      	movs	r3, #0
10016806:	9314      	str	r3, [sp, #80]	@ 0x50
10016808:	9310      	str	r3, [sp, #64]	@ 0x40
1001680a:	e694      	b.n	10016536 <_vfprintf_r+0x1402>
1001680c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
1001680e:	42a3      	cmp	r3, r4
10016810:	f4bf ae31 	bcs.w	10016476 <_vfprintf_r+0x1342>
10016814:	2130      	movs	r1, #48	@ 0x30
10016816:	1c5a      	adds	r2, r3, #1
10016818:	9230      	str	r2, [sp, #192]	@ 0xc0
1001681a:	7019      	strb	r1, [r3, #0]
1001681c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
1001681e:	429c      	cmp	r4, r3
10016820:	d8f9      	bhi.n	10016816 <_vfprintf_r+0x16e2>
10016822:	e628      	b.n	10016476 <_vfprintf_r+0x1342>
10016824:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10016826:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
1001682a:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
1001682e:	4642      	mov	r2, r8
10016830:	4621      	mov	r1, r4
10016832:	4f2d      	ldr	r7, [pc, #180]	@ (100168e8 <_vfprintf_r+0x17b4>)
10016834:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
10016838:	f8dd 8078 	ldr.w	r8, [sp, #120]	@ 0x78
1001683c:	f8dd b020 	ldr.w	fp, [sp, #32]
10016840:	4654      	mov	r4, sl
10016842:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
10016846:	b37b      	cbz	r3, 100168a8 <_vfprintf_r+0x1774>
10016848:	f1b9 0f00 	cmp.w	r9, #0
1001684c:	f000 8085 	beq.w	1001695a <_vfprintf_r+0x1826>
10016850:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
10016854:	9833      	ldr	r0, [sp, #204]	@ 0xcc
10016856:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
10016858:	3001      	adds	r0, #1
1001685a:	4441      	add	r1, r8
1001685c:	2807      	cmp	r0, #7
1001685e:	e9c2 3800 	strd	r3, r8, [r2]
10016862:	9134      	str	r1, [sp, #208]	@ 0xd0
10016864:	9033      	str	r0, [sp, #204]	@ 0xcc
10016866:	dc6d      	bgt.n	10016944 <_vfprintf_r+0x1810>
10016868:	3208      	adds	r2, #8
1001686a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001686c:	f89a 0000 	ldrb.w	r0, [sl]
10016870:	1b1e      	subs	r6, r3, r4
10016872:	4286      	cmp	r6, r0
10016874:	bfa8      	it	ge
10016876:	4606      	movge	r6, r0
10016878:	2e00      	cmp	r6, #0
1001687a:	dd0b      	ble.n	10016894 <_vfprintf_r+0x1760>
1001687c:	9833      	ldr	r0, [sp, #204]	@ 0xcc
1001687e:	3001      	adds	r0, #1
10016880:	4431      	add	r1, r6
10016882:	2807      	cmp	r0, #7
10016884:	e9c2 4600 	strd	r4, r6, [r2]
10016888:	9134      	str	r1, [sp, #208]	@ 0xd0
1001688a:	9033      	str	r0, [sp, #204]	@ 0xcc
1001688c:	dc6b      	bgt.n	10016966 <_vfprintf_r+0x1832>
1001688e:	f89a 0000 	ldrb.w	r0, [sl]
10016892:	3208      	adds	r2, #8
10016894:	2e00      	cmp	r6, #0
10016896:	bfac      	ite	ge
10016898:	1b85      	subge	r5, r0, r6
1001689a:	4605      	movlt	r5, r0
1001689c:	2d00      	cmp	r5, #0
1001689e:	dc14      	bgt.n	100168ca <_vfprintf_r+0x1796>
100168a0:	4404      	add	r4, r0
100168a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100168a4:	2b00      	cmp	r3, #0
100168a6:	d1cf      	bne.n	10016848 <_vfprintf_r+0x1714>
100168a8:	f1b9 0f00 	cmp.w	r9, #0
100168ac:	d1d0      	bne.n	10016850 <_vfprintf_r+0x171c>
100168ae:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
100168b2:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
100168b6:	46a2      	mov	sl, r4
100168b8:	45da      	cmp	sl, fp
100168ba:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
100168be:	4690      	mov	r8, r2
100168c0:	460c      	mov	r4, r1
100168c2:	bf28      	it	cs
100168c4:	46da      	movcs	sl, fp
100168c6:	f7ff ba33 	b.w	10015d30 <_vfprintf_r+0xbfc>
100168ca:	2d10      	cmp	r5, #16
100168cc:	9833      	ldr	r0, [sp, #204]	@ 0xcc
100168ce:	f340 821a 	ble.w	10016d06 <_vfprintf_r+0x1bd2>
100168d2:	4623      	mov	r3, r4
100168d4:	463e      	mov	r6, r7
100168d6:	462c      	mov	r4, r5
100168d8:	461d      	mov	r5, r3
100168da:	e00c      	b.n	100168f6 <_vfprintf_r+0x17c2>
100168dc:	40300000 	.word	0x40300000
100168e0:	3fe00000 	.word	0x3fe00000
100168e4:	10025498 	.word	0x10025498
100168e8:	100254b8 	.word	0x100254b8
100168ec:	3c10      	subs	r4, #16
100168ee:	2c10      	cmp	r4, #16
100168f0:	f102 0208 	add.w	r2, r2, #8
100168f4:	dd16      	ble.n	10016924 <_vfprintf_r+0x17f0>
100168f6:	3001      	adds	r0, #1
100168f8:	3110      	adds	r1, #16
100168fa:	2310      	movs	r3, #16
100168fc:	2807      	cmp	r0, #7
100168fe:	e9cd 0133 	strd	r0, r1, [sp, #204]	@ 0xcc
10016902:	6017      	str	r7, [r2, #0]
10016904:	6053      	str	r3, [r2, #4]
10016906:	ddf1      	ble.n	100168ec <_vfprintf_r+0x17b8>
10016908:	9907      	ldr	r1, [sp, #28]
1001690a:	aa32      	add	r2, sp, #200	@ 0xc8
1001690c:	4658      	mov	r0, fp
1001690e:	f000 fab1 	bl	10016e74 <__sprint_r>
10016912:	2800      	cmp	r0, #0
10016914:	f47e ad66 	bne.w	100153e4 <_vfprintf_r+0x2b0>
10016918:	3c10      	subs	r4, #16
1001691a:	2c10      	cmp	r4, #16
1001691c:	e9dd 0133 	ldrd	r0, r1, [sp, #204]	@ 0xcc
10016920:	aa35      	add	r2, sp, #212	@ 0xd4
10016922:	dce8      	bgt.n	100168f6 <_vfprintf_r+0x17c2>
10016924:	462b      	mov	r3, r5
10016926:	4625      	mov	r5, r4
10016928:	461c      	mov	r4, r3
1001692a:	3001      	adds	r0, #1
1001692c:	4429      	add	r1, r5
1001692e:	2807      	cmp	r0, #7
10016930:	e9cd 0133 	strd	r0, r1, [sp, #204]	@ 0xcc
10016934:	6016      	str	r6, [r2, #0]
10016936:	6055      	str	r5, [r2, #4]
10016938:	dc4b      	bgt.n	100169d2 <_vfprintf_r+0x189e>
1001693a:	f89a 0000 	ldrb.w	r0, [sl]
1001693e:	3208      	adds	r2, #8
10016940:	4404      	add	r4, r0
10016942:	e7ae      	b.n	100168a2 <_vfprintf_r+0x176e>
10016944:	9907      	ldr	r1, [sp, #28]
10016946:	aa32      	add	r2, sp, #200	@ 0xc8
10016948:	4658      	mov	r0, fp
1001694a:	f000 fa93 	bl	10016e74 <__sprint_r>
1001694e:	2800      	cmp	r0, #0
10016950:	f47e ad48 	bne.w	100153e4 <_vfprintf_r+0x2b0>
10016954:	9934      	ldr	r1, [sp, #208]	@ 0xd0
10016956:	aa35      	add	r2, sp, #212	@ 0xd4
10016958:	e787      	b.n	1001686a <_vfprintf_r+0x1736>
1001695a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1001695c:	3b01      	subs	r3, #1
1001695e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
10016962:	9310      	str	r3, [sp, #64]	@ 0x40
10016964:	e776      	b.n	10016854 <_vfprintf_r+0x1720>
10016966:	9907      	ldr	r1, [sp, #28]
10016968:	aa32      	add	r2, sp, #200	@ 0xc8
1001696a:	4658      	mov	r0, fp
1001696c:	f000 fa82 	bl	10016e74 <__sprint_r>
10016970:	2800      	cmp	r0, #0
10016972:	f47e ad37 	bne.w	100153e4 <_vfprintf_r+0x2b0>
10016976:	f89a 0000 	ldrb.w	r0, [sl]
1001697a:	9934      	ldr	r1, [sp, #208]	@ 0xd0
1001697c:	aa35      	add	r2, sp, #212	@ 0xd4
1001697e:	e789      	b.n	10016894 <_vfprintf_r+0x1760>
10016980:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10016984:	960d      	str	r6, [sp, #52]	@ 0x34
10016986:	f8cd b018 	str.w	fp, [sp, #24]
1001698a:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
1001698e:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
10016992:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
10016996:	f8cd b048 	str.w	fp, [sp, #72]	@ 0x48
1001699a:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
1001699e:	f7fe bdfb 	b.w	10015598 <_vfprintf_r+0x464>
100169a2:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
100169a6:	aa32      	add	r2, sp, #200	@ 0xc8
100169a8:	f000 fa64 	bl	10016e74 <__sprint_r>
100169ac:	2800      	cmp	r0, #0
100169ae:	f47f a8bd 	bne.w	10015b2c <_vfprintf_r+0x9f8>
100169b2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
100169b4:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
100169b6:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
100169ba:	f7ff baa3 	b.w	10015f04 <_vfprintf_r+0xdd0>
100169be:	930c      	str	r3, [sp, #48]	@ 0x30
100169c0:	e9dd 3416 	ldrd	r3, r4, [sp, #88]	@ 0x58
100169c4:	9324      	str	r3, [sp, #144]	@ 0x90
100169c6:	f104 4300 	add.w	r3, r4, #2147483648	@ 0x80000000
100169ca:	9325      	str	r3, [sp, #148]	@ 0x94
100169cc:	232d      	movs	r3, #45	@ 0x2d
100169ce:	931f      	str	r3, [sp, #124]	@ 0x7c
100169d0:	e5fc      	b.n	100165cc <_vfprintf_r+0x1498>
100169d2:	9907      	ldr	r1, [sp, #28]
100169d4:	aa32      	add	r2, sp, #200	@ 0xc8
100169d6:	4658      	mov	r0, fp
100169d8:	f000 fa4c 	bl	10016e74 <__sprint_r>
100169dc:	2800      	cmp	r0, #0
100169de:	f47e ad01 	bne.w	100153e4 <_vfprintf_r+0x2b0>
100169e2:	f89a 0000 	ldrb.w	r0, [sl]
100169e6:	9934      	ldr	r1, [sp, #208]	@ 0xd0
100169e8:	aa35      	add	r2, sp, #212	@ 0xd4
100169ea:	4404      	add	r4, r0
100169ec:	e759      	b.n	100168a2 <_vfprintf_r+0x176e>
100169ee:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
100169f2:	aa32      	add	r2, sp, #200	@ 0xc8
100169f4:	f000 fa3e 	bl	10016e74 <__sprint_r>
100169f8:	2800      	cmp	r0, #0
100169fa:	f47f a897 	bne.w	10015b2c <_vfprintf_r+0x9f8>
100169fe:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10016a00:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10016a04:	f7ff b986 	b.w	10015d14 <_vfprintf_r+0xbe0>
10016a08:	2378      	movs	r3, #120	@ 0x78
10016a0a:	e5c3      	b.n	10016594 <_vfprintf_r+0x1460>
10016a0c:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10016a10:	aa32      	add	r2, sp, #200	@ 0xc8
10016a12:	f000 fa2f 	bl	10016e74 <__sprint_r>
10016a16:	2800      	cmp	r0, #0
10016a18:	f47f a888 	bne.w	10015b2c <_vfprintf_r+0x9f8>
10016a1c:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
10016a1e:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10016a20:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10016a24:	f7ff b99a 	b.w	10015d5c <_vfprintf_r+0xc28>
10016a28:	49ab      	ldr	r1, [pc, #684]	@ (10016cd8 <_vfprintf_r+0x1ba4>)
10016a2a:	9115      	str	r1, [sp, #84]	@ 0x54
10016a2c:	f7fe bdeb 	b.w	10015606 <_vfprintf_r+0x4d2>
10016a30:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10016a34:	aa32      	add	r2, sp, #200	@ 0xc8
10016a36:	f000 fa1d 	bl	10016e74 <__sprint_r>
10016a3a:	2800      	cmp	r0, #0
10016a3c:	f47f a876 	bne.w	10015b2c <_vfprintf_r+0x9f8>
10016a40:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
10016a42:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10016a44:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10016a46:	1b5d      	subs	r5, r3, r5
10016a48:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10016a4c:	f7ff b99d 	b.w	10015d8a <_vfprintf_r+0xc56>
10016a50:	9b06      	ldr	r3, [sp, #24]
10016a52:	9912      	ldr	r1, [sp, #72]	@ 0x48
10016a54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10016a56:	f003 0301 	and.w	r3, r3, #1
10016a5a:	2900      	cmp	r1, #0
10016a5c:	ea43 0302 	orr.w	r3, r3, r2
10016a60:	f340 815d 	ble.w	10016d1e <_vfprintf_r+0x1bea>
10016a64:	2b00      	cmp	r3, #0
10016a66:	f040 8109 	bne.w	10016c7c <_vfprintf_r+0x1b48>
10016a6a:	2366      	movs	r3, #102	@ 0x66
10016a6c:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
10016a70:	930e      	str	r3, [sp, #56]	@ 0x38
10016a72:	9b06      	ldr	r3, [sp, #24]
10016a74:	055a      	lsls	r2, r3, #21
10016a76:	f100 810a 	bmi.w	10016c8e <_vfprintf_r+0x1b5a>
10016a7a:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
10016a7e:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
10016a82:	9306      	str	r3, [sp, #24]
10016a84:	e6be      	b.n	10016804 <_vfprintf_r+0x16d0>
10016a86:	2200      	movs	r2, #0
10016a88:	9209      	str	r2, [sp, #36]	@ 0x24
10016a8a:	f7fe bbcc 	b.w	10015226 <_vfprintf_r+0xf2>
10016a8e:	9b07      	ldr	r3, [sp, #28]
10016a90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10016a92:	07df      	lsls	r7, r3, #31
10016a94:	d407      	bmi.n	10016aa6 <_vfprintf_r+0x1972>
10016a96:	9b07      	ldr	r3, [sp, #28]
10016a98:	899b      	ldrh	r3, [r3, #12]
10016a9a:	059e      	lsls	r6, r3, #22
10016a9c:	d403      	bmi.n	10016aa6 <_vfprintf_r+0x1972>
10016a9e:	9b07      	ldr	r3, [sp, #28]
10016aa0:	6d98      	ldr	r0, [r3, #88]	@ 0x58
10016aa2:	f003 f86b 	bl	10019b7c <__retarget_lock_release_recursive>
10016aa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10016aaa:	930a      	str	r3, [sp, #40]	@ 0x28
10016aac:	f7fe bcab 	b.w	10015406 <_vfprintf_r+0x2d2>
10016ab0:	4256      	negs	r6, r2
10016ab2:	3210      	adds	r2, #16
10016ab4:	4a89      	ldr	r2, [pc, #548]	@ (10016cdc <_vfprintf_r+0x1ba8>)
10016ab6:	9215      	str	r2, [sp, #84]	@ 0x54
10016ab8:	da34      	bge.n	10016b24 <_vfprintf_r+0x19f0>
10016aba:	46aa      	mov	sl, r5
10016abc:	2710      	movs	r7, #16
10016abe:	4615      	mov	r5, r2
10016ac0:	e004      	b.n	10016acc <_vfprintf_r+0x1998>
10016ac2:	f108 0808 	add.w	r8, r8, #8
10016ac6:	3e10      	subs	r6, #16
10016ac8:	2e10      	cmp	r6, #16
10016aca:	dd2a      	ble.n	10016b22 <_vfprintf_r+0x19ee>
10016acc:	3301      	adds	r3, #1
10016ace:	3410      	adds	r4, #16
10016ad0:	2b07      	cmp	r3, #7
10016ad2:	e9c8 5700 	strd	r5, r7, [r8]
10016ad6:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10016ada:	ddf2      	ble.n	10016ac2 <_vfprintf_r+0x198e>
10016adc:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10016ae0:	aa32      	add	r2, sp, #200	@ 0xc8
10016ae2:	f000 f9c7 	bl	10016e74 <__sprint_r>
10016ae6:	2800      	cmp	r0, #0
10016ae8:	f47f a820 	bne.w	10015b2c <_vfprintf_r+0x9f8>
10016aec:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
10016af0:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10016af4:	e7e7      	b.n	10016ac6 <_vfprintf_r+0x1992>
10016af6:	2300      	movs	r3, #0
10016af8:	930c      	str	r3, [sp, #48]	@ 0x30
10016afa:	ad45      	add	r5, sp, #276	@ 0x114
10016afc:	e40b      	b.n	10016316 <_vfprintf_r+0x11e2>
10016afe:	19ac      	adds	r4, r5, r6
10016b00:	2747      	movs	r7, #71	@ 0x47
10016b02:	e4ae      	b.n	10016462 <_vfprintf_r+0x132e>
10016b04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10016b06:	9a18      	ldr	r2, [sp, #96]	@ 0x60
10016b08:	eb03 0b02 	add.w	fp, r3, r2
10016b0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
10016b0e:	2b00      	cmp	r3, #0
10016b10:	f340 80ee 	ble.w	10016cf0 <_vfprintf_r+0x1bbc>
10016b14:	2367      	movs	r3, #103	@ 0x67
10016b16:	930e      	str	r3, [sp, #56]	@ 0x38
10016b18:	e7ab      	b.n	10016a72 <_vfprintf_r+0x193e>
10016b1a:	4a6f      	ldr	r2, [pc, #444]	@ (10016cd8 <_vfprintf_r+0x1ba4>)
10016b1c:	9215      	str	r2, [sp, #84]	@ 0x54
10016b1e:	f7ff b8cc 	b.w	10015cba <_vfprintf_r+0xb86>
10016b22:	4655      	mov	r5, sl
10016b24:	3301      	adds	r3, #1
10016b26:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10016b28:	f8c8 2000 	str.w	r2, [r8]
10016b2c:	4434      	add	r4, r6
10016b2e:	2b07      	cmp	r3, #7
10016b30:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
10016b34:	f8c8 6004 	str.w	r6, [r8, #4]
10016b38:	f77f a9f9 	ble.w	10015f2e <_vfprintf_r+0xdfa>
10016b3c:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10016b40:	aa32      	add	r2, sp, #200	@ 0xc8
10016b42:	f000 f997 	bl	10016e74 <__sprint_r>
10016b46:	2800      	cmp	r0, #0
10016b48:	f47e aff0 	bne.w	10015b2c <_vfprintf_r+0x9f8>
10016b4c:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
10016b50:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10016b54:	f7fe bffe 	b.w	10015b54 <_vfprintf_r+0xa20>
10016b58:	9b12      	ldr	r3, [sp, #72]	@ 0x48
10016b5a:	9730      	str	r7, [sp, #192]	@ 0xc0
10016b5c:	7bd9      	ldrb	r1, [r3, #15]
10016b5e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
10016b62:	428a      	cmp	r2, r1
10016b64:	4633      	mov	r3, r6
10016b66:	d109      	bne.n	10016b7c <_vfprintf_r+0x1a48>
10016b68:	2030      	movs	r0, #48	@ 0x30
10016b6a:	f803 0c01 	strb.w	r0, [r3, #-1]
10016b6e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
10016b70:	1e5a      	subs	r2, r3, #1
10016b72:	9230      	str	r2, [sp, #192]	@ 0xc0
10016b74:	f813 2c01 	ldrb.w	r2, [r3, #-1]
10016b78:	4291      	cmp	r1, r2
10016b7a:	d0f6      	beq.n	10016b6a <_vfprintf_r+0x1a36>
10016b7c:	2a39      	cmp	r2, #57	@ 0x39
10016b7e:	bf0b      	itete	eq
10016b80:	9a12      	ldreq	r2, [sp, #72]	@ 0x48
10016b82:	3201      	addne	r2, #1
10016b84:	7a92      	ldrbeq	r2, [r2, #10]
10016b86:	b2d2      	uxtbne	r2, r2
10016b88:	f803 2c01 	strb.w	r2, [r3, #-1]
10016b8c:	4633      	mov	r3, r6
10016b8e:	e595      	b.n	100166bc <_vfprintf_r+0x1588>
10016b90:	4a52      	ldr	r2, [pc, #328]	@ (10016cdc <_vfprintf_r+0x1ba8>)
10016b92:	9215      	str	r2, [sp, #84]	@ 0x54
10016b94:	f7fe bf76 	b.w	10015a84 <_vfprintf_r+0x950>
10016b98:	9808      	ldr	r0, [sp, #32]
10016b9a:	1c59      	adds	r1, r3, #1
10016b9c:	f7fd fffc 	bl	10014b98 <_malloc_r>
10016ba0:	4605      	mov	r5, r0
10016ba2:	b178      	cbz	r0, 10016bc4 <_vfprintf_r+0x1a90>
10016ba4:	900c      	str	r0, [sp, #48]	@ 0x30
10016ba6:	e504      	b.n	100165b2 <_vfprintf_r+0x147e>
10016ba8:	2800      	cmp	r0, #0
10016baa:	d162      	bne.n	10016c72 <_vfprintf_r+0x1b3e>
10016bac:	2230      	movs	r2, #48	@ 0x30
10016bae:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
10016bb2:	f10d 02b3 	add.w	r2, sp, #179	@ 0xb3
10016bb6:	3330      	adds	r3, #48	@ 0x30
10016bb8:	f802 3b01 	strb.w	r3, [r2], #1
10016bbc:	ab2c      	add	r3, sp, #176	@ 0xb0
10016bbe:	1ad3      	subs	r3, r2, r3
10016bc0:	931c      	str	r3, [sp, #112]	@ 0x70
10016bc2:	e4a3      	b.n	1001650c <_vfprintf_r+0x13d8>
10016bc4:	9a07      	ldr	r2, [sp, #28]
10016bc6:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
10016bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10016bce:	8193      	strh	r3, [r2, #12]
10016bd0:	f7fe bc11 	b.w	100153f6 <_vfprintf_r+0x2c2>
10016bd4:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
10016bd8:	aa32      	add	r2, sp, #200	@ 0xc8
10016bda:	f000 f94b 	bl	10016e74 <__sprint_r>
10016bde:	2800      	cmp	r0, #0
10016be0:	f47e afa4 	bne.w	10015b2c <_vfprintf_r+0x9f8>
10016be4:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
10016be6:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
10016bea:	f7ff b89a 	b.w	10015d22 <_vfprintf_r+0xbee>
10016bee:	4b3c      	ldr	r3, [pc, #240]	@ (10016ce0 <_vfprintf_r+0x1bac>)
10016bf0:	4a3c      	ldr	r2, [pc, #240]	@ (10016ce4 <_vfprintf_r+0x1bb0>)
10016bf2:	990e      	ldr	r1, [sp, #56]	@ 0x38
10016bf4:	2961      	cmp	r1, #97	@ 0x61
10016bf6:	bf18      	it	ne
10016bf8:	461a      	movne	r2, r3
10016bfa:	2301      	movs	r3, #1
10016bfc:	9212      	str	r2, [sp, #72]	@ 0x48
10016bfe:	9329      	str	r3, [sp, #164]	@ 0xa4
10016c00:	e4ff      	b.n	10016602 <_vfprintf_r+0x14ce>
10016c02:	2306      	movs	r3, #6
10016c04:	9309      	str	r3, [sp, #36]	@ 0x24
10016c06:	f7ff b9ef 	b.w	10015fe8 <_vfprintf_r+0xeb4>
10016c0a:	9b06      	ldr	r3, [sp, #24]
10016c0c:	07de      	lsls	r6, r3, #31
10016c0e:	f57f ac86 	bpl.w	1001651e <_vfprintf_r+0x13ea>
10016c12:	e482      	b.n	1001651a <_vfprintf_r+0x13e6>
10016c14:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
10016c18:	2200      	movs	r2, #0
10016c1a:	2300      	movs	r3, #0
10016c1c:	f00b fc42 	bl	100224a4 <__aeabi_dcmpeq>
10016c20:	2800      	cmp	r0, #0
10016c22:	f47f ac1c 	bne.w	1001645e <_vfprintf_r+0x132a>
10016c26:	f1c6 0601 	rsb	r6, r6, #1
10016c2a:	9629      	str	r6, [sp, #164]	@ 0xa4
10016c2c:	e418      	b.n	10016460 <_vfprintf_r+0x132c>
10016c2e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
10016c30:	4d2d      	ldr	r5, [pc, #180]	@ (10016ce8 <_vfprintf_r+0x1bb4>)
10016c32:	2b00      	cmp	r3, #0
10016c34:	bfb4      	ite	lt
10016c36:	222d      	movlt	r2, #45	@ 0x2d
10016c38:	f89d 209f 	ldrbge.w	r2, [sp, #159]	@ 0x9f
10016c3c:	4b2b      	ldr	r3, [pc, #172]	@ (10016cec <_vfprintf_r+0x1bb8>)
10016c3e:	bfb8      	it	lt
10016c40:	f88d 209f 	strblt.w	r2, [sp, #159]	@ 0x9f
10016c44:	f029 0980 	bic.w	r9, r9, #128	@ 0x80
10016c48:	f7fe bc99 	b.w	1001557e <_vfprintf_r+0x44a>
10016c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10016c4e:	9306      	str	r3, [sp, #24]
10016c50:	469b      	mov	fp, r3
10016c52:	2373      	movs	r3, #115	@ 0x73
10016c54:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
10016c58:	960d      	str	r6, [sp, #52]	@ 0x34
10016c5a:	9009      	str	r0, [sp, #36]	@ 0x24
10016c5c:	9014      	str	r0, [sp, #80]	@ 0x50
10016c5e:	9010      	str	r0, [sp, #64]	@ 0x40
10016c60:	930e      	str	r3, [sp, #56]	@ 0x38
10016c62:	f7fe bc99 	b.w	10015598 <_vfprintf_r+0x464>
10016c66:	f8dd 9018 	ldr.w	r9, [sp, #24]
10016c6a:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
10016c6e:	f7ff bb40 	b.w	100162f2 <_vfprintf_r+0x11be>
10016c72:	f10d 02b2 	add.w	r2, sp, #178	@ 0xb2
10016c76:	e79e      	b.n	10016bb6 <_vfprintf_r+0x1a82>
10016c78:	4693      	mov	fp, r2
10016c7a:	e5b6      	b.n	100167ea <_vfprintf_r+0x16b6>
10016c7c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10016c7e:	18cf      	adds	r7, r1, r3
10016c80:	443a      	add	r2, r7
10016c82:	2366      	movs	r3, #102	@ 0x66
10016c84:	4693      	mov	fp, r2
10016c86:	930e      	str	r3, [sp, #56]	@ 0x38
10016c88:	e6f3      	b.n	10016a72 <_vfprintf_r+0x193e>
10016c8a:	2367      	movs	r3, #103	@ 0x67
10016c8c:	930e      	str	r3, [sp, #56]	@ 0x38
10016c8e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
10016c90:	780b      	ldrb	r3, [r1, #0]
10016c92:	2bff      	cmp	r3, #255	@ 0xff
10016c94:	d063      	beq.n	10016d5e <_vfprintf_r+0x1c2a>
10016c96:	2400      	movs	r4, #0
10016c98:	9a12      	ldr	r2, [sp, #72]	@ 0x48
10016c9a:	4620      	mov	r0, r4
10016c9c:	e003      	b.n	10016ca6 <_vfprintf_r+0x1b72>
10016c9e:	3001      	adds	r0, #1
10016ca0:	3101      	adds	r1, #1
10016ca2:	2bff      	cmp	r3, #255	@ 0xff
10016ca4:	d008      	beq.n	10016cb8 <_vfprintf_r+0x1b84>
10016ca6:	4293      	cmp	r3, r2
10016ca8:	da06      	bge.n	10016cb8 <_vfprintf_r+0x1b84>
10016caa:	1ad2      	subs	r2, r2, r3
10016cac:	784b      	ldrb	r3, [r1, #1]
10016cae:	2b00      	cmp	r3, #0
10016cb0:	d1f5      	bne.n	10016c9e <_vfprintf_r+0x1b6a>
10016cb2:	780b      	ldrb	r3, [r1, #0]
10016cb4:	3401      	adds	r4, #1
10016cb6:	e7f4      	b.n	10016ca2 <_vfprintf_r+0x1b6e>
10016cb8:	911b      	str	r1, [sp, #108]	@ 0x6c
10016cba:	9212      	str	r2, [sp, #72]	@ 0x48
10016cbc:	9010      	str	r0, [sp, #64]	@ 0x40
10016cbe:	9414      	str	r4, [sp, #80]	@ 0x50
10016cc0:	e9dd 3914 	ldrd	r3, r9, [sp, #80]	@ 0x50
10016cc4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
10016cc6:	4413      	add	r3, r2
10016cc8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
10016cca:	fb02 bb03 	mla	fp, r2, r3, fp
10016cce:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
10016cd2:	9306      	str	r3, [sp, #24]
10016cd4:	e42f      	b.n	10016536 <_vfprintf_r+0x1402>
10016cd6:	bf00      	nop
10016cd8:	100254c8 	.word	0x100254c8
10016cdc:	100254b8 	.word	0x100254b8
10016ce0:	10025498 	.word	0x10025498
10016ce4:	10025484 	.word	0x10025484
10016ce8:	1002547c 	.word	0x1002547c
10016cec:	10025480 	.word	0x10025480
10016cf0:	f1c3 0301 	rsb	r3, r3, #1
10016cf4:	449b      	add	fp, r3
10016cf6:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
10016cfa:	9306      	str	r3, [sp, #24]
10016cfc:	2367      	movs	r3, #103	@ 0x67
10016cfe:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
10016d02:	930e      	str	r3, [sp, #56]	@ 0x38
10016d04:	e57e      	b.n	10016804 <_vfprintf_r+0x16d0>
10016d06:	4e1c      	ldr	r6, [pc, #112]	@ (10016d78 <_vfprintf_r+0x1c44>)
10016d08:	e60f      	b.n	1001692a <_vfprintf_r+0x17f6>
10016d0a:	2302      	movs	r3, #2
10016d0c:	931c      	str	r3, [sp, #112]	@ 0x70
10016d0e:	f7ff bbfd 	b.w	1001650c <_vfprintf_r+0x13d8>
10016d12:	4a19      	ldr	r2, [pc, #100]	@ (10016d78 <_vfprintf_r+0x1c44>)
10016d14:	9215      	str	r2, [sp, #84]	@ 0x54
10016d16:	e52b      	b.n	10016770 <_vfprintf_r+0x163c>
10016d18:	2170      	movs	r1, #112	@ 0x70
10016d1a:	f7ff bbc0 	b.w	1001649e <_vfprintf_r+0x136a>
10016d1e:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
10016d22:	b933      	cbnz	r3, 10016d32 <_vfprintf_r+0x1bfe>
10016d24:	f04f 0b01 	mov.w	fp, #1
10016d28:	2366      	movs	r3, #102	@ 0x66
10016d2a:	f8cd b018 	str.w	fp, [sp, #24]
10016d2e:	930e      	str	r3, [sp, #56]	@ 0x38
10016d30:	e568      	b.n	10016804 <_vfprintf_r+0x16d0>
10016d32:	9b18      	ldr	r3, [sp, #96]	@ 0x60
10016d34:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
10016d38:	1c5f      	adds	r7, r3, #1
10016d3a:	44bb      	add	fp, r7
10016d3c:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
10016d40:	9306      	str	r3, [sp, #24]
10016d42:	2366      	movs	r3, #102	@ 0x66
10016d44:	930e      	str	r3, [sp, #56]	@ 0x38
10016d46:	e55d      	b.n	10016804 <_vfprintf_r+0x16d0>
10016d48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10016d4a:	7863      	ldrb	r3, [r4, #1]
10016d4c:	460c      	mov	r4, r1
10016d4e:	f852 1b04 	ldr.w	r1, [r2], #4
10016d52:	920d      	str	r2, [sp, #52]	@ 0x34
10016d54:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
10016d58:	9109      	str	r1, [sp, #36]	@ 0x24
10016d5a:	f7fe ba63 	b.w	10015224 <_vfprintf_r+0xf0>
10016d5e:	2300      	movs	r3, #0
10016d60:	9314      	str	r3, [sp, #80]	@ 0x50
10016d62:	9310      	str	r3, [sp, #64]	@ 0x40
10016d64:	e7ac      	b.n	10016cc0 <_vfprintf_r+0x1b8c>
10016d66:	e9dd 2b07 	ldrd	r2, fp, [sp, #28]
10016d6a:	8993      	ldrh	r3, [r2, #12]
10016d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10016d70:	8193      	strh	r3, [r2, #12]
10016d72:	f7fe bb37 	b.w	100153e4 <_vfprintf_r+0x2b0>
10016d76:	bf00      	nop
10016d78:	100254b8 	.word	0x100254b8

10016d7c <__sbprintf>:
10016d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
10016d7e:	461f      	mov	r7, r3
10016d80:	898b      	ldrh	r3, [r1, #12]
10016d82:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
10016d86:	f023 0302 	bic.w	r3, r3, #2
10016d8a:	f8ad 300c 	strh.w	r3, [sp, #12]
10016d8e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
10016d90:	9319      	str	r3, [sp, #100]	@ 0x64
10016d92:	89cb      	ldrh	r3, [r1, #14]
10016d94:	f8ad 300e 	strh.w	r3, [sp, #14]
10016d98:	69cb      	ldr	r3, [r1, #28]
10016d9a:	9307      	str	r3, [sp, #28]
10016d9c:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
10016d9e:	9309      	str	r3, [sp, #36]	@ 0x24
10016da0:	ab1a      	add	r3, sp, #104	@ 0x68
10016da2:	9300      	str	r3, [sp, #0]
10016da4:	9304      	str	r3, [sp, #16]
10016da6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
10016daa:	4615      	mov	r5, r2
10016dac:	4606      	mov	r6, r0
10016dae:	9302      	str	r3, [sp, #8]
10016db0:	9305      	str	r3, [sp, #20]
10016db2:	a816      	add	r0, sp, #88	@ 0x58
10016db4:	2300      	movs	r3, #0
10016db6:	460c      	mov	r4, r1
10016db8:	9306      	str	r3, [sp, #24]
10016dba:	f002 fed9 	bl	10019b70 <__retarget_lock_init_recursive>
10016dbe:	462a      	mov	r2, r5
10016dc0:	463b      	mov	r3, r7
10016dc2:	4669      	mov	r1, sp
10016dc4:	4630      	mov	r0, r6
10016dc6:	f7fe f9b5 	bl	10015134 <_vfprintf_r>
10016dca:	1e05      	subs	r5, r0, #0
10016dcc:	db07      	blt.n	10016dde <__sbprintf+0x62>
10016dce:	4669      	mov	r1, sp
10016dd0:	4630      	mov	r0, r6
10016dd2:	f001 fb81 	bl	100184d8 <_fflush_r>
10016dd6:	2800      	cmp	r0, #0
10016dd8:	bf18      	it	ne
10016dda:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
10016dde:	f8bd 300c 	ldrh.w	r3, [sp, #12]
10016de2:	065b      	lsls	r3, r3, #25
10016de4:	d503      	bpl.n	10016dee <__sbprintf+0x72>
10016de6:	89a3      	ldrh	r3, [r4, #12]
10016de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10016dec:	81a3      	strh	r3, [r4, #12]
10016dee:	9816      	ldr	r0, [sp, #88]	@ 0x58
10016df0:	f002 fec0 	bl	10019b74 <__retarget_lock_close_recursive>
10016df4:	4628      	mov	r0, r5
10016df6:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
10016dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

10016dfc <__sprint_r.part.0>:
10016dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10016e00:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
10016e02:	049c      	lsls	r4, r3, #18
10016e04:	4690      	mov	r8, r2
10016e06:	d52e      	bpl.n	10016e66 <__sprint_r.part.0+0x6a>
10016e08:	6893      	ldr	r3, [r2, #8]
10016e0a:	6812      	ldr	r2, [r2, #0]
10016e0c:	b34b      	cbz	r3, 10016e62 <__sprint_r.part.0+0x66>
10016e0e:	460d      	mov	r5, r1
10016e10:	4606      	mov	r6, r0
10016e12:	f102 0908 	add.w	r9, r2, #8
10016e16:	e959 2a02 	ldrd	r2, sl, [r9, #-8]
10016e1a:	ea5f 079a 	movs.w	r7, sl, lsr #2
10016e1e:	d016      	beq.n	10016e4e <__sprint_r.part.0+0x52>
10016e20:	f1a2 0b04 	sub.w	fp, r2, #4
10016e24:	2400      	movs	r4, #0
10016e26:	e001      	b.n	10016e2c <__sprint_r.part.0+0x30>
10016e28:	42a7      	cmp	r7, r4
10016e2a:	d00e      	beq.n	10016e4a <__sprint_r.part.0+0x4e>
10016e2c:	f85b 1f04 	ldr.w	r1, [fp, #4]!
10016e30:	462a      	mov	r2, r5
10016e32:	4630      	mov	r0, r6
10016e34:	f002 fb12 	bl	1001945c <_fputwc_r>
10016e38:	1c43      	adds	r3, r0, #1
10016e3a:	f104 0401 	add.w	r4, r4, #1
10016e3e:	d1f3      	bne.n	10016e28 <__sprint_r.part.0+0x2c>
10016e40:	2300      	movs	r3, #0
10016e42:	e9c8 3301 	strd	r3, r3, [r8, #4]
10016e46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
10016e4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
10016e4e:	f02a 0a03 	bic.w	sl, sl, #3
10016e52:	eba3 030a 	sub.w	r3, r3, sl
10016e56:	f8c8 3008 	str.w	r3, [r8, #8]
10016e5a:	f109 0908 	add.w	r9, r9, #8
10016e5e:	2b00      	cmp	r3, #0
10016e60:	d1d9      	bne.n	10016e16 <__sprint_r.part.0+0x1a>
10016e62:	2000      	movs	r0, #0
10016e64:	e7ec      	b.n	10016e40 <__sprint_r.part.0+0x44>
10016e66:	f001 fe8f 	bl	10018b88 <__sfvwrite_r>
10016e6a:	2300      	movs	r3, #0
10016e6c:	e9c8 3301 	strd	r3, r3, [r8, #4]
10016e70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

10016e74 <__sprint_r>:
10016e74:	b410      	push	{r4}
10016e76:	6894      	ldr	r4, [r2, #8]
10016e78:	b114      	cbz	r4, 10016e80 <__sprint_r+0xc>
10016e7a:	bc10      	pop	{r4}
10016e7c:	f7ff bfbe 	b.w	10016dfc <__sprint_r.part.0>
10016e80:	4620      	mov	r0, r4
10016e82:	6054      	str	r4, [r2, #4]
10016e84:	bc10      	pop	{r4}
10016e86:	4770      	bx	lr

10016e88 <_vfiprintf_r>:
10016e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10016e8c:	b0c7      	sub	sp, #284	@ 0x11c
10016e8e:	af16      	add	r7, sp, #88	@ 0x58
10016e90:	4683      	mov	fp, r0
10016e92:	9103      	str	r1, [sp, #12]
10016e94:	9206      	str	r2, [sp, #24]
10016e96:	2100      	movs	r1, #0
10016e98:	2208      	movs	r2, #8
10016e9a:	4638      	mov	r0, r7
10016e9c:	461c      	mov	r4, r3
10016e9e:	930a      	str	r3, [sp, #40]	@ 0x28
10016ea0:	f002 fb8c 	bl	100195bc <memset>
10016ea4:	f1bb 0f00 	cmp.w	fp, #0
10016ea8:	d004      	beq.n	10016eb4 <_vfiprintf_r+0x2c>
10016eaa:	f8db 3034 	ldr.w	r3, [fp, #52]	@ 0x34
10016eae:	2b00      	cmp	r3, #0
10016eb0:	f000 86bb 	beq.w	10017c2a <_vfiprintf_r+0xda2>
10016eb4:	9a03      	ldr	r2, [sp, #12]
10016eb6:	6e53      	ldr	r3, [r2, #100]	@ 0x64
10016eb8:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
10016ebc:	07db      	lsls	r3, r3, #31
10016ebe:	d402      	bmi.n	10016ec6 <_vfiprintf_r+0x3e>
10016ec0:	0596      	lsls	r6, r2, #22
10016ec2:	f140 859f 	bpl.w	10017a04 <_vfiprintf_r+0xb7c>
10016ec6:	0495      	lsls	r5, r2, #18
10016ec8:	d407      	bmi.n	10016eda <_vfiprintf_r+0x52>
10016eca:	9903      	ldr	r1, [sp, #12]
10016ecc:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
10016ece:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
10016ed2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
10016ed6:	818a      	strh	r2, [r1, #12]
10016ed8:	664b      	str	r3, [r1, #100]	@ 0x64
10016eda:	0710      	lsls	r0, r2, #28
10016edc:	f140 80c9 	bpl.w	10017072 <_vfiprintf_r+0x1ea>
10016ee0:	9b03      	ldr	r3, [sp, #12]
10016ee2:	691b      	ldr	r3, [r3, #16]
10016ee4:	2b00      	cmp	r3, #0
10016ee6:	f000 80c4 	beq.w	10017072 <_vfiprintf_r+0x1ea>
10016eea:	f002 031a 	and.w	r3, r2, #26
10016eee:	2b0a      	cmp	r3, #10
10016ef0:	f000 80ce 	beq.w	10017090 <_vfiprintf_r+0x208>
10016ef4:	2300      	movs	r3, #0
10016ef6:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
10016efa:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
10016efe:	aa1d      	add	r2, sp, #116	@ 0x74
10016f00:	f8df a260 	ldr.w	sl, [pc, #608]	@ 10017164 <_vfiprintf_r+0x2dc>
10016f04:	930d      	str	r3, [sp, #52]	@ 0x34
10016f06:	921a      	str	r2, [sp, #104]	@ 0x68
10016f08:	4691      	mov	r9, r2
10016f0a:	9310      	str	r3, [sp, #64]	@ 0x40
10016f0c:	9307      	str	r3, [sp, #28]
10016f0e:	9d06      	ldr	r5, [sp, #24]
10016f10:	f8da 40e4 	ldr.w	r4, [sl, #228]	@ 0xe4
10016f14:	f002 fbd8 	bl	100196c8 <__locale_mb_cur_max>
10016f18:	462a      	mov	r2, r5
10016f1a:	4603      	mov	r3, r0
10016f1c:	a914      	add	r1, sp, #80	@ 0x50
10016f1e:	9700      	str	r7, [sp, #0]
10016f20:	4658      	mov	r0, fp
10016f22:	47a0      	blx	r4
10016f24:	2800      	cmp	r0, #0
10016f26:	f000 80d2 	beq.w	100170ce <_vfiprintf_r+0x246>
10016f2a:	f2c0 80c8 	blt.w	100170be <_vfiprintf_r+0x236>
10016f2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
10016f30:	2a25      	cmp	r2, #37	@ 0x25
10016f32:	4603      	mov	r3, r0
10016f34:	d001      	beq.n	10016f3a <_vfiprintf_r+0xb2>
10016f36:	441d      	add	r5, r3
10016f38:	e7ea      	b.n	10016f10 <_vfiprintf_r+0x88>
10016f3a:	9b06      	ldr	r3, [sp, #24]
10016f3c:	1aee      	subs	r6, r5, r3
10016f3e:	4604      	mov	r4, r0
10016f40:	f040 80c9 	bne.w	100170d6 <_vfiprintf_r+0x24e>
10016f44:	2300      	movs	r3, #0
10016f46:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
10016f4a:	786a      	ldrb	r2, [r5, #1]
10016f4c:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
10016f50:	9308      	str	r3, [sp, #32]
10016f52:	1c6c      	adds	r4, r5, #1
10016f54:	9105      	str	r1, [sp, #20]
10016f56:	9302      	str	r3, [sp, #8]
10016f58:	3401      	adds	r4, #1
10016f5a:	f1a2 0320 	sub.w	r3, r2, #32
10016f5e:	2b5a      	cmp	r3, #90	@ 0x5a
10016f60:	f200 8102 	bhi.w	10017168 <_vfiprintf_r+0x2e0>
10016f64:	e8df f013 	tbh	[pc, r3, lsl #1]
10016f68:	01000303 	.word	0x01000303
10016f6c:	02fd0100 	.word	0x02fd0100
10016f70:	01000100 	.word	0x01000100
10016f74:	006b0100 	.word	0x006b0100
10016f78:	01000100 	.word	0x01000100
10016f7c:	032d0218 	.word	0x032d0218
10016f80:	02230100 	.word	0x02230100
10016f84:	01000313 	.word	0x01000313
10016f88:	005b030d 	.word	0x005b030d
10016f8c:	005b005b 	.word	0x005b005b
10016f90:	005b005b 	.word	0x005b005b
10016f94:	005b005b 	.word	0x005b005b
10016f98:	005b005b 	.word	0x005b005b
10016f9c:	01000100 	.word	0x01000100
10016fa0:	01000100 	.word	0x01000100
10016fa4:	01000100 	.word	0x01000100
10016fa8:	01000100 	.word	0x01000100
10016fac:	01ce0100 	.word	0x01ce0100
10016fb0:	0100025d 	.word	0x0100025d
10016fb4:	01000100 	.word	0x01000100
10016fb8:	01000100 	.word	0x01000100
10016fbc:	01000100 	.word	0x01000100
10016fc0:	01000100 	.word	0x01000100
10016fc4:	02290100 	.word	0x02290100
10016fc8:	01000100 	.word	0x01000100
10016fcc:	01a60100 	.word	0x01a60100
10016fd0:	02760100 	.word	0x02760100
10016fd4:	01000100 	.word	0x01000100
10016fd8:	0100058e 	.word	0x0100058e
10016fdc:	01000100 	.word	0x01000100
10016fe0:	01000100 	.word	0x01000100
10016fe4:	01000100 	.word	0x01000100
10016fe8:	01000100 	.word	0x01000100
10016fec:	01ce0100 	.word	0x01ce0100
10016ff0:	010001f3 	.word	0x010001f3
10016ff4:	01000100 	.word	0x01000100
10016ff8:	01f302c4 	.word	0x01f302c4
10016ffc:	0100007f 	.word	0x0100007f
10017000:	01000332 	.word	0x01000332
10017004:	058b02ee 	.word	0x058b02ee
10017008:	007f02cd 	.word	0x007f02cd
1001700c:	01a60100 	.word	0x01a60100
10017010:	0588007d 	.word	0x0588007d
10017014:	01000100 	.word	0x01000100
10017018:	010005b1 	.word	0x010005b1
1001701c:	007d      	.short	0x007d
1001701e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
10017022:	2200      	movs	r2, #0
10017024:	4611      	mov	r1, r2
10017026:	f814 2b01 	ldrb.w	r2, [r4], #1
1001702a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1001702e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
10017032:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
10017036:	2b09      	cmp	r3, #9
10017038:	d9f5      	bls.n	10017026 <_vfiprintf_r+0x19e>
1001703a:	9108      	str	r1, [sp, #32]
1001703c:	e78d      	b.n	10016f5a <_vfiprintf_r+0xd2>
1001703e:	4658      	mov	r0, fp
10017040:	f002 fb48 	bl	100196d4 <_localeconv_r>
10017044:	6843      	ldr	r3, [r0, #4]
10017046:	9310      	str	r3, [sp, #64]	@ 0x40
10017048:	4618      	mov	r0, r3
1001704a:	f002 fe99 	bl	10019d80 <strlen>
1001704e:	900f      	str	r0, [sp, #60]	@ 0x3c
10017050:	4605      	mov	r5, r0
10017052:	4658      	mov	r0, fp
10017054:	f002 fb3e 	bl	100196d4 <_localeconv_r>
10017058:	6883      	ldr	r3, [r0, #8]
1001705a:	930e      	str	r3, [sp, #56]	@ 0x38
1001705c:	2d00      	cmp	r5, #0
1001705e:	f040 84e5 	bne.w	10017a2c <_vfiprintf_r+0xba4>
10017062:	7822      	ldrb	r2, [r4, #0]
10017064:	e778      	b.n	10016f58 <_vfiprintf_r+0xd0>
10017066:	9b02      	ldr	r3, [sp, #8]
10017068:	7822      	ldrb	r2, [r4, #0]
1001706a:	f043 0320 	orr.w	r3, r3, #32
1001706e:	9302      	str	r3, [sp, #8]
10017070:	e772      	b.n	10016f58 <_vfiprintf_r+0xd0>
10017072:	9d03      	ldr	r5, [sp, #12]
10017074:	4658      	mov	r0, fp
10017076:	4629      	mov	r1, r5
10017078:	f001 ff86 	bl	10018f88 <__swsetup_r>
1001707c:	2800      	cmp	r0, #0
1001707e:	f040 86a6 	bne.w	10017dce <_vfiprintf_r+0xf46>
10017082:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
10017086:	f002 031a 	and.w	r3, r2, #26
1001708a:	2b0a      	cmp	r3, #10
1001708c:	f47f af32 	bne.w	10016ef4 <_vfiprintf_r+0x6c>
10017090:	9903      	ldr	r1, [sp, #12]
10017092:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
10017096:	2b00      	cmp	r3, #0
10017098:	f6ff af2c 	blt.w	10016ef4 <_vfiprintf_r+0x6c>
1001709c:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
1001709e:	07db      	lsls	r3, r3, #31
100170a0:	d402      	bmi.n	100170a8 <_vfiprintf_r+0x220>
100170a2:	0597      	lsls	r7, r2, #22
100170a4:	f140 865e 	bpl.w	10017d64 <_vfiprintf_r+0xedc>
100170a8:	9a06      	ldr	r2, [sp, #24]
100170aa:	9903      	ldr	r1, [sp, #12]
100170ac:	4623      	mov	r3, r4
100170ae:	4658      	mov	r0, fp
100170b0:	f000 fec0 	bl	10017e34 <__sbprintf>
100170b4:	9007      	str	r0, [sp, #28]
100170b6:	9807      	ldr	r0, [sp, #28]
100170b8:	b047      	add	sp, #284	@ 0x11c
100170ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100170be:	2208      	movs	r2, #8
100170c0:	2100      	movs	r1, #0
100170c2:	4638      	mov	r0, r7
100170c4:	f002 fa7a 	bl	100195bc <memset>
100170c8:	2301      	movs	r3, #1
100170ca:	441d      	add	r5, r3
100170cc:	e720      	b.n	10016f10 <_vfiprintf_r+0x88>
100170ce:	9b06      	ldr	r3, [sp, #24]
100170d0:	1aee      	subs	r6, r5, r3
100170d2:	4604      	mov	r4, r0
100170d4:	d012      	beq.n	100170fc <_vfiprintf_r+0x274>
100170d6:	9b06      	ldr	r3, [sp, #24]
100170d8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
100170da:	e9c9 3600 	strd	r3, r6, [r9]
100170de:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
100170e0:	3301      	adds	r3, #1
100170e2:	4432      	add	r2, r6
100170e4:	2b07      	cmp	r3, #7
100170e6:	921c      	str	r2, [sp, #112]	@ 0x70
100170e8:	931b      	str	r3, [sp, #108]	@ 0x6c
100170ea:	dc11      	bgt.n	10017110 <_vfiprintf_r+0x288>
100170ec:	f109 0908 	add.w	r9, r9, #8
100170f0:	9b07      	ldr	r3, [sp, #28]
100170f2:	4433      	add	r3, r6
100170f4:	9307      	str	r3, [sp, #28]
100170f6:	2c00      	cmp	r4, #0
100170f8:	f47f af24 	bne.w	10016f44 <_vfiprintf_r+0xbc>
100170fc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
100170fe:	2b00      	cmp	r3, #0
10017100:	f040 8650 	bne.w	10017da4 <_vfiprintf_r+0xf1c>
10017104:	9b03      	ldr	r3, [sp, #12]
10017106:	2200      	movs	r2, #0
10017108:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
1001710c:	921b      	str	r2, [sp, #108]	@ 0x6c
1001710e:	e01c      	b.n	1001714a <_vfiprintf_r+0x2c2>
10017110:	2a00      	cmp	r2, #0
10017112:	f000 842f 	beq.w	10017974 <_vfiprintf_r+0xaec>
10017116:	9903      	ldr	r1, [sp, #12]
10017118:	aa1a      	add	r2, sp, #104	@ 0x68
1001711a:	4658      	mov	r0, fp
1001711c:	f7ff fe6e 	bl	10016dfc <__sprint_r.part.0>
10017120:	b980      	cbnz	r0, 10017144 <_vfiprintf_r+0x2bc>
10017122:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10017126:	e7e3      	b.n	100170f0 <_vfiprintf_r+0x268>
10017128:	9903      	ldr	r1, [sp, #12]
1001712a:	aa1a      	add	r2, sp, #104	@ 0x68
1001712c:	4658      	mov	r0, fp
1001712e:	f7ff fe65 	bl	10016dfc <__sprint_r.part.0>
10017132:	2800      	cmp	r0, #0
10017134:	f000 80a9 	beq.w	1001728a <_vfiprintf_r+0x402>
10017138:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001713a:	b11b      	cbz	r3, 10017144 <_vfiprintf_r+0x2bc>
1001713c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1001713e:	4658      	mov	r0, fp
10017140:	f003 ff3e 	bl	1001afc0 <_free_r>
10017144:	9b03      	ldr	r3, [sp, #12]
10017146:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
1001714a:	9a03      	ldr	r2, [sp, #12]
1001714c:	6e52      	ldr	r2, [r2, #100]	@ 0x64
1001714e:	07d1      	lsls	r1, r2, #31
10017150:	f140 80a6 	bpl.w	100172a0 <_vfiprintf_r+0x418>
10017154:	065b      	lsls	r3, r3, #25
10017156:	f100 8646 	bmi.w	10017de6 <_vfiprintf_r+0xf5e>
1001715a:	9807      	ldr	r0, [sp, #28]
1001715c:	b047      	add	sp, #284	@ 0x11c
1001715e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10017162:	bf00      	nop
10017164:	2000042c 	.word	0x2000042c
10017168:	9406      	str	r4, [sp, #24]
1001716a:	2a00      	cmp	r2, #0
1001716c:	d0c6      	beq.n	100170fc <_vfiprintf_r+0x274>
1001716e:	2300      	movs	r3, #0
10017170:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
10017174:	2301      	movs	r3, #1
10017176:	f88d 20b4 	strb.w	r2, [sp, #180]	@ 0xb4
1001717a:	9304      	str	r3, [sp, #16]
1001717c:	9309      	str	r3, [sp, #36]	@ 0x24
1001717e:	ac2d      	add	r4, sp, #180	@ 0xb4
10017180:	2300      	movs	r3, #0
10017182:	930b      	str	r3, [sp, #44]	@ 0x2c
10017184:	9305      	str	r3, [sp, #20]
10017186:	9b02      	ldr	r3, [sp, #8]
10017188:	f013 0302 	ands.w	r3, r3, #2
1001718c:	d002      	beq.n	10017194 <_vfiprintf_r+0x30c>
1001718e:	9a04      	ldr	r2, [sp, #16]
10017190:	3202      	adds	r2, #2
10017192:	9204      	str	r2, [sp, #16]
10017194:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
10017198:	9d02      	ldr	r5, [sp, #8]
1001719a:	1c50      	adds	r0, r2, #1
1001719c:	f015 0584 	ands.w	r5, r5, #132	@ 0x84
100171a0:	4601      	mov	r1, r0
100171a2:	950c      	str	r5, [sp, #48]	@ 0x30
100171a4:	d105      	bne.n	100171b2 <_vfiprintf_r+0x32a>
100171a6:	9d08      	ldr	r5, [sp, #32]
100171a8:	9e04      	ldr	r6, [sp, #16]
100171aa:	1bad      	subs	r5, r5, r6
100171ac:	2d00      	cmp	r5, #0
100171ae:	f300 8331 	bgt.w	10017814 <_vfiprintf_r+0x98c>
100171b2:	f89d 004b 	ldrb.w	r0, [sp, #75]	@ 0x4b
100171b6:	b188      	cbz	r0, 100171dc <_vfiprintf_r+0x354>
100171b8:	2201      	movs	r2, #1
100171ba:	f10c 0c01 	add.w	ip, ip, #1
100171be:	f8c9 2004 	str.w	r2, [r9, #4]
100171c2:	2907      	cmp	r1, #7
100171c4:	f10d 024b 	add.w	r2, sp, #75	@ 0x4b
100171c8:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
100171cc:	f8c9 2000 	str.w	r2, [r9]
100171d0:	f300 82e1 	bgt.w	10017796 <_vfiprintf_r+0x90e>
100171d4:	460a      	mov	r2, r1
100171d6:	f109 0908 	add.w	r9, r9, #8
100171da:	3101      	adds	r1, #1
100171dc:	b1eb      	cbz	r3, 1001721a <_vfiprintf_r+0x392>
100171de:	ab13      	add	r3, sp, #76	@ 0x4c
100171e0:	f10c 0c02 	add.w	ip, ip, #2
100171e4:	f8c9 3000 	str.w	r3, [r9]
100171e8:	2907      	cmp	r1, #7
100171ea:	f04f 0302 	mov.w	r3, #2
100171ee:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
100171f2:	f8c9 3004 	str.w	r3, [r9, #4]
100171f6:	f340 82ec 	ble.w	100177d2 <_vfiprintf_r+0x94a>
100171fa:	f1bc 0f00 	cmp.w	ip, #0
100171fe:	f000 83da 	beq.w	100179b6 <_vfiprintf_r+0xb2e>
10017202:	9903      	ldr	r1, [sp, #12]
10017204:	aa1a      	add	r2, sp, #104	@ 0x68
10017206:	4658      	mov	r0, fp
10017208:	f7ff fdf8 	bl	10016dfc <__sprint_r.part.0>
1001720c:	2800      	cmp	r0, #0
1001720e:	d193      	bne.n	10017138 <_vfiprintf_r+0x2b0>
10017210:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
10017214:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10017218:	1c51      	adds	r1, r2, #1
1001721a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1001721c:	2b80      	cmp	r3, #128	@ 0x80
1001721e:	f000 8213 	beq.w	10017648 <_vfiprintf_r+0x7c0>
10017222:	9b05      	ldr	r3, [sp, #20]
10017224:	9809      	ldr	r0, [sp, #36]	@ 0x24
10017226:	1a1d      	subs	r5, r3, r0
10017228:	2d00      	cmp	r5, #0
1001722a:	f300 8268 	bgt.w	100176fe <_vfiprintf_r+0x876>
1001722e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10017230:	f8c9 4000 	str.w	r4, [r9]
10017234:	eb02 030c 	add.w	r3, r2, ip
10017238:	2907      	cmp	r1, #7
1001723a:	e9cd 131b 	strd	r1, r3, [sp, #108]	@ 0x6c
1001723e:	f8c9 2004 	str.w	r2, [r9, #4]
10017242:	f340 81fe 	ble.w	10017642 <_vfiprintf_r+0x7ba>
10017246:	2b00      	cmp	r3, #0
10017248:	f000 832b 	beq.w	100178a2 <_vfiprintf_r+0xa1a>
1001724c:	9903      	ldr	r1, [sp, #12]
1001724e:	aa1a      	add	r2, sp, #104	@ 0x68
10017250:	4658      	mov	r0, fp
10017252:	f7ff fdd3 	bl	10016dfc <__sprint_r.part.0>
10017256:	2800      	cmp	r0, #0
10017258:	f47f af6e 	bne.w	10017138 <_vfiprintf_r+0x2b0>
1001725c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
1001725e:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10017262:	9a02      	ldr	r2, [sp, #8]
10017264:	0750      	lsls	r0, r2, #29
10017266:	d505      	bpl.n	10017274 <_vfiprintf_r+0x3ec>
10017268:	9a08      	ldr	r2, [sp, #32]
1001726a:	9904      	ldr	r1, [sp, #16]
1001726c:	1a54      	subs	r4, r2, r1
1001726e:	2c00      	cmp	r4, #0
10017270:	f300 8322 	bgt.w	100178b8 <_vfiprintf_r+0xa30>
10017274:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
10017278:	9804      	ldr	r0, [sp, #16]
1001727a:	4281      	cmp	r1, r0
1001727c:	bfac      	ite	ge
1001727e:	1852      	addge	r2, r2, r1
10017280:	1812      	addlt	r2, r2, r0
10017282:	9207      	str	r2, [sp, #28]
10017284:	2b00      	cmp	r3, #0
10017286:	f47f af4f 	bne.w	10017128 <_vfiprintf_r+0x2a0>
1001728a:	2300      	movs	r3, #0
1001728c:	931b      	str	r3, [sp, #108]	@ 0x6c
1001728e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10017290:	b11b      	cbz	r3, 1001729a <_vfiprintf_r+0x412>
10017292:	4619      	mov	r1, r3
10017294:	4658      	mov	r0, fp
10017296:	f003 fe93 	bl	1001afc0 <_free_r>
1001729a:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
1001729e:	e636      	b.n	10016f0e <_vfiprintf_r+0x86>
100172a0:	059a      	lsls	r2, r3, #22
100172a2:	f53f af57 	bmi.w	10017154 <_vfiprintf_r+0x2cc>
100172a6:	9c03      	ldr	r4, [sp, #12]
100172a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100172aa:	f002 fc67 	bl	10019b7c <__retarget_lock_release_recursive>
100172ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100172b2:	e74f      	b.n	10017154 <_vfiprintf_r+0x2cc>
100172b4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
100172b6:	9406      	str	r4, [sp, #24]
100172b8:	f856 4b04 	ldr.w	r4, [r6], #4
100172bc:	2300      	movs	r3, #0
100172be:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
100172c2:	2c00      	cmp	r4, #0
100172c4:	f000 84c9 	beq.w	10017c5a <_vfiprintf_r+0xdd2>
100172c8:	2a53      	cmp	r2, #83	@ 0x53
100172ca:	f000 8421 	beq.w	10017b10 <_vfiprintf_r+0xc88>
100172ce:	9b02      	ldr	r3, [sp, #8]
100172d0:	f013 0510 	ands.w	r5, r3, #16
100172d4:	f040 841c 	bne.w	10017b10 <_vfiprintf_r+0xc88>
100172d8:	9b05      	ldr	r3, [sp, #20]
100172da:	1c5a      	adds	r2, r3, #1
100172dc:	f000 854e 	beq.w	10017d7c <_vfiprintf_r+0xef4>
100172e0:	461a      	mov	r2, r3
100172e2:	4629      	mov	r1, r5
100172e4:	4620      	mov	r0, r4
100172e6:	f002 fc53 	bl	10019b90 <memchr>
100172ea:	900b      	str	r0, [sp, #44]	@ 0x2c
100172ec:	2800      	cmp	r0, #0
100172ee:	f000 853e 	beq.w	10017d6e <_vfiprintf_r+0xee6>
100172f2:	1b03      	subs	r3, r0, r4
100172f4:	9309      	str	r3, [sp, #36]	@ 0x24
100172f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
100172fa:	9505      	str	r5, [sp, #20]
100172fc:	960a      	str	r6, [sp, #40]	@ 0x28
100172fe:	9304      	str	r3, [sp, #16]
10017300:	950b      	str	r5, [sp, #44]	@ 0x2c
10017302:	e18d      	b.n	10017620 <_vfiprintf_r+0x798>
10017304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017306:	9406      	str	r4, [sp, #24]
10017308:	2a43      	cmp	r2, #67	@ 0x43
1001730a:	f103 0504 	add.w	r5, r3, #4
1001730e:	d003      	beq.n	10017318 <_vfiprintf_r+0x490>
10017310:	9b02      	ldr	r3, [sp, #8]
10017312:	06de      	lsls	r6, r3, #27
10017314:	f140 83e4 	bpl.w	10017ae0 <_vfiprintf_r+0xc58>
10017318:	2208      	movs	r2, #8
1001731a:	2100      	movs	r1, #0
1001731c:	a818      	add	r0, sp, #96	@ 0x60
1001731e:	f002 f94d 	bl	100195bc <memset>
10017322:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017324:	ac2d      	add	r4, sp, #180	@ 0xb4
10017326:	681a      	ldr	r2, [r3, #0]
10017328:	4621      	mov	r1, r4
1001732a:	ab18      	add	r3, sp, #96	@ 0x60
1001732c:	4658      	mov	r0, fp
1001732e:	f002 fdb3 	bl	10019e98 <_wcrtomb_r>
10017332:	4603      	mov	r3, r0
10017334:	3301      	adds	r3, #1
10017336:	9009      	str	r0, [sp, #36]	@ 0x24
10017338:	f000 8541 	beq.w	10017dbe <_vfiprintf_r+0xf36>
1001733c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001733e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
10017342:	9304      	str	r3, [sp, #16]
10017344:	2300      	movs	r3, #0
10017346:	950a      	str	r5, [sp, #40]	@ 0x28
10017348:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
1001734c:	e718      	b.n	10017180 <_vfiprintf_r+0x2f8>
1001734e:	9b02      	ldr	r3, [sp, #8]
10017350:	9406      	str	r4, [sp, #24]
10017352:	069c      	lsls	r4, r3, #26
10017354:	d56d      	bpl.n	10017432 <_vfiprintf_r+0x5aa>
10017356:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017358:	3307      	adds	r3, #7
1001735a:	f023 0307 	bic.w	r3, r3, #7
1001735e:	4619      	mov	r1, r3
10017360:	685a      	ldr	r2, [r3, #4]
10017362:	f851 3b08 	ldr.w	r3, [r1], #8
10017366:	910a      	str	r1, [sp, #40]	@ 0x28
10017368:	4611      	mov	r1, r2
1001736a:	2a00      	cmp	r2, #0
1001736c:	f2c0 8137 	blt.w	100175de <_vfiprintf_r+0x756>
10017370:	9a05      	ldr	r2, [sp, #20]
10017372:	3201      	adds	r2, #1
10017374:	f000 8140 	beq.w	100175f8 <_vfiprintf_r+0x770>
10017378:	9a02      	ldr	r2, [sp, #8]
1001737a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
1001737e:	9202      	str	r2, [sp, #8]
10017380:	ea53 0201 	orrs.w	r2, r3, r1
10017384:	f040 8138 	bne.w	100175f8 <_vfiprintf_r+0x770>
10017388:	9b05      	ldr	r3, [sp, #20]
1001738a:	2b00      	cmp	r3, #0
1001738c:	f040 8508 	bne.w	10017da0 <_vfiprintf_r+0xf18>
10017390:	9304      	str	r3, [sp, #16]
10017392:	9309      	str	r3, [sp, #36]	@ 0x24
10017394:	ac46      	add	r4, sp, #280	@ 0x118
10017396:	e141      	b.n	1001761c <_vfiprintf_r+0x794>
10017398:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001739a:	f853 2b04 	ldr.w	r2, [r3], #4
1001739e:	9208      	str	r2, [sp, #32]
100173a0:	2a00      	cmp	r2, #0
100173a2:	f280 8327 	bge.w	100179f4 <_vfiprintf_r+0xb6c>
100173a6:	9a08      	ldr	r2, [sp, #32]
100173a8:	930a      	str	r3, [sp, #40]	@ 0x28
100173aa:	4252      	negs	r2, r2
100173ac:	9208      	str	r2, [sp, #32]
100173ae:	9b02      	ldr	r3, [sp, #8]
100173b0:	7822      	ldrb	r2, [r4, #0]
100173b2:	f043 0304 	orr.w	r3, r3, #4
100173b6:	9302      	str	r3, [sp, #8]
100173b8:	e5ce      	b.n	10016f58 <_vfiprintf_r+0xd0>
100173ba:	9b02      	ldr	r3, [sp, #8]
100173bc:	9406      	str	r4, [sp, #24]
100173be:	f043 0210 	orr.w	r2, r3, #16
100173c2:	f012 0120 	ands.w	r1, r2, #32
100173c6:	f000 82e7 	beq.w	10017998 <_vfiprintf_r+0xb10>
100173ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100173cc:	3307      	adds	r3, #7
100173ce:	f023 0307 	bic.w	r3, r3, #7
100173d2:	4618      	mov	r0, r3
100173d4:	6859      	ldr	r1, [r3, #4]
100173d6:	f850 3b08 	ldr.w	r3, [r0], #8
100173da:	900a      	str	r0, [sp, #40]	@ 0x28
100173dc:	f422 6480 	bic.w	r4, r2, #1024	@ 0x400
100173e0:	9402      	str	r4, [sp, #8]
100173e2:	9c05      	ldr	r4, [sp, #20]
100173e4:	2000      	movs	r0, #0
100173e6:	3401      	adds	r4, #1
100173e8:	f88d 004b 	strb.w	r0, [sp, #75]	@ 0x4b
100173ec:	d05d      	beq.n	100174aa <_vfiprintf_r+0x622>
100173ee:	ea53 0401 	orrs.w	r4, r3, r1
100173f2:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
100173f6:	f040 8414 	bne.w	10017c22 <_vfiprintf_r+0xd9a>
100173fa:	9c02      	ldr	r4, [sp, #8]
100173fc:	9202      	str	r2, [sp, #8]
100173fe:	9b05      	ldr	r3, [sp, #20]
10017400:	2b00      	cmp	r3, #0
10017402:	d14a      	bne.n	1001749a <_vfiprintf_r+0x612>
10017404:	2800      	cmp	r0, #0
10017406:	f040 82f0 	bne.w	100179ea <_vfiprintf_r+0xb62>
1001740a:	f014 0201 	ands.w	r2, r4, #1
1001740e:	9209      	str	r2, [sp, #36]	@ 0x24
10017410:	f000 82f4 	beq.w	100179fc <_vfiprintf_r+0xb74>
10017414:	2330      	movs	r3, #48	@ 0x30
10017416:	f88d 3117 	strb.w	r3, [sp, #279]	@ 0x117
1001741a:	9204      	str	r2, [sp, #16]
1001741c:	f20d 1417 	addw	r4, sp, #279	@ 0x117
10017420:	e0fc      	b.n	1001761c <_vfiprintf_r+0x794>
10017422:	9b02      	ldr	r3, [sp, #8]
10017424:	9406      	str	r4, [sp, #24]
10017426:	f043 0310 	orr.w	r3, r3, #16
1001742a:	9302      	str	r3, [sp, #8]
1001742c:	9b02      	ldr	r3, [sp, #8]
1001742e:	069c      	lsls	r4, r3, #26
10017430:	d491      	bmi.n	10017356 <_vfiprintf_r+0x4ce>
10017432:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10017434:	f852 3b04 	ldr.w	r3, [r2], #4
10017438:	920a      	str	r2, [sp, #40]	@ 0x28
1001743a:	9a02      	ldr	r2, [sp, #8]
1001743c:	06d0      	lsls	r0, r2, #27
1001743e:	f100 82f2 	bmi.w	10017a26 <_vfiprintf_r+0xb9e>
10017442:	9a02      	ldr	r2, [sp, #8]
10017444:	0651      	lsls	r1, r2, #25
10017446:	f140 82ea 	bpl.w	10017a1e <_vfiprintf_r+0xb96>
1001744a:	f343 31c0 	sbfx	r1, r3, #15, #1
1001744e:	460a      	mov	r2, r1
10017450:	b21b      	sxth	r3, r3
10017452:	e78a      	b.n	1001736a <_vfiprintf_r+0x4e2>
10017454:	9b02      	ldr	r3, [sp, #8]
10017456:	9406      	str	r4, [sp, #24]
10017458:	f043 0410 	orr.w	r4, r3, #16
1001745c:	f014 0120 	ands.w	r1, r4, #32
10017460:	f000 828b 	beq.w	1001797a <_vfiprintf_r+0xaf2>
10017464:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017466:	3307      	adds	r3, #7
10017468:	f023 0307 	bic.w	r3, r3, #7
1001746c:	461a      	mov	r2, r3
1001746e:	6859      	ldr	r1, [r3, #4]
10017470:	f852 3b08 	ldr.w	r3, [r2], #8
10017474:	920a      	str	r2, [sp, #40]	@ 0x28
10017476:	2200      	movs	r2, #0
10017478:	f88d 204b 	strb.w	r2, [sp, #75]	@ 0x4b
1001747c:	9a05      	ldr	r2, [sp, #20]
1001747e:	3201      	adds	r2, #1
10017480:	f000 83d1 	beq.w	10017c26 <_vfiprintf_r+0xd9e>
10017484:	f024 0280 	bic.w	r2, r4, #128	@ 0x80
10017488:	9202      	str	r2, [sp, #8]
1001748a:	ea53 0201 	orrs.w	r2, r3, r1
1001748e:	f040 80b3 	bne.w	100175f8 <_vfiprintf_r+0x770>
10017492:	9b05      	ldr	r3, [sp, #20]
10017494:	2001      	movs	r0, #1
10017496:	2b00      	cmp	r3, #0
10017498:	d0b4      	beq.n	10017404 <_vfiprintf_r+0x57c>
1001749a:	2801      	cmp	r0, #1
1001749c:	f000 8480 	beq.w	10017da0 <_vfiprintf_r+0xf18>
100174a0:	2300      	movs	r3, #0
100174a2:	2802      	cmp	r0, #2
100174a4:	4619      	mov	r1, r3
100174a6:	f000 8199 	beq.w	100177dc <_vfiprintf_r+0x954>
100174aa:	ac46      	add	r4, sp, #280	@ 0x118
100174ac:	f003 0207 	and.w	r2, r3, #7
100174b0:	08db      	lsrs	r3, r3, #3
100174b2:	ea43 7341 	orr.w	r3, r3, r1, lsl #29
100174b6:	08c9      	lsrs	r1, r1, #3
100174b8:	3230      	adds	r2, #48	@ 0x30
100174ba:	ea53 0501 	orrs.w	r5, r3, r1
100174be:	4620      	mov	r0, r4
100174c0:	f804 2d01 	strb.w	r2, [r4, #-1]!
100174c4:	d1f2      	bne.n	100174ac <_vfiprintf_r+0x624>
100174c6:	9b02      	ldr	r3, [sp, #8]
100174c8:	07dd      	lsls	r5, r3, #31
100174ca:	f140 8195 	bpl.w	100177f8 <_vfiprintf_r+0x970>
100174ce:	2a30      	cmp	r2, #48	@ 0x30
100174d0:	f000 8192 	beq.w	100177f8 <_vfiprintf_r+0x970>
100174d4:	2330      	movs	r3, #48	@ 0x30
100174d6:	9a05      	ldr	r2, [sp, #20]
100174d8:	f804 3c01 	strb.w	r3, [r4, #-1]
100174dc:	3802      	subs	r0, #2
100174de:	ab46      	add	r3, sp, #280	@ 0x118
100174e0:	1a1b      	subs	r3, r3, r0
100174e2:	429a      	cmp	r2, r3
100174e4:	bfb8      	it	lt
100174e6:	461a      	movlt	r2, r3
100174e8:	9309      	str	r3, [sp, #36]	@ 0x24
100174ea:	4604      	mov	r4, r0
100174ec:	9204      	str	r2, [sp, #16]
100174ee:	e095      	b.n	1001761c <_vfiprintf_r+0x794>
100174f0:	7822      	ldrb	r2, [r4, #0]
100174f2:	9b02      	ldr	r3, [sp, #8]
100174f4:	2a68      	cmp	r2, #104	@ 0x68
100174f6:	f000 839d 	beq.w	10017c34 <_vfiprintf_r+0xdac>
100174fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100174fe:	9302      	str	r3, [sp, #8]
10017500:	e52a      	b.n	10016f58 <_vfiprintf_r+0xd0>
10017502:	9b02      	ldr	r3, [sp, #8]
10017504:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10017506:	9406      	str	r4, [sp, #24]
10017508:	f043 0302 	orr.w	r3, r3, #2
1001750c:	9302      	str	r3, [sp, #8]
1001750e:	f852 3b04 	ldr.w	r3, [r2], #4
10017512:	920a      	str	r2, [sp, #40]	@ 0x28
10017514:	f647 0230 	movw	r2, #30768	@ 0x7830
10017518:	f8ad 204c 	strh.w	r2, [sp, #76]	@ 0x4c
1001751c:	4abb      	ldr	r2, [pc, #748]	@ (1001780c <_vfiprintf_r+0x984>)
1001751e:	920d      	str	r2, [sp, #52]	@ 0x34
10017520:	2100      	movs	r1, #0
10017522:	2200      	movs	r2, #0
10017524:	f88d 204b 	strb.w	r2, [sp, #75]	@ 0x4b
10017528:	9a05      	ldr	r2, [sp, #20]
1001752a:	3201      	adds	r2, #1
1001752c:	f000 8156 	beq.w	100177dc <_vfiprintf_r+0x954>
10017530:	9c02      	ldr	r4, [sp, #8]
10017532:	ea53 0001 	orrs.w	r0, r3, r1
10017536:	f024 0280 	bic.w	r2, r4, #128	@ 0x80
1001753a:	9202      	str	r2, [sp, #8]
1001753c:	f040 814e 	bne.w	100177dc <_vfiprintf_r+0x954>
10017540:	2002      	movs	r0, #2
10017542:	e75c      	b.n	100173fe <_vfiprintf_r+0x576>
10017544:	9b02      	ldr	r3, [sp, #8]
10017546:	9406      	str	r4, [sp, #24]
10017548:	069e      	lsls	r6, r3, #26
1001754a:	f140 827e 	bpl.w	10017a4a <_vfiprintf_r+0xbc2>
1001754e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017550:	9a07      	ldr	r2, [sp, #28]
10017552:	681b      	ldr	r3, [r3, #0]
10017554:	601a      	str	r2, [r3, #0]
10017556:	17d2      	asrs	r2, r2, #31
10017558:	605a      	str	r2, [r3, #4]
1001755a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001755c:	3304      	adds	r3, #4
1001755e:	930a      	str	r3, [sp, #40]	@ 0x28
10017560:	e4d5      	b.n	10016f0e <_vfiprintf_r+0x86>
10017562:	9b02      	ldr	r3, [sp, #8]
10017564:	7822      	ldrb	r2, [r4, #0]
10017566:	f043 0301 	orr.w	r3, r3, #1
1001756a:	9302      	str	r3, [sp, #8]
1001756c:	e4f4      	b.n	10016f58 <_vfiprintf_r+0xd0>
1001756e:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
10017572:	7822      	ldrb	r2, [r4, #0]
10017574:	2b00      	cmp	r3, #0
10017576:	f47f acef 	bne.w	10016f58 <_vfiprintf_r+0xd0>
1001757a:	2320      	movs	r3, #32
1001757c:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
10017580:	e4ea      	b.n	10016f58 <_vfiprintf_r+0xd0>
10017582:	9b02      	ldr	r3, [sp, #8]
10017584:	7822      	ldrb	r2, [r4, #0]
10017586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1001758a:	9302      	str	r3, [sp, #8]
1001758c:	e4e4      	b.n	10016f58 <_vfiprintf_r+0xd0>
1001758e:	4621      	mov	r1, r4
10017590:	f811 2b01 	ldrb.w	r2, [r1], #1
10017594:	2a2a      	cmp	r2, #42	@ 0x2a
10017596:	f000 8433 	beq.w	10017e00 <_vfiprintf_r+0xf78>
1001759a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
1001759e:	2b09      	cmp	r3, #9
100175a0:	460c      	mov	r4, r1
100175a2:	f200 83f6 	bhi.w	10017d92 <_vfiprintf_r+0xf0a>
100175a6:	2200      	movs	r2, #0
100175a8:	4611      	mov	r1, r2
100175aa:	f814 2b01 	ldrb.w	r2, [r4], #1
100175ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
100175b2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
100175b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
100175ba:	2b09      	cmp	r3, #9
100175bc:	d9f5      	bls.n	100175aa <_vfiprintf_r+0x722>
100175be:	9105      	str	r1, [sp, #20]
100175c0:	e4cb      	b.n	10016f5a <_vfiprintf_r+0xd2>
100175c2:	232b      	movs	r3, #43	@ 0x2b
100175c4:	7822      	ldrb	r2, [r4, #0]
100175c6:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
100175ca:	e4c5      	b.n	10016f58 <_vfiprintf_r+0xd0>
100175cc:	7822      	ldrb	r2, [r4, #0]
100175ce:	9b02      	ldr	r3, [sp, #8]
100175d0:	2a6c      	cmp	r2, #108	@ 0x6c
100175d2:	f000 8336 	beq.w	10017c42 <_vfiprintf_r+0xdba>
100175d6:	f043 0310 	orr.w	r3, r3, #16
100175da:	9302      	str	r3, [sp, #8]
100175dc:	e4bc      	b.n	10016f58 <_vfiprintf_r+0xd0>
100175de:	222d      	movs	r2, #45	@ 0x2d
100175e0:	f88d 204b 	strb.w	r2, [sp, #75]	@ 0x4b
100175e4:	9a05      	ldr	r2, [sp, #20]
100175e6:	425b      	negs	r3, r3
100175e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
100175ec:	3201      	adds	r2, #1
100175ee:	d003      	beq.n	100175f8 <_vfiprintf_r+0x770>
100175f0:	9a02      	ldr	r2, [sp, #8]
100175f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
100175f6:	9202      	str	r2, [sp, #8]
100175f8:	2b0a      	cmp	r3, #10
100175fa:	f171 0200 	sbcs.w	r2, r1, #0
100175fe:	f080 82bd 	bcs.w	10017b7c <_vfiprintf_r+0xcf4>
10017602:	3330      	adds	r3, #48	@ 0x30
10017604:	b2db      	uxtb	r3, r3
10017606:	f88d 3117 	strb.w	r3, [sp, #279]	@ 0x117
1001760a:	9b05      	ldr	r3, [sp, #20]
1001760c:	2b01      	cmp	r3, #1
1001760e:	bfb8      	it	lt
10017610:	2301      	movlt	r3, #1
10017612:	9304      	str	r3, [sp, #16]
10017614:	2301      	movs	r3, #1
10017616:	9309      	str	r3, [sp, #36]	@ 0x24
10017618:	f20d 1417 	addw	r4, sp, #279	@ 0x117
1001761c:	2300      	movs	r3, #0
1001761e:	930b      	str	r3, [sp, #44]	@ 0x2c
10017620:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
10017624:	2b00      	cmp	r3, #0
10017626:	f43f adae 	beq.w	10017186 <_vfiprintf_r+0x2fe>
1001762a:	9b04      	ldr	r3, [sp, #16]
1001762c:	3301      	adds	r3, #1
1001762e:	9304      	str	r3, [sp, #16]
10017630:	e5a9      	b.n	10017186 <_vfiprintf_r+0x2fe>
10017632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10017634:	941d      	str	r4, [sp, #116]	@ 0x74
10017636:	2201      	movs	r2, #1
10017638:	931e      	str	r3, [sp, #120]	@ 0x78
1001763a:	931c      	str	r3, [sp, #112]	@ 0x70
1001763c:	921b      	str	r2, [sp, #108]	@ 0x6c
1001763e:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10017642:	f109 0908 	add.w	r9, r9, #8
10017646:	e60c      	b.n	10017262 <_vfiprintf_r+0x3da>
10017648:	9b08      	ldr	r3, [sp, #32]
1001764a:	9804      	ldr	r0, [sp, #16]
1001764c:	1a1d      	subs	r5, r3, r0
1001764e:	2d00      	cmp	r5, #0
10017650:	f77f ade7 	ble.w	10017222 <_vfiprintf_r+0x39a>
10017654:	2d10      	cmp	r5, #16
10017656:	f340 83cb 	ble.w	10017df0 <_vfiprintf_r+0xf68>
1001765a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 10017810 <_vfiprintf_r+0x988>
1001765e:	4643      	mov	r3, r8
10017660:	2610      	movs	r6, #16
10017662:	46a0      	mov	r8, r4
10017664:	4661      	mov	r1, ip
10017666:	461c      	mov	r4, r3
10017668:	e007      	b.n	1001767a <_vfiprintf_r+0x7f2>
1001766a:	f102 0c02 	add.w	ip, r2, #2
1001766e:	f109 0908 	add.w	r9, r9, #8
10017672:	4602      	mov	r2, r0
10017674:	3d10      	subs	r5, #16
10017676:	2d10      	cmp	r5, #16
10017678:	dd1a      	ble.n	100176b0 <_vfiprintf_r+0x828>
1001767a:	1c50      	adds	r0, r2, #1
1001767c:	3110      	adds	r1, #16
1001767e:	2807      	cmp	r0, #7
10017680:	e9c9 4600 	strd	r4, r6, [r9]
10017684:	e9cd 011b 	strd	r0, r1, [sp, #108]	@ 0x6c
10017688:	ddef      	ble.n	1001766a <_vfiprintf_r+0x7e2>
1001768a:	aa1a      	add	r2, sp, #104	@ 0x68
1001768c:	2900      	cmp	r1, #0
1001768e:	d07c      	beq.n	1001778a <_vfiprintf_r+0x902>
10017690:	9903      	ldr	r1, [sp, #12]
10017692:	4658      	mov	r0, fp
10017694:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10017698:	f7ff fbb0 	bl	10016dfc <__sprint_r.part.0>
1001769c:	2800      	cmp	r0, #0
1001769e:	f47f ad4b 	bne.w	10017138 <_vfiprintf_r+0x2b0>
100176a2:	e9dd 211b 	ldrd	r2, r1, [sp, #108]	@ 0x6c
100176a6:	3d10      	subs	r5, #16
100176a8:	2d10      	cmp	r5, #16
100176aa:	f102 0c01 	add.w	ip, r2, #1
100176ae:	dce4      	bgt.n	1001767a <_vfiprintf_r+0x7f2>
100176b0:	4623      	mov	r3, r4
100176b2:	4660      	mov	r0, ip
100176b4:	4644      	mov	r4, r8
100176b6:	468c      	mov	ip, r1
100176b8:	4698      	mov	r8, r3
100176ba:	44ac      	add	ip, r5
100176bc:	2807      	cmp	r0, #7
100176be:	e9cd 0c1b 	strd	r0, ip, [sp, #108]	@ 0x6c
100176c2:	f8c9 8000 	str.w	r8, [r9]
100176c6:	f8c9 5004 	str.w	r5, [r9, #4]
100176ca:	f340 81a3 	ble.w	10017a14 <_vfiprintf_r+0xb8c>
100176ce:	f1bc 0f00 	cmp.w	ip, #0
100176d2:	f000 8327 	beq.w	10017d24 <_vfiprintf_r+0xe9c>
100176d6:	9903      	ldr	r1, [sp, #12]
100176d8:	aa1a      	add	r2, sp, #104	@ 0x68
100176da:	4658      	mov	r0, fp
100176dc:	f7ff fb8e 	bl	10016dfc <__sprint_r.part.0>
100176e0:	2800      	cmp	r0, #0
100176e2:	f47f ad29 	bne.w	10017138 <_vfiprintf_r+0x2b0>
100176e6:	9b05      	ldr	r3, [sp, #20]
100176e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
100176ea:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
100176ee:	1a1d      	subs	r5, r3, r0
100176f0:	2d00      	cmp	r5, #0
100176f2:	f102 0101 	add.w	r1, r2, #1
100176f6:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100176fa:	f77f ad98 	ble.w	1001722e <_vfiprintf_r+0x3a6>
100176fe:	2d10      	cmp	r5, #16
10017700:	f8df 810c 	ldr.w	r8, [pc, #268]	@ 10017810 <_vfiprintf_r+0x988>
10017704:	dd2d      	ble.n	10017762 <_vfiprintf_r+0x8da>
10017706:	462b      	mov	r3, r5
10017708:	2610      	movs	r6, #16
1001770a:	4625      	mov	r5, r4
1001770c:	4660      	mov	r0, ip
1001770e:	461c      	mov	r4, r3
10017710:	e007      	b.n	10017722 <_vfiprintf_r+0x89a>
10017712:	f102 0c02 	add.w	ip, r2, #2
10017716:	f109 0908 	add.w	r9, r9, #8
1001771a:	460a      	mov	r2, r1
1001771c:	3c10      	subs	r4, #16
1001771e:	2c10      	cmp	r4, #16
10017720:	dd1a      	ble.n	10017758 <_vfiprintf_r+0x8d0>
10017722:	1c51      	adds	r1, r2, #1
10017724:	4b3a      	ldr	r3, [pc, #232]	@ (10017810 <_vfiprintf_r+0x988>)
10017726:	3010      	adds	r0, #16
10017728:	2907      	cmp	r1, #7
1001772a:	e9c9 3600 	strd	r3, r6, [r9]
1001772e:	e9cd 101b 	strd	r1, r0, [sp, #108]	@ 0x6c
10017732:	ddee      	ble.n	10017712 <_vfiprintf_r+0x88a>
10017734:	aa1a      	add	r2, sp, #104	@ 0x68
10017736:	b310      	cbz	r0, 1001777e <_vfiprintf_r+0x8f6>
10017738:	9903      	ldr	r1, [sp, #12]
1001773a:	4658      	mov	r0, fp
1001773c:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10017740:	f7ff fb5c 	bl	10016dfc <__sprint_r.part.0>
10017744:	2800      	cmp	r0, #0
10017746:	f47f acf7 	bne.w	10017138 <_vfiprintf_r+0x2b0>
1001774a:	e9dd 201b 	ldrd	r2, r0, [sp, #108]	@ 0x6c
1001774e:	3c10      	subs	r4, #16
10017750:	2c10      	cmp	r4, #16
10017752:	f102 0c01 	add.w	ip, r2, #1
10017756:	dce4      	bgt.n	10017722 <_vfiprintf_r+0x89a>
10017758:	4623      	mov	r3, r4
1001775a:	4661      	mov	r1, ip
1001775c:	462c      	mov	r4, r5
1001775e:	4684      	mov	ip, r0
10017760:	461d      	mov	r5, r3
10017762:	44ac      	add	ip, r5
10017764:	2907      	cmp	r1, #7
10017766:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
1001776a:	f8c9 8000 	str.w	r8, [r9]
1001776e:	f8c9 5004 	str.w	r5, [r9, #4]
10017772:	f300 80ec 	bgt.w	1001794e <_vfiprintf_r+0xac6>
10017776:	f109 0908 	add.w	r9, r9, #8
1001777a:	3101      	adds	r1, #1
1001777c:	e557      	b.n	1001722e <_vfiprintf_r+0x3a6>
1001777e:	f04f 0c01 	mov.w	ip, #1
10017782:	4602      	mov	r2, r0
10017784:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10017788:	e7c8      	b.n	1001771c <_vfiprintf_r+0x894>
1001778a:	f04f 0c01 	mov.w	ip, #1
1001778e:	460a      	mov	r2, r1
10017790:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10017794:	e76e      	b.n	10017674 <_vfiprintf_r+0x7ec>
10017796:	f1bc 0f00 	cmp.w	ip, #0
1001779a:	d00f      	beq.n	100177bc <_vfiprintf_r+0x934>
1001779c:	9903      	ldr	r1, [sp, #12]
1001779e:	9311      	str	r3, [sp, #68]	@ 0x44
100177a0:	aa1a      	add	r2, sp, #104	@ 0x68
100177a2:	4658      	mov	r0, fp
100177a4:	f7ff fb2a 	bl	10016dfc <__sprint_r.part.0>
100177a8:	2800      	cmp	r0, #0
100177aa:	f47f acc5 	bne.w	10017138 <_vfiprintf_r+0x2b0>
100177ae:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
100177b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
100177b4:	1c51      	adds	r1, r2, #1
100177b6:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100177ba:	e50f      	b.n	100171dc <_vfiprintf_r+0x354>
100177bc:	2b00      	cmp	r3, #0
100177be:	f000 8155 	beq.w	10017a6c <_vfiprintf_r+0xbe4>
100177c2:	2302      	movs	r3, #2
100177c4:	931e      	str	r3, [sp, #120]	@ 0x78
100177c6:	469c      	mov	ip, r3
100177c8:	ab13      	add	r3, sp, #76	@ 0x4c
100177ca:	931d      	str	r3, [sp, #116]	@ 0x74
100177cc:	2101      	movs	r1, #1
100177ce:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100177d2:	460a      	mov	r2, r1
100177d4:	f109 0908 	add.w	r9, r9, #8
100177d8:	3101      	adds	r1, #1
100177da:	e51e      	b.n	1001721a <_vfiprintf_r+0x392>
100177dc:	980d      	ldr	r0, [sp, #52]	@ 0x34
100177de:	ac46      	add	r4, sp, #280	@ 0x118
100177e0:	f003 020f 	and.w	r2, r3, #15
100177e4:	091b      	lsrs	r3, r3, #4
100177e6:	5c82      	ldrb	r2, [r0, r2]
100177e8:	f804 2d01 	strb.w	r2, [r4, #-1]!
100177ec:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
100177f0:	0909      	lsrs	r1, r1, #4
100177f2:	ea53 0201 	orrs.w	r2, r3, r1
100177f6:	d1f3      	bne.n	100177e0 <_vfiprintf_r+0x958>
100177f8:	9a05      	ldr	r2, [sp, #20]
100177fa:	ab46      	add	r3, sp, #280	@ 0x118
100177fc:	1b1b      	subs	r3, r3, r4
100177fe:	429a      	cmp	r2, r3
10017800:	bfb8      	it	lt
10017802:	461a      	movlt	r2, r3
10017804:	9309      	str	r3, [sp, #36]	@ 0x24
10017806:	9204      	str	r2, [sp, #16]
10017808:	e708      	b.n	1001761c <_vfiprintf_r+0x794>
1001780a:	bf00      	nop
1001780c:	10025484 	.word	0x10025484
10017810:	100254d8 	.word	0x100254d8
10017814:	2d10      	cmp	r5, #16
10017816:	f340 82c0 	ble.w	10017d9a <_vfiprintf_r+0xf12>
1001781a:	4eae      	ldr	r6, [pc, #696]	@ (10017ad4 <_vfiprintf_r+0xc4c>)
1001781c:	9311      	str	r3, [sp, #68]	@ 0x44
1001781e:	4649      	mov	r1, r9
10017820:	f04f 0810 	mov.w	r8, #16
10017824:	46a1      	mov	r9, r4
10017826:	4634      	mov	r4, r6
10017828:	4666      	mov	r6, ip
1001782a:	e007      	b.n	1001783c <_vfiprintf_r+0x9b4>
1001782c:	f102 0e02 	add.w	lr, r2, #2
10017830:	3108      	adds	r1, #8
10017832:	4602      	mov	r2, r0
10017834:	3d10      	subs	r5, #16
10017836:	2d10      	cmp	r5, #16
10017838:	dd18      	ble.n	1001786c <_vfiprintf_r+0x9e4>
1001783a:	1c50      	adds	r0, r2, #1
1001783c:	3610      	adds	r6, #16
1001783e:	2807      	cmp	r0, #7
10017840:	e9c1 4800 	strd	r4, r8, [r1]
10017844:	e9cd 061b 	strd	r0, r6, [sp, #108]	@ 0x6c
10017848:	ddf0      	ble.n	1001782c <_vfiprintf_r+0x9a4>
1001784a:	9903      	ldr	r1, [sp, #12]
1001784c:	aa1a      	add	r2, sp, #104	@ 0x68
1001784e:	4658      	mov	r0, fp
10017850:	b316      	cbz	r6, 10017898 <_vfiprintf_r+0xa10>
10017852:	f7ff fad3 	bl	10016dfc <__sprint_r.part.0>
10017856:	2800      	cmp	r0, #0
10017858:	f47f ac6e 	bne.w	10017138 <_vfiprintf_r+0x2b0>
1001785c:	e9dd 261b 	ldrd	r2, r6, [sp, #108]	@ 0x6c
10017860:	3d10      	subs	r5, #16
10017862:	2d10      	cmp	r5, #16
10017864:	f102 0e01 	add.w	lr, r2, #1
10017868:	a91d      	add	r1, sp, #116	@ 0x74
1001786a:	dce6      	bgt.n	1001783a <_vfiprintf_r+0x9b2>
1001786c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1001786e:	46b4      	mov	ip, r6
10017870:	4626      	mov	r6, r4
10017872:	464c      	mov	r4, r9
10017874:	4689      	mov	r9, r1
10017876:	44ac      	add	ip, r5
10017878:	f1be 0f07 	cmp.w	lr, #7
1001787c:	e9cd ec1b 	strd	lr, ip, [sp, #108]	@ 0x6c
10017880:	f8c9 6000 	str.w	r6, [r9]
10017884:	f8c9 5004 	str.w	r5, [r9, #4]
10017888:	f300 809a 	bgt.w	100179c0 <_vfiprintf_r+0xb38>
1001788c:	f109 0908 	add.w	r9, r9, #8
10017890:	f10e 0101 	add.w	r1, lr, #1
10017894:	4672      	mov	r2, lr
10017896:	e48c      	b.n	100171b2 <_vfiprintf_r+0x32a>
10017898:	4632      	mov	r2, r6
1001789a:	f04f 0e01 	mov.w	lr, #1
1001789e:	a91d      	add	r1, sp, #116	@ 0x74
100178a0:	e7c8      	b.n	10017834 <_vfiprintf_r+0x9ac>
100178a2:	9a02      	ldr	r2, [sp, #8]
100178a4:	931b      	str	r3, [sp, #108]	@ 0x6c
100178a6:	0754      	lsls	r4, r2, #29
100178a8:	d548      	bpl.n	1001793c <_vfiprintf_r+0xab4>
100178aa:	9a08      	ldr	r2, [sp, #32]
100178ac:	9904      	ldr	r1, [sp, #16]
100178ae:	1a54      	subs	r4, r2, r1
100178b0:	2c00      	cmp	r4, #0
100178b2:	dd43      	ble.n	1001793c <_vfiprintf_r+0xab4>
100178b4:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100178b8:	2c10      	cmp	r4, #16
100178ba:	991b      	ldr	r1, [sp, #108]	@ 0x6c
100178bc:	f340 827c 	ble.w	10017db8 <_vfiprintf_r+0xf30>
100178c0:	4e84      	ldr	r6, [pc, #528]	@ (10017ad4 <_vfiprintf_r+0xc4c>)
100178c2:	f8dd 800c 	ldr.w	r8, [sp, #12]
100178c6:	2510      	movs	r5, #16
100178c8:	e006      	b.n	100178d8 <_vfiprintf_r+0xa50>
100178ca:	1c88      	adds	r0, r1, #2
100178cc:	f109 0908 	add.w	r9, r9, #8
100178d0:	4611      	mov	r1, r2
100178d2:	3c10      	subs	r4, #16
100178d4:	2c10      	cmp	r4, #16
100178d6:	dd19      	ble.n	1001790c <_vfiprintf_r+0xa84>
100178d8:	1c4a      	adds	r2, r1, #1
100178da:	3310      	adds	r3, #16
100178dc:	2a07      	cmp	r2, #7
100178de:	e9c9 6500 	strd	r6, r5, [r9]
100178e2:	e9cd 231b 	strd	r2, r3, [sp, #108]	@ 0x6c
100178e6:	ddf0      	ble.n	100178ca <_vfiprintf_r+0xa42>
100178e8:	aa1a      	add	r2, sp, #104	@ 0x68
100178ea:	b313      	cbz	r3, 10017932 <_vfiprintf_r+0xaaa>
100178ec:	4641      	mov	r1, r8
100178ee:	4658      	mov	r0, fp
100178f0:	f7ff fa84 	bl	10016dfc <__sprint_r.part.0>
100178f4:	2800      	cmp	r0, #0
100178f6:	f47f ac1f 	bne.w	10017138 <_vfiprintf_r+0x2b0>
100178fa:	e9dd 131b 	ldrd	r1, r3, [sp, #108]	@ 0x6c
100178fe:	3c10      	subs	r4, #16
10017900:	2c10      	cmp	r4, #16
10017902:	f101 0001 	add.w	r0, r1, #1
10017906:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
1001790a:	dce5      	bgt.n	100178d8 <_vfiprintf_r+0xa50>
1001790c:	4423      	add	r3, r4
1001790e:	2807      	cmp	r0, #7
10017910:	e9c9 6400 	strd	r6, r4, [r9]
10017914:	e9cd 031b 	strd	r0, r3, [sp, #108]	@ 0x6c
10017918:	f77f acac 	ble.w	10017274 <_vfiprintf_r+0x3ec>
1001791c:	b173      	cbz	r3, 1001793c <_vfiprintf_r+0xab4>
1001791e:	9903      	ldr	r1, [sp, #12]
10017920:	aa1a      	add	r2, sp, #104	@ 0x68
10017922:	4658      	mov	r0, fp
10017924:	f7ff fa6a 	bl	10016dfc <__sprint_r.part.0>
10017928:	2800      	cmp	r0, #0
1001792a:	f47f ac05 	bne.w	10017138 <_vfiprintf_r+0x2b0>
1001792e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
10017930:	e4a0      	b.n	10017274 <_vfiprintf_r+0x3ec>
10017932:	2001      	movs	r0, #1
10017934:	4619      	mov	r1, r3
10017936:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
1001793a:	e7ca      	b.n	100178d2 <_vfiprintf_r+0xa4a>
1001793c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
10017940:	9904      	ldr	r1, [sp, #16]
10017942:	428a      	cmp	r2, r1
10017944:	bfac      	ite	ge
10017946:	189b      	addge	r3, r3, r2
10017948:	185b      	addlt	r3, r3, r1
1001794a:	9307      	str	r3, [sp, #28]
1001794c:	e49d      	b.n	1001728a <_vfiprintf_r+0x402>
1001794e:	f1bc 0f00 	cmp.w	ip, #0
10017952:	f43f ae6e 	beq.w	10017632 <_vfiprintf_r+0x7aa>
10017956:	9903      	ldr	r1, [sp, #12]
10017958:	aa1a      	add	r2, sp, #104	@ 0x68
1001795a:	4658      	mov	r0, fp
1001795c:	f7ff fa4e 	bl	10016dfc <__sprint_r.part.0>
10017960:	2800      	cmp	r0, #0
10017962:	f47f abe9 	bne.w	10017138 <_vfiprintf_r+0x2b0>
10017966:	991b      	ldr	r1, [sp, #108]	@ 0x6c
10017968:	f8dd c070 	ldr.w	ip, [sp, #112]	@ 0x70
1001796c:	3101      	adds	r1, #1
1001796e:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10017972:	e45c      	b.n	1001722e <_vfiprintf_r+0x3a6>
10017974:	921b      	str	r2, [sp, #108]	@ 0x6c
10017976:	f7ff bbd4 	b.w	10017122 <_vfiprintf_r+0x29a>
1001797a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001797c:	f852 3b04 	ldr.w	r3, [r2], #4
10017980:	920a      	str	r2, [sp, #40]	@ 0x28
10017982:	f014 0210 	ands.w	r2, r4, #16
10017986:	f47f ad76 	bne.w	10017476 <_vfiprintf_r+0x5ee>
1001798a:	f014 0040 	ands.w	r0, r4, #64	@ 0x40
1001798e:	f000 816e 	beq.w	10017c6e <_vfiprintf_r+0xde6>
10017992:	b29b      	uxth	r3, r3
10017994:	4611      	mov	r1, r2
10017996:	e56e      	b.n	10017476 <_vfiprintf_r+0x5ee>
10017998:	980a      	ldr	r0, [sp, #40]	@ 0x28
1001799a:	f850 3b04 	ldr.w	r3, [r0], #4
1001799e:	900a      	str	r0, [sp, #40]	@ 0x28
100179a0:	f012 0010 	ands.w	r0, r2, #16
100179a4:	f47f ad1a 	bne.w	100173dc <_vfiprintf_r+0x554>
100179a8:	f012 0440 	ands.w	r4, r2, #64	@ 0x40
100179ac:	f000 8167 	beq.w	10017c7e <_vfiprintf_r+0xdf6>
100179b0:	b29b      	uxth	r3, r3
100179b2:	4601      	mov	r1, r0
100179b4:	e512      	b.n	100173dc <_vfiprintf_r+0x554>
100179b6:	2101      	movs	r1, #1
100179b8:	4662      	mov	r2, ip
100179ba:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100179be:	e42c      	b.n	1001721a <_vfiprintf_r+0x392>
100179c0:	f1bc 0f00 	cmp.w	ip, #0
100179c4:	f000 8095 	beq.w	10017af2 <_vfiprintf_r+0xc6a>
100179c8:	9903      	ldr	r1, [sp, #12]
100179ca:	9311      	str	r3, [sp, #68]	@ 0x44
100179cc:	aa1a      	add	r2, sp, #104	@ 0x68
100179ce:	4658      	mov	r0, fp
100179d0:	f7ff fa14 	bl	10016dfc <__sprint_r.part.0>
100179d4:	2800      	cmp	r0, #0
100179d6:	f47f abaf 	bne.w	10017138 <_vfiprintf_r+0x2b0>
100179da:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
100179de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
100179e0:	1c51      	adds	r1, r2, #1
100179e2:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
100179e6:	f7ff bbe4 	b.w	100171b2 <_vfiprintf_r+0x32a>
100179ea:	9b05      	ldr	r3, [sp, #20]
100179ec:	9304      	str	r3, [sp, #16]
100179ee:	9309      	str	r3, [sp, #36]	@ 0x24
100179f0:	ac46      	add	r4, sp, #280	@ 0x118
100179f2:	e613      	b.n	1001761c <_vfiprintf_r+0x794>
100179f4:	7822      	ldrb	r2, [r4, #0]
100179f6:	930a      	str	r3, [sp, #40]	@ 0x28
100179f8:	f7ff baae 	b.w	10016f58 <_vfiprintf_r+0xd0>
100179fc:	9b05      	ldr	r3, [sp, #20]
100179fe:	9304      	str	r3, [sp, #16]
10017a00:	ac46      	add	r4, sp, #280	@ 0x118
10017a02:	e60b      	b.n	1001761c <_vfiprintf_r+0x794>
10017a04:	9d03      	ldr	r5, [sp, #12]
10017a06:	6da8      	ldr	r0, [r5, #88]	@ 0x58
10017a08:	f002 f8b6 	bl	10019b78 <__retarget_lock_acquire_recursive>
10017a0c:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
10017a10:	f7ff ba59 	b.w	10016ec6 <_vfiprintf_r+0x3e>
10017a14:	f109 0908 	add.w	r9, r9, #8
10017a18:	1c41      	adds	r1, r0, #1
10017a1a:	4602      	mov	r2, r0
10017a1c:	e401      	b.n	10017222 <_vfiprintf_r+0x39a>
10017a1e:	9a02      	ldr	r2, [sp, #8]
10017a20:	0592      	lsls	r2, r2, #22
10017a22:	f100 8185 	bmi.w	10017d30 <_vfiprintf_r+0xea8>
10017a26:	17d9      	asrs	r1, r3, #31
10017a28:	460a      	mov	r2, r1
10017a2a:	e49e      	b.n	1001736a <_vfiprintf_r+0x4e2>
10017a2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10017a2e:	7822      	ldrb	r2, [r4, #0]
10017a30:	2b00      	cmp	r3, #0
10017a32:	f43f aa91 	beq.w	10016f58 <_vfiprintf_r+0xd0>
10017a36:	781b      	ldrb	r3, [r3, #0]
10017a38:	2b00      	cmp	r3, #0
10017a3a:	f43f aa8d 	beq.w	10016f58 <_vfiprintf_r+0xd0>
10017a3e:	9b02      	ldr	r3, [sp, #8]
10017a40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10017a44:	9302      	str	r3, [sp, #8]
10017a46:	f7ff ba87 	b.w	10016f58 <_vfiprintf_r+0xd0>
10017a4a:	9b02      	ldr	r3, [sp, #8]
10017a4c:	06dd      	lsls	r5, r3, #27
10017a4e:	f100 80ff 	bmi.w	10017c50 <_vfiprintf_r+0xdc8>
10017a52:	9b02      	ldr	r3, [sp, #8]
10017a54:	065c      	lsls	r4, r3, #25
10017a56:	f100 8177 	bmi.w	10017d48 <_vfiprintf_r+0xec0>
10017a5a:	9b02      	ldr	r3, [sp, #8]
10017a5c:	0598      	lsls	r0, r3, #22
10017a5e:	f140 80f7 	bpl.w	10017c50 <_vfiprintf_r+0xdc8>
10017a62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017a64:	9a07      	ldr	r2, [sp, #28]
10017a66:	681b      	ldr	r3, [r3, #0]
10017a68:	701a      	strb	r2, [r3, #0]
10017a6a:	e576      	b.n	1001755a <_vfiprintf_r+0x6d2>
10017a6c:	4662      	mov	r2, ip
10017a6e:	2101      	movs	r1, #1
10017a70:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10017a74:	f7ff bbd1 	b.w	1001721a <_vfiprintf_r+0x392>
10017a78:	9406      	str	r4, [sp, #24]
10017a7a:	9c02      	ldr	r4, [sp, #8]
10017a7c:	e4ee      	b.n	1001745c <_vfiprintf_r+0x5d4>
10017a7e:	9a02      	ldr	r2, [sp, #8]
10017a80:	9406      	str	r4, [sp, #24]
10017a82:	e49e      	b.n	100173c2 <_vfiprintf_r+0x53a>
10017a84:	4b14      	ldr	r3, [pc, #80]	@ (10017ad8 <_vfiprintf_r+0xc50>)
10017a86:	9406      	str	r4, [sp, #24]
10017a88:	930d      	str	r3, [sp, #52]	@ 0x34
10017a8a:	9b02      	ldr	r3, [sp, #8]
10017a8c:	f013 0120 	ands.w	r1, r3, #32
10017a90:	d064      	beq.n	10017b5c <_vfiprintf_r+0xcd4>
10017a92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017a94:	3307      	adds	r3, #7
10017a96:	f023 0307 	bic.w	r3, r3, #7
10017a9a:	4618      	mov	r0, r3
10017a9c:	6859      	ldr	r1, [r3, #4]
10017a9e:	f850 3b08 	ldr.w	r3, [r0], #8
10017aa2:	900a      	str	r0, [sp, #40]	@ 0x28
10017aa4:	9c02      	ldr	r4, [sp, #8]
10017aa6:	07e6      	lsls	r6, r4, #31
10017aa8:	d50a      	bpl.n	10017ac0 <_vfiprintf_r+0xc38>
10017aaa:	ea53 0001 	orrs.w	r0, r3, r1
10017aae:	d007      	beq.n	10017ac0 <_vfiprintf_r+0xc38>
10017ab0:	f88d 204d 	strb.w	r2, [sp, #77]	@ 0x4d
10017ab4:	f044 0202 	orr.w	r2, r4, #2
10017ab8:	9202      	str	r2, [sp, #8]
10017aba:	2230      	movs	r2, #48	@ 0x30
10017abc:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
10017ac0:	9a02      	ldr	r2, [sp, #8]
10017ac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
10017ac6:	9202      	str	r2, [sp, #8]
10017ac8:	e52b      	b.n	10017522 <_vfiprintf_r+0x69a>
10017aca:	4b04      	ldr	r3, [pc, #16]	@ (10017adc <_vfiprintf_r+0xc54>)
10017acc:	9406      	str	r4, [sp, #24]
10017ace:	930d      	str	r3, [sp, #52]	@ 0x34
10017ad0:	e7db      	b.n	10017a8a <_vfiprintf_r+0xc02>
10017ad2:	bf00      	nop
10017ad4:	100254e8 	.word	0x100254e8
10017ad8:	10025498 	.word	0x10025498
10017adc:	10025484 	.word	0x10025484
10017ae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017ae2:	681b      	ldr	r3, [r3, #0]
10017ae4:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
10017ae8:	2301      	movs	r3, #1
10017aea:	9304      	str	r3, [sp, #16]
10017aec:	9309      	str	r3, [sp, #36]	@ 0x24
10017aee:	ac2d      	add	r4, sp, #180	@ 0xb4
10017af0:	e428      	b.n	10017344 <_vfiprintf_r+0x4bc>
10017af2:	f89d 204b 	ldrb.w	r2, [sp, #75]	@ 0x4b
10017af6:	2a00      	cmp	r2, #0
10017af8:	f000 8120 	beq.w	10017d3c <_vfiprintf_r+0xeb4>
10017afc:	2101      	movs	r1, #1
10017afe:	f10d 024b 	add.w	r2, sp, #75	@ 0x4b
10017b02:	911e      	str	r1, [sp, #120]	@ 0x78
10017b04:	921d      	str	r2, [sp, #116]	@ 0x74
10017b06:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10017b0a:	468c      	mov	ip, r1
10017b0c:	f7ff bb62 	b.w	100171d4 <_vfiprintf_r+0x34c>
10017b10:	2208      	movs	r2, #8
10017b12:	2100      	movs	r1, #0
10017b14:	a818      	add	r0, sp, #96	@ 0x60
10017b16:	9415      	str	r4, [sp, #84]	@ 0x54
10017b18:	f001 fd50 	bl	100195bc <memset>
10017b1c:	f8dd 8014 	ldr.w	r8, [sp, #20]
10017b20:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
10017b24:	f000 80b9 	beq.w	10017c9a <_vfiprintf_r+0xe12>
10017b28:	2500      	movs	r5, #0
10017b2a:	9404      	str	r4, [sp, #16]
10017b2c:	462c      	mov	r4, r5
10017b2e:	e00c      	b.n	10017b4a <_vfiprintf_r+0xcc2>
10017b30:	a92d      	add	r1, sp, #180	@ 0xb4
10017b32:	4658      	mov	r0, fp
10017b34:	f002 f9b0 	bl	10019e98 <_wcrtomb_r>
10017b38:	1c41      	adds	r1, r0, #1
10017b3a:	4420      	add	r0, r4
10017b3c:	f000 813f 	beq.w	10017dbe <_vfiprintf_r+0xf36>
10017b40:	4540      	cmp	r0, r8
10017b42:	dc08      	bgt.n	10017b56 <_vfiprintf_r+0xcce>
10017b44:	f000 8158 	beq.w	10017df8 <_vfiprintf_r+0xf70>
10017b48:	4604      	mov	r4, r0
10017b4a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10017b4c:	5952      	ldr	r2, [r2, r5]
10017b4e:	ab18      	add	r3, sp, #96	@ 0x60
10017b50:	3504      	adds	r5, #4
10017b52:	2a00      	cmp	r2, #0
10017b54:	d1ec      	bne.n	10017b30 <_vfiprintf_r+0xca8>
10017b56:	9409      	str	r4, [sp, #36]	@ 0x24
10017b58:	9c04      	ldr	r4, [sp, #16]
10017b5a:	e0ac      	b.n	10017cb6 <_vfiprintf_r+0xe2e>
10017b5c:	980a      	ldr	r0, [sp, #40]	@ 0x28
10017b5e:	f850 3b04 	ldr.w	r3, [r0], #4
10017b62:	900a      	str	r0, [sp, #40]	@ 0x28
10017b64:	9802      	ldr	r0, [sp, #8]
10017b66:	f010 0010 	ands.w	r0, r0, #16
10017b6a:	d19b      	bne.n	10017aa4 <_vfiprintf_r+0xc1c>
10017b6c:	9902      	ldr	r1, [sp, #8]
10017b6e:	f011 0440 	ands.w	r4, r1, #64	@ 0x40
10017b72:	f000 808b 	beq.w	10017c8c <_vfiprintf_r+0xe04>
10017b76:	b29b      	uxth	r3, r3
10017b78:	4601      	mov	r1, r0
10017b7a:	e793      	b.n	10017aa4 <_vfiprintf_r+0xc1c>
10017b7c:	9a02      	ldr	r2, [sp, #8]
10017b7e:	f8cd 9010 	str.w	r9, [sp, #16]
10017b82:	ac46      	add	r4, sp, #280	@ 0x118
10017b84:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
10017b88:	46a1      	mov	r9, r4
10017b8a:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
10017b8e:	4ea5      	ldr	r6, [pc, #660]	@ (10017e24 <_vfiprintf_r+0xf9c>)
10017b90:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
10017b94:	f04f 0c00 	mov.w	ip, #0
10017b98:	4614      	mov	r4, r2
10017b9a:	e005      	b.n	10017ba8 <_vfiprintf_r+0xd20>
10017b9c:	2b0a      	cmp	r3, #10
10017b9e:	f171 0100 	sbcs.w	r1, r1, #0
10017ba2:	d336      	bcc.n	10017c12 <_vfiprintf_r+0xd8a>
10017ba4:	4643      	mov	r3, r8
10017ba6:	4629      	mov	r1, r5
10017ba8:	185a      	adds	r2, r3, r1
10017baa:	f142 0200 	adc.w	r2, r2, #0
10017bae:	fba6 0502 	umull	r0, r5, r6, r2
10017bb2:	f025 0003 	bic.w	r0, r5, #3
10017bb6:	eb00 0095 	add.w	r0, r0, r5, lsr #2
10017bba:	1a12      	subs	r2, r2, r0
10017bbc:	1a98      	subs	r0, r3, r2
10017bbe:	f04f 35cc 	mov.w	r5, #3435973836	@ 0xcccccccc
10017bc2:	f161 0e00 	sbc.w	lr, r1, #0
10017bc6:	fb05 f500 	mul.w	r5, r5, r0
10017bca:	fb06 550e 	mla	r5, r6, lr, r5
10017bce:	fba0 8006 	umull	r8, r0, r0, r6
10017bd2:	4405      	add	r5, r0
10017bd4:	f008 0e01 	and.w	lr, r8, #1
10017bd8:	2005      	movs	r0, #5
10017bda:	fbae 0e00 	umull	r0, lr, lr, r0
10017bde:	1880      	adds	r0, r0, r2
10017be0:	ea4f 0858 	mov.w	r8, r8, lsr #1
10017be4:	3030      	adds	r0, #48	@ 0x30
10017be6:	f809 0c01 	strb.w	r0, [r9, #-1]
10017bea:	ea48 78c5 	orr.w	r8, r8, r5, lsl #31
10017bee:	f10c 0c01 	add.w	ip, ip, #1
10017bf2:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
10017bf6:	086d      	lsrs	r5, r5, #1
10017bf8:	2c00      	cmp	r4, #0
10017bfa:	d0cf      	beq.n	10017b9c <_vfiprintf_r+0xd14>
10017bfc:	f89b 2000 	ldrb.w	r2, [fp]
10017c00:	4562      	cmp	r2, ip
10017c02:	d1cb      	bne.n	10017b9c <_vfiprintf_r+0xd14>
10017c04:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
10017c08:	d0c8      	beq.n	10017b9c <_vfiprintf_r+0xd14>
10017c0a:	2b0a      	cmp	r3, #10
10017c0c:	f171 0100 	sbcs.w	r1, r1, #0
10017c10:	d272      	bcs.n	10017cf8 <_vfiprintf_r+0xe70>
10017c12:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
10017c16:	464c      	mov	r4, r9
10017c18:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
10017c1c:	f8dd 9010 	ldr.w	r9, [sp, #16]
10017c20:	e5ea      	b.n	100177f8 <_vfiprintf_r+0x970>
10017c22:	9202      	str	r2, [sp, #8]
10017c24:	e441      	b.n	100174aa <_vfiprintf_r+0x622>
10017c26:	9402      	str	r4, [sp, #8]
10017c28:	e4e6      	b.n	100175f8 <_vfiprintf_r+0x770>
10017c2a:	4658      	mov	r0, fp
10017c2c:	f000 fe30 	bl	10018890 <__sinit>
10017c30:	f7ff b940 	b.w	10016eb4 <_vfiprintf_r+0x2c>
10017c34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
10017c38:	7862      	ldrb	r2, [r4, #1]
10017c3a:	9302      	str	r3, [sp, #8]
10017c3c:	3401      	adds	r4, #1
10017c3e:	f7ff b98b 	b.w	10016f58 <_vfiprintf_r+0xd0>
10017c42:	f043 0320 	orr.w	r3, r3, #32
10017c46:	7862      	ldrb	r2, [r4, #1]
10017c48:	9302      	str	r3, [sp, #8]
10017c4a:	3401      	adds	r4, #1
10017c4c:	f7ff b984 	b.w	10016f58 <_vfiprintf_r+0xd0>
10017c50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017c52:	9a07      	ldr	r2, [sp, #28]
10017c54:	681b      	ldr	r3, [r3, #0]
10017c56:	601a      	str	r2, [r3, #0]
10017c58:	e47f      	b.n	1001755a <_vfiprintf_r+0x6d2>
10017c5a:	9b05      	ldr	r3, [sp, #20]
10017c5c:	4c72      	ldr	r4, [pc, #456]	@ (10017e28 <_vfiprintf_r+0xfa0>)
10017c5e:	2b06      	cmp	r3, #6
10017c60:	bf28      	it	cs
10017c62:	2306      	movcs	r3, #6
10017c64:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
10017c68:	9304      	str	r3, [sp, #16]
10017c6a:	f7ff ba89 	b.w	10017180 <_vfiprintf_r+0x2f8>
10017c6e:	f414 7100 	ands.w	r1, r4, #512	@ 0x200
10017c72:	f43f ac00 	beq.w	10017476 <_vfiprintf_r+0x5ee>
10017c76:	b2db      	uxtb	r3, r3
10017c78:	4601      	mov	r1, r0
10017c7a:	f7ff bbfc 	b.w	10017476 <_vfiprintf_r+0x5ee>
10017c7e:	f412 7100 	ands.w	r1, r2, #512	@ 0x200
10017c82:	bf1c      	itt	ne
10017c84:	b2db      	uxtbne	r3, r3
10017c86:	4621      	movne	r1, r4
10017c88:	f7ff bba8 	b.w	100173dc <_vfiprintf_r+0x554>
10017c8c:	9902      	ldr	r1, [sp, #8]
10017c8e:	f411 7100 	ands.w	r1, r1, #512	@ 0x200
10017c92:	bf1c      	itt	ne
10017c94:	b2db      	uxtbne	r3, r3
10017c96:	4621      	movne	r1, r4
10017c98:	e704      	b.n	10017aa4 <_vfiprintf_r+0xc1c>
10017c9a:	ab18      	add	r3, sp, #96	@ 0x60
10017c9c:	9300      	str	r3, [sp, #0]
10017c9e:	2300      	movs	r3, #0
10017ca0:	4619      	mov	r1, r3
10017ca2:	aa15      	add	r2, sp, #84	@ 0x54
10017ca4:	4658      	mov	r0, fp
10017ca6:	f002 f91d 	bl	10019ee4 <_wcsrtombs_r>
10017caa:	4603      	mov	r3, r0
10017cac:	3301      	adds	r3, #1
10017cae:	9009      	str	r0, [sp, #36]	@ 0x24
10017cb0:	f000 8085 	beq.w	10017dbe <_vfiprintf_r+0xf36>
10017cb4:	9415      	str	r4, [sp, #84]	@ 0x54
10017cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10017cb8:	b373      	cbz	r3, 10017d18 <_vfiprintf_r+0xe90>
10017cba:	2b63      	cmp	r3, #99	@ 0x63
10017cbc:	dc49      	bgt.n	10017d52 <_vfiprintf_r+0xeca>
10017cbe:	2300      	movs	r3, #0
10017cc0:	930b      	str	r3, [sp, #44]	@ 0x2c
10017cc2:	ac2d      	add	r4, sp, #180	@ 0xb4
10017cc4:	2208      	movs	r2, #8
10017cc6:	2100      	movs	r1, #0
10017cc8:	a818      	add	r0, sp, #96	@ 0x60
10017cca:	f001 fc77 	bl	100195bc <memset>
10017cce:	9d09      	ldr	r5, [sp, #36]	@ 0x24
10017cd0:	ab18      	add	r3, sp, #96	@ 0x60
10017cd2:	9300      	str	r3, [sp, #0]
10017cd4:	aa15      	add	r2, sp, #84	@ 0x54
10017cd6:	462b      	mov	r3, r5
10017cd8:	4621      	mov	r1, r4
10017cda:	4658      	mov	r0, fp
10017cdc:	f002 f902 	bl	10019ee4 <_wcsrtombs_r>
10017ce0:	4285      	cmp	r5, r0
10017ce2:	f040 8098 	bne.w	10017e16 <_vfiprintf_r+0xf8e>
10017ce6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10017ce8:	960a      	str	r6, [sp, #40]	@ 0x28
10017cea:	2300      	movs	r3, #0
10017cec:	54a3      	strb	r3, [r4, r2]
10017cee:	9305      	str	r3, [sp, #20]
10017cf0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
10017cf4:	9304      	str	r3, [sp, #16]
10017cf6:	e493      	b.n	10017620 <_vfiprintf_r+0x798>
10017cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10017cfa:	9910      	ldr	r1, [sp, #64]	@ 0x40
10017cfc:	eba9 0903 	sub.w	r9, r9, r3
10017d00:	461a      	mov	r2, r3
10017d02:	4648      	mov	r0, r9
10017d04:	f001 fcac 	bl	10019660 <strncpy>
10017d08:	f89b 3001 	ldrb.w	r3, [fp, #1]
10017d0c:	b10b      	cbz	r3, 10017d12 <_vfiprintf_r+0xe8a>
10017d0e:	f10b 0b01 	add.w	fp, fp, #1
10017d12:	f04f 0c00 	mov.w	ip, #0
10017d16:	e745      	b.n	10017ba4 <_vfiprintf_r+0xd1c>
10017d18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10017d1a:	960a      	str	r6, [sp, #40]	@ 0x28
10017d1c:	e9cd 3304 	strd	r3, r3, [sp, #16]
10017d20:	930b      	str	r3, [sp, #44]	@ 0x2c
10017d22:	e47d      	b.n	10017620 <_vfiprintf_r+0x798>
10017d24:	2101      	movs	r1, #1
10017d26:	4662      	mov	r2, ip
10017d28:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10017d2c:	f7ff ba79 	b.w	10017222 <_vfiprintf_r+0x39a>
10017d30:	f343 11c0 	sbfx	r1, r3, #7, #1
10017d34:	460a      	mov	r2, r1
10017d36:	b25b      	sxtb	r3, r3
10017d38:	f7ff bb17 	b.w	1001736a <_vfiprintf_r+0x4e2>
10017d3c:	4662      	mov	r2, ip
10017d3e:	2101      	movs	r1, #1
10017d40:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
10017d44:	f7ff ba4a 	b.w	100171dc <_vfiprintf_r+0x354>
10017d48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017d4a:	9a07      	ldr	r2, [sp, #28]
10017d4c:	681b      	ldr	r3, [r3, #0]
10017d4e:	801a      	strh	r2, [r3, #0]
10017d50:	e403      	b.n	1001755a <_vfiprintf_r+0x6d2>
10017d52:	1c59      	adds	r1, r3, #1
10017d54:	4658      	mov	r0, fp
10017d56:	f7fc ff1f 	bl	10014b98 <_malloc_r>
10017d5a:	4604      	mov	r4, r0
10017d5c:	2800      	cmp	r0, #0
10017d5e:	d02e      	beq.n	10017dbe <_vfiprintf_r+0xf36>
10017d60:	900b      	str	r0, [sp, #44]	@ 0x2c
10017d62:	e7af      	b.n	10017cc4 <_vfiprintf_r+0xe3c>
10017d64:	6d88      	ldr	r0, [r1, #88]	@ 0x58
10017d66:	f001 ff09 	bl	10019b7c <__retarget_lock_release_recursive>
10017d6a:	f7ff b99d 	b.w	100170a8 <_vfiprintf_r+0x220>
10017d6e:	9b05      	ldr	r3, [sp, #20]
10017d70:	9304      	str	r3, [sp, #16]
10017d72:	9309      	str	r3, [sp, #36]	@ 0x24
10017d74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10017d76:	960a      	str	r6, [sp, #40]	@ 0x28
10017d78:	9305      	str	r3, [sp, #20]
10017d7a:	e451      	b.n	10017620 <_vfiprintf_r+0x798>
10017d7c:	4620      	mov	r0, r4
10017d7e:	9505      	str	r5, [sp, #20]
10017d80:	960a      	str	r6, [sp, #40]	@ 0x28
10017d82:	f001 fffd 	bl	10019d80 <strlen>
10017d86:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
10017d8a:	9009      	str	r0, [sp, #36]	@ 0x24
10017d8c:	9304      	str	r3, [sp, #16]
10017d8e:	950b      	str	r5, [sp, #44]	@ 0x2c
10017d90:	e446      	b.n	10017620 <_vfiprintf_r+0x798>
10017d92:	2300      	movs	r3, #0
10017d94:	9305      	str	r3, [sp, #20]
10017d96:	f7ff b8e0 	b.w	10016f5a <_vfiprintf_r+0xd2>
10017d9a:	4e24      	ldr	r6, [pc, #144]	@ (10017e2c <_vfiprintf_r+0xfa4>)
10017d9c:	4686      	mov	lr, r0
10017d9e:	e56a      	b.n	10017876 <_vfiprintf_r+0x9ee>
10017da0:	2330      	movs	r3, #48	@ 0x30
10017da2:	e430      	b.n	10017606 <_vfiprintf_r+0x77e>
10017da4:	9903      	ldr	r1, [sp, #12]
10017da6:	aa1a      	add	r2, sp, #104	@ 0x68
10017da8:	4658      	mov	r0, fp
10017daa:	f7ff f827 	bl	10016dfc <__sprint_r.part.0>
10017dae:	2800      	cmp	r0, #0
10017db0:	f43f a9a8 	beq.w	10017104 <_vfiprintf_r+0x27c>
10017db4:	f7ff b9c6 	b.w	10017144 <_vfiprintf_r+0x2bc>
10017db8:	4e1c      	ldr	r6, [pc, #112]	@ (10017e2c <_vfiprintf_r+0xfa4>)
10017dba:	1c48      	adds	r0, r1, #1
10017dbc:	e5a6      	b.n	1001790c <_vfiprintf_r+0xa84>
10017dbe:	9a03      	ldr	r2, [sp, #12]
10017dc0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
10017dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10017dc8:	8193      	strh	r3, [r2, #12]
10017dca:	f7ff b9be 	b.w	1001714a <_vfiprintf_r+0x2c2>
10017dce:	9b03      	ldr	r3, [sp, #12]
10017dd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10017dd2:	07d9      	lsls	r1, r3, #31
10017dd4:	d407      	bmi.n	10017de6 <_vfiprintf_r+0xf5e>
10017dd6:	9b03      	ldr	r3, [sp, #12]
10017dd8:	899b      	ldrh	r3, [r3, #12]
10017dda:	059a      	lsls	r2, r3, #22
10017ddc:	d403      	bmi.n	10017de6 <_vfiprintf_r+0xf5e>
10017dde:	9b03      	ldr	r3, [sp, #12]
10017de0:	6d98      	ldr	r0, [r3, #88]	@ 0x58
10017de2:	f001 fecb 	bl	10019b7c <__retarget_lock_release_recursive>
10017de6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10017dea:	9307      	str	r3, [sp, #28]
10017dec:	f7ff b9b5 	b.w	1001715a <_vfiprintf_r+0x2d2>
10017df0:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 10017e30 <_vfiprintf_r+0xfa8>
10017df4:	4608      	mov	r0, r1
10017df6:	e460      	b.n	100176ba <_vfiprintf_r+0x832>
10017df8:	e9dd 4304 	ldrd	r4, r3, [sp, #16]
10017dfc:	9309      	str	r3, [sp, #36]	@ 0x24
10017dfe:	e75a      	b.n	10017cb6 <_vfiprintf_r+0xe2e>
10017e00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10017e02:	7862      	ldrb	r2, [r4, #1]
10017e04:	460c      	mov	r4, r1
10017e06:	f853 1b04 	ldr.w	r1, [r3], #4
10017e0a:	930a      	str	r3, [sp, #40]	@ 0x28
10017e0c:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
10017e10:	9105      	str	r1, [sp, #20]
10017e12:	f7ff b8a1 	b.w	10016f58 <_vfiprintf_r+0xd0>
10017e16:	9a03      	ldr	r2, [sp, #12]
10017e18:	8993      	ldrh	r3, [r2, #12]
10017e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10017e1e:	8193      	strh	r3, [r2, #12]
10017e20:	f7ff b98a 	b.w	10017138 <_vfiprintf_r+0x2b0>
10017e24:	cccccccd 	.word	0xcccccccd
10017e28:	100254ac 	.word	0x100254ac
10017e2c:	100254e8 	.word	0x100254e8
10017e30:	100254d8 	.word	0x100254d8

10017e34 <__sbprintf>:
10017e34:	b5f0      	push	{r4, r5, r6, r7, lr}
10017e36:	461f      	mov	r7, r3
10017e38:	898b      	ldrh	r3, [r1, #12]
10017e3a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
10017e3e:	f023 0302 	bic.w	r3, r3, #2
10017e42:	f8ad 300c 	strh.w	r3, [sp, #12]
10017e46:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
10017e48:	9319      	str	r3, [sp, #100]	@ 0x64
10017e4a:	89cb      	ldrh	r3, [r1, #14]
10017e4c:	f8ad 300e 	strh.w	r3, [sp, #14]
10017e50:	69cb      	ldr	r3, [r1, #28]
10017e52:	9307      	str	r3, [sp, #28]
10017e54:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
10017e56:	9309      	str	r3, [sp, #36]	@ 0x24
10017e58:	ab1a      	add	r3, sp, #104	@ 0x68
10017e5a:	9300      	str	r3, [sp, #0]
10017e5c:	9304      	str	r3, [sp, #16]
10017e5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
10017e62:	4615      	mov	r5, r2
10017e64:	4606      	mov	r6, r0
10017e66:	9302      	str	r3, [sp, #8]
10017e68:	9305      	str	r3, [sp, #20]
10017e6a:	a816      	add	r0, sp, #88	@ 0x58
10017e6c:	2300      	movs	r3, #0
10017e6e:	460c      	mov	r4, r1
10017e70:	9306      	str	r3, [sp, #24]
10017e72:	f001 fe7d 	bl	10019b70 <__retarget_lock_init_recursive>
10017e76:	462a      	mov	r2, r5
10017e78:	463b      	mov	r3, r7
10017e7a:	4669      	mov	r1, sp
10017e7c:	4630      	mov	r0, r6
10017e7e:	f7ff f803 	bl	10016e88 <_vfiprintf_r>
10017e82:	1e05      	subs	r5, r0, #0
10017e84:	db07      	blt.n	10017e96 <__sbprintf+0x62>
10017e86:	4669      	mov	r1, sp
10017e88:	4630      	mov	r0, r6
10017e8a:	f000 fb25 	bl	100184d8 <_fflush_r>
10017e8e:	2800      	cmp	r0, #0
10017e90:	bf18      	it	ne
10017e92:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
10017e96:	f8bd 300c 	ldrh.w	r3, [sp, #12]
10017e9a:	065b      	lsls	r3, r3, #25
10017e9c:	d503      	bpl.n	10017ea6 <__sbprintf+0x72>
10017e9e:	89a3      	ldrh	r3, [r4, #12]
10017ea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10017ea4:	81a3      	strh	r3, [r4, #12]
10017ea6:	9816      	ldr	r0, [sp, #88]	@ 0x58
10017ea8:	f001 fe64 	bl	10019b74 <__retarget_lock_close_recursive>
10017eac:	4628      	mov	r0, r5
10017eae:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
10017eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

10017eb4 <putchar>:
10017eb4:	4b02      	ldr	r3, [pc, #8]	@ (10017ec0 <putchar+0xc>)
10017eb6:	4601      	mov	r1, r0
10017eb8:	6818      	ldr	r0, [r3, #0]
10017eba:	6882      	ldr	r2, [r0, #8]
10017ebc:	f006 bc10 	b.w	1001e6e0 <_putc_r>
10017ec0:	20000598 	.word	0x20000598

10017ec4 <__malloc_lock>:
10017ec4:	4801      	ldr	r0, [pc, #4]	@ (10017ecc <__malloc_lock+0x8>)
10017ec6:	f001 be57 	b.w	10019b78 <__retarget_lock_acquire_recursive>
10017eca:	bf00      	nop
10017ecc:	200015c8 	.word	0x200015c8

10017ed0 <__malloc_unlock>:
10017ed0:	4801      	ldr	r0, [pc, #4]	@ (10017ed8 <__malloc_unlock+0x8>)
10017ed2:	f001 be53 	b.w	10019b7c <__retarget_lock_release_recursive>
10017ed6:	bf00      	nop
10017ed8:	200015c8 	.word	0x200015c8

10017edc <_puts_r>:
10017edc:	b570      	push	{r4, r5, r6, lr}
10017ede:	4605      	mov	r5, r0
10017ee0:	b088      	sub	sp, #32
10017ee2:	4608      	mov	r0, r1
10017ee4:	460c      	mov	r4, r1
10017ee6:	f001 ff4b 	bl	10019d80 <strlen>
10017eea:	4e21      	ldr	r6, [pc, #132]	@ (10017f70 <_puts_r+0x94>)
10017eec:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
10017eee:	9005      	str	r0, [sp, #20]
10017ef0:	2101      	movs	r1, #1
10017ef2:	1843      	adds	r3, r0, r1
10017ef4:	e9cd 6106 	strd	r6, r1, [sp, #24]
10017ef8:	a804      	add	r0, sp, #16
10017efa:	2102      	movs	r1, #2
10017efc:	9404      	str	r4, [sp, #16]
10017efe:	9303      	str	r3, [sp, #12]
10017f00:	68ac      	ldr	r4, [r5, #8]
10017f02:	9001      	str	r0, [sp, #4]
10017f04:	9102      	str	r1, [sp, #8]
10017f06:	2a00      	cmp	r2, #0
10017f08:	d02e      	beq.n	10017f68 <_puts_r+0x8c>
10017f0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10017f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10017f10:	07d6      	lsls	r6, r2, #31
10017f12:	d401      	bmi.n	10017f18 <_puts_r+0x3c>
10017f14:	0598      	lsls	r0, r3, #22
10017f16:	d521      	bpl.n	10017f5c <_puts_r+0x80>
10017f18:	0499      	lsls	r1, r3, #18
10017f1a:	d406      	bmi.n	10017f2a <_puts_r+0x4e>
10017f1c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10017f1e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
10017f22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
10017f26:	81a3      	strh	r3, [r4, #12]
10017f28:	6662      	str	r2, [r4, #100]	@ 0x64
10017f2a:	4628      	mov	r0, r5
10017f2c:	aa01      	add	r2, sp, #4
10017f2e:	4621      	mov	r1, r4
10017f30:	f000 fe2a 	bl	10018b88 <__sfvwrite_r>
10017f34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10017f36:	2800      	cmp	r0, #0
10017f38:	bf0c      	ite	eq
10017f3a:	250a      	moveq	r5, #10
10017f3c:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
10017f40:	07da      	lsls	r2, r3, #31
10017f42:	d402      	bmi.n	10017f4a <_puts_r+0x6e>
10017f44:	89a3      	ldrh	r3, [r4, #12]
10017f46:	059b      	lsls	r3, r3, #22
10017f48:	d502      	bpl.n	10017f50 <_puts_r+0x74>
10017f4a:	4628      	mov	r0, r5
10017f4c:	b008      	add	sp, #32
10017f4e:	bd70      	pop	{r4, r5, r6, pc}
10017f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10017f52:	f001 fe13 	bl	10019b7c <__retarget_lock_release_recursive>
10017f56:	4628      	mov	r0, r5
10017f58:	b008      	add	sp, #32
10017f5a:	bd70      	pop	{r4, r5, r6, pc}
10017f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10017f5e:	f001 fe0b 	bl	10019b78 <__retarget_lock_acquire_recursive>
10017f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10017f66:	e7d7      	b.n	10017f18 <_puts_r+0x3c>
10017f68:	4628      	mov	r0, r5
10017f6a:	f000 fc91 	bl	10018890 <__sinit>
10017f6e:	e7cc      	b.n	10017f0a <_puts_r+0x2e>
10017f70:	10022a6c 	.word	0x10022a6c

10017f74 <puts>:
10017f74:	4b02      	ldr	r3, [pc, #8]	@ (10017f80 <puts+0xc>)
10017f76:	4601      	mov	r1, r0
10017f78:	6818      	ldr	r0, [r3, #0]
10017f7a:	f7ff bfaf 	b.w	10017edc <_puts_r>
10017f7e:	bf00      	nop
10017f80:	20000598 	.word	0x20000598

10017f84 <realloc>:
10017f84:	b410      	push	{r4}
10017f86:	4c04      	ldr	r4, [pc, #16]	@ (10017f98 <realloc+0x14>)
10017f88:	4603      	mov	r3, r0
10017f8a:	460a      	mov	r2, r1
10017f8c:	6820      	ldr	r0, [r4, #0]
10017f8e:	bc10      	pop	{r4}
10017f90:	4619      	mov	r1, r3
10017f92:	f000 b86b 	b.w	1001806c <_realloc_r>
10017f96:	bf00      	nop
10017f98:	20000598 	.word	0x20000598

10017f9c <_fclose_r>:
10017f9c:	b570      	push	{r4, r5, r6, lr}
10017f9e:	2900      	cmp	r1, #0
10017fa0:	d03f      	beq.n	10018022 <_fclose_r+0x86>
10017fa2:	4605      	mov	r5, r0
10017fa4:	460c      	mov	r4, r1
10017fa6:	b110      	cbz	r0, 10017fae <_fclose_r+0x12>
10017fa8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
10017faa:	2b00      	cmp	r3, #0
10017fac:	d03c      	beq.n	10018028 <_fclose_r+0x8c>
10017fae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10017fb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
10017fb4:	07de      	lsls	r6, r3, #31
10017fb6:	d432      	bmi.n	1001801e <_fclose_r+0x82>
10017fb8:	0590      	lsls	r0, r2, #22
10017fba:	d538      	bpl.n	1001802e <_fclose_r+0x92>
10017fbc:	4621      	mov	r1, r4
10017fbe:	4628      	mov	r0, r5
10017fc0:	f000 f9f6 	bl	100183b0 <__sflush_r>
10017fc4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
10017fc6:	4606      	mov	r6, r0
10017fc8:	b133      	cbz	r3, 10017fd8 <_fclose_r+0x3c>
10017fca:	69e1      	ldr	r1, [r4, #28]
10017fcc:	4628      	mov	r0, r5
10017fce:	4798      	blx	r3
10017fd0:	2800      	cmp	r0, #0
10017fd2:	bfb8      	it	lt
10017fd4:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
10017fd8:	89a3      	ldrh	r3, [r4, #12]
10017fda:	061a      	lsls	r2, r3, #24
10017fdc:	d439      	bmi.n	10018052 <_fclose_r+0xb6>
10017fde:	6b21      	ldr	r1, [r4, #48]	@ 0x30
10017fe0:	b141      	cbz	r1, 10017ff4 <_fclose_r+0x58>
10017fe2:	f104 0340 	add.w	r3, r4, #64	@ 0x40
10017fe6:	4299      	cmp	r1, r3
10017fe8:	d002      	beq.n	10017ff0 <_fclose_r+0x54>
10017fea:	4628      	mov	r0, r5
10017fec:	f002 ffe8 	bl	1001afc0 <_free_r>
10017ff0:	2300      	movs	r3, #0
10017ff2:	6323      	str	r3, [r4, #48]	@ 0x30
10017ff4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
10017ff6:	b121      	cbz	r1, 10018002 <_fclose_r+0x66>
10017ff8:	4628      	mov	r0, r5
10017ffa:	f002 ffe1 	bl	1001afc0 <_free_r>
10017ffe:	2300      	movs	r3, #0
10018000:	6463      	str	r3, [r4, #68]	@ 0x44
10018002:	f000 fc63 	bl	100188cc <__sfp_lock_acquire>
10018006:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10018008:	2200      	movs	r2, #0
1001800a:	07db      	lsls	r3, r3, #31
1001800c:	81a2      	strh	r2, [r4, #12]
1001800e:	d51c      	bpl.n	1001804a <_fclose_r+0xae>
10018010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018012:	f001 fdaf 	bl	10019b74 <__retarget_lock_close_recursive>
10018016:	f000 fc5f 	bl	100188d8 <__sfp_lock_release>
1001801a:	4630      	mov	r0, r6
1001801c:	bd70      	pop	{r4, r5, r6, pc}
1001801e:	2a00      	cmp	r2, #0
10018020:	d1cc      	bne.n	10017fbc <_fclose_r+0x20>
10018022:	2600      	movs	r6, #0
10018024:	4630      	mov	r0, r6
10018026:	bd70      	pop	{r4, r5, r6, pc}
10018028:	f000 fc32 	bl	10018890 <__sinit>
1001802c:	e7bf      	b.n	10017fae <_fclose_r+0x12>
1001802e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018030:	f001 fda2 	bl	10019b78 <__retarget_lock_acquire_recursive>
10018034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10018038:	2b00      	cmp	r3, #0
1001803a:	d1bf      	bne.n	10017fbc <_fclose_r+0x20>
1001803c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1001803e:	07d9      	lsls	r1, r3, #31
10018040:	d4ef      	bmi.n	10018022 <_fclose_r+0x86>
10018042:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018044:	f001 fd9a 	bl	10019b7c <__retarget_lock_release_recursive>
10018048:	e7eb      	b.n	10018022 <_fclose_r+0x86>
1001804a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001804c:	f001 fd96 	bl	10019b7c <__retarget_lock_release_recursive>
10018050:	e7de      	b.n	10018010 <_fclose_r+0x74>
10018052:	6921      	ldr	r1, [r4, #16]
10018054:	4628      	mov	r0, r5
10018056:	f002 ffb3 	bl	1001afc0 <_free_r>
1001805a:	e7c0      	b.n	10017fde <_fclose_r+0x42>

1001805c <fclose>:
1001805c:	4b02      	ldr	r3, [pc, #8]	@ (10018068 <fclose+0xc>)
1001805e:	4601      	mov	r1, r0
10018060:	6818      	ldr	r0, [r3, #0]
10018062:	f7ff bf9b 	b.w	10017f9c <_fclose_r>
10018066:	bf00      	nop
10018068:	20000598 	.word	0x20000598

1001806c <_realloc_r>:
1001806c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10018070:	4616      	mov	r6, r2
10018072:	2900      	cmp	r1, #0
10018074:	f000 8096 	beq.w	100181a4 <_realloc_r+0x138>
10018078:	460c      	mov	r4, r1
1001807a:	4680      	mov	r8, r0
1001807c:	f106 050b 	add.w	r5, r6, #11
10018080:	f7ff ff20 	bl	10017ec4 <__malloc_lock>
10018084:	f854 1c04 	ldr.w	r1, [r4, #-4]
10018088:	2d16      	cmp	r5, #22
1001808a:	f1a4 0908 	sub.w	r9, r4, #8
1001808e:	f021 0703 	bic.w	r7, r1, #3
10018092:	d858      	bhi.n	10018146 <_realloc_r+0xda>
10018094:	2510      	movs	r5, #16
10018096:	42ae      	cmp	r6, r5
10018098:	d858      	bhi.n	1001814c <_realloc_r+0xe0>
1001809a:	42af      	cmp	r7, r5
1001809c:	da60      	bge.n	10018160 <_realloc_r+0xf4>
1001809e:	4bbe      	ldr	r3, [pc, #760]	@ (10018398 <_realloc_r+0x32c>)
100180a0:	689a      	ldr	r2, [r3, #8]
100180a2:	eb09 0c07 	add.w	ip, r9, r7
100180a6:	4562      	cmp	r2, ip
100180a8:	f8dc 0004 	ldr.w	r0, [ip, #4]
100180ac:	f000 8090 	beq.w	100181d0 <_realloc_r+0x164>
100180b0:	f020 0301 	bic.w	r3, r0, #1
100180b4:	4463      	add	r3, ip
100180b6:	685b      	ldr	r3, [r3, #4]
100180b8:	07da      	lsls	r2, r3, #31
100180ba:	d468      	bmi.n	1001818e <_realloc_r+0x122>
100180bc:	f020 0003 	bic.w	r0, r0, #3
100180c0:	183b      	adds	r3, r7, r0
100180c2:	429d      	cmp	r5, r3
100180c4:	dd47      	ble.n	10018156 <_realloc_r+0xea>
100180c6:	07cb      	lsls	r3, r1, #31
100180c8:	d412      	bmi.n	100180f0 <_realloc_r+0x84>
100180ca:	f854 3c08 	ldr.w	r3, [r4, #-8]
100180ce:	eba9 0b03 	sub.w	fp, r9, r3
100180d2:	f8db 3004 	ldr.w	r3, [fp, #4]
100180d6:	f023 0203 	bic.w	r2, r3, #3
100180da:	4410      	add	r0, r2
100180dc:	eb00 0a07 	add.w	sl, r0, r7
100180e0:	4555      	cmp	r5, sl
100180e2:	f340 80f6 	ble.w	100182d2 <_realloc_r+0x266>
100180e6:	eb07 0a02 	add.w	sl, r7, r2
100180ea:	4555      	cmp	r5, sl
100180ec:	f340 80cc 	ble.w	10018288 <_realloc_r+0x21c>
100180f0:	4631      	mov	r1, r6
100180f2:	4640      	mov	r0, r8
100180f4:	f7fc fd50 	bl	10014b98 <_malloc_r>
100180f8:	4606      	mov	r6, r0
100180fa:	2800      	cmp	r0, #0
100180fc:	f000 8120 	beq.w	10018340 <_realloc_r+0x2d4>
10018100:	f854 3c04 	ldr.w	r3, [r4, #-4]
10018104:	f023 0301 	bic.w	r3, r3, #1
10018108:	444b      	add	r3, r9
1001810a:	f1a0 0208 	sub.w	r2, r0, #8
1001810e:	4293      	cmp	r3, r2
10018110:	f000 80b4 	beq.w	1001827c <_realloc_r+0x210>
10018114:	1f3a      	subs	r2, r7, #4
10018116:	2a24      	cmp	r2, #36	@ 0x24
10018118:	f200 80d7 	bhi.w	100182ca <_realloc_r+0x25e>
1001811c:	2a13      	cmp	r2, #19
1001811e:	f200 80a2 	bhi.w	10018266 <_realloc_r+0x1fa>
10018122:	4603      	mov	r3, r0
10018124:	4622      	mov	r2, r4
10018126:	6811      	ldr	r1, [r2, #0]
10018128:	6019      	str	r1, [r3, #0]
1001812a:	6851      	ldr	r1, [r2, #4]
1001812c:	6059      	str	r1, [r3, #4]
1001812e:	6892      	ldr	r2, [r2, #8]
10018130:	609a      	str	r2, [r3, #8]
10018132:	4621      	mov	r1, r4
10018134:	4640      	mov	r0, r8
10018136:	f002 ff43 	bl	1001afc0 <_free_r>
1001813a:	4640      	mov	r0, r8
1001813c:	f7ff fec8 	bl	10017ed0 <__malloc_unlock>
10018140:	4630      	mov	r0, r6
10018142:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
10018146:	f035 0507 	bics.w	r5, r5, #7
1001814a:	d5a4      	bpl.n	10018096 <_realloc_r+0x2a>
1001814c:	230c      	movs	r3, #12
1001814e:	f8c8 3000 	str.w	r3, [r8]
10018152:	2600      	movs	r6, #0
10018154:	e018      	b.n	10018188 <_realloc_r+0x11c>
10018156:	461f      	mov	r7, r3
10018158:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
1001815c:	60d3      	str	r3, [r2, #12]
1001815e:	609a      	str	r2, [r3, #8]
10018160:	f8d9 3004 	ldr.w	r3, [r9, #4]
10018164:	1b7a      	subs	r2, r7, r5
10018166:	2a0f      	cmp	r2, #15
10018168:	f003 0301 	and.w	r3, r3, #1
1001816c:	eb09 0007 	add.w	r0, r9, r7
10018170:	d81d      	bhi.n	100181ae <_realloc_r+0x142>
10018172:	433b      	orrs	r3, r7
10018174:	f8c9 3004 	str.w	r3, [r9, #4]
10018178:	6843      	ldr	r3, [r0, #4]
1001817a:	f043 0301 	orr.w	r3, r3, #1
1001817e:	6043      	str	r3, [r0, #4]
10018180:	4640      	mov	r0, r8
10018182:	f7ff fea5 	bl	10017ed0 <__malloc_unlock>
10018186:	4626      	mov	r6, r4
10018188:	4630      	mov	r0, r6
1001818a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001818e:	07c9      	lsls	r1, r1, #31
10018190:	d4ae      	bmi.n	100180f0 <_realloc_r+0x84>
10018192:	f854 3c08 	ldr.w	r3, [r4, #-8]
10018196:	eba9 0b03 	sub.w	fp, r9, r3
1001819a:	f8db 3004 	ldr.w	r3, [fp, #4]
1001819e:	f023 0203 	bic.w	r2, r3, #3
100181a2:	e7a0      	b.n	100180e6 <_realloc_r+0x7a>
100181a4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
100181a8:	4611      	mov	r1, r2
100181aa:	f7fc bcf5 	b.w	10014b98 <_malloc_r>
100181ae:	eb09 0105 	add.w	r1, r9, r5
100181b2:	432b      	orrs	r3, r5
100181b4:	f042 0201 	orr.w	r2, r2, #1
100181b8:	f8c9 3004 	str.w	r3, [r9, #4]
100181bc:	604a      	str	r2, [r1, #4]
100181be:	6843      	ldr	r3, [r0, #4]
100181c0:	f043 0301 	orr.w	r3, r3, #1
100181c4:	6043      	str	r3, [r0, #4]
100181c6:	3108      	adds	r1, #8
100181c8:	4640      	mov	r0, r8
100181ca:	f002 fef9 	bl	1001afc0 <_free_r>
100181ce:	e7d7      	b.n	10018180 <_realloc_r+0x114>
100181d0:	f020 0003 	bic.w	r0, r0, #3
100181d4:	19c2      	adds	r2, r0, r7
100181d6:	f105 0c10 	add.w	ip, r5, #16
100181da:	4562      	cmp	r2, ip
100181dc:	f280 8091 	bge.w	10018302 <_realloc_r+0x296>
100181e0:	07ca      	lsls	r2, r1, #31
100181e2:	d485      	bmi.n	100180f0 <_realloc_r+0x84>
100181e4:	f854 2c08 	ldr.w	r2, [r4, #-8]
100181e8:	eba9 0b02 	sub.w	fp, r9, r2
100181ec:	f8db 2004 	ldr.w	r2, [fp, #4]
100181f0:	f022 0203 	bic.w	r2, r2, #3
100181f4:	4410      	add	r0, r2
100181f6:	eb00 0a07 	add.w	sl, r0, r7
100181fa:	45d4      	cmp	ip, sl
100181fc:	f73f af73 	bgt.w	100180e6 <_realloc_r+0x7a>
10018200:	465e      	mov	r6, fp
10018202:	f8db 100c 	ldr.w	r1, [fp, #12]
10018206:	f856 0f08 	ldr.w	r0, [r6, #8]!
1001820a:	1f3a      	subs	r2, r7, #4
1001820c:	2a24      	cmp	r2, #36	@ 0x24
1001820e:	60c1      	str	r1, [r0, #12]
10018210:	6088      	str	r0, [r1, #8]
10018212:	f200 80ae 	bhi.w	10018372 <_realloc_r+0x306>
10018216:	2a13      	cmp	r2, #19
10018218:	f240 80a9 	bls.w	1001836e <_realloc_r+0x302>
1001821c:	6821      	ldr	r1, [r4, #0]
1001821e:	f8cb 1008 	str.w	r1, [fp, #8]
10018222:	6861      	ldr	r1, [r4, #4]
10018224:	f8cb 100c 	str.w	r1, [fp, #12]
10018228:	2a1b      	cmp	r2, #27
1001822a:	f200 80a8 	bhi.w	1001837e <_realloc_r+0x312>
1001822e:	3408      	adds	r4, #8
10018230:	f10b 0210 	add.w	r2, fp, #16
10018234:	6821      	ldr	r1, [r4, #0]
10018236:	6011      	str	r1, [r2, #0]
10018238:	6861      	ldr	r1, [r4, #4]
1001823a:	6051      	str	r1, [r2, #4]
1001823c:	68a1      	ldr	r1, [r4, #8]
1001823e:	6091      	str	r1, [r2, #8]
10018240:	eb0b 0105 	add.w	r1, fp, r5
10018244:	ebaa 0205 	sub.w	r2, sl, r5
10018248:	f042 0201 	orr.w	r2, r2, #1
1001824c:	6099      	str	r1, [r3, #8]
1001824e:	604a      	str	r2, [r1, #4]
10018250:	f8db 3004 	ldr.w	r3, [fp, #4]
10018254:	f003 0301 	and.w	r3, r3, #1
10018258:	432b      	orrs	r3, r5
1001825a:	4640      	mov	r0, r8
1001825c:	f8cb 3004 	str.w	r3, [fp, #4]
10018260:	f7ff fe36 	bl	10017ed0 <__malloc_unlock>
10018264:	e790      	b.n	10018188 <_realloc_r+0x11c>
10018266:	6823      	ldr	r3, [r4, #0]
10018268:	6003      	str	r3, [r0, #0]
1001826a:	6863      	ldr	r3, [r4, #4]
1001826c:	6043      	str	r3, [r0, #4]
1001826e:	2a1b      	cmp	r2, #27
10018270:	d83c      	bhi.n	100182ec <_realloc_r+0x280>
10018272:	f104 0208 	add.w	r2, r4, #8
10018276:	f100 0308 	add.w	r3, r0, #8
1001827a:	e754      	b.n	10018126 <_realloc_r+0xba>
1001827c:	f850 3c04 	ldr.w	r3, [r0, #-4]
10018280:	f023 0303 	bic.w	r3, r3, #3
10018284:	441f      	add	r7, r3
10018286:	e76b      	b.n	10018160 <_realloc_r+0xf4>
10018288:	1f3a      	subs	r2, r7, #4
1001828a:	465e      	mov	r6, fp
1001828c:	f8db 300c 	ldr.w	r3, [fp, #12]
10018290:	f856 1f08 	ldr.w	r1, [r6, #8]!
10018294:	2a24      	cmp	r2, #36	@ 0x24
10018296:	60cb      	str	r3, [r1, #12]
10018298:	6099      	str	r1, [r3, #8]
1001829a:	d822      	bhi.n	100182e2 <_realloc_r+0x276>
1001829c:	2a13      	cmp	r2, #19
1001829e:	d91e      	bls.n	100182de <_realloc_r+0x272>
100182a0:	6823      	ldr	r3, [r4, #0]
100182a2:	f8cb 3008 	str.w	r3, [fp, #8]
100182a6:	6863      	ldr	r3, [r4, #4]
100182a8:	f8cb 300c 	str.w	r3, [fp, #12]
100182ac:	2a1b      	cmp	r2, #27
100182ae:	d83b      	bhi.n	10018328 <_realloc_r+0x2bc>
100182b0:	3408      	adds	r4, #8
100182b2:	f10b 0310 	add.w	r3, fp, #16
100182b6:	6822      	ldr	r2, [r4, #0]
100182b8:	601a      	str	r2, [r3, #0]
100182ba:	6862      	ldr	r2, [r4, #4]
100182bc:	605a      	str	r2, [r3, #4]
100182be:	68a2      	ldr	r2, [r4, #8]
100182c0:	609a      	str	r2, [r3, #8]
100182c2:	4634      	mov	r4, r6
100182c4:	4657      	mov	r7, sl
100182c6:	46d9      	mov	r9, fp
100182c8:	e74a      	b.n	10018160 <_realloc_r+0xf4>
100182ca:	4621      	mov	r1, r4
100182cc:	f001 f8f6 	bl	100194bc <memmove>
100182d0:	e72f      	b.n	10018132 <_realloc_r+0xc6>
100182d2:	e9dc 1302 	ldrd	r1, r3, [ip, #8]
100182d6:	1f3a      	subs	r2, r7, #4
100182d8:	60cb      	str	r3, [r1, #12]
100182da:	6099      	str	r1, [r3, #8]
100182dc:	e7d5      	b.n	1001828a <_realloc_r+0x21e>
100182de:	4633      	mov	r3, r6
100182e0:	e7e9      	b.n	100182b6 <_realloc_r+0x24a>
100182e2:	4621      	mov	r1, r4
100182e4:	4630      	mov	r0, r6
100182e6:	f001 f8e9 	bl	100194bc <memmove>
100182ea:	e7ea      	b.n	100182c2 <_realloc_r+0x256>
100182ec:	68a3      	ldr	r3, [r4, #8]
100182ee:	6083      	str	r3, [r0, #8]
100182f0:	68e3      	ldr	r3, [r4, #12]
100182f2:	60c3      	str	r3, [r0, #12]
100182f4:	2a24      	cmp	r2, #36	@ 0x24
100182f6:	d027      	beq.n	10018348 <_realloc_r+0x2dc>
100182f8:	f104 0210 	add.w	r2, r4, #16
100182fc:	f100 0310 	add.w	r3, r0, #16
10018300:	e711      	b.n	10018126 <_realloc_r+0xba>
10018302:	eb09 0105 	add.w	r1, r9, r5
10018306:	6099      	str	r1, [r3, #8]
10018308:	1b53      	subs	r3, r2, r5
1001830a:	f043 0301 	orr.w	r3, r3, #1
1001830e:	604b      	str	r3, [r1, #4]
10018310:	f854 3c04 	ldr.w	r3, [r4, #-4]
10018314:	f003 0301 	and.w	r3, r3, #1
10018318:	432b      	orrs	r3, r5
1001831a:	4640      	mov	r0, r8
1001831c:	f844 3c04 	str.w	r3, [r4, #-4]
10018320:	f7ff fdd6 	bl	10017ed0 <__malloc_unlock>
10018324:	4626      	mov	r6, r4
10018326:	e72f      	b.n	10018188 <_realloc_r+0x11c>
10018328:	68a3      	ldr	r3, [r4, #8]
1001832a:	f8cb 3010 	str.w	r3, [fp, #16]
1001832e:	68e3      	ldr	r3, [r4, #12]
10018330:	f8cb 3014 	str.w	r3, [fp, #20]
10018334:	2a24      	cmp	r2, #36	@ 0x24
10018336:	d010      	beq.n	1001835a <_realloc_r+0x2ee>
10018338:	3410      	adds	r4, #16
1001833a:	f10b 0318 	add.w	r3, fp, #24
1001833e:	e7ba      	b.n	100182b6 <_realloc_r+0x24a>
10018340:	4640      	mov	r0, r8
10018342:	f7ff fdc5 	bl	10017ed0 <__malloc_unlock>
10018346:	e704      	b.n	10018152 <_realloc_r+0xe6>
10018348:	6923      	ldr	r3, [r4, #16]
1001834a:	6103      	str	r3, [r0, #16]
1001834c:	6961      	ldr	r1, [r4, #20]
1001834e:	6141      	str	r1, [r0, #20]
10018350:	f104 0218 	add.w	r2, r4, #24
10018354:	f100 0318 	add.w	r3, r0, #24
10018358:	e6e5      	b.n	10018126 <_realloc_r+0xba>
1001835a:	6923      	ldr	r3, [r4, #16]
1001835c:	f8cb 3018 	str.w	r3, [fp, #24]
10018360:	6963      	ldr	r3, [r4, #20]
10018362:	f8cb 301c 	str.w	r3, [fp, #28]
10018366:	3418      	adds	r4, #24
10018368:	f10b 0320 	add.w	r3, fp, #32
1001836c:	e7a3      	b.n	100182b6 <_realloc_r+0x24a>
1001836e:	4632      	mov	r2, r6
10018370:	e760      	b.n	10018234 <_realloc_r+0x1c8>
10018372:	4621      	mov	r1, r4
10018374:	4630      	mov	r0, r6
10018376:	f001 f8a1 	bl	100194bc <memmove>
1001837a:	4b07      	ldr	r3, [pc, #28]	@ (10018398 <_realloc_r+0x32c>)
1001837c:	e760      	b.n	10018240 <_realloc_r+0x1d4>
1001837e:	68a1      	ldr	r1, [r4, #8]
10018380:	f8cb 1010 	str.w	r1, [fp, #16]
10018384:	68e1      	ldr	r1, [r4, #12]
10018386:	f8cb 1014 	str.w	r1, [fp, #20]
1001838a:	2a24      	cmp	r2, #36	@ 0x24
1001838c:	d006      	beq.n	1001839c <_realloc_r+0x330>
1001838e:	3410      	adds	r4, #16
10018390:	f10b 0218 	add.w	r2, fp, #24
10018394:	e74e      	b.n	10018234 <_realloc_r+0x1c8>
10018396:	bf00      	nop
10018398:	20000018 	.word	0x20000018
1001839c:	6922      	ldr	r2, [r4, #16]
1001839e:	f8cb 2018 	str.w	r2, [fp, #24]
100183a2:	6962      	ldr	r2, [r4, #20]
100183a4:	f8cb 201c 	str.w	r2, [fp, #28]
100183a8:	3418      	adds	r4, #24
100183aa:	f10b 0220 	add.w	r2, fp, #32
100183ae:	e741      	b.n	10018234 <_realloc_r+0x1c8>

100183b0 <__sflush_r>:
100183b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
100183b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100183b6:	4607      	mov	r7, r0
100183b8:	0710      	lsls	r0, r2, #28
100183ba:	460c      	mov	r4, r1
100183bc:	d446      	bmi.n	1001844c <__sflush_r+0x9c>
100183be:	6849      	ldr	r1, [r1, #4]
100183c0:	f442 6300 	orr.w	r3, r2, #2048	@ 0x800
100183c4:	2900      	cmp	r1, #0
100183c6:	81a3      	strh	r3, [r4, #12]
100183c8:	dd5c      	ble.n	10018484 <__sflush_r+0xd4>
100183ca:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
100183cc:	2d00      	cmp	r5, #0
100183ce:	d03b      	beq.n	10018448 <__sflush_r+0x98>
100183d0:	2100      	movs	r1, #0
100183d2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
100183d6:	683e      	ldr	r6, [r7, #0]
100183d8:	6039      	str	r1, [r7, #0]
100183da:	69e1      	ldr	r1, [r4, #28]
100183dc:	d15e      	bne.n	1001849c <__sflush_r+0xec>
100183de:	2301      	movs	r3, #1
100183e0:	4638      	mov	r0, r7
100183e2:	47a8      	blx	r5
100183e4:	1c41      	adds	r1, r0, #1
100183e6:	4602      	mov	r2, r0
100183e8:	d068      	beq.n	100184bc <__sflush_r+0x10c>
100183ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100183ee:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
100183f0:	69e1      	ldr	r1, [r4, #28]
100183f2:	075b      	lsls	r3, r3, #29
100183f4:	d505      	bpl.n	10018402 <__sflush_r+0x52>
100183f6:	6863      	ldr	r3, [r4, #4]
100183f8:	1ad2      	subs	r2, r2, r3
100183fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
100183fc:	b10b      	cbz	r3, 10018402 <__sflush_r+0x52>
100183fe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
10018400:	1ad2      	subs	r2, r2, r3
10018402:	2300      	movs	r3, #0
10018404:	4638      	mov	r0, r7
10018406:	47a8      	blx	r5
10018408:	1c45      	adds	r5, r0, #1
1001840a:	d149      	bne.n	100184a0 <__sflush_r+0xf0>
1001840c:	6839      	ldr	r1, [r7, #0]
1001840e:	291d      	cmp	r1, #29
10018410:	d83c      	bhi.n	1001848c <__sflush_r+0xdc>
10018412:	4a30      	ldr	r2, [pc, #192]	@ (100184d4 <__sflush_r+0x124>)
10018414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10018418:	410a      	asrs	r2, r1
1001841a:	f012 0201 	ands.w	r2, r2, #1
1001841e:	d137      	bne.n	10018490 <__sflush_r+0xe0>
10018420:	6062      	str	r2, [r4, #4]
10018422:	6922      	ldr	r2, [r4, #16]
10018424:	6022      	str	r2, [r4, #0]
10018426:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
1001842a:	81a2      	strh	r2, [r4, #12]
1001842c:	04da      	lsls	r2, r3, #19
1001842e:	d44e      	bmi.n	100184ce <__sflush_r+0x11e>
10018430:	6b21      	ldr	r1, [r4, #48]	@ 0x30
10018432:	603e      	str	r6, [r7, #0]
10018434:	b141      	cbz	r1, 10018448 <__sflush_r+0x98>
10018436:	f104 0340 	add.w	r3, r4, #64	@ 0x40
1001843a:	4299      	cmp	r1, r3
1001843c:	d002      	beq.n	10018444 <__sflush_r+0x94>
1001843e:	4638      	mov	r0, r7
10018440:	f002 fdbe 	bl	1001afc0 <_free_r>
10018444:	2300      	movs	r3, #0
10018446:	6323      	str	r3, [r4, #48]	@ 0x30
10018448:	2000      	movs	r0, #0
1001844a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001844c:	690e      	ldr	r6, [r1, #16]
1001844e:	2e00      	cmp	r6, #0
10018450:	d0fa      	beq.n	10018448 <__sflush_r+0x98>
10018452:	680d      	ldr	r5, [r1, #0]
10018454:	600e      	str	r6, [r1, #0]
10018456:	0791      	lsls	r1, r2, #30
10018458:	bf0c      	ite	eq
1001845a:	6963      	ldreq	r3, [r4, #20]
1001845c:	2300      	movne	r3, #0
1001845e:	1bad      	subs	r5, r5, r6
10018460:	60a3      	str	r3, [r4, #8]
10018462:	e00c      	b.n	1001847e <__sflush_r+0xce>
10018464:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
10018468:	69e1      	ldr	r1, [r4, #28]
1001846a:	462b      	mov	r3, r5
1001846c:	4632      	mov	r2, r6
1001846e:	4638      	mov	r0, r7
10018470:	47e0      	blx	ip
10018472:	f1b0 0c00 	subs.w	ip, r0, #0
10018476:	eba5 050c 	sub.w	r5, r5, ip
1001847a:	4466      	add	r6, ip
1001847c:	dd06      	ble.n	1001848c <__sflush_r+0xdc>
1001847e:	2d00      	cmp	r5, #0
10018480:	dcf0      	bgt.n	10018464 <__sflush_r+0xb4>
10018482:	e7e1      	b.n	10018448 <__sflush_r+0x98>
10018484:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
10018486:	2900      	cmp	r1, #0
10018488:	dc9f      	bgt.n	100183ca <__sflush_r+0x1a>
1001848a:	e7dd      	b.n	10018448 <__sflush_r+0x98>
1001848c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10018490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10018494:	81a3      	strh	r3, [r4, #12]
10018496:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001849a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001849c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
1001849e:	e7a8      	b.n	100183f2 <__sflush_r+0x42>
100184a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100184a4:	6922      	ldr	r2, [r4, #16]
100184a6:	6022      	str	r2, [r4, #0]
100184a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
100184ac:	81a2      	strh	r2, [r4, #12]
100184ae:	04db      	lsls	r3, r3, #19
100184b0:	f04f 0200 	mov.w	r2, #0
100184b4:	6062      	str	r2, [r4, #4]
100184b6:	d5bb      	bpl.n	10018430 <__sflush_r+0x80>
100184b8:	6520      	str	r0, [r4, #80]	@ 0x50
100184ba:	e7b9      	b.n	10018430 <__sflush_r+0x80>
100184bc:	683b      	ldr	r3, [r7, #0]
100184be:	2b00      	cmp	r3, #0
100184c0:	d093      	beq.n	100183ea <__sflush_r+0x3a>
100184c2:	2b1d      	cmp	r3, #29
100184c4:	d001      	beq.n	100184ca <__sflush_r+0x11a>
100184c6:	2b16      	cmp	r3, #22
100184c8:	d1e0      	bne.n	1001848c <__sflush_r+0xdc>
100184ca:	603e      	str	r6, [r7, #0]
100184cc:	e7bc      	b.n	10018448 <__sflush_r+0x98>
100184ce:	2900      	cmp	r1, #0
100184d0:	d1ae      	bne.n	10018430 <__sflush_r+0x80>
100184d2:	e7f1      	b.n	100184b8 <__sflush_r+0x108>
100184d4:	dfbffffe 	.word	0xdfbffffe

100184d8 <_fflush_r>:
100184d8:	b538      	push	{r3, r4, r5, lr}
100184da:	460c      	mov	r4, r1
100184dc:	4605      	mov	r5, r0
100184de:	b108      	cbz	r0, 100184e4 <_fflush_r+0xc>
100184e0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
100184e2:	b303      	cbz	r3, 10018526 <_fflush_r+0x4e>
100184e4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
100184e8:	b188      	cbz	r0, 1001850e <_fflush_r+0x36>
100184ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100184ec:	07db      	lsls	r3, r3, #31
100184ee:	d401      	bmi.n	100184f4 <_fflush_r+0x1c>
100184f0:	0581      	lsls	r1, r0, #22
100184f2:	d50f      	bpl.n	10018514 <_fflush_r+0x3c>
100184f4:	4628      	mov	r0, r5
100184f6:	4621      	mov	r1, r4
100184f8:	f7ff ff5a 	bl	100183b0 <__sflush_r>
100184fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100184fe:	07da      	lsls	r2, r3, #31
10018500:	4605      	mov	r5, r0
10018502:	d402      	bmi.n	1001850a <_fflush_r+0x32>
10018504:	89a3      	ldrh	r3, [r4, #12]
10018506:	059b      	lsls	r3, r3, #22
10018508:	d508      	bpl.n	1001851c <_fflush_r+0x44>
1001850a:	4628      	mov	r0, r5
1001850c:	bd38      	pop	{r3, r4, r5, pc}
1001850e:	4605      	mov	r5, r0
10018510:	4628      	mov	r0, r5
10018512:	bd38      	pop	{r3, r4, r5, pc}
10018514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018516:	f001 fb2f 	bl	10019b78 <__retarget_lock_acquire_recursive>
1001851a:	e7eb      	b.n	100184f4 <_fflush_r+0x1c>
1001851c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001851e:	f001 fb2d 	bl	10019b7c <__retarget_lock_release_recursive>
10018522:	4628      	mov	r0, r5
10018524:	bd38      	pop	{r3, r4, r5, pc}
10018526:	f000 f9b3 	bl	10018890 <__sinit>
1001852a:	e7db      	b.n	100184e4 <_fflush_r+0xc>

1001852c <fflush>:
1001852c:	b350      	cbz	r0, 10018584 <fflush+0x58>
1001852e:	b538      	push	{r3, r4, r5, lr}
10018530:	4b17      	ldr	r3, [pc, #92]	@ (10018590 <fflush+0x64>)
10018532:	681d      	ldr	r5, [r3, #0]
10018534:	4604      	mov	r4, r0
10018536:	b10d      	cbz	r5, 1001853c <fflush+0x10>
10018538:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
1001853a:	b1bb      	cbz	r3, 1001856c <fflush+0x40>
1001853c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
10018540:	b188      	cbz	r0, 10018566 <fflush+0x3a>
10018542:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10018544:	07db      	lsls	r3, r3, #31
10018546:	d401      	bmi.n	1001854c <fflush+0x20>
10018548:	0581      	lsls	r1, r0, #22
1001854a:	d513      	bpl.n	10018574 <fflush+0x48>
1001854c:	4628      	mov	r0, r5
1001854e:	4621      	mov	r1, r4
10018550:	f7ff ff2e 	bl	100183b0 <__sflush_r>
10018554:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10018556:	07da      	lsls	r2, r3, #31
10018558:	4605      	mov	r5, r0
1001855a:	d402      	bmi.n	10018562 <fflush+0x36>
1001855c:	89a3      	ldrh	r3, [r4, #12]
1001855e:	059b      	lsls	r3, r3, #22
10018560:	d50c      	bpl.n	1001857c <fflush+0x50>
10018562:	4628      	mov	r0, r5
10018564:	bd38      	pop	{r3, r4, r5, pc}
10018566:	4605      	mov	r5, r0
10018568:	4628      	mov	r0, r5
1001856a:	bd38      	pop	{r3, r4, r5, pc}
1001856c:	4628      	mov	r0, r5
1001856e:	f000 f98f 	bl	10018890 <__sinit>
10018572:	e7e3      	b.n	1001853c <fflush+0x10>
10018574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018576:	f001 faff 	bl	10019b78 <__retarget_lock_acquire_recursive>
1001857a:	e7e7      	b.n	1001854c <fflush+0x20>
1001857c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001857e:	f001 fafd 	bl	10019b7c <__retarget_lock_release_recursive>
10018582:	e7ee      	b.n	10018562 <fflush+0x36>
10018584:	4a03      	ldr	r2, [pc, #12]	@ (10018594 <fflush+0x68>)
10018586:	4904      	ldr	r1, [pc, #16]	@ (10018598 <fflush+0x6c>)
10018588:	4804      	ldr	r0, [pc, #16]	@ (1001859c <fflush+0x70>)
1001858a:	f000 bc79 	b.w	10018e80 <_fwalk_sglue>
1001858e:	bf00      	nop
10018590:	20000598 	.word	0x20000598
10018594:	20000420 	.word	0x20000420
10018598:	100184d9 	.word	0x100184d9
1001859c:	200005a0 	.word	0x200005a0

100185a0 <sscanf>:
100185a0:	b40e      	push	{r1, r2, r3}
100185a2:	b530      	push	{r4, r5, lr}
100185a4:	b09c      	sub	sp, #112	@ 0x70
100185a6:	ac1f      	add	r4, sp, #124	@ 0x7c
100185a8:	f44f 7201 	mov.w	r2, #516	@ 0x204
100185ac:	f854 5b04 	ldr.w	r5, [r4], #4
100185b0:	f8ad 2014 	strh.w	r2, [sp, #20]
100185b4:	9002      	str	r0, [sp, #8]
100185b6:	9006      	str	r0, [sp, #24]
100185b8:	f001 fbe2 	bl	10019d80 <strlen>
100185bc:	9003      	str	r0, [sp, #12]
100185be:	9007      	str	r0, [sp, #28]
100185c0:	480a      	ldr	r0, [pc, #40]	@ (100185ec <sscanf+0x4c>)
100185c2:	490b      	ldr	r1, [pc, #44]	@ (100185f0 <sscanf+0x50>)
100185c4:	910a      	str	r1, [sp, #40]	@ 0x28
100185c6:	2300      	movs	r3, #0
100185c8:	f64f 7cff 	movw	ip, #65535	@ 0xffff
100185cc:	930e      	str	r3, [sp, #56]	@ 0x38
100185ce:	9313      	str	r3, [sp, #76]	@ 0x4c
100185d0:	462a      	mov	r2, r5
100185d2:	4623      	mov	r3, r4
100185d4:	a902      	add	r1, sp, #8
100185d6:	6800      	ldr	r0, [r0, #0]
100185d8:	f8ad c016 	strh.w	ip, [sp, #22]
100185dc:	9401      	str	r4, [sp, #4]
100185de:	f004 fc3d 	bl	1001ce5c <__ssvfscanf_r>
100185e2:	b01c      	add	sp, #112	@ 0x70
100185e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
100185e8:	b003      	add	sp, #12
100185ea:	4770      	bx	lr
100185ec:	20000598 	.word	0x20000598
100185f0:	10018619 	.word	0x10018619

100185f4 <__sread>:
100185f4:	b510      	push	{r4, lr}
100185f6:	460c      	mov	r4, r1
100185f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
100185fc:	f001 f8c2 	bl	10019784 <_read_r>
10018600:	2800      	cmp	r0, #0
10018602:	db03      	blt.n	1001860c <__sread+0x18>
10018604:	6d23      	ldr	r3, [r4, #80]	@ 0x50
10018606:	4403      	add	r3, r0
10018608:	6523      	str	r3, [r4, #80]	@ 0x50
1001860a:	bd10      	pop	{r4, pc}
1001860c:	89a3      	ldrh	r3, [r4, #12]
1001860e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
10018612:	81a3      	strh	r3, [r4, #12]
10018614:	bd10      	pop	{r4, pc}
10018616:	bf00      	nop

10018618 <__seofread>:
10018618:	2000      	movs	r0, #0
1001861a:	4770      	bx	lr

1001861c <__swrite>:
1001861c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10018620:	460c      	mov	r4, r1
10018622:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
10018626:	461f      	mov	r7, r3
10018628:	05cb      	lsls	r3, r1, #23
1001862a:	4605      	mov	r5, r0
1001862c:	4616      	mov	r6, r2
1001862e:	d40b      	bmi.n	10018648 <__swrite+0x2c>
10018630:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
10018634:	81a1      	strh	r1, [r4, #12]
10018636:	463b      	mov	r3, r7
10018638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1001863c:	4632      	mov	r2, r6
1001863e:	4628      	mov	r0, r5
10018640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
10018644:	f001 b8c6 	b.w	100197d4 <_write_r>
10018648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1001864c:	2302      	movs	r3, #2
1001864e:	2200      	movs	r2, #0
10018650:	f001 f86c 	bl	1001972c <_lseek_r>
10018654:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
10018658:	e7ea      	b.n	10018630 <__swrite+0x14>
1001865a:	bf00      	nop

1001865c <__sseek>:
1001865c:	b510      	push	{r4, lr}
1001865e:	460c      	mov	r4, r1
10018660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10018664:	f001 f862 	bl	1001972c <_lseek_r>
10018668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001866c:	1c42      	adds	r2, r0, #1
1001866e:	bf0e      	itee	eq
10018670:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
10018674:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
10018678:	6520      	strne	r0, [r4, #80]	@ 0x50
1001867a:	81a3      	strh	r3, [r4, #12]
1001867c:	bd10      	pop	{r4, pc}
1001867e:	bf00      	nop

10018680 <__sclose>:
10018680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10018684:	f001 b82a 	b.w	100196dc <_close_r>

10018688 <stdio_exit_handler>:
10018688:	4a02      	ldr	r2, [pc, #8]	@ (10018694 <stdio_exit_handler+0xc>)
1001868a:	4903      	ldr	r1, [pc, #12]	@ (10018698 <stdio_exit_handler+0x10>)
1001868c:	4803      	ldr	r0, [pc, #12]	@ (1001869c <stdio_exit_handler+0x14>)
1001868e:	f000 bbf7 	b.w	10018e80 <_fwalk_sglue>
10018692:	bf00      	nop
10018694:	20000420 	.word	0x20000420
10018698:	10017f9d 	.word	0x10017f9d
1001869c:	200005a0 	.word	0x200005a0

100186a0 <cleanup_stdio>:
100186a0:	4b0c      	ldr	r3, [pc, #48]	@ (100186d4 <cleanup_stdio+0x34>)
100186a2:	6841      	ldr	r1, [r0, #4]
100186a4:	4299      	cmp	r1, r3
100186a6:	b510      	push	{r4, lr}
100186a8:	4604      	mov	r4, r0
100186aa:	d001      	beq.n	100186b0 <cleanup_stdio+0x10>
100186ac:	f7ff fc76 	bl	10017f9c <_fclose_r>
100186b0:	68a1      	ldr	r1, [r4, #8]
100186b2:	4b09      	ldr	r3, [pc, #36]	@ (100186d8 <cleanup_stdio+0x38>)
100186b4:	4299      	cmp	r1, r3
100186b6:	d002      	beq.n	100186be <cleanup_stdio+0x1e>
100186b8:	4620      	mov	r0, r4
100186ba:	f7ff fc6f 	bl	10017f9c <_fclose_r>
100186be:	68e1      	ldr	r1, [r4, #12]
100186c0:	4b06      	ldr	r3, [pc, #24]	@ (100186dc <cleanup_stdio+0x3c>)
100186c2:	4299      	cmp	r1, r3
100186c4:	d004      	beq.n	100186d0 <cleanup_stdio+0x30>
100186c6:	4620      	mov	r0, r4
100186c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100186cc:	f7ff bc66 	b.w	10017f9c <_fclose_r>
100186d0:	bd10      	pop	{r4, pc}
100186d2:	bf00      	nop
100186d4:	20001488 	.word	0x20001488
100186d8:	200014f0 	.word	0x200014f0
100186dc:	20001558 	.word	0x20001558

100186e0 <global_stdio_init.part.0>:
100186e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
100186e4:	4c31      	ldr	r4, [pc, #196]	@ (100187ac <global_stdio_init.part.0+0xcc>)
100186e6:	4b32      	ldr	r3, [pc, #200]	@ (100187b0 <global_stdio_init.part.0+0xd0>)
100186e8:	4832      	ldr	r0, [pc, #200]	@ (100187b4 <global_stdio_init.part.0+0xd4>)
100186ea:	f8df 90cc 	ldr.w	r9, [pc, #204]	@ 100187b8 <global_stdio_init.part.0+0xd8>
100186ee:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 100187bc <global_stdio_init.part.0+0xdc>
100186f2:	4f33      	ldr	r7, [pc, #204]	@ (100187c0 <global_stdio_init.part.0+0xe0>)
100186f4:	6018      	str	r0, [r3, #0]
100186f6:	2500      	movs	r5, #0
100186f8:	4629      	mov	r1, r5
100186fa:	2304      	movs	r3, #4
100186fc:	2208      	movs	r2, #8
100186fe:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
10018702:	4e30      	ldr	r6, [pc, #192]	@ (100187c4 <global_stdio_init.part.0+0xe4>)
10018704:	60e3      	str	r3, [r4, #12]
10018706:	e9c4 5500 	strd	r5, r5, [r4]
1001870a:	e9c4 5504 	strd	r5, r5, [r4, #16]
1001870e:	60a5      	str	r5, [r4, #8]
10018710:	6665      	str	r5, [r4, #100]	@ 0x64
10018712:	61a5      	str	r5, [r4, #24]
10018714:	f000 ff52 	bl	100195bc <memset>
10018718:	f104 0058 	add.w	r0, r4, #88	@ 0x58
1001871c:	e9c4 4907 	strd	r4, r9, [r4, #28]
10018720:	e9c4 8709 	strd	r8, r7, [r4, #36]	@ 0x24
10018724:	62e6      	str	r6, [r4, #44]	@ 0x2c
10018726:	f001 fa23 	bl	10019b70 <__retarget_lock_init_recursive>
1001872a:	4629      	mov	r1, r5
1001872c:	4b26      	ldr	r3, [pc, #152]	@ (100187c8 <global_stdio_init.part.0+0xe8>)
1001872e:	6763      	str	r3, [r4, #116]	@ 0x74
10018730:	2208      	movs	r2, #8
10018732:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
10018736:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
1001873a:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
1001873e:	6725      	str	r5, [r4, #112]	@ 0x70
10018740:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
10018744:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
10018748:	f000 ff38 	bl	100195bc <memset>
1001874c:	f104 0368 	add.w	r3, r4, #104	@ 0x68
10018750:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
10018754:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
10018758:	e9c4 9822 	strd	r9, r8, [r4, #136]	@ 0x88
1001875c:	e9c4 7624 	strd	r7, r6, [r4, #144]	@ 0x90
10018760:	f001 fa06 	bl	10019b70 <__retarget_lock_init_recursive>
10018764:	4b19      	ldr	r3, [pc, #100]	@ (100187cc <global_stdio_init.part.0+0xec>)
10018766:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
1001876a:	4629      	mov	r1, r5
1001876c:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
10018770:	2208      	movs	r2, #8
10018772:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
10018776:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
1001877a:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
1001877e:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
10018782:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
10018786:	f000 ff19 	bl	100195bc <memset>
1001878a:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
1001878e:	e9c4 873d 	strd	r8, r7, [r4, #244]	@ 0xf4
10018792:	f8c4 90f0 	str.w	r9, [r4, #240]	@ 0xf0
10018796:	f504 7094 	add.w	r0, r4, #296	@ 0x128
1001879a:	f8c4 60fc 	str.w	r6, [r4, #252]	@ 0xfc
1001879e:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
100187a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
100187a6:	f001 b9e3 	b.w	10019b70 <__retarget_lock_init_recursive>
100187aa:	bf00      	nop
100187ac:	20001488 	.word	0x20001488
100187b0:	200015c0 	.word	0x200015c0
100187b4:	10018689 	.word	0x10018689
100187b8:	100185f5 	.word	0x100185f5
100187bc:	1001861d 	.word	0x1001861d
100187c0:	1001865d 	.word	0x1001865d
100187c4:	10018681 	.word	0x10018681
100187c8:	00010009 	.word	0x00010009
100187cc:	00020012 	.word	0x00020012

100187d0 <__sfp>:
100187d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100187d2:	4606      	mov	r6, r0
100187d4:	482a      	ldr	r0, [pc, #168]	@ (10018880 <__sfp+0xb0>)
100187d6:	f001 f9cf 	bl	10019b78 <__retarget_lock_acquire_recursive>
100187da:	4b2a      	ldr	r3, [pc, #168]	@ (10018884 <__sfp+0xb4>)
100187dc:	681b      	ldr	r3, [r3, #0]
100187de:	2b00      	cmp	r3, #0
100187e0:	d043      	beq.n	1001886a <__sfp+0x9a>
100187e2:	4f29      	ldr	r7, [pc, #164]	@ (10018888 <__sfp+0xb8>)
100187e4:	e9d7 3401 	ldrd	r3, r4, [r7, #4]
100187e8:	3b01      	subs	r3, #1
100187ea:	d504      	bpl.n	100187f6 <__sfp+0x26>
100187ec:	e024      	b.n	10018838 <__sfp+0x68>
100187ee:	1c5a      	adds	r2, r3, #1
100187f0:	f104 0468 	add.w	r4, r4, #104	@ 0x68
100187f4:	d020      	beq.n	10018838 <__sfp+0x68>
100187f6:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
100187fa:	3b01      	subs	r3, #1
100187fc:	2d00      	cmp	r5, #0
100187fe:	d1f6      	bne.n	100187ee <__sfp+0x1e>
10018800:	4b22      	ldr	r3, [pc, #136]	@ (1001888c <__sfp+0xbc>)
10018802:	60e3      	str	r3, [r4, #12]
10018804:	f104 0058 	add.w	r0, r4, #88	@ 0x58
10018808:	6665      	str	r5, [r4, #100]	@ 0x64
1001880a:	f001 f9b1 	bl	10019b70 <__retarget_lock_init_recursive>
1001880e:	481c      	ldr	r0, [pc, #112]	@ (10018880 <__sfp+0xb0>)
10018810:	f001 f9b4 	bl	10019b7c <__retarget_lock_release_recursive>
10018814:	e9c4 5501 	strd	r5, r5, [r4, #4]
10018818:	e9c4 5504 	strd	r5, r5, [r4, #16]
1001881c:	6025      	str	r5, [r4, #0]
1001881e:	61a5      	str	r5, [r4, #24]
10018820:	2208      	movs	r2, #8
10018822:	4629      	mov	r1, r5
10018824:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
10018828:	f000 fec8 	bl	100195bc <memset>
1001882c:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
10018830:	e9c4 5511 	strd	r5, r5, [r4, #68]	@ 0x44
10018834:	4620      	mov	r0, r4
10018836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10018838:	683d      	ldr	r5, [r7, #0]
1001883a:	b10d      	cbz	r5, 10018840 <__sfp+0x70>
1001883c:	462f      	mov	r7, r5
1001883e:	e7d1      	b.n	100187e4 <__sfp+0x14>
10018840:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
10018844:	4630      	mov	r0, r6
10018846:	f7fc f9a7 	bl	10014b98 <_malloc_r>
1001884a:	4604      	mov	r4, r0
1001884c:	b180      	cbz	r0, 10018870 <__sfp+0xa0>
1001884e:	2304      	movs	r3, #4
10018850:	6005      	str	r5, [r0, #0]
10018852:	6043      	str	r3, [r0, #4]
10018854:	300c      	adds	r0, #12
10018856:	4629      	mov	r1, r5
10018858:	60a0      	str	r0, [r4, #8]
1001885a:	4625      	mov	r5, r4
1001885c:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
10018860:	f000 feac 	bl	100195bc <memset>
10018864:	603c      	str	r4, [r7, #0]
10018866:	462f      	mov	r7, r5
10018868:	e7bc      	b.n	100187e4 <__sfp+0x14>
1001886a:	f7ff ff39 	bl	100186e0 <global_stdio_init.part.0>
1001886e:	e7b8      	b.n	100187e2 <__sfp+0x12>
10018870:	4803      	ldr	r0, [pc, #12]	@ (10018880 <__sfp+0xb0>)
10018872:	603c      	str	r4, [r7, #0]
10018874:	f001 f982 	bl	10019b7c <__retarget_lock_release_recursive>
10018878:	230c      	movs	r3, #12
1001887a:	6033      	str	r3, [r6, #0]
1001887c:	e7da      	b.n	10018834 <__sfp+0x64>
1001887e:	bf00      	nop
10018880:	200015d0 	.word	0x200015d0
10018884:	200015c0 	.word	0x200015c0
10018888:	20000420 	.word	0x20000420
1001888c:	ffff0001 	.word	0xffff0001

10018890 <__sinit>:
10018890:	b510      	push	{r4, lr}
10018892:	4604      	mov	r4, r0
10018894:	480a      	ldr	r0, [pc, #40]	@ (100188c0 <__sinit+0x30>)
10018896:	f001 f96f 	bl	10019b78 <__retarget_lock_acquire_recursive>
1001889a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1001889c:	b923      	cbnz	r3, 100188a8 <__sinit+0x18>
1001889e:	4b09      	ldr	r3, [pc, #36]	@ (100188c4 <__sinit+0x34>)
100188a0:	4a09      	ldr	r2, [pc, #36]	@ (100188c8 <__sinit+0x38>)
100188a2:	681b      	ldr	r3, [r3, #0]
100188a4:	6362      	str	r2, [r4, #52]	@ 0x34
100188a6:	b123      	cbz	r3, 100188b2 <__sinit+0x22>
100188a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100188ac:	4804      	ldr	r0, [pc, #16]	@ (100188c0 <__sinit+0x30>)
100188ae:	f001 b965 	b.w	10019b7c <__retarget_lock_release_recursive>
100188b2:	f7ff ff15 	bl	100186e0 <global_stdio_init.part.0>
100188b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100188ba:	4801      	ldr	r0, [pc, #4]	@ (100188c0 <__sinit+0x30>)
100188bc:	f001 b95e 	b.w	10019b7c <__retarget_lock_release_recursive>
100188c0:	200015d0 	.word	0x200015d0
100188c4:	200015c0 	.word	0x200015c0
100188c8:	100186a1 	.word	0x100186a1

100188cc <__sfp_lock_acquire>:
100188cc:	4801      	ldr	r0, [pc, #4]	@ (100188d4 <__sfp_lock_acquire+0x8>)
100188ce:	f001 b953 	b.w	10019b78 <__retarget_lock_acquire_recursive>
100188d2:	bf00      	nop
100188d4:	200015d0 	.word	0x200015d0

100188d8 <__sfp_lock_release>:
100188d8:	4801      	ldr	r0, [pc, #4]	@ (100188e0 <__sfp_lock_release+0x8>)
100188da:	f001 b94f 	b.w	10019b7c <__retarget_lock_release_recursive>
100188de:	bf00      	nop
100188e0:	200015d0 	.word	0x200015d0

100188e4 <_fopen_r>:
100188e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100188e6:	4614      	mov	r4, r2
100188e8:	b083      	sub	sp, #12
100188ea:	460f      	mov	r7, r1
100188ec:	aa01      	add	r2, sp, #4
100188ee:	4621      	mov	r1, r4
100188f0:	4606      	mov	r6, r0
100188f2:	f007 fe87 	bl	10020604 <__sflags>
100188f6:	2800      	cmp	r0, #0
100188f8:	d047      	beq.n	1001898a <_fopen_r+0xa6>
100188fa:	4605      	mov	r5, r0
100188fc:	4630      	mov	r0, r6
100188fe:	f7ff ff67 	bl	100187d0 <__sfp>
10018902:	4604      	mov	r4, r0
10018904:	2800      	cmp	r0, #0
10018906:	d040      	beq.n	1001898a <_fopen_r+0xa6>
10018908:	4639      	mov	r1, r7
1001890a:	9a01      	ldr	r2, [sp, #4]
1001890c:	f44f 73db 	mov.w	r3, #438	@ 0x1b6
10018910:	4630      	mov	r0, r6
10018912:	f000 ff21 	bl	10019758 <_open_r>
10018916:	1e07      	subs	r7, r0, #0
10018918:	db2e      	blt.n	10018978 <_fopen_r+0x94>
1001891a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1001891c:	07db      	lsls	r3, r3, #31
1001891e:	d402      	bmi.n	10018926 <_fopen_r+0x42>
10018920:	89a3      	ldrh	r3, [r4, #12]
10018922:	0598      	lsls	r0, r3, #22
10018924:	d520      	bpl.n	10018968 <_fopen_r+0x84>
10018926:	4b1a      	ldr	r3, [pc, #104]	@ (10018990 <_fopen_r+0xac>)
10018928:	4a1a      	ldr	r2, [pc, #104]	@ (10018994 <_fopen_r+0xb0>)
1001892a:	81e7      	strh	r7, [r4, #14]
1001892c:	e9c4 4307 	strd	r4, r3, [r4, #28]
10018930:	4b19      	ldr	r3, [pc, #100]	@ (10018998 <_fopen_r+0xb4>)
10018932:	b22d      	sxth	r5, r5
10018934:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
10018938:	05e9      	lsls	r1, r5, #23
1001893a:	4b18      	ldr	r3, [pc, #96]	@ (1001899c <_fopen_r+0xb8>)
1001893c:	81a5      	strh	r5, [r4, #12]
1001893e:	62e3      	str	r3, [r4, #44]	@ 0x2c
10018940:	d408      	bmi.n	10018954 <_fopen_r+0x70>
10018942:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10018944:	07da      	lsls	r2, r3, #31
10018946:	d402      	bmi.n	1001894e <_fopen_r+0x6a>
10018948:	89a3      	ldrh	r3, [r4, #12]
1001894a:	059b      	lsls	r3, r3, #22
1001894c:	d510      	bpl.n	10018970 <_fopen_r+0x8c>
1001894e:	4620      	mov	r0, r4
10018950:	b003      	add	sp, #12
10018952:	bdf0      	pop	{r4, r5, r6, r7, pc}
10018954:	2302      	movs	r3, #2
10018956:	2200      	movs	r2, #0
10018958:	4621      	mov	r1, r4
1001895a:	4630      	mov	r0, r6
1001895c:	f000 f912 	bl	10018b84 <_fseek_r>
10018960:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10018962:	07da      	lsls	r2, r3, #31
10018964:	d4f3      	bmi.n	1001894e <_fopen_r+0x6a>
10018966:	e7ef      	b.n	10018948 <_fopen_r+0x64>
10018968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001896a:	f001 f905 	bl	10019b78 <__retarget_lock_acquire_recursive>
1001896e:	e7da      	b.n	10018926 <_fopen_r+0x42>
10018970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018972:	f001 f903 	bl	10019b7c <__retarget_lock_release_recursive>
10018976:	e7ea      	b.n	1001894e <_fopen_r+0x6a>
10018978:	f7ff ffa8 	bl	100188cc <__sfp_lock_acquire>
1001897c:	2300      	movs	r3, #0
1001897e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018980:	81a3      	strh	r3, [r4, #12]
10018982:	f001 f8f7 	bl	10019b74 <__retarget_lock_close_recursive>
10018986:	f7ff ffa7 	bl	100188d8 <__sfp_lock_release>
1001898a:	2400      	movs	r4, #0
1001898c:	e7df      	b.n	1001894e <_fopen_r+0x6a>
1001898e:	bf00      	nop
10018990:	100185f5 	.word	0x100185f5
10018994:	1001861d 	.word	0x1001861d
10018998:	1001865d 	.word	0x1001865d
1001899c:	10018681 	.word	0x10018681

100189a0 <fopen>:
100189a0:	b410      	push	{r4}
100189a2:	4c04      	ldr	r4, [pc, #16]	@ (100189b4 <fopen+0x14>)
100189a4:	4603      	mov	r3, r0
100189a6:	460a      	mov	r2, r1
100189a8:	6820      	ldr	r0, [r4, #0]
100189aa:	bc10      	pop	{r4}
100189ac:	4619      	mov	r1, r3
100189ae:	f7ff bf99 	b.w	100188e4 <_fopen_r>
100189b2:	bf00      	nop
100189b4:	20000598 	.word	0x20000598

100189b8 <_fread_r>:
100189b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100189bc:	b083      	sub	sp, #12
100189be:	fb02 f803 	mul.w	r8, r2, r3
100189c2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
100189c4:	f1b8 0f00 	cmp.w	r8, #0
100189c8:	d04d      	beq.n	10018a66 <_fread_r+0xae>
100189ca:	4691      	mov	r9, r2
100189cc:	469a      	mov	sl, r3
100189ce:	4606      	mov	r6, r0
100189d0:	460d      	mov	r5, r1
100189d2:	b118      	cbz	r0, 100189dc <_fread_r+0x24>
100189d4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
100189d6:	2b00      	cmp	r3, #0
100189d8:	f000 80ae 	beq.w	10018b38 <_fread_r+0x180>
100189dc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
100189de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100189e2:	07d0      	lsls	r0, r2, #31
100189e4:	d402      	bmi.n	100189ec <_fread_r+0x34>
100189e6:	0599      	lsls	r1, r3, #22
100189e8:	f140 809d 	bpl.w	10018b26 <_fread_r+0x16e>
100189ec:	049a      	lsls	r2, r3, #18
100189ee:	d406      	bmi.n	100189fe <_fread_r+0x46>
100189f0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
100189f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
100189f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
100189fa:	81a3      	strh	r3, [r4, #12]
100189fc:	6662      	str	r2, [r4, #100]	@ 0x64
100189fe:	6867      	ldr	r7, [r4, #4]
10018a00:	6821      	ldr	r1, [r4, #0]
10018a02:	2f00      	cmp	r7, #0
10018a04:	bfb7      	itett	lt
10018a06:	f04f 0b00 	movlt.w	fp, #0
10018a0a:	46bb      	movge	fp, r7
10018a0c:	f8c4 b004 	strlt.w	fp, [r4, #4]
10018a10:	465f      	movlt	r7, fp
10018a12:	079b      	lsls	r3, r3, #30
10018a14:	d42b      	bmi.n	10018a6e <_fread_r+0xb6>
10018a16:	46c3      	mov	fp, r8
10018a18:	e010      	b.n	10018a3c <_fread_r+0x84>
10018a1a:	f001 f909 	bl	10019c30 <memcpy>
10018a1e:	6823      	ldr	r3, [r4, #0]
10018a20:	443b      	add	r3, r7
10018a22:	6023      	str	r3, [r4, #0]
10018a24:	4621      	mov	r1, r4
10018a26:	4630      	mov	r0, r6
10018a28:	f006 fbbe 	bl	1001f1a8 <__srefill_r>
10018a2c:	443d      	add	r5, r7
10018a2e:	ebab 0307 	sub.w	r3, fp, r7
10018a32:	2800      	cmp	r0, #0
10018a34:	d168      	bne.n	10018b08 <_fread_r+0x150>
10018a36:	e9d4 1700 	ldrd	r1, r7, [r4]
10018a3a:	469b      	mov	fp, r3
10018a3c:	45bb      	cmp	fp, r7
10018a3e:	463a      	mov	r2, r7
10018a40:	4628      	mov	r0, r5
10018a42:	d8ea      	bhi.n	10018a1a <_fread_r+0x62>
10018a44:	465a      	mov	r2, fp
10018a46:	f001 f8f3 	bl	10019c30 <memcpy>
10018a4a:	e9d4 3200 	ldrd	r3, r2, [r4]
10018a4e:	eba2 020b 	sub.w	r2, r2, fp
10018a52:	445b      	add	r3, fp
10018a54:	e9c4 3200 	strd	r3, r2, [r4]
10018a58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10018a5a:	07da      	lsls	r2, r3, #31
10018a5c:	d402      	bmi.n	10018a64 <_fread_r+0xac>
10018a5e:	89a3      	ldrh	r3, [r4, #12]
10018a60:	059b      	lsls	r3, r3, #22
10018a62:	d56c      	bpl.n	10018b3e <_fread_r+0x186>
10018a64:	46d0      	mov	r8, sl
10018a66:	4640      	mov	r0, r8
10018a68:	b003      	add	sp, #12
10018a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10018a6e:	45c3      	cmp	fp, r8
10018a70:	bf28      	it	cs
10018a72:	46c3      	movcs	fp, r8
10018a74:	465a      	mov	r2, fp
10018a76:	4628      	mov	r0, r5
10018a78:	f001 f8da 	bl	10019c30 <memcpy>
10018a7c:	6823      	ldr	r3, [r4, #0]
10018a7e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
10018a80:	445b      	add	r3, fp
10018a82:	6023      	str	r3, [r4, #0]
10018a84:	6863      	ldr	r3, [r4, #4]
10018a86:	eba3 030b 	sub.w	r3, r3, fp
10018a8a:	6063      	str	r3, [r4, #4]
10018a8c:	eba8 070b 	sub.w	r7, r8, fp
10018a90:	b151      	cbz	r1, 10018aa8 <_fread_r+0xf0>
10018a92:	2f00      	cmp	r7, #0
10018a94:	d0e0      	beq.n	10018a58 <_fread_r+0xa0>
10018a96:	f104 0340 	add.w	r3, r4, #64	@ 0x40
10018a9a:	4299      	cmp	r1, r3
10018a9c:	d002      	beq.n	10018aa4 <_fread_r+0xec>
10018a9e:	4630      	mov	r0, r6
10018aa0:	f002 fa8e 	bl	1001afc0 <_free_r>
10018aa4:	2300      	movs	r3, #0
10018aa6:	6323      	str	r3, [r4, #48]	@ 0x30
10018aa8:	445d      	add	r5, fp
10018aaa:	f8cd 8000 	str.w	r8, [sp]
10018aae:	46b3      	mov	fp, r6
10018ab0:	f8cd a004 	str.w	sl, [sp, #4]
10018ab4:	e000      	b.n	10018ab8 <_fread_r+0x100>
10018ab6:	4617      	mov	r7, r2
10018ab8:	4621      	mov	r1, r4
10018aba:	4658      	mov	r0, fp
10018abc:	2f00      	cmp	r7, #0
10018abe:	d04d      	beq.n	10018b5c <_fread_r+0x1a4>
10018ac0:	f8d4 8010 	ldr.w	r8, [r4, #16]
10018ac4:	6826      	ldr	r6, [r4, #0]
10018ac6:	f8d4 a014 	ldr.w	sl, [r4, #20]
10018aca:	6025      	str	r5, [r4, #0]
10018acc:	e9c4 5704 	strd	r5, r7, [r4, #16]
10018ad0:	f006 fb6a 	bl	1001f1a8 <__srefill_r>
10018ad4:	6863      	ldr	r3, [r4, #4]
10018ad6:	6026      	str	r6, [r4, #0]
10018ad8:	2100      	movs	r1, #0
10018ada:	e9c4 8a04 	strd	r8, sl, [r4, #16]
10018ade:	1afa      	subs	r2, r7, r3
10018ae0:	441d      	add	r5, r3
10018ae2:	6061      	str	r1, [r4, #4]
10018ae4:	2800      	cmp	r0, #0
10018ae6:	d0e6      	beq.n	10018ab6 <_fread_r+0xfe>
10018ae8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10018aea:	f8dd 8000 	ldr.w	r8, [sp]
10018aee:	07d6      	lsls	r6, r2, #31
10018af0:	d402      	bmi.n	10018af8 <_fread_r+0x140>
10018af2:	89a2      	ldrh	r2, [r4, #12]
10018af4:	0595      	lsls	r5, r2, #22
10018af6:	d52b      	bpl.n	10018b50 <_fread_r+0x198>
10018af8:	4443      	add	r3, r8
10018afa:	1bdb      	subs	r3, r3, r7
10018afc:	fbb3 f8f9 	udiv	r8, r3, r9
10018b00:	4640      	mov	r0, r8
10018b02:	b003      	add	sp, #12
10018b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10018b08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10018b0a:	07d8      	lsls	r0, r3, #31
10018b0c:	d402      	bmi.n	10018b14 <_fread_r+0x15c>
10018b0e:	89a3      	ldrh	r3, [r4, #12]
10018b10:	0599      	lsls	r1, r3, #22
10018b12:	d519      	bpl.n	10018b48 <_fread_r+0x190>
10018b14:	4447      	add	r7, r8
10018b16:	eba7 070b 	sub.w	r7, r7, fp
10018b1a:	fbb7 f8f9 	udiv	r8, r7, r9
10018b1e:	4640      	mov	r0, r8
10018b20:	b003      	add	sp, #12
10018b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10018b26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018b28:	f001 f826 	bl	10019b78 <__retarget_lock_acquire_recursive>
10018b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10018b30:	049a      	lsls	r2, r3, #18
10018b32:	f53f af64 	bmi.w	100189fe <_fread_r+0x46>
10018b36:	e75b      	b.n	100189f0 <_fread_r+0x38>
10018b38:	f7ff feaa 	bl	10018890 <__sinit>
10018b3c:	e74e      	b.n	100189dc <_fread_r+0x24>
10018b3e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018b40:	f001 f81c 	bl	10019b7c <__retarget_lock_release_recursive>
10018b44:	46d0      	mov	r8, sl
10018b46:	e78e      	b.n	10018a66 <_fread_r+0xae>
10018b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018b4a:	f001 f817 	bl	10019b7c <__retarget_lock_release_recursive>
10018b4e:	e7e1      	b.n	10018b14 <_fread_r+0x15c>
10018b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018b52:	9300      	str	r3, [sp, #0]
10018b54:	f001 f812 	bl	10019b7c <__retarget_lock_release_recursive>
10018b58:	9b00      	ldr	r3, [sp, #0]
10018b5a:	e7cd      	b.n	10018af8 <_fread_r+0x140>
10018b5c:	f8dd a004 	ldr.w	sl, [sp, #4]
10018b60:	e77a      	b.n	10018a58 <_fread_r+0xa0>
10018b62:	bf00      	nop

10018b64 <fread>:
10018b64:	b510      	push	{r4, lr}
10018b66:	4c06      	ldr	r4, [pc, #24]	@ (10018b80 <fread+0x1c>)
10018b68:	b082      	sub	sp, #8
10018b6a:	4684      	mov	ip, r0
10018b6c:	6820      	ldr	r0, [r4, #0]
10018b6e:	9300      	str	r3, [sp, #0]
10018b70:	4613      	mov	r3, r2
10018b72:	460a      	mov	r2, r1
10018b74:	4661      	mov	r1, ip
10018b76:	f7ff ff1f 	bl	100189b8 <_fread_r>
10018b7a:	b002      	add	sp, #8
10018b7c:	bd10      	pop	{r4, pc}
10018b7e:	bf00      	nop
10018b80:	20000598 	.word	0x20000598

10018b84 <_fseek_r>:
10018b84:	f000 ba60 	b.w	10019048 <_fseeko_r>

10018b88 <__sfvwrite_r>:
10018b88:	6893      	ldr	r3, [r2, #8]
10018b8a:	2b00      	cmp	r3, #0
10018b8c:	f000 80f6 	beq.w	10018d7c <__sfvwrite_r+0x1f4>
10018b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10018b94:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
10018b98:	f01c 0f08 	tst.w	ip, #8
10018b9c:	b083      	sub	sp, #12
10018b9e:	4690      	mov	r8, r2
10018ba0:	4681      	mov	r9, r0
10018ba2:	460c      	mov	r4, r1
10018ba4:	d031      	beq.n	10018c0a <__sfvwrite_r+0x82>
10018ba6:	690b      	ldr	r3, [r1, #16]
10018ba8:	b37b      	cbz	r3, 10018c0a <__sfvwrite_r+0x82>
10018baa:	f01c 0702 	ands.w	r7, ip, #2
10018bae:	f8d8 6000 	ldr.w	r6, [r8]
10018bb2:	d038      	beq.n	10018c26 <__sfvwrite_r+0x9e>
10018bb4:	2700      	movs	r7, #0
10018bb6:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
10018bba:	69e1      	ldr	r1, [r4, #28]
10018bbc:	f8df a2bc 	ldr.w	sl, [pc, #700]	@ 10018e7c <__sfvwrite_r+0x2f4>
10018bc0:	463d      	mov	r5, r7
10018bc2:	4555      	cmp	r5, sl
10018bc4:	462b      	mov	r3, r5
10018bc6:	463a      	mov	r2, r7
10018bc8:	bf28      	it	cs
10018bca:	4653      	movcs	r3, sl
10018bcc:	4648      	mov	r0, r9
10018bce:	b1c5      	cbz	r5, 10018c02 <__sfvwrite_r+0x7a>
10018bd0:	47d8      	blx	fp
10018bd2:	2800      	cmp	r0, #0
10018bd4:	f340 80c8 	ble.w	10018d68 <__sfvwrite_r+0x1e0>
10018bd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
10018bdc:	1a1b      	subs	r3, r3, r0
10018bde:	4407      	add	r7, r0
10018be0:	1a2d      	subs	r5, r5, r0
10018be2:	f8c8 3008 	str.w	r3, [r8, #8]
10018be6:	2b00      	cmp	r3, #0
10018be8:	f000 80b4 	beq.w	10018d54 <__sfvwrite_r+0x1cc>
10018bec:	4555      	cmp	r5, sl
10018bee:	462b      	mov	r3, r5
10018bf0:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
10018bf4:	69e1      	ldr	r1, [r4, #28]
10018bf6:	bf28      	it	cs
10018bf8:	4653      	movcs	r3, sl
10018bfa:	463a      	mov	r2, r7
10018bfc:	4648      	mov	r0, r9
10018bfe:	2d00      	cmp	r5, #0
10018c00:	d1e6      	bne.n	10018bd0 <__sfvwrite_r+0x48>
10018c02:	e9d6 7500 	ldrd	r7, r5, [r6]
10018c06:	3608      	adds	r6, #8
10018c08:	e7db      	b.n	10018bc2 <__sfvwrite_r+0x3a>
10018c0a:	4621      	mov	r1, r4
10018c0c:	4648      	mov	r0, r9
10018c0e:	f000 f9bb 	bl	10018f88 <__swsetup_r>
10018c12:	2800      	cmp	r0, #0
10018c14:	f040 80ad 	bne.w	10018d72 <__sfvwrite_r+0x1ea>
10018c18:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
10018c1c:	f8d8 6000 	ldr.w	r6, [r8]
10018c20:	f01c 0702 	ands.w	r7, ip, #2
10018c24:	d1c6      	bne.n	10018bb4 <__sfvwrite_r+0x2c>
10018c26:	f01c 0a01 	ands.w	sl, ip, #1
10018c2a:	d163      	bne.n	10018cf4 <__sfvwrite_r+0x16c>
10018c2c:	6823      	ldr	r3, [r4, #0]
10018c2e:	68a1      	ldr	r1, [r4, #8]
10018c30:	4657      	mov	r7, sl
10018c32:	4618      	mov	r0, r3
10018c34:	468b      	mov	fp, r1
10018c36:	2f00      	cmp	r7, #0
10018c38:	d058      	beq.n	10018cec <__sfvwrite_r+0x164>
10018c3a:	f41c 7f00 	tst.w	ip, #512	@ 0x200
10018c3e:	f000 80b1 	beq.w	10018da4 <__sfvwrite_r+0x21c>
10018c42:	42b9      	cmp	r1, r7
10018c44:	460a      	mov	r2, r1
10018c46:	f200 80dd 	bhi.w	10018e04 <__sfvwrite_r+0x27c>
10018c4a:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
10018c4e:	d02f      	beq.n	10018cb0 <__sfvwrite_r+0x128>
10018c50:	6921      	ldr	r1, [r4, #16]
10018c52:	6962      	ldr	r2, [r4, #20]
10018c54:	1a5d      	subs	r5, r3, r1
10018c56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
10018c5a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
10018c5e:	1c6b      	adds	r3, r5, #1
10018c60:	1052      	asrs	r2, r2, #1
10018c62:	443b      	add	r3, r7
10018c64:	4293      	cmp	r3, r2
10018c66:	bf92      	itee	ls
10018c68:	4693      	movls	fp, r2
10018c6a:	469b      	movhi	fp, r3
10018c6c:	461a      	movhi	r2, r3
10018c6e:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
10018c72:	f000 80e6 	beq.w	10018e42 <__sfvwrite_r+0x2ba>
10018c76:	4611      	mov	r1, r2
10018c78:	4648      	mov	r0, r9
10018c7a:	f7fb ff8d 	bl	10014b98 <_malloc_r>
10018c7e:	2800      	cmp	r0, #0
10018c80:	f000 80f5 	beq.w	10018e6e <__sfvwrite_r+0x2e6>
10018c84:	462a      	mov	r2, r5
10018c86:	6921      	ldr	r1, [r4, #16]
10018c88:	9001      	str	r0, [sp, #4]
10018c8a:	f000 ffd1 	bl	10019c30 <memcpy>
10018c8e:	89a2      	ldrh	r2, [r4, #12]
10018c90:	9b01      	ldr	r3, [sp, #4]
10018c92:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
10018c96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
10018c9a:	81a2      	strh	r2, [r4, #12]
10018c9c:	1958      	adds	r0, r3, r5
10018c9e:	ebab 0505 	sub.w	r5, fp, r5
10018ca2:	f8c4 b014 	str.w	fp, [r4, #20]
10018ca6:	6123      	str	r3, [r4, #16]
10018ca8:	60a5      	str	r5, [r4, #8]
10018caa:	6020      	str	r0, [r4, #0]
10018cac:	46bb      	mov	fp, r7
10018cae:	463a      	mov	r2, r7
10018cb0:	4651      	mov	r1, sl
10018cb2:	9201      	str	r2, [sp, #4]
10018cb4:	f000 fc02 	bl	100194bc <memmove>
10018cb8:	68a1      	ldr	r1, [r4, #8]
10018cba:	6823      	ldr	r3, [r4, #0]
10018cbc:	9a01      	ldr	r2, [sp, #4]
10018cbe:	eba1 010b 	sub.w	r1, r1, fp
10018cc2:	441a      	add	r2, r3
10018cc4:	463d      	mov	r5, r7
10018cc6:	60a1      	str	r1, [r4, #8]
10018cc8:	6022      	str	r2, [r4, #0]
10018cca:	2700      	movs	r7, #0
10018ccc:	f8d8 3008 	ldr.w	r3, [r8, #8]
10018cd0:	1b5b      	subs	r3, r3, r5
10018cd2:	44aa      	add	sl, r5
10018cd4:	f8c8 3008 	str.w	r3, [r8, #8]
10018cd8:	2b00      	cmp	r3, #0
10018cda:	d03b      	beq.n	10018d54 <__sfvwrite_r+0x1cc>
10018cdc:	6823      	ldr	r3, [r4, #0]
10018cde:	68a1      	ldr	r1, [r4, #8]
10018ce0:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
10018ce4:	4618      	mov	r0, r3
10018ce6:	468b      	mov	fp, r1
10018ce8:	2f00      	cmp	r7, #0
10018cea:	d1a6      	bne.n	10018c3a <__sfvwrite_r+0xb2>
10018cec:	e9d6 a700 	ldrd	sl, r7, [r6]
10018cf0:	3608      	adds	r6, #8
10018cf2:	e79e      	b.n	10018c32 <__sfvwrite_r+0xaa>
10018cf4:	4638      	mov	r0, r7
10018cf6:	46bb      	mov	fp, r7
10018cf8:	463d      	mov	r5, r7
10018cfa:	2d00      	cmp	r5, #0
10018cfc:	d040      	beq.n	10018d80 <__sfvwrite_r+0x1f8>
10018cfe:	2800      	cmp	r0, #0
10018d00:	d045      	beq.n	10018d8e <__sfvwrite_r+0x206>
10018d02:	463a      	mov	r2, r7
10018d04:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
10018d08:	6820      	ldr	r0, [r4, #0]
10018d0a:	68a1      	ldr	r1, [r4, #8]
10018d0c:	42aa      	cmp	r2, r5
10018d0e:	bf28      	it	cs
10018d10:	462a      	movcs	r2, r5
10018d12:	4560      	cmp	r0, ip
10018d14:	d904      	bls.n	10018d20 <__sfvwrite_r+0x198>
10018d16:	eb01 0a03 	add.w	sl, r1, r3
10018d1a:	4552      	cmp	r2, sl
10018d1c:	f300 8082 	bgt.w	10018e24 <__sfvwrite_r+0x29c>
10018d20:	4293      	cmp	r3, r2
10018d22:	dc72      	bgt.n	10018e0a <__sfvwrite_r+0x282>
10018d24:	69e1      	ldr	r1, [r4, #28]
10018d26:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
10018d2a:	465a      	mov	r2, fp
10018d2c:	4648      	mov	r0, r9
10018d2e:	47e0      	blx	ip
10018d30:	f1b0 0a00 	subs.w	sl, r0, #0
10018d34:	dd18      	ble.n	10018d68 <__sfvwrite_r+0x1e0>
10018d36:	ebb7 070a 	subs.w	r7, r7, sl
10018d3a:	d00f      	beq.n	10018d5c <__sfvwrite_r+0x1d4>
10018d3c:	2001      	movs	r0, #1
10018d3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
10018d42:	eba3 030a 	sub.w	r3, r3, sl
10018d46:	44d3      	add	fp, sl
10018d48:	eba5 050a 	sub.w	r5, r5, sl
10018d4c:	f8c8 3008 	str.w	r3, [r8, #8]
10018d50:	2b00      	cmp	r3, #0
10018d52:	d1d2      	bne.n	10018cfa <__sfvwrite_r+0x172>
10018d54:	2000      	movs	r0, #0
10018d56:	b003      	add	sp, #12
10018d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10018d5c:	4621      	mov	r1, r4
10018d5e:	4648      	mov	r0, r9
10018d60:	f7ff fbba 	bl	100184d8 <_fflush_r>
10018d64:	2800      	cmp	r0, #0
10018d66:	d0ea      	beq.n	10018d3e <__sfvwrite_r+0x1b6>
10018d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10018d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10018d70:	81a3      	strh	r3, [r4, #12]
10018d72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10018d76:	b003      	add	sp, #12
10018d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10018d7c:	2000      	movs	r0, #0
10018d7e:	4770      	bx	lr
10018d80:	6875      	ldr	r5, [r6, #4]
10018d82:	4633      	mov	r3, r6
10018d84:	3608      	adds	r6, #8
10018d86:	2d00      	cmp	r5, #0
10018d88:	d0fa      	beq.n	10018d80 <__sfvwrite_r+0x1f8>
10018d8a:	f8d3 b000 	ldr.w	fp, [r3]
10018d8e:	462a      	mov	r2, r5
10018d90:	210a      	movs	r1, #10
10018d92:	4658      	mov	r0, fp
10018d94:	f000 fefc 	bl	10019b90 <memchr>
10018d98:	2800      	cmp	r0, #0
10018d9a:	d065      	beq.n	10018e68 <__sfvwrite_r+0x2e0>
10018d9c:	3001      	adds	r0, #1
10018d9e:	eba0 070b 	sub.w	r7, r0, fp
10018da2:	e7ae      	b.n	10018d02 <__sfvwrite_r+0x17a>
10018da4:	6922      	ldr	r2, [r4, #16]
10018da6:	429a      	cmp	r2, r3
10018da8:	d314      	bcc.n	10018dd4 <__sfvwrite_r+0x24c>
10018daa:	6962      	ldr	r2, [r4, #20]
10018dac:	42ba      	cmp	r2, r7
10018dae:	d811      	bhi.n	10018dd4 <__sfvwrite_r+0x24c>
10018db0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
10018db4:	42bb      	cmp	r3, r7
10018db6:	bf28      	it	cs
10018db8:	463b      	movcs	r3, r7
10018dba:	6a65      	ldr	r5, [r4, #36]	@ 0x24
10018dbc:	fb93 f3f2 	sdiv	r3, r3, r2
10018dc0:	69e1      	ldr	r1, [r4, #28]
10018dc2:	fb02 f303 	mul.w	r3, r2, r3
10018dc6:	4648      	mov	r0, r9
10018dc8:	4652      	mov	r2, sl
10018dca:	47a8      	blx	r5
10018dcc:	1e05      	subs	r5, r0, #0
10018dce:	ddcb      	ble.n	10018d68 <__sfvwrite_r+0x1e0>
10018dd0:	1b7f      	subs	r7, r7, r5
10018dd2:	e77b      	b.n	10018ccc <__sfvwrite_r+0x144>
10018dd4:	42b9      	cmp	r1, r7
10018dd6:	bf28      	it	cs
10018dd8:	4639      	movcs	r1, r7
10018dda:	460d      	mov	r5, r1
10018ddc:	4618      	mov	r0, r3
10018dde:	460a      	mov	r2, r1
10018de0:	4651      	mov	r1, sl
10018de2:	f000 fb6b 	bl	100194bc <memmove>
10018de6:	68a1      	ldr	r1, [r4, #8]
10018de8:	6823      	ldr	r3, [r4, #0]
10018dea:	1b49      	subs	r1, r1, r5
10018dec:	442b      	add	r3, r5
10018dee:	60a1      	str	r1, [r4, #8]
10018df0:	6023      	str	r3, [r4, #0]
10018df2:	2900      	cmp	r1, #0
10018df4:	d1ec      	bne.n	10018dd0 <__sfvwrite_r+0x248>
10018df6:	4621      	mov	r1, r4
10018df8:	4648      	mov	r0, r9
10018dfa:	f7ff fb6d 	bl	100184d8 <_fflush_r>
10018dfe:	2800      	cmp	r0, #0
10018e00:	d0e6      	beq.n	10018dd0 <__sfvwrite_r+0x248>
10018e02:	e7b1      	b.n	10018d68 <__sfvwrite_r+0x1e0>
10018e04:	46bb      	mov	fp, r7
10018e06:	463a      	mov	r2, r7
10018e08:	e752      	b.n	10018cb0 <__sfvwrite_r+0x128>
10018e0a:	4659      	mov	r1, fp
10018e0c:	9201      	str	r2, [sp, #4]
10018e0e:	f000 fb55 	bl	100194bc <memmove>
10018e12:	9a01      	ldr	r2, [sp, #4]
10018e14:	68a3      	ldr	r3, [r4, #8]
10018e16:	1a9b      	subs	r3, r3, r2
10018e18:	60a3      	str	r3, [r4, #8]
10018e1a:	6823      	ldr	r3, [r4, #0]
10018e1c:	4413      	add	r3, r2
10018e1e:	6023      	str	r3, [r4, #0]
10018e20:	4692      	mov	sl, r2
10018e22:	e788      	b.n	10018d36 <__sfvwrite_r+0x1ae>
10018e24:	4659      	mov	r1, fp
10018e26:	4652      	mov	r2, sl
10018e28:	f000 fb48 	bl	100194bc <memmove>
10018e2c:	6823      	ldr	r3, [r4, #0]
10018e2e:	4453      	add	r3, sl
10018e30:	6023      	str	r3, [r4, #0]
10018e32:	4621      	mov	r1, r4
10018e34:	4648      	mov	r0, r9
10018e36:	f7ff fb4f 	bl	100184d8 <_fflush_r>
10018e3a:	2800      	cmp	r0, #0
10018e3c:	f43f af7b 	beq.w	10018d36 <__sfvwrite_r+0x1ae>
10018e40:	e792      	b.n	10018d68 <__sfvwrite_r+0x1e0>
10018e42:	4648      	mov	r0, r9
10018e44:	f7ff f912 	bl	1001806c <_realloc_r>
10018e48:	4603      	mov	r3, r0
10018e4a:	2800      	cmp	r0, #0
10018e4c:	f47f af26 	bne.w	10018c9c <__sfvwrite_r+0x114>
10018e50:	6921      	ldr	r1, [r4, #16]
10018e52:	4648      	mov	r0, r9
10018e54:	f002 f8b4 	bl	1001afc0 <_free_r>
10018e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10018e5c:	220c      	movs	r2, #12
10018e5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
10018e62:	f8c9 2000 	str.w	r2, [r9]
10018e66:	e781      	b.n	10018d6c <__sfvwrite_r+0x1e4>
10018e68:	1c6a      	adds	r2, r5, #1
10018e6a:	4617      	mov	r7, r2
10018e6c:	e74a      	b.n	10018d04 <__sfvwrite_r+0x17c>
10018e6e:	220c      	movs	r2, #12
10018e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10018e74:	f8c9 2000 	str.w	r2, [r9]
10018e78:	e778      	b.n	10018d6c <__sfvwrite_r+0x1e4>
10018e7a:	bf00      	nop
10018e7c:	7ffffc00 	.word	0x7ffffc00

10018e80 <_fwalk_sglue>:
10018e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10018e84:	4680      	mov	r8, r0
10018e86:	460f      	mov	r7, r1
10018e88:	4616      	mov	r6, r2
10018e8a:	f04f 0900 	mov.w	r9, #0
10018e8e:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
10018e92:	3d01      	subs	r5, #1
10018e94:	d411      	bmi.n	10018eba <_fwalk_sglue+0x3a>
10018e96:	89a3      	ldrh	r3, [r4, #12]
10018e98:	2b01      	cmp	r3, #1
10018e9a:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
10018e9e:	d908      	bls.n	10018eb2 <_fwalk_sglue+0x32>
10018ea0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
10018ea4:	3301      	adds	r3, #1
10018ea6:	4621      	mov	r1, r4
10018ea8:	d003      	beq.n	10018eb2 <_fwalk_sglue+0x32>
10018eaa:	4640      	mov	r0, r8
10018eac:	47b8      	blx	r7
10018eae:	ea49 0900 	orr.w	r9, r9, r0
10018eb2:	1c6b      	adds	r3, r5, #1
10018eb4:	f104 0468 	add.w	r4, r4, #104	@ 0x68
10018eb8:	d1ed      	bne.n	10018e96 <_fwalk_sglue+0x16>
10018eba:	6836      	ldr	r6, [r6, #0]
10018ebc:	2e00      	cmp	r6, #0
10018ebe:	d1e6      	bne.n	10018e8e <_fwalk_sglue+0xe>
10018ec0:	4648      	mov	r0, r9
10018ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10018ec6:	bf00      	nop

10018ec8 <_fwrite_r>:
10018ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10018ecc:	b086      	sub	sp, #24
10018ece:	fb02 f503 	mul.w	r5, r2, r3
10018ed2:	4698      	mov	r8, r3
10018ed4:	ab01      	add	r3, sp, #4
10018ed6:	9303      	str	r3, [sp, #12]
10018ed8:	2301      	movs	r3, #1
10018eda:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10018edc:	9101      	str	r1, [sp, #4]
10018ede:	4617      	mov	r7, r2
10018ee0:	9502      	str	r5, [sp, #8]
10018ee2:	9505      	str	r5, [sp, #20]
10018ee4:	9304      	str	r3, [sp, #16]
10018ee6:	4606      	mov	r6, r0
10018ee8:	b110      	cbz	r0, 10018ef0 <_fwrite_r+0x28>
10018eea:	6b43      	ldr	r3, [r0, #52]	@ 0x34
10018eec:	2b00      	cmp	r3, #0
10018eee:	d038      	beq.n	10018f62 <_fwrite_r+0x9a>
10018ef0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10018ef2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
10018ef6:	07d8      	lsls	r0, r3, #31
10018ef8:	d401      	bmi.n	10018efe <_fwrite_r+0x36>
10018efa:	0591      	lsls	r1, r2, #22
10018efc:	d526      	bpl.n	10018f4c <_fwrite_r+0x84>
10018efe:	0493      	lsls	r3, r2, #18
10018f00:	d406      	bmi.n	10018f10 <_fwrite_r+0x48>
10018f02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10018f04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
10018f08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
10018f0c:	81a2      	strh	r2, [r4, #12]
10018f0e:	6663      	str	r3, [r4, #100]	@ 0x64
10018f10:	4630      	mov	r0, r6
10018f12:	aa03      	add	r2, sp, #12
10018f14:	4621      	mov	r1, r4
10018f16:	f7ff fe37 	bl	10018b88 <__sfvwrite_r>
10018f1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10018f1c:	b178      	cbz	r0, 10018f3e <_fwrite_r+0x76>
10018f1e:	07da      	lsls	r2, r3, #31
10018f20:	d506      	bpl.n	10018f30 <_fwrite_r+0x68>
10018f22:	9b05      	ldr	r3, [sp, #20]
10018f24:	1ae8      	subs	r0, r5, r3
10018f26:	fbb0 f0f7 	udiv	r0, r0, r7
10018f2a:	b006      	add	sp, #24
10018f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10018f30:	89a3      	ldrh	r3, [r4, #12]
10018f32:	059b      	lsls	r3, r3, #22
10018f34:	d4f5      	bmi.n	10018f22 <_fwrite_r+0x5a>
10018f36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018f38:	f000 fe20 	bl	10019b7c <__retarget_lock_release_recursive>
10018f3c:	e7f1      	b.n	10018f22 <_fwrite_r+0x5a>
10018f3e:	07d8      	lsls	r0, r3, #31
10018f40:	d402      	bmi.n	10018f48 <_fwrite_r+0x80>
10018f42:	89a3      	ldrh	r3, [r4, #12]
10018f44:	0599      	lsls	r1, r3, #22
10018f46:	d507      	bpl.n	10018f58 <_fwrite_r+0x90>
10018f48:	4640      	mov	r0, r8
10018f4a:	e7ee      	b.n	10018f2a <_fwrite_r+0x62>
10018f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018f4e:	f000 fe13 	bl	10019b78 <__retarget_lock_acquire_recursive>
10018f52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
10018f56:	e7d2      	b.n	10018efe <_fwrite_r+0x36>
10018f58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10018f5a:	f000 fe0f 	bl	10019b7c <__retarget_lock_release_recursive>
10018f5e:	4640      	mov	r0, r8
10018f60:	e7e3      	b.n	10018f2a <_fwrite_r+0x62>
10018f62:	f7ff fc95 	bl	10018890 <__sinit>
10018f66:	e7c3      	b.n	10018ef0 <_fwrite_r+0x28>

10018f68 <fwrite>:
10018f68:	b510      	push	{r4, lr}
10018f6a:	4c06      	ldr	r4, [pc, #24]	@ (10018f84 <fwrite+0x1c>)
10018f6c:	b082      	sub	sp, #8
10018f6e:	4684      	mov	ip, r0
10018f70:	6820      	ldr	r0, [r4, #0]
10018f72:	9300      	str	r3, [sp, #0]
10018f74:	4613      	mov	r3, r2
10018f76:	460a      	mov	r2, r1
10018f78:	4661      	mov	r1, ip
10018f7a:	f7ff ffa5 	bl	10018ec8 <_fwrite_r>
10018f7e:	b002      	add	sp, #8
10018f80:	bd10      	pop	{r4, pc}
10018f82:	bf00      	nop
10018f84:	20000598 	.word	0x20000598

10018f88 <__swsetup_r>:
10018f88:	b538      	push	{r3, r4, r5, lr}
10018f8a:	4b2e      	ldr	r3, [pc, #184]	@ (10019044 <__swsetup_r+0xbc>)
10018f8c:	681b      	ldr	r3, [r3, #0]
10018f8e:	4605      	mov	r5, r0
10018f90:	460c      	mov	r4, r1
10018f92:	b113      	cbz	r3, 10018f9a <__swsetup_r+0x12>
10018f94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10018f96:	2a00      	cmp	r2, #0
10018f98:	d04b      	beq.n	10019032 <__swsetup_r+0xaa>
10018f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10018f9e:	0718      	lsls	r0, r3, #28
10018fa0:	d51c      	bpl.n	10018fdc <__swsetup_r+0x54>
10018fa2:	6922      	ldr	r2, [r4, #16]
10018fa4:	b322      	cbz	r2, 10018ff0 <__swsetup_r+0x68>
10018fa6:	f013 0101 	ands.w	r1, r3, #1
10018faa:	d007      	beq.n	10018fbc <__swsetup_r+0x34>
10018fac:	6961      	ldr	r1, [r4, #20]
10018fae:	2000      	movs	r0, #0
10018fb0:	4249      	negs	r1, r1
10018fb2:	60a0      	str	r0, [r4, #8]
10018fb4:	61a1      	str	r1, [r4, #24]
10018fb6:	b13a      	cbz	r2, 10018fc8 <__swsetup_r+0x40>
10018fb8:	2000      	movs	r0, #0
10018fba:	bd38      	pop	{r3, r4, r5, pc}
10018fbc:	0798      	lsls	r0, r3, #30
10018fbe:	bf58      	it	pl
10018fc0:	6961      	ldrpl	r1, [r4, #20]
10018fc2:	60a1      	str	r1, [r4, #8]
10018fc4:	2a00      	cmp	r2, #0
10018fc6:	d1f7      	bne.n	10018fb8 <__swsetup_r+0x30>
10018fc8:	0619      	lsls	r1, r3, #24
10018fca:	bf58      	it	pl
10018fcc:	4610      	movpl	r0, r2
10018fce:	d5f4      	bpl.n	10018fba <__swsetup_r+0x32>
10018fd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10018fd4:	81a3      	strh	r3, [r4, #12]
10018fd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10018fda:	bd38      	pop	{r3, r4, r5, pc}
10018fdc:	06d9      	lsls	r1, r3, #27
10018fde:	d52c      	bpl.n	1001903a <__swsetup_r+0xb2>
10018fe0:	075a      	lsls	r2, r3, #29
10018fe2:	d412      	bmi.n	1001900a <__swsetup_r+0x82>
10018fe4:	6922      	ldr	r2, [r4, #16]
10018fe6:	f043 0308 	orr.w	r3, r3, #8
10018fea:	81a3      	strh	r3, [r4, #12]
10018fec:	2a00      	cmp	r2, #0
10018fee:	d1da      	bne.n	10018fa6 <__swsetup_r+0x1e>
10018ff0:	f403 7120 	and.w	r1, r3, #640	@ 0x280
10018ff4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
10018ff8:	d0d5      	beq.n	10018fa6 <__swsetup_r+0x1e>
10018ffa:	4621      	mov	r1, r4
10018ffc:	4628      	mov	r0, r5
10018ffe:	f003 febf 	bl	1001cd80 <__smakebuf_r>
10019002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10019006:	6922      	ldr	r2, [r4, #16]
10019008:	e7cd      	b.n	10018fa6 <__swsetup_r+0x1e>
1001900a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
1001900c:	b151      	cbz	r1, 10019024 <__swsetup_r+0x9c>
1001900e:	f104 0240 	add.w	r2, r4, #64	@ 0x40
10019012:	4291      	cmp	r1, r2
10019014:	d004      	beq.n	10019020 <__swsetup_r+0x98>
10019016:	4628      	mov	r0, r5
10019018:	f001 ffd2 	bl	1001afc0 <_free_r>
1001901c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10019020:	2200      	movs	r2, #0
10019022:	6322      	str	r2, [r4, #48]	@ 0x30
10019024:	6922      	ldr	r2, [r4, #16]
10019026:	2100      	movs	r1, #0
10019028:	e9c4 2100 	strd	r2, r1, [r4]
1001902c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
10019030:	e7d9      	b.n	10018fe6 <__swsetup_r+0x5e>
10019032:	4618      	mov	r0, r3
10019034:	f7ff fc2c 	bl	10018890 <__sinit>
10019038:	e7af      	b.n	10018f9a <__swsetup_r+0x12>
1001903a:	2209      	movs	r2, #9
1001903c:	602a      	str	r2, [r5, #0]
1001903e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10019042:	e7c7      	b.n	10018fd4 <__swsetup_r+0x4c>
10019044:	20000598 	.word	0x20000598

10019048 <_fseeko_r>:
10019048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001904c:	460c      	mov	r4, r1
1001904e:	b097      	sub	sp, #92	@ 0x5c
10019050:	4690      	mov	r8, r2
10019052:	461e      	mov	r6, r3
10019054:	4605      	mov	r5, r0
10019056:	b118      	cbz	r0, 10019060 <_fseeko_r+0x18>
10019058:	6b43      	ldr	r3, [r0, #52]	@ 0x34
1001905a:	2b00      	cmp	r3, #0
1001905c:	f000 812f 	beq.w	100192be <_fseeko_r+0x276>
10019060:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10019062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10019066:	07d7      	lsls	r7, r2, #31
10019068:	d402      	bmi.n	10019070 <_fseeko_r+0x28>
1001906a:	0598      	lsls	r0, r3, #22
1001906c:	f140 810d 	bpl.w	1001928a <_fseeko_r+0x242>
10019070:	f403 7384 	and.w	r3, r3, #264	@ 0x108
10019074:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
10019078:	f000 80f3 	beq.w	10019262 <_fseeko_r+0x21a>
1001907c:	f8d4 9028 	ldr.w	r9, [r4, #40]	@ 0x28
10019080:	f1b9 0f00 	cmp.w	r9, #0
10019084:	f000 8151 	beq.w	1001932a <_fseeko_r+0x2e2>
10019088:	2e01      	cmp	r6, #1
1001908a:	d010      	beq.n	100190ae <_fseeko_r+0x66>
1001908c:	f036 0702 	bics.w	r7, r6, #2
10019090:	d06c      	beq.n	1001916c <_fseeko_r+0x124>
10019092:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10019094:	2216      	movs	r2, #22
10019096:	07d9      	lsls	r1, r3, #31
10019098:	602a      	str	r2, [r5, #0]
1001909a:	d403      	bmi.n	100190a4 <_fseeko_r+0x5c>
1001909c:	89a3      	ldrh	r3, [r4, #12]
1001909e:	059f      	lsls	r7, r3, #22
100190a0:	f140 8117 	bpl.w	100192d2 <_fseeko_r+0x28a>
100190a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100190a8:	b017      	add	sp, #92	@ 0x5c
100190aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100190ae:	4621      	mov	r1, r4
100190b0:	4628      	mov	r0, r5
100190b2:	f7ff fa11 	bl	100184d8 <_fflush_r>
100190b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100190ba:	f413 5280 	ands.w	r2, r3, #4096	@ 0x1000
100190be:	f040 80d5 	bne.w	1001926c <_fseeko_r+0x224>
100190c2:	4633      	mov	r3, r6
100190c4:	69e1      	ldr	r1, [r4, #28]
100190c6:	4628      	mov	r0, r5
100190c8:	47c8      	blx	r9
100190ca:	1c42      	adds	r2, r0, #1
100190cc:	bf18      	it	ne
100190ce:	f9b4 300c 	ldrshne.w	r3, [r4, #12]
100190d2:	4607      	mov	r7, r0
100190d4:	f000 8124 	beq.w	10019320 <_fseeko_r+0x2d8>
100190d8:	075e      	lsls	r6, r3, #29
100190da:	6922      	ldr	r2, [r4, #16]
100190dc:	f140 80cb 	bpl.w	10019276 <_fseeko_r+0x22e>
100190e0:	6863      	ldr	r3, [r4, #4]
100190e2:	1aff      	subs	r7, r7, r3
100190e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
100190e6:	b10b      	cbz	r3, 100190ec <_fseeko_r+0xa4>
100190e8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
100190ea:	1aff      	subs	r7, r7, r3
100190ec:	44b8      	add	r8, r7
100190ee:	f04f 0a01 	mov.w	sl, #1
100190f2:	2600      	movs	r6, #0
100190f4:	2a00      	cmp	r2, #0
100190f6:	d03d      	beq.n	10019174 <_fseeko_r+0x12c>
100190f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100190fc:	f640 021a 	movw	r2, #2074	@ 0x81a
10019100:	4213      	tst	r3, r2
10019102:	d107      	bne.n	10019114 <_fseeko_r+0xcc>
10019104:	055a      	lsls	r2, r3, #21
10019106:	d45a      	bmi.n	100191be <_fseeko_r+0x176>
10019108:	4a8b      	ldr	r2, [pc, #556]	@ (10019338 <_fseeko_r+0x2f0>)
1001910a:	4591      	cmp	r9, r2
1001910c:	d03e      	beq.n	1001918c <_fseeko_r+0x144>
1001910e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
10019112:	81a3      	strh	r3, [r4, #12]
10019114:	4621      	mov	r1, r4
10019116:	4628      	mov	r0, r5
10019118:	f7ff f9de 	bl	100184d8 <_fflush_r>
1001911c:	2800      	cmp	r0, #0
1001911e:	f040 80ff 	bne.w	10019320 <_fseeko_r+0x2d8>
10019122:	69e1      	ldr	r1, [r4, #28]
10019124:	4633      	mov	r3, r6
10019126:	4642      	mov	r2, r8
10019128:	4628      	mov	r0, r5
1001912a:	47c8      	blx	r9
1001912c:	3001      	adds	r0, #1
1001912e:	f000 80f7 	beq.w	10019320 <_fseeko_r+0x2d8>
10019132:	6b21      	ldr	r1, [r4, #48]	@ 0x30
10019134:	b141      	cbz	r1, 10019148 <_fseeko_r+0x100>
10019136:	f104 0340 	add.w	r3, r4, #64	@ 0x40
1001913a:	4299      	cmp	r1, r3
1001913c:	d002      	beq.n	10019144 <_fseeko_r+0xfc>
1001913e:	4628      	mov	r0, r5
10019140:	f001 ff3e 	bl	1001afc0 <_free_r>
10019144:	2300      	movs	r3, #0
10019146:	6323      	str	r3, [r4, #48]	@ 0x30
10019148:	89a3      	ldrh	r3, [r4, #12]
1001914a:	6922      	ldr	r2, [r4, #16]
1001914c:	2100      	movs	r1, #0
1001914e:	f423 6302 	bic.w	r3, r3, #2080	@ 0x820
10019152:	e9c4 2100 	strd	r2, r1, [r4]
10019156:	81a3      	strh	r3, [r4, #12]
10019158:	2208      	movs	r2, #8
1001915a:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
1001915e:	f000 fa2d 	bl	100195bc <memset>
10019162:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10019164:	07da      	lsls	r2, r3, #31
10019166:	d50a      	bpl.n	1001917e <_fseeko_r+0x136>
10019168:	2000      	movs	r0, #0
1001916a:	e79d      	b.n	100190a8 <_fseeko_r+0x60>
1001916c:	6922      	ldr	r2, [r4, #16]
1001916e:	46ba      	mov	sl, r7
10019170:	2a00      	cmp	r2, #0
10019172:	d1c1      	bne.n	100190f8 <_fseeko_r+0xb0>
10019174:	4621      	mov	r1, r4
10019176:	4628      	mov	r0, r5
10019178:	f003 fe02 	bl	1001cd80 <__smakebuf_r>
1001917c:	e7bc      	b.n	100190f8 <_fseeko_r+0xb0>
1001917e:	89a3      	ldrh	r3, [r4, #12]
10019180:	059b      	lsls	r3, r3, #22
10019182:	d4f1      	bmi.n	10019168 <_fseeko_r+0x120>
10019184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10019186:	f000 fcf9 	bl	10019b7c <__retarget_lock_release_recursive>
1001918a:	e7ed      	b.n	10019168 <_fseeko_r+0x120>
1001918c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10019190:	2900      	cmp	r1, #0
10019192:	dbbc      	blt.n	1001910e <_fseeko_r+0xc6>
10019194:	466a      	mov	r2, sp
10019196:	4628      	mov	r0, r5
10019198:	f000 fab2 	bl	10019700 <_fstat_r>
1001919c:	2800      	cmp	r0, #0
1001919e:	f040 80a5 	bne.w	100192ec <_fseeko_r+0x2a4>
100191a2:	9b01      	ldr	r3, [sp, #4]
100191a4:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
100191a8:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
100191ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100191b0:	d1ad      	bne.n	1001910e <_fseeko_r+0xc6>
100191b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
100191b6:	81a3      	strh	r3, [r4, #12]
100191b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
100191bc:	64e3      	str	r3, [r4, #76]	@ 0x4c
100191be:	2e00      	cmp	r6, #0
100191c0:	d169      	bne.n	10019296 <_fseeko_r+0x24e>
100191c2:	46c3      	mov	fp, r8
100191c4:	f1ba 0f00 	cmp.w	sl, #0
100191c8:	d174      	bne.n	100192b4 <_fseeko_r+0x26c>
100191ca:	89a3      	ldrh	r3, [r4, #12]
100191cc:	04d8      	lsls	r0, r3, #19
100191ce:	f140 8084 	bpl.w	100192da <_fseeko_r+0x292>
100191d2:	6d20      	ldr	r0, [r4, #80]	@ 0x50
100191d4:	6862      	ldr	r2, [r4, #4]
100191d6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
100191d8:	1a87      	subs	r7, r0, r2
100191da:	2900      	cmp	r1, #0
100191dc:	d072      	beq.n	100192c4 <_fseeko_r+0x27c>
100191de:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
100191e0:	1aff      	subs	r7, r7, r3
100191e2:	4417      	add	r7, r2
100191e4:	6920      	ldr	r0, [r4, #16]
100191e6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
100191e8:	1a12      	subs	r2, r2, r0
100191ea:	1abf      	subs	r7, r7, r2
100191ec:	4413      	add	r3, r2
100191ee:	45bb      	cmp	fp, r7
100191f0:	db02      	blt.n	100191f8 <_fseeko_r+0x1b0>
100191f2:	18fa      	adds	r2, r7, r3
100191f4:	455a      	cmp	r2, fp
100191f6:	d87c      	bhi.n	100192f2 <_fseeko_r+0x2aa>
100191f8:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
100191fa:	69e1      	ldr	r1, [r4, #28]
100191fc:	427f      	negs	r7, r7
100191fe:	ea07 070b 	and.w	r7, r7, fp
10019202:	2300      	movs	r3, #0
10019204:	463a      	mov	r2, r7
10019206:	4628      	mov	r0, r5
10019208:	47c8      	blx	r9
1001920a:	3001      	adds	r0, #1
1001920c:	d082      	beq.n	10019114 <_fseeko_r+0xcc>
1001920e:	6923      	ldr	r3, [r4, #16]
10019210:	6b21      	ldr	r1, [r4, #48]	@ 0x30
10019212:	6023      	str	r3, [r4, #0]
10019214:	2300      	movs	r3, #0
10019216:	6063      	str	r3, [r4, #4]
10019218:	b141      	cbz	r1, 1001922c <_fseeko_r+0x1e4>
1001921a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
1001921e:	4299      	cmp	r1, r3
10019220:	d002      	beq.n	10019228 <_fseeko_r+0x1e0>
10019222:	4628      	mov	r0, r5
10019224:	f001 fecc 	bl	1001afc0 <_free_r>
10019228:	2300      	movs	r3, #0
1001922a:	6323      	str	r3, [r4, #48]	@ 0x30
1001922c:	89a3      	ldrh	r3, [r4, #12]
1001922e:	ebbb 0b07 	subs.w	fp, fp, r7
10019232:	f023 0320 	bic.w	r3, r3, #32
10019236:	81a3      	strh	r3, [r4, #12]
10019238:	d010      	beq.n	1001925c <_fseeko_r+0x214>
1001923a:	4621      	mov	r1, r4
1001923c:	4628      	mov	r0, r5
1001923e:	f005 ffb3 	bl	1001f1a8 <__srefill_r>
10019242:	2800      	cmp	r0, #0
10019244:	f47f af66 	bne.w	10019114 <_fseeko_r+0xcc>
10019248:	6863      	ldr	r3, [r4, #4]
1001924a:	455b      	cmp	r3, fp
1001924c:	f4ff af62 	bcc.w	10019114 <_fseeko_r+0xcc>
10019250:	6822      	ldr	r2, [r4, #0]
10019252:	eba3 030b 	sub.w	r3, r3, fp
10019256:	445a      	add	r2, fp
10019258:	e9c4 2300 	strd	r2, r3, [r4]
1001925c:	2208      	movs	r2, #8
1001925e:	2100      	movs	r1, #0
10019260:	e77b      	b.n	1001915a <_fseeko_r+0x112>
10019262:	4621      	mov	r1, r4
10019264:	4628      	mov	r0, r5
10019266:	f7ff f937 	bl	100184d8 <_fflush_r>
1001926a:	e707      	b.n	1001907c <_fseeko_r+0x34>
1001926c:	075e      	lsls	r6, r3, #29
1001926e:	6d27      	ldr	r7, [r4, #80]	@ 0x50
10019270:	6922      	ldr	r2, [r4, #16]
10019272:	f53f af35 	bmi.w	100190e0 <_fseeko_r+0x98>
10019276:	0718      	lsls	r0, r3, #28
10019278:	f57f af38 	bpl.w	100190ec <_fseeko_r+0xa4>
1001927c:	6823      	ldr	r3, [r4, #0]
1001927e:	2b00      	cmp	r3, #0
10019280:	f43f af34 	beq.w	100190ec <_fseeko_r+0xa4>
10019284:	1a9b      	subs	r3, r3, r2
10019286:	441f      	add	r7, r3
10019288:	e730      	b.n	100190ec <_fseeko_r+0xa4>
1001928a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001928c:	f000 fc74 	bl	10019b78 <__retarget_lock_acquire_recursive>
10019290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10019294:	e6ec      	b.n	10019070 <_fseeko_r+0x28>
10019296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1001929a:	466a      	mov	r2, sp
1001929c:	4628      	mov	r0, r5
1001929e:	f000 fa2f 	bl	10019700 <_fstat_r>
100192a2:	2800      	cmp	r0, #0
100192a4:	f47f af36 	bne.w	10019114 <_fseeko_r+0xcc>
100192a8:	9b04      	ldr	r3, [sp, #16]
100192aa:	eb08 0b03 	add.w	fp, r8, r3
100192ae:	f1ba 0f00 	cmp.w	sl, #0
100192b2:	d08a      	beq.n	100191ca <_fseeko_r+0x182>
100192b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
100192b6:	6862      	ldr	r2, [r4, #4]
100192b8:	b121      	cbz	r1, 100192c4 <_fseeko_r+0x27c>
100192ba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
100192bc:	e791      	b.n	100191e2 <_fseeko_r+0x19a>
100192be:	f7ff fae7 	bl	10018890 <__sinit>
100192c2:	e6cd      	b.n	10019060 <_fseeko_r+0x18>
100192c4:	6823      	ldr	r3, [r4, #0]
100192c6:	6920      	ldr	r0, [r4, #16]
100192c8:	1a1b      	subs	r3, r3, r0
100192ca:	1aff      	subs	r7, r7, r3
100192cc:	2100      	movs	r1, #0
100192ce:	4413      	add	r3, r2
100192d0:	e78d      	b.n	100191ee <_fseeko_r+0x1a6>
100192d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100192d4:	f000 fc52 	bl	10019b7c <__retarget_lock_release_recursive>
100192d8:	e6e4      	b.n	100190a4 <_fseeko_r+0x5c>
100192da:	69e1      	ldr	r1, [r4, #28]
100192dc:	4652      	mov	r2, sl
100192de:	2301      	movs	r3, #1
100192e0:	4628      	mov	r0, r5
100192e2:	47c8      	blx	r9
100192e4:	1c41      	adds	r1, r0, #1
100192e6:	f47f af75 	bne.w	100191d4 <_fseeko_r+0x18c>
100192ea:	e713      	b.n	10019114 <_fseeko_r+0xcc>
100192ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100192f0:	e70d      	b.n	1001910e <_fseeko_r+0xc6>
100192f2:	ebab 0707 	sub.w	r7, fp, r7
100192f6:	4438      	add	r0, r7
100192f8:	1bdb      	subs	r3, r3, r7
100192fa:	e9c4 0300 	strd	r0, r3, [r4]
100192fe:	b141      	cbz	r1, 10019312 <_fseeko_r+0x2ca>
10019300:	f104 0340 	add.w	r3, r4, #64	@ 0x40
10019304:	4299      	cmp	r1, r3
10019306:	d002      	beq.n	1001930e <_fseeko_r+0x2c6>
10019308:	4628      	mov	r0, r5
1001930a:	f001 fe59 	bl	1001afc0 <_free_r>
1001930e:	2300      	movs	r3, #0
10019310:	6323      	str	r3, [r4, #48]	@ 0x30
10019312:	89a3      	ldrh	r3, [r4, #12]
10019314:	f023 0320 	bic.w	r3, r3, #32
10019318:	2208      	movs	r2, #8
1001931a:	81a3      	strh	r3, [r4, #12]
1001931c:	2100      	movs	r1, #0
1001931e:	e71c      	b.n	1001915a <_fseeko_r+0x112>
10019320:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10019322:	07db      	lsls	r3, r3, #31
10019324:	f53f aebe 	bmi.w	100190a4 <_fseeko_r+0x5c>
10019328:	e6b8      	b.n	1001909c <_fseeko_r+0x54>
1001932a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1001932c:	221d      	movs	r2, #29
1001932e:	07d9      	lsls	r1, r3, #31
10019330:	602a      	str	r2, [r5, #0]
10019332:	f53f aeb7 	bmi.w	100190a4 <_fseeko_r+0x5c>
10019336:	e6b1      	b.n	1001909c <_fseeko_r+0x54>
10019338:	1001865d 	.word	0x1001865d

1001933c <_gets_r>:
1001933c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001933e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
10019340:	6844      	ldr	r4, [r0, #4]
10019342:	4607      	mov	r7, r0
10019344:	460d      	mov	r5, r1
10019346:	2b00      	cmp	r3, #0
10019348:	d033      	beq.n	100193b2 <_gets_r+0x76>
1001934a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1001934c:	07d9      	lsls	r1, r3, #31
1001934e:	d402      	bmi.n	10019356 <_gets_r+0x1a>
10019350:	89a3      	ldrh	r3, [r4, #12]
10019352:	059a      	lsls	r2, r3, #22
10019354:	d524      	bpl.n	100193a0 <_gets_r+0x64>
10019356:	462e      	mov	r6, r5
10019358:	e007      	b.n	1001936a <_gets_r+0x2e>
1001935a:	6823      	ldr	r3, [r4, #0]
1001935c:	1c5a      	adds	r2, r3, #1
1001935e:	6022      	str	r2, [r4, #0]
10019360:	781b      	ldrb	r3, [r3, #0]
10019362:	2b0a      	cmp	r3, #10
10019364:	d012      	beq.n	1001938c <_gets_r+0x50>
10019366:	f806 3b01 	strb.w	r3, [r6], #1
1001936a:	6863      	ldr	r3, [r4, #4]
1001936c:	3b01      	subs	r3, #1
1001936e:	2b00      	cmp	r3, #0
10019370:	6063      	str	r3, [r4, #4]
10019372:	daf2      	bge.n	1001935a <_gets_r+0x1e>
10019374:	4621      	mov	r1, r4
10019376:	4638      	mov	r0, r7
10019378:	f005 ff9a 	bl	1001f2b0 <__srget_r>
1001937c:	280a      	cmp	r0, #10
1001937e:	d005      	beq.n	1001938c <_gets_r+0x50>
10019380:	1c43      	adds	r3, r0, #1
10019382:	d001      	beq.n	10019388 <_gets_r+0x4c>
10019384:	b2c3      	uxtb	r3, r0
10019386:	e7ee      	b.n	10019366 <_gets_r+0x2a>
10019388:	42ae      	cmp	r6, r5
1001938a:	d015      	beq.n	100193b8 <_gets_r+0x7c>
1001938c:	2300      	movs	r3, #0
1001938e:	7033      	strb	r3, [r6, #0]
10019390:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10019392:	07d8      	lsls	r0, r3, #31
10019394:	d402      	bmi.n	1001939c <_gets_r+0x60>
10019396:	89a3      	ldrh	r3, [r4, #12]
10019398:	059b      	lsls	r3, r3, #22
1001939a:	d505      	bpl.n	100193a8 <_gets_r+0x6c>
1001939c:	4628      	mov	r0, r5
1001939e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100193a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100193a2:	f000 fbe9 	bl	10019b78 <__retarget_lock_acquire_recursive>
100193a6:	e7d6      	b.n	10019356 <_gets_r+0x1a>
100193a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100193aa:	f000 fbe7 	bl	10019b7c <__retarget_lock_release_recursive>
100193ae:	4628      	mov	r0, r5
100193b0:	e7f5      	b.n	1001939e <_gets_r+0x62>
100193b2:	f7ff fa6d 	bl	10018890 <__sinit>
100193b6:	e7c8      	b.n	1001934a <_gets_r+0xe>
100193b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100193ba:	07d9      	lsls	r1, r3, #31
100193bc:	d501      	bpl.n	100193c2 <_gets_r+0x86>
100193be:	2000      	movs	r0, #0
100193c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100193c2:	89a3      	ldrh	r3, [r4, #12]
100193c4:	059a      	lsls	r2, r3, #22
100193c6:	d4fa      	bmi.n	100193be <_gets_r+0x82>
100193c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100193ca:	f000 fbd7 	bl	10019b7c <__retarget_lock_release_recursive>
100193ce:	e7f6      	b.n	100193be <_gets_r+0x82>

100193d0 <gets>:
100193d0:	4b02      	ldr	r3, [pc, #8]	@ (100193dc <gets+0xc>)
100193d2:	4601      	mov	r1, r0
100193d4:	6818      	ldr	r0, [r3, #0]
100193d6:	f7ff bfb1 	b.w	1001933c <_gets_r>
100193da:	bf00      	nop
100193dc:	20000598 	.word	0x20000598

100193e0 <__fputwc>:
100193e0:	b570      	push	{r4, r5, r6, lr}
100193e2:	b082      	sub	sp, #8
100193e4:	4606      	mov	r6, r0
100193e6:	460d      	mov	r5, r1
100193e8:	4614      	mov	r4, r2
100193ea:	f000 f96d 	bl	100196c8 <__locale_mb_cur_max>
100193ee:	2801      	cmp	r0, #1
100193f0:	d102      	bne.n	100193f8 <__fputwc+0x18>
100193f2:	1e6b      	subs	r3, r5, #1
100193f4:	2bfe      	cmp	r3, #254	@ 0xfe
100193f6:	d926      	bls.n	10019446 <__fputwc+0x66>
100193f8:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
100193fc:	462a      	mov	r2, r5
100193fe:	a901      	add	r1, sp, #4
10019400:	4630      	mov	r0, r6
10019402:	f000 fd49 	bl	10019e98 <_wcrtomb_r>
10019406:	1c43      	adds	r3, r0, #1
10019408:	d020      	beq.n	1001944c <__fputwc+0x6c>
1001940a:	b178      	cbz	r0, 1001942c <__fputwc+0x4c>
1001940c:	68a3      	ldr	r3, [r4, #8]
1001940e:	f89d 1004 	ldrb.w	r1, [sp, #4]
10019412:	3b01      	subs	r3, #1
10019414:	2b00      	cmp	r3, #0
10019416:	60a3      	str	r3, [r4, #8]
10019418:	da04      	bge.n	10019424 <__fputwc+0x44>
1001941a:	69a2      	ldr	r2, [r4, #24]
1001941c:	4293      	cmp	r3, r2
1001941e:	db08      	blt.n	10019432 <__fputwc+0x52>
10019420:	290a      	cmp	r1, #10
10019422:	d006      	beq.n	10019432 <__fputwc+0x52>
10019424:	6823      	ldr	r3, [r4, #0]
10019426:	1c5a      	adds	r2, r3, #1
10019428:	6022      	str	r2, [r4, #0]
1001942a:	7019      	strb	r1, [r3, #0]
1001942c:	4628      	mov	r0, r5
1001942e:	b002      	add	sp, #8
10019430:	bd70      	pop	{r4, r5, r6, pc}
10019432:	4622      	mov	r2, r4
10019434:	4630      	mov	r0, r6
10019436:	f007 f935 	bl	100206a4 <__swbuf_r>
1001943a:	3001      	adds	r0, #1
1001943c:	d1f6      	bne.n	1001942c <__fputwc+0x4c>
1001943e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10019442:	b002      	add	sp, #8
10019444:	bd70      	pop	{r4, r5, r6, pc}
10019446:	f88d 5004 	strb.w	r5, [sp, #4]
1001944a:	e7df      	b.n	1001940c <__fputwc+0x2c>
1001944c:	89a3      	ldrh	r3, [r4, #12]
1001944e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10019452:	81a3      	strh	r3, [r4, #12]
10019454:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10019458:	e7f3      	b.n	10019442 <__fputwc+0x62>
1001945a:	bf00      	nop

1001945c <_fputwc_r>:
1001945c:	b530      	push	{r4, r5, lr}
1001945e:	4614      	mov	r4, r2
10019460:	6e52      	ldr	r2, [r2, #100]	@ 0x64
10019462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10019466:	4605      	mov	r5, r0
10019468:	07d0      	lsls	r0, r2, #31
1001946a:	b083      	sub	sp, #12
1001946c:	d401      	bmi.n	10019472 <_fputwc_r+0x16>
1001946e:	059a      	lsls	r2, r3, #22
10019470:	d51c      	bpl.n	100194ac <_fputwc_r+0x50>
10019472:	0498      	lsls	r0, r3, #18
10019474:	d406      	bmi.n	10019484 <_fputwc_r+0x28>
10019476:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10019478:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
1001947c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
10019480:	81a3      	strh	r3, [r4, #12]
10019482:	6662      	str	r2, [r4, #100]	@ 0x64
10019484:	4622      	mov	r2, r4
10019486:	4628      	mov	r0, r5
10019488:	f7ff ffaa 	bl	100193e0 <__fputwc>
1001948c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1001948e:	07da      	lsls	r2, r3, #31
10019490:	4605      	mov	r5, r0
10019492:	d402      	bmi.n	1001949a <_fputwc_r+0x3e>
10019494:	89a3      	ldrh	r3, [r4, #12]
10019496:	059b      	lsls	r3, r3, #22
10019498:	d502      	bpl.n	100194a0 <_fputwc_r+0x44>
1001949a:	4628      	mov	r0, r5
1001949c:	b003      	add	sp, #12
1001949e:	bd30      	pop	{r4, r5, pc}
100194a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100194a2:	f000 fb6b 	bl	10019b7c <__retarget_lock_release_recursive>
100194a6:	4628      	mov	r0, r5
100194a8:	b003      	add	sp, #12
100194aa:	bd30      	pop	{r4, r5, pc}
100194ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100194ae:	9101      	str	r1, [sp, #4]
100194b0:	f000 fb62 	bl	10019b78 <__retarget_lock_acquire_recursive>
100194b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100194b8:	9901      	ldr	r1, [sp, #4]
100194ba:	e7da      	b.n	10019472 <_fputwc_r+0x16>

100194bc <memmove>:
100194bc:	4288      	cmp	r0, r1
100194be:	d90e      	bls.n	100194de <memmove+0x22>
100194c0:	188b      	adds	r3, r1, r2
100194c2:	4283      	cmp	r3, r0
100194c4:	d90b      	bls.n	100194de <memmove+0x22>
100194c6:	eb00 0c02 	add.w	ip, r0, r2
100194ca:	2a00      	cmp	r2, #0
100194cc:	d06e      	beq.n	100195ac <memmove+0xf0>
100194ce:	4662      	mov	r2, ip
100194d0:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
100194d4:	f802 cd01 	strb.w	ip, [r2, #-1]!
100194d8:	4299      	cmp	r1, r3
100194da:	d1f9      	bne.n	100194d0 <memmove+0x14>
100194dc:	4770      	bx	lr
100194de:	2a0f      	cmp	r2, #15
100194e0:	d80f      	bhi.n	10019502 <memmove+0x46>
100194e2:	4603      	mov	r3, r0
100194e4:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
100194e8:	2a00      	cmp	r2, #0
100194ea:	d05f      	beq.n	100195ac <memmove+0xf0>
100194ec:	f10c 0c01 	add.w	ip, ip, #1
100194f0:	3b01      	subs	r3, #1
100194f2:	448c      	add	ip, r1
100194f4:	f811 2b01 	ldrb.w	r2, [r1], #1
100194f8:	f803 2f01 	strb.w	r2, [r3, #1]!
100194fc:	4561      	cmp	r1, ip
100194fe:	d1f9      	bne.n	100194f4 <memmove+0x38>
10019500:	4770      	bx	lr
10019502:	ea40 0301 	orr.w	r3, r0, r1
10019506:	079b      	lsls	r3, r3, #30
10019508:	d151      	bne.n	100195ae <memmove+0xf2>
1001950a:	f1a2 0310 	sub.w	r3, r2, #16
1001950e:	b570      	push	{r4, r5, r6, lr}
10019510:	f101 0c20 	add.w	ip, r1, #32
10019514:	f023 050f 	bic.w	r5, r3, #15
10019518:	f101 0e10 	add.w	lr, r1, #16
1001951c:	f100 0410 	add.w	r4, r0, #16
10019520:	44ac      	add	ip, r5
10019522:	091b      	lsrs	r3, r3, #4
10019524:	f85e 5c10 	ldr.w	r5, [lr, #-16]
10019528:	f844 5c10 	str.w	r5, [r4, #-16]
1001952c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
10019530:	f844 5c0c 	str.w	r5, [r4, #-12]
10019534:	f85e 5c08 	ldr.w	r5, [lr, #-8]
10019538:	f844 5c08 	str.w	r5, [r4, #-8]
1001953c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
10019540:	f844 5c04 	str.w	r5, [r4, #-4]
10019544:	f10e 0e10 	add.w	lr, lr, #16
10019548:	45e6      	cmp	lr, ip
1001954a:	f104 0410 	add.w	r4, r4, #16
1001954e:	d1e9      	bne.n	10019524 <memmove+0x68>
10019550:	3301      	adds	r3, #1
10019552:	f012 0f0c 	tst.w	r2, #12
10019556:	eb01 1103 	add.w	r1, r1, r3, lsl #4
1001955a:	f002 040f 	and.w	r4, r2, #15
1001955e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
10019562:	d028      	beq.n	100195b6 <memmove+0xfa>
10019564:	3c04      	subs	r4, #4
10019566:	f024 0603 	bic.w	r6, r4, #3
1001956a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
1001956e:	441e      	add	r6, r3
10019570:	1f1c      	subs	r4, r3, #4
10019572:	468e      	mov	lr, r1
10019574:	f85e 5b04 	ldr.w	r5, [lr], #4
10019578:	f844 5f04 	str.w	r5, [r4, #4]!
1001957c:	42b4      	cmp	r4, r6
1001957e:	d1f9      	bne.n	10019574 <memmove+0xb8>
10019580:	f10c 0401 	add.w	r4, ip, #1
10019584:	f002 0203 	and.w	r2, r2, #3
10019588:	eb03 0384 	add.w	r3, r3, r4, lsl #2
1001958c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
10019590:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
10019594:	b14a      	cbz	r2, 100195aa <memmove+0xee>
10019596:	f10c 0c01 	add.w	ip, ip, #1
1001959a:	3b01      	subs	r3, #1
1001959c:	448c      	add	ip, r1
1001959e:	f811 2b01 	ldrb.w	r2, [r1], #1
100195a2:	f803 2f01 	strb.w	r2, [r3, #1]!
100195a6:	4561      	cmp	r1, ip
100195a8:	d1f9      	bne.n	1001959e <memmove+0xe2>
100195aa:	bd70      	pop	{r4, r5, r6, pc}
100195ac:	4770      	bx	lr
100195ae:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
100195b2:	4603      	mov	r3, r0
100195b4:	e79a      	b.n	100194ec <memmove+0x30>
100195b6:	4622      	mov	r2, r4
100195b8:	e7ea      	b.n	10019590 <memmove+0xd4>
100195ba:	bf00      	nop

100195bc <memset>:
100195bc:	0783      	lsls	r3, r0, #30
100195be:	b530      	push	{r4, r5, lr}
100195c0:	d047      	beq.n	10019652 <memset+0x96>
100195c2:	1e54      	subs	r4, r2, #1
100195c4:	2a00      	cmp	r2, #0
100195c6:	d03e      	beq.n	10019646 <memset+0x8a>
100195c8:	b2ca      	uxtb	r2, r1
100195ca:	4603      	mov	r3, r0
100195cc:	e001      	b.n	100195d2 <memset+0x16>
100195ce:	3c01      	subs	r4, #1
100195d0:	d339      	bcc.n	10019646 <memset+0x8a>
100195d2:	f803 2b01 	strb.w	r2, [r3], #1
100195d6:	079d      	lsls	r5, r3, #30
100195d8:	d1f9      	bne.n	100195ce <memset+0x12>
100195da:	2c03      	cmp	r4, #3
100195dc:	d92c      	bls.n	10019638 <memset+0x7c>
100195de:	b2cd      	uxtb	r5, r1
100195e0:	eb05 2505 	add.w	r5, r5, r5, lsl #8
100195e4:	2c0f      	cmp	r4, #15
100195e6:	eb05 4505 	add.w	r5, r5, r5, lsl #16
100195ea:	d935      	bls.n	10019658 <memset+0x9c>
100195ec:	f1a4 0210 	sub.w	r2, r4, #16
100195f0:	f022 0c0f 	bic.w	ip, r2, #15
100195f4:	f103 0e10 	add.w	lr, r3, #16
100195f8:	44e6      	add	lr, ip
100195fa:	ea4f 1c12 	mov.w	ip, r2, lsr #4
100195fe:	461a      	mov	r2, r3
10019600:	6015      	str	r5, [r2, #0]
10019602:	6055      	str	r5, [r2, #4]
10019604:	6095      	str	r5, [r2, #8]
10019606:	60d5      	str	r5, [r2, #12]
10019608:	3210      	adds	r2, #16
1001960a:	4572      	cmp	r2, lr
1001960c:	d1f8      	bne.n	10019600 <memset+0x44>
1001960e:	f10c 0201 	add.w	r2, ip, #1
10019612:	f014 0f0c 	tst.w	r4, #12
10019616:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1001961a:	f004 0c0f 	and.w	ip, r4, #15
1001961e:	d013      	beq.n	10019648 <memset+0x8c>
10019620:	f1ac 0304 	sub.w	r3, ip, #4
10019624:	f023 0303 	bic.w	r3, r3, #3
10019628:	3304      	adds	r3, #4
1001962a:	4413      	add	r3, r2
1001962c:	f842 5b04 	str.w	r5, [r2], #4
10019630:	429a      	cmp	r2, r3
10019632:	d1fb      	bne.n	1001962c <memset+0x70>
10019634:	f00c 0403 	and.w	r4, ip, #3
10019638:	b12c      	cbz	r4, 10019646 <memset+0x8a>
1001963a:	b2c9      	uxtb	r1, r1
1001963c:	441c      	add	r4, r3
1001963e:	f803 1b01 	strb.w	r1, [r3], #1
10019642:	429c      	cmp	r4, r3
10019644:	d1fb      	bne.n	1001963e <memset+0x82>
10019646:	bd30      	pop	{r4, r5, pc}
10019648:	4664      	mov	r4, ip
1001964a:	4613      	mov	r3, r2
1001964c:	2c00      	cmp	r4, #0
1001964e:	d1f4      	bne.n	1001963a <memset+0x7e>
10019650:	e7f9      	b.n	10019646 <memset+0x8a>
10019652:	4603      	mov	r3, r0
10019654:	4614      	mov	r4, r2
10019656:	e7c0      	b.n	100195da <memset+0x1e>
10019658:	461a      	mov	r2, r3
1001965a:	46a4      	mov	ip, r4
1001965c:	e7e0      	b.n	10019620 <memset+0x64>
1001965e:	bf00      	nop

10019660 <strncpy>:
10019660:	ea40 0301 	orr.w	r3, r0, r1
10019664:	079b      	lsls	r3, r3, #30
10019666:	b510      	push	{r4, lr}
10019668:	d101      	bne.n	1001966e <strncpy+0xe>
1001966a:	2a03      	cmp	r2, #3
1001966c:	d817      	bhi.n	1001969e <strncpy+0x3e>
1001966e:	4684      	mov	ip, r0
10019670:	f101 3eff 	add.w	lr, r1, #4294967295	@ 0xffffffff
10019674:	e007      	b.n	10019686 <strncpy+0x26>
10019676:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
1001967a:	f803 1b01 	strb.w	r1, [r3], #1
1001967e:	1e54      	subs	r4, r2, #1
10019680:	b129      	cbz	r1, 1001968e <strncpy+0x2e>
10019682:	469c      	mov	ip, r3
10019684:	4622      	mov	r2, r4
10019686:	4663      	mov	r3, ip
10019688:	2a00      	cmp	r2, #0
1001968a:	d1f4      	bne.n	10019676 <strncpy+0x16>
1001968c:	bd10      	pop	{r4, pc}
1001968e:	4494      	add	ip, r2
10019690:	2c00      	cmp	r4, #0
10019692:	d0fb      	beq.n	1001968c <strncpy+0x2c>
10019694:	f803 1b01 	strb.w	r1, [r3], #1
10019698:	4563      	cmp	r3, ip
1001969a:	d1fb      	bne.n	10019694 <strncpy+0x34>
1001969c:	bd10      	pop	{r4, pc}
1001969e:	468e      	mov	lr, r1
100196a0:	4684      	mov	ip, r0
100196a2:	f8de 4000 	ldr.w	r4, [lr]
100196a6:	f1a4 3301 	sub.w	r3, r4, #16843009	@ 0x1010101
100196aa:	ea23 0304 	bic.w	r3, r3, r4
100196ae:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
100196b2:	4671      	mov	r1, lr
100196b4:	f10e 0e04 	add.w	lr, lr, #4
100196b8:	d1da      	bne.n	10019670 <strncpy+0x10>
100196ba:	3a04      	subs	r2, #4
100196bc:	2a03      	cmp	r2, #3
100196be:	f84c 4b04 	str.w	r4, [ip], #4
100196c2:	d8ee      	bhi.n	100196a2 <strncpy+0x42>
100196c4:	4671      	mov	r1, lr
100196c6:	e7d3      	b.n	10019670 <strncpy+0x10>

100196c8 <__locale_mb_cur_max>:
100196c8:	4b01      	ldr	r3, [pc, #4]	@ (100196d0 <__locale_mb_cur_max+0x8>)
100196ca:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
100196ce:	4770      	bx	lr
100196d0:	2000042c 	.word	0x2000042c

100196d4 <_localeconv_r>:
100196d4:	4800      	ldr	r0, [pc, #0]	@ (100196d8 <_localeconv_r+0x4>)
100196d6:	4770      	bx	lr
100196d8:	2000051c 	.word	0x2000051c

100196dc <_close_r>:
100196dc:	b538      	push	{r3, r4, r5, lr}
100196de:	4d07      	ldr	r5, [pc, #28]	@ (100196fc <_close_r+0x20>)
100196e0:	2200      	movs	r2, #0
100196e2:	4604      	mov	r4, r0
100196e4:	4608      	mov	r0, r1
100196e6:	602a      	str	r2, [r5, #0]
100196e8:	f7f9 f9f2 	bl	10012ad0 <_close>
100196ec:	1c43      	adds	r3, r0, #1
100196ee:	d000      	beq.n	100196f2 <_close_r+0x16>
100196f0:	bd38      	pop	{r3, r4, r5, pc}
100196f2:	682b      	ldr	r3, [r5, #0]
100196f4:	2b00      	cmp	r3, #0
100196f6:	d0fb      	beq.n	100196f0 <_close_r+0x14>
100196f8:	6023      	str	r3, [r4, #0]
100196fa:	bd38      	pop	{r3, r4, r5, pc}
100196fc:	200015c4 	.word	0x200015c4

10019700 <_fstat_r>:
10019700:	b570      	push	{r4, r5, r6, lr}
10019702:	460c      	mov	r4, r1
10019704:	4d08      	ldr	r5, [pc, #32]	@ (10019728 <_fstat_r+0x28>)
10019706:	4603      	mov	r3, r0
10019708:	2600      	movs	r6, #0
1001970a:	4620      	mov	r0, r4
1001970c:	4611      	mov	r1, r2
1001970e:	461c      	mov	r4, r3
10019710:	602e      	str	r6, [r5, #0]
10019712:	f7f9 f9e9 	bl	10012ae8 <_fstat>
10019716:	1c43      	adds	r3, r0, #1
10019718:	d000      	beq.n	1001971c <_fstat_r+0x1c>
1001971a:	bd70      	pop	{r4, r5, r6, pc}
1001971c:	682b      	ldr	r3, [r5, #0]
1001971e:	2b00      	cmp	r3, #0
10019720:	d0fb      	beq.n	1001971a <_fstat_r+0x1a>
10019722:	6023      	str	r3, [r4, #0]
10019724:	bd70      	pop	{r4, r5, r6, pc}
10019726:	bf00      	nop
10019728:	200015c4 	.word	0x200015c4

1001972c <_lseek_r>:
1001972c:	b538      	push	{r3, r4, r5, lr}
1001972e:	460c      	mov	r4, r1
10019730:	4d08      	ldr	r5, [pc, #32]	@ (10019754 <_lseek_r+0x28>)
10019732:	4684      	mov	ip, r0
10019734:	4611      	mov	r1, r2
10019736:	4620      	mov	r0, r4
10019738:	461a      	mov	r2, r3
1001973a:	2300      	movs	r3, #0
1001973c:	602b      	str	r3, [r5, #0]
1001973e:	4664      	mov	r4, ip
10019740:	f7f9 f9ce 	bl	10012ae0 <_lseek>
10019744:	1c43      	adds	r3, r0, #1
10019746:	d000      	beq.n	1001974a <_lseek_r+0x1e>
10019748:	bd38      	pop	{r3, r4, r5, pc}
1001974a:	682b      	ldr	r3, [r5, #0]
1001974c:	2b00      	cmp	r3, #0
1001974e:	d0fb      	beq.n	10019748 <_lseek_r+0x1c>
10019750:	6023      	str	r3, [r4, #0]
10019752:	bd38      	pop	{r3, r4, r5, pc}
10019754:	200015c4 	.word	0x200015c4

10019758 <_open_r>:
10019758:	b538      	push	{r3, r4, r5, lr}
1001975a:	460c      	mov	r4, r1
1001975c:	4d08      	ldr	r5, [pc, #32]	@ (10019780 <_open_r+0x28>)
1001975e:	4684      	mov	ip, r0
10019760:	4611      	mov	r1, r2
10019762:	4620      	mov	r0, r4
10019764:	461a      	mov	r2, r3
10019766:	2300      	movs	r3, #0
10019768:	602b      	str	r3, [r5, #0]
1001976a:	4664      	mov	r4, ip
1001976c:	f7f9 f9ac 	bl	10012ac8 <_open>
10019770:	1c43      	adds	r3, r0, #1
10019772:	d000      	beq.n	10019776 <_open_r+0x1e>
10019774:	bd38      	pop	{r3, r4, r5, pc}
10019776:	682b      	ldr	r3, [r5, #0]
10019778:	2b00      	cmp	r3, #0
1001977a:	d0fb      	beq.n	10019774 <_open_r+0x1c>
1001977c:	6023      	str	r3, [r4, #0]
1001977e:	bd38      	pop	{r3, r4, r5, pc}
10019780:	200015c4 	.word	0x200015c4

10019784 <_read_r>:
10019784:	b538      	push	{r3, r4, r5, lr}
10019786:	460c      	mov	r4, r1
10019788:	4d08      	ldr	r5, [pc, #32]	@ (100197ac <_read_r+0x28>)
1001978a:	4684      	mov	ip, r0
1001978c:	4611      	mov	r1, r2
1001978e:	4620      	mov	r0, r4
10019790:	461a      	mov	r2, r3
10019792:	2300      	movs	r3, #0
10019794:	602b      	str	r3, [r5, #0]
10019796:	4664      	mov	r4, ip
10019798:	f7f9 f9aa 	bl	10012af0 <_read>
1001979c:	1c43      	adds	r3, r0, #1
1001979e:	d000      	beq.n	100197a2 <_read_r+0x1e>
100197a0:	bd38      	pop	{r3, r4, r5, pc}
100197a2:	682b      	ldr	r3, [r5, #0]
100197a4:	2b00      	cmp	r3, #0
100197a6:	d0fb      	beq.n	100197a0 <_read_r+0x1c>
100197a8:	6023      	str	r3, [r4, #0]
100197aa:	bd38      	pop	{r3, r4, r5, pc}
100197ac:	200015c4 	.word	0x200015c4

100197b0 <_sbrk_r>:
100197b0:	b538      	push	{r3, r4, r5, lr}
100197b2:	4d07      	ldr	r5, [pc, #28]	@ (100197d0 <_sbrk_r+0x20>)
100197b4:	2200      	movs	r2, #0
100197b6:	4604      	mov	r4, r0
100197b8:	4608      	mov	r0, r1
100197ba:	602a      	str	r2, [r5, #0]
100197bc:	f7f9 fb10 	bl	10012de0 <_sbrk>
100197c0:	1c43      	adds	r3, r0, #1
100197c2:	d000      	beq.n	100197c6 <_sbrk_r+0x16>
100197c4:	bd38      	pop	{r3, r4, r5, pc}
100197c6:	682b      	ldr	r3, [r5, #0]
100197c8:	2b00      	cmp	r3, #0
100197ca:	d0fb      	beq.n	100197c4 <_sbrk_r+0x14>
100197cc:	6023      	str	r3, [r4, #0]
100197ce:	bd38      	pop	{r3, r4, r5, pc}
100197d0:	200015c4 	.word	0x200015c4

100197d4 <_write_r>:
100197d4:	b538      	push	{r3, r4, r5, lr}
100197d6:	460c      	mov	r4, r1
100197d8:	4d08      	ldr	r5, [pc, #32]	@ (100197fc <_write_r+0x28>)
100197da:	4684      	mov	ip, r0
100197dc:	4611      	mov	r1, r2
100197de:	4620      	mov	r0, r4
100197e0:	461a      	mov	r2, r3
100197e2:	2300      	movs	r3, #0
100197e4:	602b      	str	r3, [r5, #0]
100197e6:	4664      	mov	r4, ip
100197e8:	f7f9 f9aa 	bl	10012b40 <_write>
100197ec:	1c43      	adds	r3, r0, #1
100197ee:	d000      	beq.n	100197f2 <_write_r+0x1e>
100197f0:	bd38      	pop	{r3, r4, r5, pc}
100197f2:	682b      	ldr	r3, [r5, #0]
100197f4:	2b00      	cmp	r3, #0
100197f6:	d0fb      	beq.n	100197f0 <_write_r+0x1c>
100197f8:	6023      	str	r3, [r4, #0]
100197fa:	bd38      	pop	{r3, r4, r5, pc}
100197fc:	200015c4 	.word	0x200015c4

10019800 <__errno>:
10019800:	4b01      	ldr	r3, [pc, #4]	@ (10019808 <__errno+0x8>)
10019802:	6818      	ldr	r0, [r3, #0]
10019804:	4770      	bx	lr
10019806:	bf00      	nop
10019808:	20000598 	.word	0x20000598

1001980c <sysconf>:
1001980c:	2808      	cmp	r0, #8
1001980e:	d102      	bne.n	10019816 <sysconf+0xa>
10019810:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
10019814:	4770      	bx	lr
10019816:	b508      	push	{r3, lr}
10019818:	f7ff fff2 	bl	10019800 <__errno>
1001981c:	2316      	movs	r3, #22
1001981e:	6003      	str	r3, [r0, #0]
10019820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10019824:	bd08      	pop	{r3, pc}
10019826:	bf00      	nop
	...

10019840 <strcmp>:
10019840:	7802      	ldrb	r2, [r0, #0]
10019842:	780b      	ldrb	r3, [r1, #0]
10019844:	2a01      	cmp	r2, #1
10019846:	bf28      	it	cs
10019848:	429a      	cmpcs	r2, r3
1001984a:	f040 80d8 	bne.w	100199fe <strcmp+0x1be>
1001984e:	e96d 4504 	strd	r4, r5, [sp, #-16]!
10019852:	ea40 0401 	orr.w	r4, r0, r1
10019856:	e9cd 6702 	strd	r6, r7, [sp, #8]
1001985a:	f06f 0c00 	mvn.w	ip, #0
1001985e:	ea4f 7244 	mov.w	r2, r4, lsl #29
10019862:	b31a      	cbz	r2, 100198ac <strcmp+0x6c>
10019864:	ea80 0401 	eor.w	r4, r0, r1
10019868:	f014 0f07 	tst.w	r4, #7
1001986c:	d16b      	bne.n	10019946 <strcmp+0x106>
1001986e:	f000 0407 	and.w	r4, r0, #7
10019872:	f020 0007 	bic.w	r0, r0, #7
10019876:	f004 0503 	and.w	r5, r4, #3
1001987a:	f021 0107 	bic.w	r1, r1, #7
1001987e:	ea4f 05c5 	mov.w	r5, r5, lsl #3
10019882:	e8f0 2304 	ldrd	r2, r3, [r0], #16
10019886:	f014 0f04 	tst.w	r4, #4
1001988a:	e8f1 6704 	ldrd	r6, r7, [r1], #16
1001988e:	fa0c f405 	lsl.w	r4, ip, r5
10019892:	ea62 0204 	orn	r2, r2, r4
10019896:	ea66 0604 	orn	r6, r6, r4
1001989a:	d00b      	beq.n	100198b4 <strcmp+0x74>
1001989c:	ea63 0304 	orn	r3, r3, r4
100198a0:	4662      	mov	r2, ip
100198a2:	ea67 0704 	orn	r7, r7, r4
100198a6:	4666      	mov	r6, ip
100198a8:	e004      	b.n	100198b4 <strcmp+0x74>
100198aa:	bf00      	nop
100198ac:	e8f0 2304 	ldrd	r2, r3, [r0], #16
100198b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
100198b4:	fa82 f54c 	uadd8	r5, r2, ip
100198b8:	ea82 0406 	eor.w	r4, r2, r6
100198bc:	faa4 f48c 	sel	r4, r4, ip
100198c0:	bb6c      	cbnz	r4, 1001991e <strcmp+0xde>
100198c2:	fa83 f54c 	uadd8	r5, r3, ip
100198c6:	ea83 0507 	eor.w	r5, r3, r7
100198ca:	faa5 f58c 	sel	r5, r5, ip
100198ce:	b995      	cbnz	r5, 100198f6 <strcmp+0xb6>
100198d0:	e950 2302 	ldrd	r2, r3, [r0, #-8]
100198d4:	e951 6702 	ldrd	r6, r7, [r1, #-8]
100198d8:	fa82 f54c 	uadd8	r5, r2, ip
100198dc:	ea82 0406 	eor.w	r4, r2, r6
100198e0:	faa4 f48c 	sel	r4, r4, ip
100198e4:	fa83 f54c 	uadd8	r5, r3, ip
100198e8:	ea83 0507 	eor.w	r5, r3, r7
100198ec:	faa5 f58c 	sel	r5, r5, ip
100198f0:	4325      	orrs	r5, r4
100198f2:	d0db      	beq.n	100198ac <strcmp+0x6c>
100198f4:	b99c      	cbnz	r4, 1001991e <strcmp+0xde>
100198f6:	ba2d      	rev	r5, r5
100198f8:	fab5 f485 	clz	r4, r5
100198fc:	f024 0407 	bic.w	r4, r4, #7
10019900:	fa27 f104 	lsr.w	r1, r7, r4
10019904:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
10019908:	fa23 f304 	lsr.w	r3, r3, r4
1001990c:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
10019910:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10019914:	e8fd 4504 	ldrd	r4, r5, [sp], #16
10019918:	eba0 0001 	sub.w	r0, r0, r1
1001991c:	4770      	bx	lr
1001991e:	ba24      	rev	r4, r4
10019920:	fab4 f484 	clz	r4, r4
10019924:	f024 0407 	bic.w	r4, r4, #7
10019928:	fa26 f104 	lsr.w	r1, r6, r4
1001992c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
10019930:	fa22 f204 	lsr.w	r2, r2, r4
10019934:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
10019938:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
1001993c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
10019940:	eba0 0001 	sub.w	r0, r0, r1
10019944:	4770      	bx	lr
10019946:	f014 0f03 	tst.w	r4, #3
1001994a:	d13c      	bne.n	100199c6 <strcmp+0x186>
1001994c:	f010 0403 	ands.w	r4, r0, #3
10019950:	d128      	bne.n	100199a4 <strcmp+0x164>
10019952:	f850 2b08 	ldr.w	r2, [r0], #8
10019956:	f851 3b08 	ldr.w	r3, [r1], #8
1001995a:	fa82 f54c 	uadd8	r5, r2, ip
1001995e:	ea82 0503 	eor.w	r5, r2, r3
10019962:	faa5 f58c 	sel	r5, r5, ip
10019966:	b95d      	cbnz	r5, 10019980 <strcmp+0x140>
10019968:	f850 2c04 	ldr.w	r2, [r0, #-4]
1001996c:	f851 3c04 	ldr.w	r3, [r1, #-4]
10019970:	fa82 f54c 	uadd8	r5, r2, ip
10019974:	ea82 0503 	eor.w	r5, r2, r3
10019978:	faa5 f58c 	sel	r5, r5, ip
1001997c:	2d00      	cmp	r5, #0
1001997e:	d0e8      	beq.n	10019952 <strcmp+0x112>
10019980:	ba2d      	rev	r5, r5
10019982:	fab5 f485 	clz	r4, r5
10019986:	f024 0407 	bic.w	r4, r4, #7
1001998a:	fa23 f104 	lsr.w	r1, r3, r4
1001998e:	fa22 f204 	lsr.w	r2, r2, r4
10019992:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
10019996:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
1001999a:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1001999e:	eba0 0001 	sub.w	r0, r0, r1
100199a2:	4770      	bx	lr
100199a4:	ea4f 04c4 	mov.w	r4, r4, lsl #3
100199a8:	f020 0003 	bic.w	r0, r0, #3
100199ac:	f850 2b08 	ldr.w	r2, [r0], #8
100199b0:	f021 0103 	bic.w	r1, r1, #3
100199b4:	f851 3b08 	ldr.w	r3, [r1], #8
100199b8:	fa0c f404 	lsl.w	r4, ip, r4
100199bc:	ea62 0204 	orn	r2, r2, r4
100199c0:	ea63 0304 	orn	r3, r3, r4
100199c4:	e7c9      	b.n	1001995a <strcmp+0x11a>
100199c6:	f010 0403 	ands.w	r4, r0, #3
100199ca:	d01d      	beq.n	10019a08 <strcmp+0x1c8>
100199cc:	eba1 0104 	sub.w	r1, r1, r4
100199d0:	f020 0003 	bic.w	r0, r0, #3
100199d4:	07e4      	lsls	r4, r4, #31
100199d6:	f850 2b04 	ldr.w	r2, [r0], #4
100199da:	d006      	beq.n	100199ea <strcmp+0x1aa>
100199dc:	d212      	bcs.n	10019a04 <strcmp+0x1c4>
100199de:	788b      	ldrb	r3, [r1, #2]
100199e0:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
100199e4:	1ae4      	subs	r4, r4, r3
100199e6:	d106      	bne.n	100199f6 <strcmp+0x1b6>
100199e8:	b12b      	cbz	r3, 100199f6 <strcmp+0x1b6>
100199ea:	78cb      	ldrb	r3, [r1, #3]
100199ec:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
100199f0:	1ae4      	subs	r4, r4, r3
100199f2:	d100      	bne.n	100199f6 <strcmp+0x1b6>
100199f4:	b933      	cbnz	r3, 10019a04 <strcmp+0x1c4>
100199f6:	4620      	mov	r0, r4
100199f8:	f85d 4b10 	ldr.w	r4, [sp], #16
100199fc:	4770      	bx	lr
100199fe:	eba2 0003 	sub.w	r0, r2, r3
10019a02:	4770      	bx	lr
10019a04:	f101 0104 	add.w	r1, r1, #4
10019a08:	f850 2b04 	ldr.w	r2, [r0], #4
10019a0c:	07cc      	lsls	r4, r1, #31
10019a0e:	f021 0103 	bic.w	r1, r1, #3
10019a12:	f851 3b04 	ldr.w	r3, [r1], #4
10019a16:	d848      	bhi.n	10019aaa <strcmp+0x26a>
10019a18:	d224      	bcs.n	10019a64 <strcmp+0x224>
10019a1a:	f022 447f 	bic.w	r4, r2, #4278190080	@ 0xff000000
10019a1e:	fa82 f54c 	uadd8	r5, r2, ip
10019a22:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
10019a26:	faa5 f58c 	sel	r5, r5, ip
10019a2a:	d10a      	bne.n	10019a42 <strcmp+0x202>
10019a2c:	b965      	cbnz	r5, 10019a48 <strcmp+0x208>
10019a2e:	f851 3b04 	ldr.w	r3, [r1], #4
10019a32:	ea84 0402 	eor.w	r4, r4, r2
10019a36:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
10019a3a:	d10e      	bne.n	10019a5a <strcmp+0x21a>
10019a3c:	f850 2b04 	ldr.w	r2, [r0], #4
10019a40:	e7eb      	b.n	10019a1a <strcmp+0x1da>
10019a42:	ea4f 2313 	mov.w	r3, r3, lsr #8
10019a46:	e055      	b.n	10019af4 <strcmp+0x2b4>
10019a48:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
10019a4c:	d14d      	bne.n	10019aea <strcmp+0x2aa>
10019a4e:	7808      	ldrb	r0, [r1, #0]
10019a50:	e8fd 4504 	ldrd	r4, r5, [sp], #16
10019a54:	f1c0 0000 	rsb	r0, r0, #0
10019a58:	4770      	bx	lr
10019a5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
10019a5e:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
10019a62:	e047      	b.n	10019af4 <strcmp+0x2b4>
10019a64:	ea02 441c 	and.w	r4, r2, ip, lsr #16
10019a68:	fa82 f54c 	uadd8	r5, r2, ip
10019a6c:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
10019a70:	faa5 f58c 	sel	r5, r5, ip
10019a74:	d10a      	bne.n	10019a8c <strcmp+0x24c>
10019a76:	b965      	cbnz	r5, 10019a92 <strcmp+0x252>
10019a78:	f851 3b04 	ldr.w	r3, [r1], #4
10019a7c:	ea84 0402 	eor.w	r4, r4, r2
10019a80:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
10019a84:	d10c      	bne.n	10019aa0 <strcmp+0x260>
10019a86:	f850 2b04 	ldr.w	r2, [r0], #4
10019a8a:	e7eb      	b.n	10019a64 <strcmp+0x224>
10019a8c:	ea4f 4313 	mov.w	r3, r3, lsr #16
10019a90:	e030      	b.n	10019af4 <strcmp+0x2b4>
10019a92:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
10019a96:	d128      	bne.n	10019aea <strcmp+0x2aa>
10019a98:	880b      	ldrh	r3, [r1, #0]
10019a9a:	ea4f 4212 	mov.w	r2, r2, lsr #16
10019a9e:	e029      	b.n	10019af4 <strcmp+0x2b4>
10019aa0:	ea4f 4212 	mov.w	r2, r2, lsr #16
10019aa4:	ea03 431c 	and.w	r3, r3, ip, lsr #16
10019aa8:	e024      	b.n	10019af4 <strcmp+0x2b4>
10019aaa:	f002 04ff 	and.w	r4, r2, #255	@ 0xff
10019aae:	fa82 f54c 	uadd8	r5, r2, ip
10019ab2:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
10019ab6:	faa5 f58c 	sel	r5, r5, ip
10019aba:	d10a      	bne.n	10019ad2 <strcmp+0x292>
10019abc:	b965      	cbnz	r5, 10019ad8 <strcmp+0x298>
10019abe:	f851 3b04 	ldr.w	r3, [r1], #4
10019ac2:	ea84 0402 	eor.w	r4, r4, r2
10019ac6:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
10019aca:	d109      	bne.n	10019ae0 <strcmp+0x2a0>
10019acc:	f850 2b04 	ldr.w	r2, [r0], #4
10019ad0:	e7eb      	b.n	10019aaa <strcmp+0x26a>
10019ad2:	ea4f 6313 	mov.w	r3, r3, lsr #24
10019ad6:	e00d      	b.n	10019af4 <strcmp+0x2b4>
10019ad8:	f015 0fff 	tst.w	r5, #255	@ 0xff
10019adc:	d105      	bne.n	10019aea <strcmp+0x2aa>
10019ade:	680b      	ldr	r3, [r1, #0]
10019ae0:	ea4f 2212 	mov.w	r2, r2, lsr #8
10019ae4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
10019ae8:	e004      	b.n	10019af4 <strcmp+0x2b4>
10019aea:	f04f 0000 	mov.w	r0, #0
10019aee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
10019af2:	4770      	bx	lr
10019af4:	ba12      	rev	r2, r2
10019af6:	ba1b      	rev	r3, r3
10019af8:	fa82 f44c 	uadd8	r4, r2, ip
10019afc:	ea82 0403 	eor.w	r4, r2, r3
10019b00:	faa4 f58c 	sel	r5, r4, ip
10019b04:	fab5 f485 	clz	r4, r5
10019b08:	fa02 f204 	lsl.w	r2, r2, r4
10019b0c:	fa03 f304 	lsl.w	r3, r3, r4
10019b10:	ea4f 6012 	mov.w	r0, r2, lsr #24
10019b14:	e8fd 4504 	ldrd	r4, r5, [sp], #16
10019b18:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
10019b1c:	4770      	bx	lr
10019b1e:	bf00      	nop

10019b20 <__libc_init_array>:
10019b20:	b570      	push	{r4, r5, r6, lr}
10019b22:	4b0f      	ldr	r3, [pc, #60]	@ (10019b60 <__libc_init_array+0x40>)
10019b24:	4d0f      	ldr	r5, [pc, #60]	@ (10019b64 <__libc_init_array+0x44>)
10019b26:	42ab      	cmp	r3, r5
10019b28:	eba3 0605 	sub.w	r6, r3, r5
10019b2c:	d007      	beq.n	10019b3e <__libc_init_array+0x1e>
10019b2e:	10b6      	asrs	r6, r6, #2
10019b30:	2400      	movs	r4, #0
10019b32:	f855 3b04 	ldr.w	r3, [r5], #4
10019b36:	3401      	adds	r4, #1
10019b38:	4798      	blx	r3
10019b3a:	42a6      	cmp	r6, r4
10019b3c:	d8f9      	bhi.n	10019b32 <__libc_init_array+0x12>
10019b3e:	f012 fd01 	bl	1002c544 <_init>
10019b42:	4d09      	ldr	r5, [pc, #36]	@ (10019b68 <__libc_init_array+0x48>)
10019b44:	4b09      	ldr	r3, [pc, #36]	@ (10019b6c <__libc_init_array+0x4c>)
10019b46:	1b5e      	subs	r6, r3, r5
10019b48:	42ab      	cmp	r3, r5
10019b4a:	ea4f 06a6 	mov.w	r6, r6, asr #2
10019b4e:	d006      	beq.n	10019b5e <__libc_init_array+0x3e>
10019b50:	2400      	movs	r4, #0
10019b52:	f855 3b04 	ldr.w	r3, [r5], #4
10019b56:	3401      	adds	r4, #1
10019b58:	4798      	blx	r3
10019b5a:	42a6      	cmp	r6, r4
10019b5c:	d8f9      	bhi.n	10019b52 <__libc_init_array+0x32>
10019b5e:	bd70      	pop	{r4, r5, r6, pc}
10019b60:	20000bc0 	.word	0x20000bc0
10019b64:	20000bc0 	.word	0x20000bc0
10019b68:	20000bc0 	.word	0x20000bc0
10019b6c:	20000bc8 	.word	0x20000bc8

10019b70 <__retarget_lock_init_recursive>:
10019b70:	4770      	bx	lr
10019b72:	bf00      	nop

10019b74 <__retarget_lock_close_recursive>:
10019b74:	4770      	bx	lr
10019b76:	bf00      	nop

10019b78 <__retarget_lock_acquire_recursive>:
10019b78:	4770      	bx	lr
10019b7a:	bf00      	nop

10019b7c <__retarget_lock_release_recursive>:
10019b7c:	4770      	bx	lr
10019b7e:	bf00      	nop

10019b80 <close>:
10019b80:	4b02      	ldr	r3, [pc, #8]	@ (10019b8c <close+0xc>)
10019b82:	4601      	mov	r1, r0
10019b84:	6818      	ldr	r0, [r3, #0]
10019b86:	f7ff bda9 	b.w	100196dc <_close_r>
10019b8a:	bf00      	nop
10019b8c:	20000598 	.word	0x20000598

10019b90 <memchr>:
10019b90:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10019b94:	2a10      	cmp	r2, #16
10019b96:	db2b      	blt.n	10019bf0 <memchr+0x60>
10019b98:	f010 0f07 	tst.w	r0, #7
10019b9c:	d008      	beq.n	10019bb0 <memchr+0x20>
10019b9e:	f810 3b01 	ldrb.w	r3, [r0], #1
10019ba2:	3a01      	subs	r2, #1
10019ba4:	428b      	cmp	r3, r1
10019ba6:	d02d      	beq.n	10019c04 <memchr+0x74>
10019ba8:	f010 0f07 	tst.w	r0, #7
10019bac:	b342      	cbz	r2, 10019c00 <memchr+0x70>
10019bae:	d1f6      	bne.n	10019b9e <memchr+0xe>
10019bb0:	b4f0      	push	{r4, r5, r6, r7}
10019bb2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10019bb6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
10019bba:	f022 0407 	bic.w	r4, r2, #7
10019bbe:	f07f 0700 	mvns.w	r7, #0
10019bc2:	2300      	movs	r3, #0
10019bc4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
10019bc8:	3c08      	subs	r4, #8
10019bca:	ea85 0501 	eor.w	r5, r5, r1
10019bce:	ea86 0601 	eor.w	r6, r6, r1
10019bd2:	fa85 f547 	uadd8	r5, r5, r7
10019bd6:	faa3 f587 	sel	r5, r3, r7
10019bda:	fa86 f647 	uadd8	r6, r6, r7
10019bde:	faa5 f687 	sel	r6, r5, r7
10019be2:	b98e      	cbnz	r6, 10019c08 <memchr+0x78>
10019be4:	d1ee      	bne.n	10019bc4 <memchr+0x34>
10019be6:	bcf0      	pop	{r4, r5, r6, r7}
10019be8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10019bec:	f002 0207 	and.w	r2, r2, #7
10019bf0:	b132      	cbz	r2, 10019c00 <memchr+0x70>
10019bf2:	f810 3b01 	ldrb.w	r3, [r0], #1
10019bf6:	3a01      	subs	r2, #1
10019bf8:	ea83 0301 	eor.w	r3, r3, r1
10019bfc:	b113      	cbz	r3, 10019c04 <memchr+0x74>
10019bfe:	d1f8      	bne.n	10019bf2 <memchr+0x62>
10019c00:	2000      	movs	r0, #0
10019c02:	4770      	bx	lr
10019c04:	3801      	subs	r0, #1
10019c06:	4770      	bx	lr
10019c08:	2d00      	cmp	r5, #0
10019c0a:	bf06      	itte	eq
10019c0c:	4635      	moveq	r5, r6
10019c0e:	3803      	subeq	r0, #3
10019c10:	3807      	subne	r0, #7
10019c12:	f015 0f01 	tst.w	r5, #1
10019c16:	d107      	bne.n	10019c28 <memchr+0x98>
10019c18:	3001      	adds	r0, #1
10019c1a:	f415 7f80 	tst.w	r5, #256	@ 0x100
10019c1e:	bf02      	ittt	eq
10019c20:	3001      	addeq	r0, #1
10019c22:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
10019c26:	3001      	addeq	r0, #1
10019c28:	bcf0      	pop	{r4, r5, r6, r7}
10019c2a:	3801      	subs	r0, #1
10019c2c:	4770      	bx	lr
10019c2e:	bf00      	nop

10019c30 <memcpy>:
10019c30:	4684      	mov	ip, r0
10019c32:	ea41 0300 	orr.w	r3, r1, r0
10019c36:	f013 0303 	ands.w	r3, r3, #3
10019c3a:	d16d      	bne.n	10019d18 <memcpy+0xe8>
10019c3c:	3a40      	subs	r2, #64	@ 0x40
10019c3e:	d341      	bcc.n	10019cc4 <memcpy+0x94>
10019c40:	f851 3b04 	ldr.w	r3, [r1], #4
10019c44:	f840 3b04 	str.w	r3, [r0], #4
10019c48:	f851 3b04 	ldr.w	r3, [r1], #4
10019c4c:	f840 3b04 	str.w	r3, [r0], #4
10019c50:	f851 3b04 	ldr.w	r3, [r1], #4
10019c54:	f840 3b04 	str.w	r3, [r0], #4
10019c58:	f851 3b04 	ldr.w	r3, [r1], #4
10019c5c:	f840 3b04 	str.w	r3, [r0], #4
10019c60:	f851 3b04 	ldr.w	r3, [r1], #4
10019c64:	f840 3b04 	str.w	r3, [r0], #4
10019c68:	f851 3b04 	ldr.w	r3, [r1], #4
10019c6c:	f840 3b04 	str.w	r3, [r0], #4
10019c70:	f851 3b04 	ldr.w	r3, [r1], #4
10019c74:	f840 3b04 	str.w	r3, [r0], #4
10019c78:	f851 3b04 	ldr.w	r3, [r1], #4
10019c7c:	f840 3b04 	str.w	r3, [r0], #4
10019c80:	f851 3b04 	ldr.w	r3, [r1], #4
10019c84:	f840 3b04 	str.w	r3, [r0], #4
10019c88:	f851 3b04 	ldr.w	r3, [r1], #4
10019c8c:	f840 3b04 	str.w	r3, [r0], #4
10019c90:	f851 3b04 	ldr.w	r3, [r1], #4
10019c94:	f840 3b04 	str.w	r3, [r0], #4
10019c98:	f851 3b04 	ldr.w	r3, [r1], #4
10019c9c:	f840 3b04 	str.w	r3, [r0], #4
10019ca0:	f851 3b04 	ldr.w	r3, [r1], #4
10019ca4:	f840 3b04 	str.w	r3, [r0], #4
10019ca8:	f851 3b04 	ldr.w	r3, [r1], #4
10019cac:	f840 3b04 	str.w	r3, [r0], #4
10019cb0:	f851 3b04 	ldr.w	r3, [r1], #4
10019cb4:	f840 3b04 	str.w	r3, [r0], #4
10019cb8:	f851 3b04 	ldr.w	r3, [r1], #4
10019cbc:	f840 3b04 	str.w	r3, [r0], #4
10019cc0:	3a40      	subs	r2, #64	@ 0x40
10019cc2:	d2bd      	bcs.n	10019c40 <memcpy+0x10>
10019cc4:	3230      	adds	r2, #48	@ 0x30
10019cc6:	d311      	bcc.n	10019cec <memcpy+0xbc>
10019cc8:	f851 3b04 	ldr.w	r3, [r1], #4
10019ccc:	f840 3b04 	str.w	r3, [r0], #4
10019cd0:	f851 3b04 	ldr.w	r3, [r1], #4
10019cd4:	f840 3b04 	str.w	r3, [r0], #4
10019cd8:	f851 3b04 	ldr.w	r3, [r1], #4
10019cdc:	f840 3b04 	str.w	r3, [r0], #4
10019ce0:	f851 3b04 	ldr.w	r3, [r1], #4
10019ce4:	f840 3b04 	str.w	r3, [r0], #4
10019ce8:	3a10      	subs	r2, #16
10019cea:	d2ed      	bcs.n	10019cc8 <memcpy+0x98>
10019cec:	320c      	adds	r2, #12
10019cee:	d305      	bcc.n	10019cfc <memcpy+0xcc>
10019cf0:	f851 3b04 	ldr.w	r3, [r1], #4
10019cf4:	f840 3b04 	str.w	r3, [r0], #4
10019cf8:	3a04      	subs	r2, #4
10019cfa:	d2f9      	bcs.n	10019cf0 <memcpy+0xc0>
10019cfc:	3204      	adds	r2, #4
10019cfe:	d008      	beq.n	10019d12 <memcpy+0xe2>
10019d00:	07d2      	lsls	r2, r2, #31
10019d02:	bf1c      	itt	ne
10019d04:	f811 3b01 	ldrbne.w	r3, [r1], #1
10019d08:	f800 3b01 	strbne.w	r3, [r0], #1
10019d0c:	d301      	bcc.n	10019d12 <memcpy+0xe2>
10019d0e:	880b      	ldrh	r3, [r1, #0]
10019d10:	8003      	strh	r3, [r0, #0]
10019d12:	4660      	mov	r0, ip
10019d14:	4770      	bx	lr
10019d16:	bf00      	nop
10019d18:	2a08      	cmp	r2, #8
10019d1a:	d313      	bcc.n	10019d44 <memcpy+0x114>
10019d1c:	078b      	lsls	r3, r1, #30
10019d1e:	d08d      	beq.n	10019c3c <memcpy+0xc>
10019d20:	f010 0303 	ands.w	r3, r0, #3
10019d24:	d08a      	beq.n	10019c3c <memcpy+0xc>
10019d26:	f1c3 0304 	rsb	r3, r3, #4
10019d2a:	1ad2      	subs	r2, r2, r3
10019d2c:	07db      	lsls	r3, r3, #31
10019d2e:	bf1c      	itt	ne
10019d30:	f811 3b01 	ldrbne.w	r3, [r1], #1
10019d34:	f800 3b01 	strbne.w	r3, [r0], #1
10019d38:	d380      	bcc.n	10019c3c <memcpy+0xc>
10019d3a:	f831 3b02 	ldrh.w	r3, [r1], #2
10019d3e:	f820 3b02 	strh.w	r3, [r0], #2
10019d42:	e77b      	b.n	10019c3c <memcpy+0xc>
10019d44:	3a04      	subs	r2, #4
10019d46:	d3d9      	bcc.n	10019cfc <memcpy+0xcc>
10019d48:	3a01      	subs	r2, #1
10019d4a:	f811 3b01 	ldrb.w	r3, [r1], #1
10019d4e:	f800 3b01 	strb.w	r3, [r0], #1
10019d52:	d2f9      	bcs.n	10019d48 <memcpy+0x118>
10019d54:	780b      	ldrb	r3, [r1, #0]
10019d56:	7003      	strb	r3, [r0, #0]
10019d58:	784b      	ldrb	r3, [r1, #1]
10019d5a:	7043      	strb	r3, [r0, #1]
10019d5c:	788b      	ldrb	r3, [r1, #2]
10019d5e:	7083      	strb	r3, [r0, #2]
10019d60:	4660      	mov	r0, ip
10019d62:	4770      	bx	lr
	...

10019d80 <strlen>:
10019d80:	b430      	push	{r4, r5}
10019d82:	f890 f000 	pld	[r0]
10019d86:	f020 0107 	bic.w	r1, r0, #7
10019d8a:	f06f 0c00 	mvn.w	ip, #0
10019d8e:	f010 0407 	ands.w	r4, r0, #7
10019d92:	f891 f020 	pld	[r1, #32]
10019d96:	f040 8048 	bne.w	10019e2a <strlen+0xaa>
10019d9a:	f04f 0400 	mov.w	r4, #0
10019d9e:	f06f 0007 	mvn.w	r0, #7
10019da2:	e9d1 2300 	ldrd	r2, r3, [r1]
10019da6:	f891 f040 	pld	[r1, #64]	@ 0x40
10019daa:	f100 0008 	add.w	r0, r0, #8
10019dae:	fa82 f24c 	uadd8	r2, r2, ip
10019db2:	faa4 f28c 	sel	r2, r4, ip
10019db6:	fa83 f34c 	uadd8	r3, r3, ip
10019dba:	faa2 f38c 	sel	r3, r2, ip
10019dbe:	bb4b      	cbnz	r3, 10019e14 <strlen+0x94>
10019dc0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
10019dc4:	fa82 f24c 	uadd8	r2, r2, ip
10019dc8:	f100 0008 	add.w	r0, r0, #8
10019dcc:	faa4 f28c 	sel	r2, r4, ip
10019dd0:	fa83 f34c 	uadd8	r3, r3, ip
10019dd4:	faa2 f38c 	sel	r3, r2, ip
10019dd8:	b9e3      	cbnz	r3, 10019e14 <strlen+0x94>
10019dda:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
10019dde:	fa82 f24c 	uadd8	r2, r2, ip
10019de2:	f100 0008 	add.w	r0, r0, #8
10019de6:	faa4 f28c 	sel	r2, r4, ip
10019dea:	fa83 f34c 	uadd8	r3, r3, ip
10019dee:	faa2 f38c 	sel	r3, r2, ip
10019df2:	b97b      	cbnz	r3, 10019e14 <strlen+0x94>
10019df4:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
10019df8:	f101 0120 	add.w	r1, r1, #32
10019dfc:	fa82 f24c 	uadd8	r2, r2, ip
10019e00:	f100 0008 	add.w	r0, r0, #8
10019e04:	faa4 f28c 	sel	r2, r4, ip
10019e08:	fa83 f34c 	uadd8	r3, r3, ip
10019e0c:	faa2 f38c 	sel	r3, r2, ip
10019e10:	2b00      	cmp	r3, #0
10019e12:	d0c6      	beq.n	10019da2 <strlen+0x22>
10019e14:	2a00      	cmp	r2, #0
10019e16:	bf04      	itt	eq
10019e18:	3004      	addeq	r0, #4
10019e1a:	461a      	moveq	r2, r3
10019e1c:	ba12      	rev	r2, r2
10019e1e:	fab2 f282 	clz	r2, r2
10019e22:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
10019e26:	bc30      	pop	{r4, r5}
10019e28:	4770      	bx	lr
10019e2a:	e9d1 2300 	ldrd	r2, r3, [r1]
10019e2e:	f004 0503 	and.w	r5, r4, #3
10019e32:	f1c4 0000 	rsb	r0, r4, #0
10019e36:	ea4f 05c5 	mov.w	r5, r5, lsl #3
10019e3a:	f014 0f04 	tst.w	r4, #4
10019e3e:	f891 f040 	pld	[r1, #64]	@ 0x40
10019e42:	fa0c f505 	lsl.w	r5, ip, r5
10019e46:	ea62 0205 	orn	r2, r2, r5
10019e4a:	bf1c      	itt	ne
10019e4c:	ea63 0305 	ornne	r3, r3, r5
10019e50:	4662      	movne	r2, ip
10019e52:	f04f 0400 	mov.w	r4, #0
10019e56:	e7aa      	b.n	10019dae <strlen+0x2e>

10019e58 <open>:
10019e58:	b40e      	push	{r1, r2, r3}
10019e5a:	b530      	push	{r4, r5, lr}
10019e5c:	b082      	sub	sp, #8
10019e5e:	ac05      	add	r4, sp, #20
10019e60:	4d06      	ldr	r5, [pc, #24]	@ (10019e7c <open+0x24>)
10019e62:	f854 2b04 	ldr.w	r2, [r4], #4
10019e66:	9b06      	ldr	r3, [sp, #24]
10019e68:	9401      	str	r4, [sp, #4]
10019e6a:	4601      	mov	r1, r0
10019e6c:	6828      	ldr	r0, [r5, #0]
10019e6e:	f7ff fc73 	bl	10019758 <_open_r>
10019e72:	b002      	add	sp, #8
10019e74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
10019e78:	b003      	add	sp, #12
10019e7a:	4770      	bx	lr
10019e7c:	20000598 	.word	0x20000598

10019e80 <read>:
10019e80:	b410      	push	{r4}
10019e82:	4c04      	ldr	r4, [pc, #16]	@ (10019e94 <read+0x14>)
10019e84:	4684      	mov	ip, r0
10019e86:	4613      	mov	r3, r2
10019e88:	6820      	ldr	r0, [r4, #0]
10019e8a:	bc10      	pop	{r4}
10019e8c:	460a      	mov	r2, r1
10019e8e:	4661      	mov	r1, ip
10019e90:	f7ff bc78 	b.w	10019784 <_read_r>
10019e94:	20000598 	.word	0x20000598

10019e98 <_wcrtomb_r>:
10019e98:	b570      	push	{r4, r5, r6, lr}
10019e9a:	4605      	mov	r5, r0
10019e9c:	b084      	sub	sp, #16
10019e9e:	b15b      	cbz	r3, 10019eb8 <_wcrtomb_r+0x20>
10019ea0:	461c      	mov	r4, r3
10019ea2:	4b0f      	ldr	r3, [pc, #60]	@ (10019ee0 <_wcrtomb_r+0x48>)
10019ea4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	@ 0xe0
10019ea8:	4623      	mov	r3, r4
10019eaa:	b169      	cbz	r1, 10019ec8 <_wcrtomb_r+0x30>
10019eac:	4628      	mov	r0, r5
10019eae:	47b0      	blx	r6
10019eb0:	1c43      	adds	r3, r0, #1
10019eb2:	d00f      	beq.n	10019ed4 <_wcrtomb_r+0x3c>
10019eb4:	b004      	add	sp, #16
10019eb6:	bd70      	pop	{r4, r5, r6, pc}
10019eb8:	4b09      	ldr	r3, [pc, #36]	@ (10019ee0 <_wcrtomb_r+0x48>)
10019eba:	f500 7482 	add.w	r4, r0, #260	@ 0x104
10019ebe:	f8d3 60e0 	ldr.w	r6, [r3, #224]	@ 0xe0
10019ec2:	4623      	mov	r3, r4
10019ec4:	2900      	cmp	r1, #0
10019ec6:	d1f1      	bne.n	10019eac <_wcrtomb_r+0x14>
10019ec8:	460a      	mov	r2, r1
10019eca:	4628      	mov	r0, r5
10019ecc:	a901      	add	r1, sp, #4
10019ece:	47b0      	blx	r6
10019ed0:	1c43      	adds	r3, r0, #1
10019ed2:	d1ef      	bne.n	10019eb4 <_wcrtomb_r+0x1c>
10019ed4:	2200      	movs	r2, #0
10019ed6:	238a      	movs	r3, #138	@ 0x8a
10019ed8:	6022      	str	r2, [r4, #0]
10019eda:	602b      	str	r3, [r5, #0]
10019edc:	b004      	add	sp, #16
10019ede:	bd70      	pop	{r4, r5, r6, pc}
10019ee0:	2000042c 	.word	0x2000042c

10019ee4 <_wcsrtombs_r>:
10019ee4:	b500      	push	{lr}
10019ee6:	b083      	sub	sp, #12
10019ee8:	f8dd c010 	ldr.w	ip, [sp, #16]
10019eec:	e9cd 3c00 	strd	r3, ip, [sp]
10019ef0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10019ef4:	f006 fefa 	bl	10020cec <_wcsnrtombs_r>
10019ef8:	b003      	add	sp, #12
10019efa:	f85d fb04 	ldr.w	pc, [sp], #4
10019efe:	bf00      	nop

10019f00 <frexp>:
10019f00:	f8df c060 	ldr.w	ip, [pc, #96]	@ 10019f64 <frexp+0x64>
10019f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10019f06:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
10019f0a:	2700      	movs	r7, #0
10019f0c:	4563      	cmp	r3, ip
10019f0e:	4604      	mov	r4, r0
10019f10:	460d      	mov	r5, r1
10019f12:	4616      	mov	r6, r2
10019f14:	6017      	str	r7, [r2, #0]
10019f16:	d822      	bhi.n	10019f5e <frexp+0x5e>
10019f18:	4684      	mov	ip, r0
10019f1a:	ea53 0c0c 	orrs.w	ip, r3, ip
10019f1e:	d01e      	beq.n	10019f5e <frexp+0x5e>
10019f20:	f8df c044 	ldr.w	ip, [pc, #68]	@ 10019f68 <frexp+0x68>
10019f24:	ea01 0c0c 	and.w	ip, r1, ip
10019f28:	460a      	mov	r2, r1
10019f2a:	f1bc 0f00 	cmp.w	ip, #0
10019f2e:	d109      	bne.n	10019f44 <frexp+0x44>
10019f30:	4b0e      	ldr	r3, [pc, #56]	@ (10019f6c <frexp+0x6c>)
10019f32:	2200      	movs	r2, #0
10019f34:	f008 f84e 	bl	10021fd4 <__aeabi_dmul>
10019f38:	f06f 0735 	mvn.w	r7, #53	@ 0x35
10019f3c:	4604      	mov	r4, r0
10019f3e:	460a      	mov	r2, r1
10019f40:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
10019f44:	f022 42ff 	bic.w	r2, r2, #2139095040	@ 0x7f800000
10019f48:	151b      	asrs	r3, r3, #20
10019f4a:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
10019f4e:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
10019f52:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
10019f56:	443b      	add	r3, r7
10019f58:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
10019f5c:	6033      	str	r3, [r6, #0]
10019f5e:	4620      	mov	r0, r4
10019f60:	4629      	mov	r1, r5
10019f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10019f64:	7fefffff 	.word	0x7fefffff
10019f68:	7ff00000 	.word	0x7ff00000
10019f6c:	43500000 	.word	0x43500000

10019f70 <register_fini>:
10019f70:	4b02      	ldr	r3, [pc, #8]	@ (10019f7c <register_fini+0xc>)
10019f72:	b113      	cbz	r3, 10019f7a <register_fini+0xa>
10019f74:	4802      	ldr	r0, [pc, #8]	@ (10019f80 <register_fini+0x10>)
10019f76:	f000 b805 	b.w	10019f84 <atexit>
10019f7a:	4770      	bx	lr
10019f7c:	00000000 	.word	0x00000000
10019f80:	100209ed 	.word	0x100209ed

10019f84 <atexit>:
10019f84:	2300      	movs	r3, #0
10019f86:	4601      	mov	r1, r0
10019f88:	461a      	mov	r2, r3
10019f8a:	4618      	mov	r0, r3
10019f8c:	f006 bed8 	b.w	10020d40 <__register_exitproc>

10019f90 <quorem>:
10019f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10019f94:	6903      	ldr	r3, [r0, #16]
10019f96:	690c      	ldr	r4, [r1, #16]
10019f98:	42a3      	cmp	r3, r4
10019f9a:	b083      	sub	sp, #12
10019f9c:	f2c0 808a 	blt.w	1001a0b4 <quorem+0x124>
10019fa0:	3c01      	subs	r4, #1
10019fa2:	f101 0514 	add.w	r5, r1, #20
10019fa6:	f100 0814 	add.w	r8, r0, #20
10019faa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
10019fae:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
10019fb2:	3301      	adds	r3, #1
10019fb4:	429a      	cmp	r2, r3
10019fb6:	468e      	mov	lr, r1
10019fb8:	4681      	mov	r9, r0
10019fba:	ea4f 0184 	mov.w	r1, r4, lsl #2
10019fbe:	eb05 0784 	add.w	r7, r5, r4, lsl #2
10019fc2:	eb08 0a84 	add.w	sl, r8, r4, lsl #2
10019fc6:	fbb2 f6f3 	udiv	r6, r2, r3
10019fca:	d33a      	bcc.n	1001a042 <quorem+0xb2>
10019fcc:	e9cd 1500 	strd	r1, r5, [sp]
10019fd0:	2200      	movs	r2, #0
10019fd2:	46ac      	mov	ip, r5
10019fd4:	4640      	mov	r0, r8
10019fd6:	4613      	mov	r3, r2
10019fd8:	f85c 1b04 	ldr.w	r1, [ip], #4
10019fdc:	6805      	ldr	r5, [r0, #0]
10019fde:	fa1f fb81 	uxth.w	fp, r1
10019fe2:	fb06 220b 	mla	r2, r6, fp, r2
10019fe6:	0c09      	lsrs	r1, r1, #16
10019fe8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
10019fec:	fb06 bb01 	mla	fp, r6, r1, fp
10019ff0:	b292      	uxth	r2, r2
10019ff2:	b2a9      	uxth	r1, r5
10019ff4:	1a89      	subs	r1, r1, r2
10019ff6:	4419      	add	r1, r3
10019ff8:	fa1f f38b 	uxth.w	r3, fp
10019ffc:	ebc3 4321 	rsb	r3, r3, r1, asr #16
1001a000:	eb03 4315 	add.w	r3, r3, r5, lsr #16
1001a004:	b289      	uxth	r1, r1
1001a006:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1001a00a:	4567      	cmp	r7, ip
1001a00c:	f840 1b04 	str.w	r1, [r0], #4
1001a010:	ea4f 421b 	mov.w	r2, fp, lsr #16
1001a014:	ea4f 4323 	mov.w	r3, r3, asr #16
1001a018:	d2de      	bcs.n	10019fd8 <quorem+0x48>
1001a01a:	e9dd 1500 	ldrd	r1, r5, [sp]
1001a01e:	f858 3001 	ldr.w	r3, [r8, r1]
1001a022:	b973      	cbnz	r3, 1001a042 <quorem+0xb2>
1001a024:	f1aa 0a04 	sub.w	sl, sl, #4
1001a028:	45d0      	cmp	r8, sl
1001a02a:	d304      	bcc.n	1001a036 <quorem+0xa6>
1001a02c:	e007      	b.n	1001a03e <quorem+0xae>
1001a02e:	45d0      	cmp	r8, sl
1001a030:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
1001a034:	d203      	bcs.n	1001a03e <quorem+0xae>
1001a036:	f85a 3904 	ldr.w	r3, [sl], #-4
1001a03a:	2b00      	cmp	r3, #0
1001a03c:	d0f7      	beq.n	1001a02e <quorem+0x9e>
1001a03e:	f8c9 4010 	str.w	r4, [r9, #16]
1001a042:	4671      	mov	r1, lr
1001a044:	4648      	mov	r0, r9
1001a046:	f004 fe67 	bl	1001ed18 <__mcmp>
1001a04a:	2800      	cmp	r0, #0
1001a04c:	db2e      	blt.n	1001a0ac <quorem+0x11c>
1001a04e:	4641      	mov	r1, r8
1001a050:	2200      	movs	r2, #0
1001a052:	f855 0b04 	ldr.w	r0, [r5], #4
1001a056:	f8d1 c000 	ldr.w	ip, [r1]
1001a05a:	fa1f fe80 	uxth.w	lr, r0
1001a05e:	fa1f f38c 	uxth.w	r3, ip
1001a062:	eba3 030e 	sub.w	r3, r3, lr
1001a066:	4413      	add	r3, r2
1001a068:	0c02      	lsrs	r2, r0, #16
1001a06a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
1001a06e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
1001a072:	b29b      	uxth	r3, r3
1001a074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1001a078:	42af      	cmp	r7, r5
1001a07a:	f841 3b04 	str.w	r3, [r1], #4
1001a07e:	ea4f 4222 	mov.w	r2, r2, asr #16
1001a082:	d2e6      	bcs.n	1001a052 <quorem+0xc2>
1001a084:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
1001a088:	eb08 0384 	add.w	r3, r8, r4, lsl #2
1001a08c:	b96a      	cbnz	r2, 1001a0aa <quorem+0x11a>
1001a08e:	3b04      	subs	r3, #4
1001a090:	4598      	cmp	r8, r3
1001a092:	d304      	bcc.n	1001a09e <quorem+0x10e>
1001a094:	e007      	b.n	1001a0a6 <quorem+0x116>
1001a096:	4598      	cmp	r8, r3
1001a098:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
1001a09c:	d203      	bcs.n	1001a0a6 <quorem+0x116>
1001a09e:	f853 2904 	ldr.w	r2, [r3], #-4
1001a0a2:	2a00      	cmp	r2, #0
1001a0a4:	d0f7      	beq.n	1001a096 <quorem+0x106>
1001a0a6:	f8c9 4010 	str.w	r4, [r9, #16]
1001a0aa:	3601      	adds	r6, #1
1001a0ac:	4630      	mov	r0, r6
1001a0ae:	b003      	add	sp, #12
1001a0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001a0b4:	2000      	movs	r0, #0
1001a0b6:	b003      	add	sp, #12
1001a0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001a0bc:	0000      	movs	r0, r0
	...

1001a0c0 <_dtoa_r>:
1001a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001a0c4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
1001a0c6:	b09f      	sub	sp, #124	@ 0x7c
1001a0c8:	4616      	mov	r6, r2
1001a0ca:	461f      	mov	r7, r3
1001a0cc:	e9cd 6704 	strd	r6, r7, [sp, #16]
1001a0d0:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
1001a0d2:	9003      	str	r0, [sp, #12]
1001a0d4:	b149      	cbz	r1, 1001a0ea <_dtoa_r+0x2a>
1001a0d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
1001a0d8:	604a      	str	r2, [r1, #4]
1001a0da:	2301      	movs	r3, #1
1001a0dc:	4093      	lsls	r3, r2
1001a0de:	4604      	mov	r4, r0
1001a0e0:	608b      	str	r3, [r1, #8]
1001a0e2:	f004 fb5f 	bl	1001e7a4 <_Bfree>
1001a0e6:	2300      	movs	r3, #0
1001a0e8:	63a3      	str	r3, [r4, #56]	@ 0x38
1001a0ea:	f1b7 0900 	subs.w	r9, r7, #0
1001a0ee:	bfb4      	ite	lt
1001a0f0:	2301      	movlt	r3, #1
1001a0f2:	2300      	movge	r3, #0
1001a0f4:	602b      	str	r3, [r5, #0]
1001a0f6:	4b76      	ldr	r3, [pc, #472]	@ (1001a2d0 <_dtoa_r+0x210>)
1001a0f8:	bfbc      	itt	lt
1001a0fa:	f029 4900 	biclt.w	r9, r9, #2147483648	@ 0x80000000
1001a0fe:	f8cd 9014 	strlt.w	r9, [sp, #20]
1001a102:	ea33 0309 	bics.w	r3, r3, r9
1001a106:	f000 80aa 	beq.w	1001a25e <_dtoa_r+0x19e>
1001a10a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
1001a10e:	2200      	movs	r2, #0
1001a110:	4618      	mov	r0, r3
1001a112:	4621      	mov	r1, r4
1001a114:	2300      	movs	r3, #0
1001a116:	e9cd 0108 	strd	r0, r1, [sp, #32]
1001a11a:	f008 f9c3 	bl	100224a4 <__aeabi_dcmpeq>
1001a11e:	4680      	mov	r8, r0
1001a120:	b168      	cbz	r0, 1001a13e <_dtoa_r+0x7e>
1001a122:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
1001a124:	2301      	movs	r3, #1
1001a126:	6013      	str	r3, [r2, #0]
1001a128:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
1001a12a:	b113      	cbz	r3, 1001a132 <_dtoa_r+0x72>
1001a12c:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
1001a12e:	4b69      	ldr	r3, [pc, #420]	@ (1001a2d4 <_dtoa_r+0x214>)
1001a130:	6013      	str	r3, [r2, #0]
1001a132:	4b69      	ldr	r3, [pc, #420]	@ (1001a2d8 <_dtoa_r+0x218>)
1001a134:	930a      	str	r3, [sp, #40]	@ 0x28
1001a136:	980a      	ldr	r0, [sp, #40]	@ 0x28
1001a138:	b01f      	add	sp, #124	@ 0x7c
1001a13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001a13e:	ab1c      	add	r3, sp, #112	@ 0x70
1001a140:	9301      	str	r3, [sp, #4]
1001a142:	ab1d      	add	r3, sp, #116	@ 0x74
1001a144:	9300      	str	r3, [sp, #0]
1001a146:	9803      	ldr	r0, [sp, #12]
1001a148:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1001a14c:	f004 ff3c 	bl	1001efc8 <__d2b>
1001a150:	ea5f 5519 	movs.w	r5, r9, lsr #20
1001a154:	4682      	mov	sl, r0
1001a156:	f040 8098 	bne.w	1001a28a <_dtoa_r+0x1ca>
1001a15a:	e9dd 851c 	ldrd	r8, r5, [sp, #112]	@ 0x70
1001a15e:	4445      	add	r5, r8
1001a160:	f205 4332 	addw	r3, r5, #1074	@ 0x432
1001a164:	2b20      	cmp	r3, #32
1001a166:	f340 8383 	ble.w	1001a870 <_dtoa_r+0x7b0>
1001a16a:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
1001a16e:	fa09 f903 	lsl.w	r9, r9, r3
1001a172:	f205 4312 	addw	r3, r5, #1042	@ 0x412
1001a176:	fa26 f303 	lsr.w	r3, r6, r3
1001a17a:	ea49 0003 	orr.w	r0, r9, r3
1001a17e:	f007 feaf 	bl	10021ee0 <__aeabi_ui2d>
1001a182:	2301      	movs	r3, #1
1001a184:	3d01      	subs	r5, #1
1001a186:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
1001a18a:	9311      	str	r3, [sp, #68]	@ 0x44
1001a18c:	4b53      	ldr	r3, [pc, #332]	@ (1001a2dc <_dtoa_r+0x21c>)
1001a18e:	2200      	movs	r2, #0
1001a190:	f007 fd68 	bl	10021c64 <__aeabi_dsub>
1001a194:	a348      	add	r3, pc, #288	@ (adr r3, 1001a2b8 <_dtoa_r+0x1f8>)
1001a196:	e9d3 2300 	ldrd	r2, r3, [r3]
1001a19a:	f007 ff1b 	bl	10021fd4 <__aeabi_dmul>
1001a19e:	a348      	add	r3, pc, #288	@ (adr r3, 1001a2c0 <_dtoa_r+0x200>)
1001a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
1001a1a4:	f007 fd60 	bl	10021c68 <__adddf3>
1001a1a8:	4606      	mov	r6, r0
1001a1aa:	4628      	mov	r0, r5
1001a1ac:	460f      	mov	r7, r1
1001a1ae:	f007 fea7 	bl	10021f00 <__aeabi_i2d>
1001a1b2:	a345      	add	r3, pc, #276	@ (adr r3, 1001a2c8 <_dtoa_r+0x208>)
1001a1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
1001a1b8:	f007 ff0c 	bl	10021fd4 <__aeabi_dmul>
1001a1bc:	4602      	mov	r2, r0
1001a1be:	460b      	mov	r3, r1
1001a1c0:	4630      	mov	r0, r6
1001a1c2:	4639      	mov	r1, r7
1001a1c4:	f007 fd50 	bl	10021c68 <__adddf3>
1001a1c8:	4606      	mov	r6, r0
1001a1ca:	460f      	mov	r7, r1
1001a1cc:	f008 f9b2 	bl	10022534 <__aeabi_d2iz>
1001a1d0:	2200      	movs	r2, #0
1001a1d2:	4683      	mov	fp, r0
1001a1d4:	2300      	movs	r3, #0
1001a1d6:	4630      	mov	r0, r6
1001a1d8:	4639      	mov	r1, r7
1001a1da:	f008 f96d 	bl	100224b8 <__aeabi_dcmplt>
1001a1de:	2800      	cmp	r0, #0
1001a1e0:	f040 831a 	bne.w	1001a818 <_dtoa_r+0x758>
1001a1e4:	eba8 0805 	sub.w	r8, r8, r5
1001a1e8:	f1bb 0f16 	cmp.w	fp, #22
1001a1ec:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
1001a1f0:	f200 818b 	bhi.w	1001a50a <_dtoa_r+0x44a>
1001a1f4:	4d3a      	ldr	r5, [pc, #232]	@ (1001a2e0 <_dtoa_r+0x220>)
1001a1f6:	eb05 05cb 	add.w	r5, r5, fp, lsl #3
1001a1fa:	e9d5 2300 	ldrd	r2, r3, [r5]
1001a1fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1001a202:	f008 f959 	bl	100224b8 <__aeabi_dcmplt>
1001a206:	2800      	cmp	r0, #0
1001a208:	d070      	beq.n	1001a2ec <_dtoa_r+0x22c>
1001a20a:	2300      	movs	r3, #0
1001a20c:	2c00      	cmp	r4, #0
1001a20e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
1001a212:	9310      	str	r3, [sp, #64]	@ 0x40
1001a214:	f2c0 817e 	blt.w	1001a514 <_dtoa_r+0x454>
1001a218:	2300      	movs	r3, #0
1001a21a:	930b      	str	r3, [sp, #44]	@ 0x2c
1001a21c:	f1bb 0f00 	cmp.w	fp, #0
1001a220:	da6a      	bge.n	1001a2f8 <_dtoa_r+0x238>
1001a222:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001a224:	eba3 030b 	sub.w	r3, r3, fp
1001a228:	930b      	str	r3, [sp, #44]	@ 0x2c
1001a22a:	f1cb 0300 	rsb	r3, fp, #0
1001a22e:	e9cd b30e 	strd	fp, r3, [sp, #56]	@ 0x38
1001a232:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
1001a234:	2b09      	cmp	r3, #9
1001a236:	f04f 0b00 	mov.w	fp, #0
1001a23a:	d865      	bhi.n	1001a308 <_dtoa_r+0x248>
1001a23c:	2b05      	cmp	r3, #5
1001a23e:	f340 831c 	ble.w	1001a87a <_dtoa_r+0x7ba>
1001a242:	3b04      	subs	r3, #4
1001a244:	9328      	str	r3, [sp, #160]	@ 0xa0
1001a246:	2500      	movs	r5, #0
1001a248:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
1001a24a:	3b02      	subs	r3, #2
1001a24c:	2b03      	cmp	r3, #3
1001a24e:	f200 8623 	bhi.w	1001ae98 <_dtoa_r+0xdd8>
1001a252:	e8df f013 	tbh	[pc, r3, lsl #1]
1001a256:	0460      	.short	0x0460
1001a258:	0454045d 	.word	0x0454045d
1001a25c:	0438      	.short	0x0438
1001a25e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
1001a260:	f3c9 0913 	ubfx	r9, r9, #0, #20
1001a264:	f242 730f 	movw	r3, #9999	@ 0x270f
1001a268:	ea59 0906 	orrs.w	r9, r9, r6
1001a26c:	6013      	str	r3, [r2, #0]
1001a26e:	d11c      	bne.n	1001a2aa <_dtoa_r+0x1ea>
1001a270:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
1001a272:	2b00      	cmp	r3, #0
1001a274:	f000 862b 	beq.w	1001aece <_dtoa_r+0xe0e>
1001a278:	4b1a      	ldr	r3, [pc, #104]	@ (1001a2e4 <_dtoa_r+0x224>)
1001a27a:	930a      	str	r3, [sp, #40]	@ 0x28
1001a27c:	3308      	adds	r3, #8
1001a27e:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
1001a280:	980a      	ldr	r0, [sp, #40]	@ 0x28
1001a282:	6013      	str	r3, [r2, #0]
1001a284:	b01f      	add	sp, #124	@ 0x7c
1001a286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001a28a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
1001a28e:	f3c2 0313 	ubfx	r3, r2, #0, #20
1001a292:	4608      	mov	r0, r1
1001a294:	f043 517f 	orr.w	r1, r3, #1069547520	@ 0x3fc00000
1001a298:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
1001a29c:	f2a5 35ff 	subw	r5, r5, #1023	@ 0x3ff
1001a2a0:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
1001a2a4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
1001a2a8:	e770      	b.n	1001a18c <_dtoa_r+0xcc>
1001a2aa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
1001a2ac:	2b00      	cmp	r3, #0
1001a2ae:	f040 83e7 	bne.w	1001aa80 <_dtoa_r+0x9c0>
1001a2b2:	4b0d      	ldr	r3, [pc, #52]	@ (1001a2e8 <_dtoa_r+0x228>)
1001a2b4:	930a      	str	r3, [sp, #40]	@ 0x28
1001a2b6:	e73e      	b.n	1001a136 <_dtoa_r+0x76>
1001a2b8:	636f4361 	.word	0x636f4361
1001a2bc:	3fd287a7 	.word	0x3fd287a7
1001a2c0:	8b60c8b3 	.word	0x8b60c8b3
1001a2c4:	3fc68a28 	.word	0x3fc68a28
1001a2c8:	509f79fb 	.word	0x509f79fb
1001a2cc:	3fd34413 	.word	0x3fd34413
1001a2d0:	7ff00000 	.word	0x7ff00000
1001a2d4:	100254b5 	.word	0x100254b5
1001a2d8:	100254b4 	.word	0x100254b4
1001a2dc:	3ff80000 	.word	0x3ff80000
1001a2e0:	100257b0 	.word	0x100257b0
1001a2e4:	10025640 	.word	0x10025640
1001a2e8:	1002564c 	.word	0x1002564c
1001a2ec:	f1b8 0f00 	cmp.w	r8, #0
1001a2f0:	f340 8460 	ble.w	1001abb4 <_dtoa_r+0xaf4>
1001a2f4:	9010      	str	r0, [sp, #64]	@ 0x40
1001a2f6:	900b      	str	r0, [sp, #44]	@ 0x2c
1001a2f8:	2300      	movs	r3, #0
1001a2fa:	930f      	str	r3, [sp, #60]	@ 0x3c
1001a2fc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
1001a2fe:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
1001a302:	2b09      	cmp	r3, #9
1001a304:	445c      	add	r4, fp
1001a306:	d999      	bls.n	1001a23c <_dtoa_r+0x17c>
1001a308:	2300      	movs	r3, #0
1001a30a:	e9cd 3328 	strd	r3, r3, [sp, #160]	@ 0xa0
1001a30e:	2501      	movs	r5, #1
1001a310:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1001a314:	950c      	str	r5, [sp, #48]	@ 0x30
1001a316:	9306      	str	r3, [sp, #24]
1001a318:	9b03      	ldr	r3, [sp, #12]
1001a31a:	2100      	movs	r1, #0
1001a31c:	63d9      	str	r1, [r3, #60]	@ 0x3c
1001a31e:	9b06      	ldr	r3, [sp, #24]
1001a320:	9318      	str	r3, [sp, #96]	@ 0x60
1001a322:	9803      	ldr	r0, [sp, #12]
1001a324:	f004 fa18 	bl	1001e758 <_Balloc>
1001a328:	900a      	str	r0, [sp, #40]	@ 0x28
1001a32a:	2800      	cmp	r0, #0
1001a32c:	f000 85bd 	beq.w	1001aeaa <_dtoa_r+0xdea>
1001a330:	9b03      	ldr	r3, [sp, #12]
1001a332:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001a334:	639a      	str	r2, [r3, #56]	@ 0x38
1001a336:	9b06      	ldr	r3, [sp, #24]
1001a338:	2b0e      	cmp	r3, #14
1001a33a:	f200 8115 	bhi.w	1001a568 <_dtoa_r+0x4a8>
1001a33e:	2d00      	cmp	r5, #0
1001a340:	f000 8112 	beq.w	1001a568 <_dtoa_r+0x4a8>
1001a344:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1001a346:	2a00      	cmp	r2, #0
1001a348:	f340 843b 	ble.w	1001abc2 <_dtoa_r+0xb02>
1001a34c:	4db2      	ldr	r5, [pc, #712]	@ (1001a618 <_dtoa_r+0x558>)
1001a34e:	f002 030f 	and.w	r3, r2, #15
1001a352:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
1001a356:	e9d3 8900 	ldrd	r8, r9, [r3]
1001a35a:	4613      	mov	r3, r2
1001a35c:	1115      	asrs	r5, r2, #4
1001a35e:	05da      	lsls	r2, r3, #23
1001a360:	f140 83fa 	bpl.w	1001ab58 <_dtoa_r+0xa98>
1001a364:	4bad      	ldr	r3, [pc, #692]	@ (1001a61c <_dtoa_r+0x55c>)
1001a366:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1001a36a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1001a36e:	f007 ff5b 	bl	10022228 <__aeabi_ddiv>
1001a372:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
1001a376:	f005 050f 	and.w	r5, r5, #15
1001a37a:	2703      	movs	r7, #3
1001a37c:	b17d      	cbz	r5, 1001a39e <_dtoa_r+0x2de>
1001a37e:	4ea7      	ldr	r6, [pc, #668]	@ (1001a61c <_dtoa_r+0x55c>)
1001a380:	07eb      	lsls	r3, r5, #31
1001a382:	d508      	bpl.n	1001a396 <_dtoa_r+0x2d6>
1001a384:	4640      	mov	r0, r8
1001a386:	4649      	mov	r1, r9
1001a388:	e9d6 2300 	ldrd	r2, r3, [r6]
1001a38c:	f007 fe22 	bl	10021fd4 <__aeabi_dmul>
1001a390:	3701      	adds	r7, #1
1001a392:	4680      	mov	r8, r0
1001a394:	4689      	mov	r9, r1
1001a396:	106d      	asrs	r5, r5, #1
1001a398:	f106 0608 	add.w	r6, r6, #8
1001a39c:	d1f0      	bne.n	1001a380 <_dtoa_r+0x2c0>
1001a39e:	4642      	mov	r2, r8
1001a3a0:	464b      	mov	r3, r9
1001a3a2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	@ 0x48
1001a3a6:	f007 ff3f 	bl	10022228 <__aeabi_ddiv>
1001a3aa:	4680      	mov	r8, r0
1001a3ac:	4689      	mov	r9, r1
1001a3ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1001a3b0:	b143      	cbz	r3, 1001a3c4 <_dtoa_r+0x304>
1001a3b2:	4b9b      	ldr	r3, [pc, #620]	@ (1001a620 <_dtoa_r+0x560>)
1001a3b4:	2200      	movs	r2, #0
1001a3b6:	4640      	mov	r0, r8
1001a3b8:	4649      	mov	r1, r9
1001a3ba:	f008 f87d 	bl	100224b8 <__aeabi_dcmplt>
1001a3be:	2800      	cmp	r0, #0
1001a3c0:	f040 84f1 	bne.w	1001ada6 <_dtoa_r+0xce6>
1001a3c4:	4638      	mov	r0, r7
1001a3c6:	f007 fd9b 	bl	10021f00 <__aeabi_i2d>
1001a3ca:	4642      	mov	r2, r8
1001a3cc:	464b      	mov	r3, r9
1001a3ce:	f007 fe01 	bl	10021fd4 <__aeabi_dmul>
1001a3d2:	4b94      	ldr	r3, [pc, #592]	@ (1001a624 <_dtoa_r+0x564>)
1001a3d4:	2200      	movs	r2, #0
1001a3d6:	f007 fc47 	bl	10021c68 <__adddf3>
1001a3da:	9b06      	ldr	r3, [sp, #24]
1001a3dc:	4606      	mov	r6, r0
1001a3de:	f1a1 7750 	sub.w	r7, r1, #54525952	@ 0x3400000
1001a3e2:	2b00      	cmp	r3, #0
1001a3e4:	f000 80a9 	beq.w	1001a53a <_dtoa_r+0x47a>
1001a3e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001a3ea:	9319      	str	r3, [sp, #100]	@ 0x64
1001a3ec:	9b06      	ldr	r3, [sp, #24]
1001a3ee:	9312      	str	r3, [sp, #72]	@ 0x48
1001a3f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001a3f2:	4d89      	ldr	r5, [pc, #548]	@ (1001a618 <_dtoa_r+0x558>)
1001a3f4:	4649      	mov	r1, r9
1001a3f6:	4640      	mov	r0, r8
1001a3f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
1001a3fc:	1c5e      	adds	r6, r3, #1
1001a3fe:	f008 f899 	bl	10022534 <__aeabi_d2iz>
1001a402:	9912      	ldr	r1, [sp, #72]	@ 0x48
1001a404:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
1001a408:	e953 1202 	ldrd	r1, r2, [r3, #-8]
1001a40c:	4607      	mov	r7, r0
1001a40e:	e9cd 1216 	strd	r1, r2, [sp, #88]	@ 0x58
1001a412:	f007 fd75 	bl	10021f00 <__aeabi_i2d>
1001a416:	4602      	mov	r2, r0
1001a418:	460b      	mov	r3, r1
1001a41a:	4640      	mov	r0, r8
1001a41c:	4649      	mov	r1, r9
1001a41e:	f007 fc21 	bl	10021c64 <__aeabi_dsub>
1001a422:	4689      	mov	r9, r1
1001a424:	990c      	ldr	r1, [sp, #48]	@ 0x30
1001a426:	3730      	adds	r7, #48	@ 0x30
1001a428:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	@ 0x58
1001a42c:	4680      	mov	r8, r0
1001a42e:	b2ff      	uxtb	r7, r7
1001a430:	2900      	cmp	r1, #0
1001a432:	f000 8453 	beq.w	1001acdc <_dtoa_r+0xc1c>
1001a436:	497c      	ldr	r1, [pc, #496]	@ (1001a628 <_dtoa_r+0x568>)
1001a438:	2000      	movs	r0, #0
1001a43a:	f007 fef5 	bl	10022228 <__aeabi_ddiv>
1001a43e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
1001a442:	f007 fc0f 	bl	10021c64 <__aeabi_dsub>
1001a446:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
1001a448:	4602      	mov	r2, r0
1001a44a:	460b      	mov	r3, r1
1001a44c:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
1001a450:	702f      	strb	r7, [r5, #0]
1001a452:	4642      	mov	r2, r8
1001a454:	464b      	mov	r3, r9
1001a456:	f008 f84d 	bl	100224f4 <__aeabi_dcmpgt>
1001a45a:	2800      	cmp	r0, #0
1001a45c:	f040 8497 	bne.w	1001ad8e <_dtoa_r+0xcce>
1001a460:	e9cd b41a 	strd	fp, r4, [sp, #104]	@ 0x68
1001a464:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
1001a468:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1001a46a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
1001a46e:	2700      	movs	r7, #0
1001a470:	e02a      	b.n	1001a4c8 <_dtoa_r+0x408>
1001a472:	3701      	adds	r7, #1
1001a474:	42af      	cmp	r7, r5
1001a476:	f280 84de 	bge.w	1001ae36 <_dtoa_r+0xd76>
1001a47a:	4b6c      	ldr	r3, [pc, #432]	@ (1001a62c <_dtoa_r+0x56c>)
1001a47c:	4650      	mov	r0, sl
1001a47e:	4659      	mov	r1, fp
1001a480:	2200      	movs	r2, #0
1001a482:	f007 fda7 	bl	10021fd4 <__aeabi_dmul>
1001a486:	4b69      	ldr	r3, [pc, #420]	@ (1001a62c <_dtoa_r+0x56c>)
1001a488:	2200      	movs	r2, #0
1001a48a:	4682      	mov	sl, r0
1001a48c:	468b      	mov	fp, r1
1001a48e:	4640      	mov	r0, r8
1001a490:	4649      	mov	r1, r9
1001a492:	f007 fd9f 	bl	10021fd4 <__aeabi_dmul>
1001a496:	4689      	mov	r9, r1
1001a498:	4680      	mov	r8, r0
1001a49a:	f008 f84b 	bl	10022534 <__aeabi_d2iz>
1001a49e:	4604      	mov	r4, r0
1001a4a0:	f007 fd2e 	bl	10021f00 <__aeabi_i2d>
1001a4a4:	4602      	mov	r2, r0
1001a4a6:	460b      	mov	r3, r1
1001a4a8:	4640      	mov	r0, r8
1001a4aa:	4649      	mov	r1, r9
1001a4ac:	f007 fbda 	bl	10021c64 <__aeabi_dsub>
1001a4b0:	3430      	adds	r4, #48	@ 0x30
1001a4b2:	f806 4b01 	strb.w	r4, [r6], #1
1001a4b6:	4652      	mov	r2, sl
1001a4b8:	465b      	mov	r3, fp
1001a4ba:	4680      	mov	r8, r0
1001a4bc:	4689      	mov	r9, r1
1001a4be:	f007 fffb 	bl	100224b8 <__aeabi_dcmplt>
1001a4c2:	2800      	cmp	r0, #0
1001a4c4:	f040 84b4 	bne.w	1001ae30 <_dtoa_r+0xd70>
1001a4c8:	4642      	mov	r2, r8
1001a4ca:	464b      	mov	r3, r9
1001a4cc:	4954      	ldr	r1, [pc, #336]	@ (1001a620 <_dtoa_r+0x560>)
1001a4ce:	2000      	movs	r0, #0
1001a4d0:	f007 fbc8 	bl	10021c64 <__aeabi_dsub>
1001a4d4:	4652      	mov	r2, sl
1001a4d6:	465b      	mov	r3, fp
1001a4d8:	f007 ffee 	bl	100224b8 <__aeabi_dcmplt>
1001a4dc:	2800      	cmp	r0, #0
1001a4de:	d0c8      	beq.n	1001a472 <_dtoa_r+0x3b2>
1001a4e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1001a4e2:	f8dd a058 	ldr.w	sl, [sp, #88]	@ 0x58
1001a4e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001a4e8:	4637      	mov	r7, r6
1001a4ea:	f103 0801 	add.w	r8, r3, #1
1001a4ee:	e002      	b.n	1001a4f6 <_dtoa_r+0x436>
1001a4f0:	4297      	cmp	r7, r2
1001a4f2:	f000 847c 	beq.w	1001adee <_dtoa_r+0xd2e>
1001a4f6:	463e      	mov	r6, r7
1001a4f8:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
1001a4fc:	2b39      	cmp	r3, #57	@ 0x39
1001a4fe:	d0f7      	beq.n	1001a4f0 <_dtoa_r+0x430>
1001a500:	3301      	adds	r3, #1
1001a502:	b2db      	uxtb	r3, r3
1001a504:	703b      	strb	r3, [r7, #0]
1001a506:	4645      	mov	r5, r8
1001a508:	e175      	b.n	1001a7f6 <_dtoa_r+0x736>
1001a50a:	2301      	movs	r3, #1
1001a50c:	2c00      	cmp	r4, #0
1001a50e:	9310      	str	r3, [sp, #64]	@ 0x40
1001a510:	f6bf ae82 	bge.w	1001a218 <_dtoa_r+0x158>
1001a514:	f1c8 0301 	rsb	r3, r8, #1
1001a518:	930b      	str	r3, [sp, #44]	@ 0x2c
1001a51a:	2400      	movs	r4, #0
1001a51c:	e67e      	b.n	1001a21c <_dtoa_r+0x15c>
1001a51e:	4638      	mov	r0, r7
1001a520:	f007 fcee 	bl	10021f00 <__aeabi_i2d>
1001a524:	4642      	mov	r2, r8
1001a526:	464b      	mov	r3, r9
1001a528:	f007 fd54 	bl	10021fd4 <__aeabi_dmul>
1001a52c:	4b3d      	ldr	r3, [pc, #244]	@ (1001a624 <_dtoa_r+0x564>)
1001a52e:	2200      	movs	r2, #0
1001a530:	f007 fb9a 	bl	10021c68 <__adddf3>
1001a534:	4606      	mov	r6, r0
1001a536:	f1a1 7750 	sub.w	r7, r1, #54525952	@ 0x3400000
1001a53a:	4b3d      	ldr	r3, [pc, #244]	@ (1001a630 <_dtoa_r+0x570>)
1001a53c:	4640      	mov	r0, r8
1001a53e:	4649      	mov	r1, r9
1001a540:	2200      	movs	r2, #0
1001a542:	f007 fb8f 	bl	10021c64 <__aeabi_dsub>
1001a546:	4632      	mov	r2, r6
1001a548:	463b      	mov	r3, r7
1001a54a:	4680      	mov	r8, r0
1001a54c:	4689      	mov	r9, r1
1001a54e:	f007 ffd1 	bl	100224f4 <__aeabi_dcmpgt>
1001a552:	2800      	cmp	r0, #0
1001a554:	f040 845a 	bne.w	1001ae0c <_dtoa_r+0xd4c>
1001a558:	4640      	mov	r0, r8
1001a55a:	4649      	mov	r1, r9
1001a55c:	4632      	mov	r2, r6
1001a55e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
1001a562:	f007 ffa9 	bl	100224b8 <__aeabi_dcmplt>
1001a566:	bb28      	cbnz	r0, 1001a5b4 <_dtoa_r+0x4f4>
1001a568:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1001a56a:	2b00      	cmp	r3, #0
1001a56c:	f2c0 8092 	blt.w	1001a694 <_dtoa_r+0x5d4>
1001a570:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1001a572:	2a0e      	cmp	r2, #14
1001a574:	f300 808e 	bgt.w	1001a694 <_dtoa_r+0x5d4>
1001a578:	4d27      	ldr	r5, [pc, #156]	@ (1001a618 <_dtoa_r+0x558>)
1001a57a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001a57c:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
1001a580:	e9d5 3400 	ldrd	r3, r4, [r5]
1001a584:	e9cd 3404 	strd	r3, r4, [sp, #16]
1001a588:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
1001a58a:	2b00      	cmp	r3, #0
1001a58c:	da19      	bge.n	1001a5c2 <_dtoa_r+0x502>
1001a58e:	9b06      	ldr	r3, [sp, #24]
1001a590:	2b00      	cmp	r3, #0
1001a592:	dc16      	bgt.n	1001a5c2 <_dtoa_r+0x502>
1001a594:	d10e      	bne.n	1001a5b4 <_dtoa_r+0x4f4>
1001a596:	4b26      	ldr	r3, [pc, #152]	@ (1001a630 <_dtoa_r+0x570>)
1001a598:	2200      	movs	r2, #0
1001a59a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1001a59e:	f007 fd19 	bl	10021fd4 <__aeabi_dmul>
1001a5a2:	4602      	mov	r2, r0
1001a5a4:	460b      	mov	r3, r1
1001a5a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1001a5aa:	f007 ff8f 	bl	100224cc <__aeabi_dcmple>
1001a5ae:	2800      	cmp	r0, #0
1001a5b0:	f000 842c 	beq.w	1001ae0c <_dtoa_r+0xd4c>
1001a5b4:	f04f 0900 	mov.w	r9, #0
1001a5b8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1001a5ba:	464f      	mov	r7, r9
1001a5bc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
1001a5be:	43dd      	mvns	r5, r3
1001a5c0:	e225      	b.n	1001aa0e <_dtoa_r+0x94e>
1001a5c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
1001a5c6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
1001a5ca:	4622      	mov	r2, r4
1001a5cc:	462b      	mov	r3, r5
1001a5ce:	4640      	mov	r0, r8
1001a5d0:	4649      	mov	r1, r9
1001a5d2:	f007 fe29 	bl	10022228 <__aeabi_ddiv>
1001a5d6:	f007 ffad 	bl	10022534 <__aeabi_d2iz>
1001a5da:	4606      	mov	r6, r0
1001a5dc:	f007 fc90 	bl	10021f00 <__aeabi_i2d>
1001a5e0:	4622      	mov	r2, r4
1001a5e2:	462b      	mov	r3, r5
1001a5e4:	f007 fcf6 	bl	10021fd4 <__aeabi_dmul>
1001a5e8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
1001a5ea:	460b      	mov	r3, r1
1001a5ec:	4602      	mov	r2, r0
1001a5ee:	4649      	mov	r1, r9
1001a5f0:	4640      	mov	r0, r8
1001a5f2:	f007 fb37 	bl	10021c64 <__aeabi_dsub>
1001a5f6:	f106 0330 	add.w	r3, r6, #48	@ 0x30
1001a5fa:	f807 3b01 	strb.w	r3, [r7], #1
1001a5fe:	9b06      	ldr	r3, [sp, #24]
1001a600:	2b01      	cmp	r3, #1
1001a602:	f000 8312 	beq.w	1001ac2a <_dtoa_r+0xb6a>
1001a606:	2501      	movs	r5, #1
1001a608:	f8cd a018 	str.w	sl, [sp, #24]
1001a60c:	4699      	mov	r9, r3
1001a60e:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
1001a612:	46a8      	mov	r8, r5
1001a614:	e02c      	b.n	1001a670 <_dtoa_r+0x5b0>
1001a616:	bf00      	nop
1001a618:	100257b0 	.word	0x100257b0
1001a61c:	10025788 	.word	0x10025788
1001a620:	3ff00000 	.word	0x3ff00000
1001a624:	401c0000 	.word	0x401c0000
1001a628:	3fe00000 	.word	0x3fe00000
1001a62c:	40240000 	.word	0x40240000
1001a630:	40140000 	.word	0x40140000
1001a634:	4652      	mov	r2, sl
1001a636:	465b      	mov	r3, fp
1001a638:	4620      	mov	r0, r4
1001a63a:	4629      	mov	r1, r5
1001a63c:	f007 fdf4 	bl	10022228 <__aeabi_ddiv>
1001a640:	f007 ff78 	bl	10022534 <__aeabi_d2iz>
1001a644:	4606      	mov	r6, r0
1001a646:	f007 fc5b 	bl	10021f00 <__aeabi_i2d>
1001a64a:	4652      	mov	r2, sl
1001a64c:	465b      	mov	r3, fp
1001a64e:	f007 fcc1 	bl	10021fd4 <__aeabi_dmul>
1001a652:	f108 0801 	add.w	r8, r8, #1
1001a656:	460b      	mov	r3, r1
1001a658:	4602      	mov	r2, r0
1001a65a:	4629      	mov	r1, r5
1001a65c:	4620      	mov	r0, r4
1001a65e:	f007 fb01 	bl	10021c64 <__aeabi_dsub>
1001a662:	f106 0330 	add.w	r3, r6, #48	@ 0x30
1001a666:	45c8      	cmp	r8, r9
1001a668:	f807 3b01 	strb.w	r3, [r7], #1
1001a66c:	f000 82db 	beq.w	1001ac26 <_dtoa_r+0xb66>
1001a670:	4bb9      	ldr	r3, [pc, #740]	@ (1001a958 <_dtoa_r+0x898>)
1001a672:	2200      	movs	r2, #0
1001a674:	f007 fcae 	bl	10021fd4 <__aeabi_dmul>
1001a678:	2200      	movs	r2, #0
1001a67a:	2300      	movs	r3, #0
1001a67c:	4604      	mov	r4, r0
1001a67e:	460d      	mov	r5, r1
1001a680:	f007 ff10 	bl	100224a4 <__aeabi_dcmpeq>
1001a684:	2800      	cmp	r0, #0
1001a686:	d0d5      	beq.n	1001a634 <_dtoa_r+0x574>
1001a688:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001a68a:	f8dd a018 	ldr.w	sl, [sp, #24]
1001a68e:	3501      	adds	r5, #1
1001a690:	463e      	mov	r6, r7
1001a692:	e0b0      	b.n	1001a7f6 <_dtoa_r+0x736>
1001a694:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1001a696:	2a00      	cmp	r2, #0
1001a698:	f040 80d2 	bne.w	1001a840 <_dtoa_r+0x780>
1001a69c:	2300      	movs	r3, #0
1001a69e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1001a6a0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
1001a6a2:	930c      	str	r3, [sp, #48]	@ 0x30
1001a6a4:	461f      	mov	r7, r3
1001a6a6:	b156      	cbz	r6, 1001a6be <_dtoa_r+0x5fe>
1001a6a8:	2c00      	cmp	r4, #0
1001a6aa:	dd08      	ble.n	1001a6be <_dtoa_r+0x5fe>
1001a6ac:	42a6      	cmp	r6, r4
1001a6ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1001a6b0:	4633      	mov	r3, r6
1001a6b2:	bfa8      	it	ge
1001a6b4:	4623      	movge	r3, r4
1001a6b6:	1ad2      	subs	r2, r2, r3
1001a6b8:	920b      	str	r2, [sp, #44]	@ 0x2c
1001a6ba:	1af6      	subs	r6, r6, r3
1001a6bc:	1ae4      	subs	r4, r4, r3
1001a6be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001a6c0:	b153      	cbz	r3, 1001a6d8 <_dtoa_r+0x618>
1001a6c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1001a6c4:	b113      	cbz	r3, 1001a6cc <_dtoa_r+0x60c>
1001a6c6:	2d00      	cmp	r5, #0
1001a6c8:	f040 82e8 	bne.w	1001ac9c <_dtoa_r+0xbdc>
1001a6cc:	4651      	mov	r1, sl
1001a6ce:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1001a6d0:	9803      	ldr	r0, [sp, #12]
1001a6d2:	f004 fa4f 	bl	1001eb74 <__pow5mult>
1001a6d6:	4682      	mov	sl, r0
1001a6d8:	9803      	ldr	r0, [sp, #12]
1001a6da:	2101      	movs	r1, #1
1001a6dc:	f004 f966 	bl	1001e9ac <__i2b>
1001a6e0:	4681      	mov	r9, r0
1001a6e2:	f1bb 0f00 	cmp.w	fp, #0
1001a6e6:	f040 81b6 	bne.w	1001aa56 <_dtoa_r+0x996>
1001a6ea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
1001a6ec:	2b01      	cmp	r3, #1
1001a6ee:	f340 81cc 	ble.w	1001aa8a <_dtoa_r+0x9ca>
1001a6f2:	2001      	movs	r0, #1
1001a6f4:	4420      	add	r0, r4
1001a6f6:	f010 001f 	ands.w	r0, r0, #31
1001a6fa:	f000 809a 	beq.w	1001a832 <_dtoa_r+0x772>
1001a6fe:	f1c0 0320 	rsb	r3, r0, #32
1001a702:	2b04      	cmp	r3, #4
1001a704:	f340 81da 	ble.w	1001aabc <_dtoa_r+0x9fc>
1001a708:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001a70a:	f1c0 001c 	rsb	r0, r0, #28
1001a70e:	4403      	add	r3, r0
1001a710:	930b      	str	r3, [sp, #44]	@ 0x2c
1001a712:	4406      	add	r6, r0
1001a714:	4404      	add	r4, r0
1001a716:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001a718:	2b00      	cmp	r3, #0
1001a71a:	dd05      	ble.n	1001a728 <_dtoa_r+0x668>
1001a71c:	4651      	mov	r1, sl
1001a71e:	9803      	ldr	r0, [sp, #12]
1001a720:	461a      	mov	r2, r3
1001a722:	f004 fa81 	bl	1001ec28 <__lshift>
1001a726:	4682      	mov	sl, r0
1001a728:	2c00      	cmp	r4, #0
1001a72a:	dd05      	ble.n	1001a738 <_dtoa_r+0x678>
1001a72c:	4649      	mov	r1, r9
1001a72e:	9803      	ldr	r0, [sp, #12]
1001a730:	4622      	mov	r2, r4
1001a732:	f004 fa79 	bl	1001ec28 <__lshift>
1001a736:	4681      	mov	r9, r0
1001a738:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1001a73a:	2b00      	cmp	r3, #0
1001a73c:	f040 8170 	bne.w	1001aa20 <_dtoa_r+0x960>
1001a740:	9b06      	ldr	r3, [sp, #24]
1001a742:	2b00      	cmp	r3, #0
1001a744:	f340 8148 	ble.w	1001a9d8 <_dtoa_r+0x918>
1001a748:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1001a74a:	2b00      	cmp	r3, #0
1001a74c:	f040 80a4 	bne.w	1001a898 <_dtoa_r+0x7d8>
1001a750:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001a752:	3501      	adds	r5, #1
1001a754:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
1001a758:	9c06      	ldr	r4, [sp, #24]
1001a75a:	f8dd b00c 	ldr.w	fp, [sp, #12]
1001a75e:	2601      	movs	r6, #1
1001a760:	e007      	b.n	1001a772 <_dtoa_r+0x6b2>
1001a762:	4651      	mov	r1, sl
1001a764:	2300      	movs	r3, #0
1001a766:	220a      	movs	r2, #10
1001a768:	4658      	mov	r0, fp
1001a76a:	f004 f825 	bl	1001e7b8 <__multadd>
1001a76e:	3601      	adds	r6, #1
1001a770:	4682      	mov	sl, r0
1001a772:	4649      	mov	r1, r9
1001a774:	4650      	mov	r0, sl
1001a776:	f7ff fc0b 	bl	10019f90 <quorem>
1001a77a:	42a6      	cmp	r6, r4
1001a77c:	f100 0330 	add.w	r3, r0, #48	@ 0x30
1001a780:	f808 3b01 	strb.w	r3, [r8], #1
1001a784:	dbed      	blt.n	1001a762 <_dtoa_r+0x6a2>
1001a786:	9a06      	ldr	r2, [sp, #24]
1001a788:	2a00      	cmp	r2, #0
1001a78a:	bfc8      	it	gt
1001a78c:	4616      	movgt	r6, r2
1001a78e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001a790:	bfd8      	it	le
1001a792:	2601      	movle	r6, #1
1001a794:	eb02 0b06 	add.w	fp, r2, r6
1001a798:	2400      	movs	r4, #0
1001a79a:	4651      	mov	r1, sl
1001a79c:	2201      	movs	r2, #1
1001a79e:	9803      	ldr	r0, [sp, #12]
1001a7a0:	9304      	str	r3, [sp, #16]
1001a7a2:	f004 fa41 	bl	1001ec28 <__lshift>
1001a7a6:	4649      	mov	r1, r9
1001a7a8:	4682      	mov	sl, r0
1001a7aa:	f004 fab5 	bl	1001ed18 <__mcmp>
1001a7ae:	2800      	cmp	r0, #0
1001a7b0:	f340 81e3 	ble.w	1001ab7a <_dtoa_r+0xaba>
1001a7b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001a7b6:	e002      	b.n	1001a7be <_dtoa_r+0x6fe>
1001a7b8:	455a      	cmp	r2, fp
1001a7ba:	f000 81e9 	beq.w	1001ab90 <_dtoa_r+0xad0>
1001a7be:	465e      	mov	r6, fp
1001a7c0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
1001a7c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
1001a7c8:	2b39      	cmp	r3, #57	@ 0x39
1001a7ca:	d0f5      	beq.n	1001a7b8 <_dtoa_r+0x6f8>
1001a7cc:	3301      	adds	r3, #1
1001a7ce:	f88b 3000 	strb.w	r3, [fp]
1001a7d2:	f8dd 800c 	ldr.w	r8, [sp, #12]
1001a7d6:	4649      	mov	r1, r9
1001a7d8:	4640      	mov	r0, r8
1001a7da:	f003 ffe3 	bl	1001e7a4 <_Bfree>
1001a7de:	b157      	cbz	r7, 1001a7f6 <_dtoa_r+0x736>
1001a7e0:	b12c      	cbz	r4, 1001a7ee <_dtoa_r+0x72e>
1001a7e2:	42bc      	cmp	r4, r7
1001a7e4:	d003      	beq.n	1001a7ee <_dtoa_r+0x72e>
1001a7e6:	4621      	mov	r1, r4
1001a7e8:	4640      	mov	r0, r8
1001a7ea:	f003 ffdb 	bl	1001e7a4 <_Bfree>
1001a7ee:	9803      	ldr	r0, [sp, #12]
1001a7f0:	4639      	mov	r1, r7
1001a7f2:	f003 ffd7 	bl	1001e7a4 <_Bfree>
1001a7f6:	9803      	ldr	r0, [sp, #12]
1001a7f8:	4651      	mov	r1, sl
1001a7fa:	f003 ffd3 	bl	1001e7a4 <_Bfree>
1001a7fe:	2300      	movs	r3, #0
1001a800:	7033      	strb	r3, [r6, #0]
1001a802:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
1001a804:	601d      	str	r5, [r3, #0]
1001a806:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
1001a808:	2b00      	cmp	r3, #0
1001a80a:	f43f ac94 	beq.w	1001a136 <_dtoa_r+0x76>
1001a80e:	980a      	ldr	r0, [sp, #40]	@ 0x28
1001a810:	601e      	str	r6, [r3, #0]
1001a812:	b01f      	add	sp, #124	@ 0x7c
1001a814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001a818:	4658      	mov	r0, fp
1001a81a:	f007 fb71 	bl	10021f00 <__aeabi_i2d>
1001a81e:	4632      	mov	r2, r6
1001a820:	463b      	mov	r3, r7
1001a822:	f007 fe3f 	bl	100224a4 <__aeabi_dcmpeq>
1001a826:	2800      	cmp	r0, #0
1001a828:	f47f acdc 	bne.w	1001a1e4 <_dtoa_r+0x124>
1001a82c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
1001a830:	e4d8      	b.n	1001a1e4 <_dtoa_r+0x124>
1001a832:	231c      	movs	r3, #28
1001a834:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1001a836:	441a      	add	r2, r3
1001a838:	920b      	str	r2, [sp, #44]	@ 0x2c
1001a83a:	441e      	add	r6, r3
1001a83c:	441c      	add	r4, r3
1001a83e:	e76a      	b.n	1001a716 <_dtoa_r+0x656>
1001a840:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
1001a842:	2a01      	cmp	r2, #1
1001a844:	f340 81a9 	ble.w	1001ab9a <_dtoa_r+0xada>
1001a848:	9a06      	ldr	r2, [sp, #24]
1001a84a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001a84c:	1e55      	subs	r5, r2, #1
1001a84e:	42ab      	cmp	r3, r5
1001a850:	f2c0 816b 	blt.w	1001ab2a <_dtoa_r+0xa6a>
1001a854:	2a00      	cmp	r2, #0
1001a856:	eba3 0505 	sub.w	r5, r3, r5
1001a85a:	f280 82dd 	bge.w	1001ae18 <_dtoa_r+0xd58>
1001a85e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001a860:	9a06      	ldr	r2, [sp, #24]
1001a862:	1a9e      	subs	r6, r3, r2
1001a864:	9803      	ldr	r0, [sp, #12]
1001a866:	2101      	movs	r1, #1
1001a868:	f004 f8a0 	bl	1001e9ac <__i2b>
1001a86c:	4607      	mov	r7, r0
1001a86e:	e71a      	b.n	1001a6a6 <_dtoa_r+0x5e6>
1001a870:	f1c3 0320 	rsb	r3, r3, #32
1001a874:	fa06 f003 	lsl.w	r0, r6, r3
1001a878:	e481      	b.n	1001a17e <_dtoa_r+0xbe>
1001a87a:	2501      	movs	r5, #1
1001a87c:	e4e4      	b.n	1001a248 <_dtoa_r+0x188>
1001a87e:	4639      	mov	r1, r7
1001a880:	2300      	movs	r3, #0
1001a882:	9803      	ldr	r0, [sp, #12]
1001a884:	220a      	movs	r2, #10
1001a886:	f003 ff97 	bl	1001e7b8 <__multadd>
1001a88a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001a88c:	2b00      	cmp	r3, #0
1001a88e:	4607      	mov	r7, r0
1001a890:	f340 82ef 	ble.w	1001ae72 <_dtoa_r+0xdb2>
1001a894:	950e      	str	r5, [sp, #56]	@ 0x38
1001a896:	9306      	str	r3, [sp, #24]
1001a898:	2e00      	cmp	r6, #0
1001a89a:	f300 813f 	bgt.w	1001ab1c <_dtoa_r+0xa5c>
1001a89e:	f1bb 0f00 	cmp.w	fp, #0
1001a8a2:	f040 81df 	bne.w	1001ac64 <_dtoa_r+0xba4>
1001a8a6:	46b8      	mov	r8, r7
1001a8a8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1001a8aa:	9c06      	ldr	r4, [sp, #24]
1001a8ac:	1e73      	subs	r3, r6, #1
1001a8ae:	441c      	add	r4, r3
1001a8b0:	9b04      	ldr	r3, [sp, #16]
1001a8b2:	940c      	str	r4, [sp, #48]	@ 0x30
1001a8b4:	f003 0301 	and.w	r3, r3, #1
1001a8b8:	9c03      	ldr	r4, [sp, #12]
1001a8ba:	930f      	str	r3, [sp, #60]	@ 0x3c
1001a8bc:	4649      	mov	r1, r9
1001a8be:	4650      	mov	r0, sl
1001a8c0:	f7ff fb66 	bl	10019f90 <quorem>
1001a8c4:	4639      	mov	r1, r7
1001a8c6:	4683      	mov	fp, r0
1001a8c8:	4650      	mov	r0, sl
1001a8ca:	f004 fa25 	bl	1001ed18 <__mcmp>
1001a8ce:	4642      	mov	r2, r8
1001a8d0:	4649      	mov	r1, r9
1001a8d2:	4605      	mov	r5, r0
1001a8d4:	4620      	mov	r0, r4
1001a8d6:	f004 fa3f 	bl	1001ed58 <__mdiff>
1001a8da:	68c2      	ldr	r2, [r0, #12]
1001a8dc:	4601      	mov	r1, r0
1001a8de:	f10b 0330 	add.w	r3, fp, #48	@ 0x30
1001a8e2:	2a00      	cmp	r2, #0
1001a8e4:	d13a      	bne.n	1001a95c <_dtoa_r+0x89c>
1001a8e6:	9008      	str	r0, [sp, #32]
1001a8e8:	4650      	mov	r0, sl
1001a8ea:	930b      	str	r3, [sp, #44]	@ 0x2c
1001a8ec:	f004 fa14 	bl	1001ed18 <__mcmp>
1001a8f0:	9908      	ldr	r1, [sp, #32]
1001a8f2:	9006      	str	r0, [sp, #24]
1001a8f4:	4620      	mov	r0, r4
1001a8f6:	f003 ff55 	bl	1001e7a4 <_Bfree>
1001a8fa:	9a06      	ldr	r2, [sp, #24]
1001a8fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001a8fe:	2a00      	cmp	r2, #0
1001a900:	d15a      	bne.n	1001a9b8 <_dtoa_r+0x8f8>
1001a902:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
1001a904:	b91a      	cbnz	r2, 1001a90e <_dtoa_r+0x84e>
1001a906:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1001a908:	2a00      	cmp	r2, #0
1001a90a:	f000 829a 	beq.w	1001ae42 <_dtoa_r+0xd82>
1001a90e:	2d00      	cmp	r5, #0
1001a910:	db45      	blt.n	1001a99e <_dtoa_r+0x8de>
1001a912:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1001a914:	46b3      	mov	fp, r6
1001a916:	42b2      	cmp	r2, r6
1001a918:	f80b 3b01 	strb.w	r3, [fp], #1
1001a91c:	f000 81b9 	beq.w	1001ac92 <_dtoa_r+0xbd2>
1001a920:	4651      	mov	r1, sl
1001a922:	2300      	movs	r3, #0
1001a924:	220a      	movs	r2, #10
1001a926:	4620      	mov	r0, r4
1001a928:	f003 ff46 	bl	1001e7b8 <__multadd>
1001a92c:	4547      	cmp	r7, r8
1001a92e:	4682      	mov	sl, r0
1001a930:	4639      	mov	r1, r7
1001a932:	f04f 0300 	mov.w	r3, #0
1001a936:	f04f 020a 	mov.w	r2, #10
1001a93a:	4620      	mov	r0, r4
1001a93c:	d036      	beq.n	1001a9ac <_dtoa_r+0x8ec>
1001a93e:	f003 ff3b 	bl	1001e7b8 <__multadd>
1001a942:	4641      	mov	r1, r8
1001a944:	4607      	mov	r7, r0
1001a946:	2300      	movs	r3, #0
1001a948:	220a      	movs	r2, #10
1001a94a:	4620      	mov	r0, r4
1001a94c:	f003 ff34 	bl	1001e7b8 <__multadd>
1001a950:	465e      	mov	r6, fp
1001a952:	4680      	mov	r8, r0
1001a954:	e7b2      	b.n	1001a8bc <_dtoa_r+0x7fc>
1001a956:	bf00      	nop
1001a958:	40240000 	.word	0x40240000
1001a95c:	9803      	ldr	r0, [sp, #12]
1001a95e:	9306      	str	r3, [sp, #24]
1001a960:	f003 ff20 	bl	1001e7a4 <_Bfree>
1001a964:	2d00      	cmp	r5, #0
1001a966:	9b06      	ldr	r3, [sp, #24]
1001a968:	db06      	blt.n	1001a978 <_dtoa_r+0x8b8>
1001a96a:	9a04      	ldr	r2, [sp, #16]
1001a96c:	9928      	ldr	r1, [sp, #160]	@ 0xa0
1001a96e:	f002 0201 	and.w	r2, r2, #1
1001a972:	430d      	orrs	r5, r1
1001a974:	432a      	orrs	r2, r5
1001a976:	d12a      	bne.n	1001a9ce <_dtoa_r+0x90e>
1001a978:	4651      	mov	r1, sl
1001a97a:	2201      	movs	r2, #1
1001a97c:	9803      	ldr	r0, [sp, #12]
1001a97e:	9304      	str	r3, [sp, #16]
1001a980:	f004 f952 	bl	1001ec28 <__lshift>
1001a984:	4649      	mov	r1, r9
1001a986:	4682      	mov	sl, r0
1001a988:	f004 f9c6 	bl	1001ed18 <__mcmp>
1001a98c:	2800      	cmp	r0, #0
1001a98e:	9b04      	ldr	r3, [sp, #16]
1001a990:	f340 80e8 	ble.w	1001ab64 <_dtoa_r+0xaa4>
1001a994:	2b39      	cmp	r3, #57	@ 0x39
1001a996:	f000 822f 	beq.w	1001adf8 <_dtoa_r+0xd38>
1001a99a:	f10b 0331 	add.w	r3, fp, #49	@ 0x31
1001a99e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001a9a0:	f806 3b01 	strb.w	r3, [r6], #1
1001a9a4:	463c      	mov	r4, r7
1001a9a6:	3501      	adds	r5, #1
1001a9a8:	4647      	mov	r7, r8
1001a9aa:	e712      	b.n	1001a7d2 <_dtoa_r+0x712>
1001a9ac:	f003 ff04 	bl	1001e7b8 <__multadd>
1001a9b0:	465e      	mov	r6, fp
1001a9b2:	4607      	mov	r7, r0
1001a9b4:	4680      	mov	r8, r0
1001a9b6:	e781      	b.n	1001a8bc <_dtoa_r+0x7fc>
1001a9b8:	2d00      	cmp	r5, #0
1001a9ba:	f2c0 827d 	blt.w	1001aeb8 <_dtoa_r+0xdf8>
1001a9be:	9928      	ldr	r1, [sp, #160]	@ 0xa0
1001a9c0:	430d      	orrs	r5, r1
1001a9c2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1001a9c4:	430d      	orrs	r5, r1
1001a9c6:	f000 8277 	beq.w	1001aeb8 <_dtoa_r+0xdf8>
1001a9ca:	2a00      	cmp	r2, #0
1001a9cc:	dda1      	ble.n	1001a912 <_dtoa_r+0x852>
1001a9ce:	2b39      	cmp	r3, #57	@ 0x39
1001a9d0:	f000 8212 	beq.w	1001adf8 <_dtoa_r+0xd38>
1001a9d4:	3301      	adds	r3, #1
1001a9d6:	e7e2      	b.n	1001a99e <_dtoa_r+0x8de>
1001a9d8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
1001a9da:	2b02      	cmp	r3, #2
1001a9dc:	f77f aeb4 	ble.w	1001a748 <_dtoa_r+0x688>
1001a9e0:	9b06      	ldr	r3, [sp, #24]
1001a9e2:	2b00      	cmp	r3, #0
1001a9e4:	f040 811d 	bne.w	1001ac22 <_dtoa_r+0xb62>
1001a9e8:	4649      	mov	r1, r9
1001a9ea:	2205      	movs	r2, #5
1001a9ec:	9803      	ldr	r0, [sp, #12]
1001a9ee:	f003 fee3 	bl	1001e7b8 <__multadd>
1001a9f2:	4601      	mov	r1, r0
1001a9f4:	4681      	mov	r9, r0
1001a9f6:	4650      	mov	r0, sl
1001a9f8:	f004 f98e 	bl	1001ed18 <__mcmp>
1001a9fc:	2800      	cmp	r0, #0
1001a9fe:	f340 8110 	ble.w	1001ac22 <_dtoa_r+0xb62>
1001aa02:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1001aa04:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001aa06:	2331      	movs	r3, #49	@ 0x31
1001aa08:	f806 3b01 	strb.w	r3, [r6], #1
1001aa0c:	3501      	adds	r5, #1
1001aa0e:	9803      	ldr	r0, [sp, #12]
1001aa10:	4649      	mov	r1, r9
1001aa12:	3501      	adds	r5, #1
1001aa14:	f003 fec6 	bl	1001e7a4 <_Bfree>
1001aa18:	2f00      	cmp	r7, #0
1001aa1a:	f47f aee8 	bne.w	1001a7ee <_dtoa_r+0x72e>
1001aa1e:	e6ea      	b.n	1001a7f6 <_dtoa_r+0x736>
1001aa20:	4649      	mov	r1, r9
1001aa22:	4650      	mov	r0, sl
1001aa24:	f004 f978 	bl	1001ed18 <__mcmp>
1001aa28:	2800      	cmp	r0, #0
1001aa2a:	f6bf ae89 	bge.w	1001a740 <_dtoa_r+0x680>
1001aa2e:	4651      	mov	r1, sl
1001aa30:	2300      	movs	r3, #0
1001aa32:	9803      	ldr	r0, [sp, #12]
1001aa34:	220a      	movs	r2, #10
1001aa36:	f003 febf 	bl	1001e7b8 <__multadd>
1001aa3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001aa3c:	1e5d      	subs	r5, r3, #1
1001aa3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1001aa40:	4682      	mov	sl, r0
1001aa42:	2b00      	cmp	r3, #0
1001aa44:	f47f af1b 	bne.w	1001a87e <_dtoa_r+0x7be>
1001aa48:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001aa4a:	2b00      	cmp	r3, #0
1001aa4c:	f340 81ff 	ble.w	1001ae4e <_dtoa_r+0xd8e>
1001aa50:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001aa52:	9306      	str	r3, [sp, #24]
1001aa54:	e67e      	b.n	1001a754 <_dtoa_r+0x694>
1001aa56:	4601      	mov	r1, r0
1001aa58:	465a      	mov	r2, fp
1001aa5a:	9803      	ldr	r0, [sp, #12]
1001aa5c:	f004 f88a 	bl	1001eb74 <__pow5mult>
1001aa60:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
1001aa62:	2b01      	cmp	r3, #1
1001aa64:	4681      	mov	r9, r0
1001aa66:	dd6c      	ble.n	1001ab42 <_dtoa_r+0xa82>
1001aa68:	f04f 0b00 	mov.w	fp, #0
1001aa6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
1001aa70:	eb09 0383 	add.w	r3, r9, r3, lsl #2
1001aa74:	6918      	ldr	r0, [r3, #16]
1001aa76:	f003 ff47 	bl	1001e908 <__hi0bits>
1001aa7a:	f1c0 0020 	rsb	r0, r0, #32
1001aa7e:	e639      	b.n	1001a6f4 <_dtoa_r+0x634>
1001aa80:	4b92      	ldr	r3, [pc, #584]	@ (1001accc <_dtoa_r+0xc0c>)
1001aa82:	930a      	str	r3, [sp, #40]	@ 0x28
1001aa84:	3303      	adds	r3, #3
1001aa86:	f7ff bbfa 	b.w	1001a27e <_dtoa_r+0x1be>
1001aa8a:	9b04      	ldr	r3, [sp, #16]
1001aa8c:	2b00      	cmp	r3, #0
1001aa8e:	f47f ae30 	bne.w	1001a6f2 <_dtoa_r+0x632>
1001aa92:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
1001aa96:	f3c2 0313 	ubfx	r3, r2, #0, #20
1001aa9a:	2b00      	cmp	r3, #0
1001aa9c:	f47f ae29 	bne.w	1001a6f2 <_dtoa_r+0x632>
1001aaa0:	4b8b      	ldr	r3, [pc, #556]	@ (1001acd0 <_dtoa_r+0xc10>)
1001aaa2:	4013      	ands	r3, r2
1001aaa4:	b123      	cbz	r3, 1001aab0 <_dtoa_r+0x9f0>
1001aaa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001aaa8:	3301      	adds	r3, #1
1001aaaa:	930b      	str	r3, [sp, #44]	@ 0x2c
1001aaac:	3401      	adds	r4, #1
1001aaae:	2301      	movs	r3, #1
1001aab0:	f1bb 0f00 	cmp.w	fp, #0
1001aab4:	f040 81ae 	bne.w	1001ae14 <_dtoa_r+0xd54>
1001aab8:	469b      	mov	fp, r3
1001aaba:	e61a      	b.n	1001a6f2 <_dtoa_r+0x632>
1001aabc:	f43f ae2b 	beq.w	1001a716 <_dtoa_r+0x656>
1001aac0:	f1c0 033c 	rsb	r3, r0, #60	@ 0x3c
1001aac4:	e6b6      	b.n	1001a834 <_dtoa_r+0x774>
1001aac6:	2301      	movs	r3, #1
1001aac8:	930c      	str	r3, [sp, #48]	@ 0x30
1001aaca:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
1001aacc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1001aace:	4413      	add	r3, r2
1001aad0:	9318      	str	r3, [sp, #96]	@ 0x60
1001aad2:	3301      	adds	r3, #1
1001aad4:	2b01      	cmp	r3, #1
1001aad6:	461e      	mov	r6, r3
1001aad8:	9306      	str	r3, [sp, #24]
1001aada:	bfb8      	it	lt
1001aadc:	2601      	movlt	r6, #1
1001aade:	2e17      	cmp	r6, #23
1001aae0:	f340 81d5 	ble.w	1001ae8e <_dtoa_r+0xdce>
1001aae4:	2201      	movs	r2, #1
1001aae6:	2304      	movs	r3, #4
1001aae8:	005b      	lsls	r3, r3, #1
1001aaea:	f103 0014 	add.w	r0, r3, #20
1001aaee:	42b0      	cmp	r0, r6
1001aaf0:	4611      	mov	r1, r2
1001aaf2:	f102 0201 	add.w	r2, r2, #1
1001aaf6:	d9f7      	bls.n	1001aae8 <_dtoa_r+0xa28>
1001aaf8:	9b03      	ldr	r3, [sp, #12]
1001aafa:	63d9      	str	r1, [r3, #60]	@ 0x3c
1001aafc:	e411      	b.n	1001a322 <_dtoa_r+0x262>
1001aafe:	2301      	movs	r3, #1
1001ab00:	930c      	str	r3, [sp, #48]	@ 0x30
1001ab02:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
1001ab04:	2b00      	cmp	r3, #0
1001ab06:	dd33      	ble.n	1001ab70 <_dtoa_r+0xab0>
1001ab08:	9318      	str	r3, [sp, #96]	@ 0x60
1001ab0a:	9306      	str	r3, [sp, #24]
1001ab0c:	461e      	mov	r6, r3
1001ab0e:	e7e6      	b.n	1001aade <_dtoa_r+0xa1e>
1001ab10:	2300      	movs	r3, #0
1001ab12:	930c      	str	r3, [sp, #48]	@ 0x30
1001ab14:	e7d9      	b.n	1001aaca <_dtoa_r+0xa0a>
1001ab16:	2300      	movs	r3, #0
1001ab18:	930c      	str	r3, [sp, #48]	@ 0x30
1001ab1a:	e7f2      	b.n	1001ab02 <_dtoa_r+0xa42>
1001ab1c:	4639      	mov	r1, r7
1001ab1e:	9803      	ldr	r0, [sp, #12]
1001ab20:	4632      	mov	r2, r6
1001ab22:	f004 f881 	bl	1001ec28 <__lshift>
1001ab26:	4607      	mov	r7, r0
1001ab28:	e6b9      	b.n	1001a89e <_dtoa_r+0x7de>
1001ab2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001ab2c:	9a06      	ldr	r2, [sp, #24]
1001ab2e:	950f      	str	r5, [sp, #60]	@ 0x3c
1001ab30:	1aeb      	subs	r3, r5, r3
1001ab32:	449b      	add	fp, r3
1001ab34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001ab36:	461e      	mov	r6, r3
1001ab38:	4413      	add	r3, r2
1001ab3a:	4414      	add	r4, r2
1001ab3c:	930b      	str	r3, [sp, #44]	@ 0x2c
1001ab3e:	2500      	movs	r5, #0
1001ab40:	e690      	b.n	1001a864 <_dtoa_r+0x7a4>
1001ab42:	9b04      	ldr	r3, [sp, #16]
1001ab44:	2b00      	cmp	r3, #0
1001ab46:	d18f      	bne.n	1001aa68 <_dtoa_r+0x9a8>
1001ab48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1001ab4c:	f3c1 0313 	ubfx	r3, r1, #0, #20
1001ab50:	460a      	mov	r2, r1
1001ab52:	2b00      	cmp	r3, #0
1001ab54:	d188      	bne.n	1001aa68 <_dtoa_r+0x9a8>
1001ab56:	e7a3      	b.n	1001aaa0 <_dtoa_r+0x9e0>
1001ab58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1001ab5c:	2702      	movs	r7, #2
1001ab5e:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
1001ab62:	e40b      	b.n	1001a37c <_dtoa_r+0x2bc>
1001ab64:	f47f af1b 	bne.w	1001a99e <_dtoa_r+0x8de>
1001ab68:	07da      	lsls	r2, r3, #31
1001ab6a:	f57f af18 	bpl.w	1001a99e <_dtoa_r+0x8de>
1001ab6e:	e711      	b.n	1001a994 <_dtoa_r+0x8d4>
1001ab70:	2301      	movs	r3, #1
1001ab72:	9329      	str	r3, [sp, #164]	@ 0xa4
1001ab74:	9306      	str	r3, [sp, #24]
1001ab76:	f7ff bbcf 	b.w	1001a318 <_dtoa_r+0x258>
1001ab7a:	d103      	bne.n	1001ab84 <_dtoa_r+0xac4>
1001ab7c:	9b04      	ldr	r3, [sp, #16]
1001ab7e:	07db      	lsls	r3, r3, #31
1001ab80:	f53f ae18 	bmi.w	1001a7b4 <_dtoa_r+0x6f4>
1001ab84:	465e      	mov	r6, fp
1001ab86:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
1001ab8a:	2b30      	cmp	r3, #48	@ 0x30
1001ab8c:	d0fa      	beq.n	1001ab84 <_dtoa_r+0xac4>
1001ab8e:	e620      	b.n	1001a7d2 <_dtoa_r+0x712>
1001ab90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001ab92:	2331      	movs	r3, #49	@ 0x31
1001ab94:	3501      	adds	r5, #1
1001ab96:	7013      	strb	r3, [r2, #0]
1001ab98:	e61b      	b.n	1001a7d2 <_dtoa_r+0x712>
1001ab9a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
1001ab9c:	2a00      	cmp	r2, #0
1001ab9e:	f000 80f9 	beq.w	1001ad94 <_dtoa_r+0xcd4>
1001aba2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
1001aba6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1001aba8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1001abaa:	4616      	mov	r6, r2
1001abac:	441a      	add	r2, r3
1001abae:	441c      	add	r4, r3
1001abb0:	920b      	str	r2, [sp, #44]	@ 0x2c
1001abb2:	e657      	b.n	1001a864 <_dtoa_r+0x7a4>
1001abb4:	f1c8 0301 	rsb	r3, r8, #1
1001abb8:	4604      	mov	r4, r0
1001abba:	930b      	str	r3, [sp, #44]	@ 0x2c
1001abbc:	9010      	str	r0, [sp, #64]	@ 0x40
1001abbe:	f7ff bb9b 	b.w	1001a2f8 <_dtoa_r+0x238>
1001abc2:	f000 80eb 	beq.w	1001ad9c <_dtoa_r+0xcdc>
1001abc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001abc8:	4d42      	ldr	r5, [pc, #264]	@ (1001acd4 <_dtoa_r+0xc14>)
1001abca:	425e      	negs	r6, r3
1001abcc:	f006 030f 	and.w	r3, r6, #15
1001abd0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
1001abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
1001abd8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
1001abdc:	f007 f9fa 	bl	10021fd4 <__aeabi_dmul>
1001abe0:	1135      	asrs	r5, r6, #4
1001abe2:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
1001abe6:	f000 814d 	beq.w	1001ae84 <_dtoa_r+0xdc4>
1001abea:	4e3b      	ldr	r6, [pc, #236]	@ (1001acd8 <_dtoa_r+0xc18>)
1001abec:	2300      	movs	r3, #0
1001abee:	2702      	movs	r7, #2
1001abf0:	4680      	mov	r8, r0
1001abf2:	4689      	mov	r9, r1
1001abf4:	07e8      	lsls	r0, r5, #31
1001abf6:	d509      	bpl.n	1001ac0c <_dtoa_r+0xb4c>
1001abf8:	e9d6 2300 	ldrd	r2, r3, [r6]
1001abfc:	4640      	mov	r0, r8
1001abfe:	4649      	mov	r1, r9
1001ac00:	f007 f9e8 	bl	10021fd4 <__aeabi_dmul>
1001ac04:	3701      	adds	r7, #1
1001ac06:	4680      	mov	r8, r0
1001ac08:	4689      	mov	r9, r1
1001ac0a:	2301      	movs	r3, #1
1001ac0c:	106d      	asrs	r5, r5, #1
1001ac0e:	f106 0608 	add.w	r6, r6, #8
1001ac12:	d1ef      	bne.n	1001abf4 <_dtoa_r+0xb34>
1001ac14:	2b00      	cmp	r3, #0
1001ac16:	f47f abca 	bne.w	1001a3ae <_dtoa_r+0x2ee>
1001ac1a:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	@ 0x48
1001ac1e:	f7ff bbc6 	b.w	1001a3ae <_dtoa_r+0x2ee>
1001ac22:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1001ac24:	e4ca      	b.n	1001a5bc <_dtoa_r+0x4fc>
1001ac26:	f8dd a018 	ldr.w	sl, [sp, #24]
1001ac2a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001ac2c:	4602      	mov	r2, r0
1001ac2e:	460b      	mov	r3, r1
1001ac30:	f007 f81a 	bl	10021c68 <__adddf3>
1001ac34:	4602      	mov	r2, r0
1001ac36:	460b      	mov	r3, r1
1001ac38:	e9cd 2306 	strd	r2, r3, [sp, #24]
1001ac3c:	3501      	adds	r5, #1
1001ac3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1001ac42:	46a8      	mov	r8, r5
1001ac44:	f007 fc56 	bl	100224f4 <__aeabi_dcmpgt>
1001ac48:	b940      	cbnz	r0, 1001ac5c <_dtoa_r+0xb9c>
1001ac4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1001ac4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1001ac52:	f007 fc27 	bl	100224a4 <__aeabi_dcmpeq>
1001ac56:	b118      	cbz	r0, 1001ac60 <_dtoa_r+0xba0>
1001ac58:	07f1      	lsls	r1, r6, #31
1001ac5a:	d501      	bpl.n	1001ac60 <_dtoa_r+0xba0>
1001ac5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001ac5e:	e44a      	b.n	1001a4f6 <_dtoa_r+0x436>
1001ac60:	463e      	mov	r6, r7
1001ac62:	e5c8      	b.n	1001a7f6 <_dtoa_r+0x736>
1001ac64:	6879      	ldr	r1, [r7, #4]
1001ac66:	9803      	ldr	r0, [sp, #12]
1001ac68:	f003 fd76 	bl	1001e758 <_Balloc>
1001ac6c:	4605      	mov	r5, r0
1001ac6e:	2800      	cmp	r0, #0
1001ac70:	f000 8126 	beq.w	1001aec0 <_dtoa_r+0xe00>
1001ac74:	693b      	ldr	r3, [r7, #16]
1001ac76:	3302      	adds	r3, #2
1001ac78:	009a      	lsls	r2, r3, #2
1001ac7a:	f107 010c 	add.w	r1, r7, #12
1001ac7e:	300c      	adds	r0, #12
1001ac80:	f7fe ffd6 	bl	10019c30 <memcpy>
1001ac84:	9803      	ldr	r0, [sp, #12]
1001ac86:	4629      	mov	r1, r5
1001ac88:	2201      	movs	r2, #1
1001ac8a:	f003 ffcd 	bl	1001ec28 <__lshift>
1001ac8e:	4680      	mov	r8, r0
1001ac90:	e60a      	b.n	1001a8a8 <_dtoa_r+0x7e8>
1001ac92:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001ac94:	463c      	mov	r4, r7
1001ac96:	3501      	adds	r5, #1
1001ac98:	4647      	mov	r7, r8
1001ac9a:	e57e      	b.n	1001a79a <_dtoa_r+0x6da>
1001ac9c:	f8dd 800c 	ldr.w	r8, [sp, #12]
1001aca0:	4639      	mov	r1, r7
1001aca2:	462a      	mov	r2, r5
1001aca4:	4640      	mov	r0, r8
1001aca6:	f003 ff65 	bl	1001eb74 <__pow5mult>
1001acaa:	4652      	mov	r2, sl
1001acac:	4601      	mov	r1, r0
1001acae:	4607      	mov	r7, r0
1001acb0:	4640      	mov	r0, r8
1001acb2:	f003 fea9 	bl	1001ea08 <__multiply>
1001acb6:	4651      	mov	r1, sl
1001acb8:	4682      	mov	sl, r0
1001acba:	4640      	mov	r0, r8
1001acbc:	f003 fd72 	bl	1001e7a4 <_Bfree>
1001acc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001acc2:	1b5b      	subs	r3, r3, r5
1001acc4:	930f      	str	r3, [sp, #60]	@ 0x3c
1001acc6:	f43f ad07 	beq.w	1001a6d8 <_dtoa_r+0x618>
1001acca:	e4ff      	b.n	1001a6cc <_dtoa_r+0x60c>
1001accc:	1002564c 	.word	0x1002564c
1001acd0:	7ff00000 	.word	0x7ff00000
1001acd4:	100257b0 	.word	0x100257b0
1001acd8:	10025788 	.word	0x10025788
1001acdc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
1001ace0:	f007 f978 	bl	10021fd4 <__aeabi_dmul>
1001ace4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001ace6:	701f      	strb	r7, [r3, #0]
1001ace8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
1001acea:	2b01      	cmp	r3, #1
1001acec:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
1001acf0:	f000 80c6 	beq.w	1001ae80 <_dtoa_r+0xdc0>
1001acf4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
1001acf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001acf8:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
1001acfc:	441f      	add	r7, r3
1001acfe:	4b7c      	ldr	r3, [pc, #496]	@ (1001aef0 <_dtoa_r+0xe30>)
1001ad00:	2200      	movs	r2, #0
1001ad02:	4640      	mov	r0, r8
1001ad04:	4649      	mov	r1, r9
1001ad06:	f007 f965 	bl	10021fd4 <__aeabi_dmul>
1001ad0a:	4689      	mov	r9, r1
1001ad0c:	4680      	mov	r8, r0
1001ad0e:	f007 fc11 	bl	10022534 <__aeabi_d2iz>
1001ad12:	4683      	mov	fp, r0
1001ad14:	f007 f8f4 	bl	10021f00 <__aeabi_i2d>
1001ad18:	f10b 0b30 	add.w	fp, fp, #48	@ 0x30
1001ad1c:	4602      	mov	r2, r0
1001ad1e:	460b      	mov	r3, r1
1001ad20:	4640      	mov	r0, r8
1001ad22:	4649      	mov	r1, r9
1001ad24:	f006 ff9e 	bl	10021c64 <__aeabi_dsub>
1001ad28:	f806 bb01 	strb.w	fp, [r6], #1
1001ad2c:	42b7      	cmp	r7, r6
1001ad2e:	4680      	mov	r8, r0
1001ad30:	4689      	mov	r9, r1
1001ad32:	d1e4      	bne.n	1001acfe <_dtoa_r+0xc3e>
1001ad34:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
1001ad38:	4b6e      	ldr	r3, [pc, #440]	@ (1001aef4 <_dtoa_r+0xe34>)
1001ad3a:	2200      	movs	r2, #0
1001ad3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
1001ad40:	f006 ff92 	bl	10021c68 <__adddf3>
1001ad44:	4602      	mov	r2, r0
1001ad46:	460b      	mov	r3, r1
1001ad48:	4640      	mov	r0, r8
1001ad4a:	4649      	mov	r1, r9
1001ad4c:	f007 fbd2 	bl	100224f4 <__aeabi_dcmpgt>
1001ad50:	2800      	cmp	r0, #0
1001ad52:	d167      	bne.n	1001ae24 <_dtoa_r+0xd64>
1001ad54:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
1001ad58:	4966      	ldr	r1, [pc, #408]	@ (1001aef4 <_dtoa_r+0xe34>)
1001ad5a:	2000      	movs	r0, #0
1001ad5c:	f006 ff82 	bl	10021c64 <__aeabi_dsub>
1001ad60:	4602      	mov	r2, r0
1001ad62:	460b      	mov	r3, r1
1001ad64:	4640      	mov	r0, r8
1001ad66:	4649      	mov	r1, r9
1001ad68:	f007 fba6 	bl	100224b8 <__aeabi_dcmplt>
1001ad6c:	b948      	cbnz	r0, 1001ad82 <_dtoa_r+0xcc2>
1001ad6e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1001ad70:	2b00      	cmp	r3, #0
1001ad72:	f6ff ac93 	blt.w	1001a69c <_dtoa_r+0x5dc>
1001ad76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001ad78:	2b0e      	cmp	r3, #14
1001ad7a:	f73f ac8f 	bgt.w	1001a69c <_dtoa_r+0x5dc>
1001ad7e:	f7ff bbfc 	b.w	1001a57a <_dtoa_r+0x4ba>
1001ad82:	463e      	mov	r6, r7
1001ad84:	3f01      	subs	r7, #1
1001ad86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
1001ad8a:	2b30      	cmp	r3, #48	@ 0x30
1001ad8c:	d0f9      	beq.n	1001ad82 <_dtoa_r+0xcc2>
1001ad8e:	9d19      	ldr	r5, [sp, #100]	@ 0x64
1001ad90:	3501      	adds	r5, #1
1001ad92:	e530      	b.n	1001a7f6 <_dtoa_r+0x736>
1001ad94:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
1001ad96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
1001ad9a:	e704      	b.n	1001aba6 <_dtoa_r+0xae6>
1001ad9c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
1001ada0:	2702      	movs	r7, #2
1001ada2:	f7ff bb04 	b.w	1001a3ae <_dtoa_r+0x2ee>
1001ada6:	9b06      	ldr	r3, [sp, #24]
1001ada8:	2b00      	cmp	r3, #0
1001adaa:	f43f abb8 	beq.w	1001a51e <_dtoa_r+0x45e>
1001adae:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001adb0:	2b00      	cmp	r3, #0
1001adb2:	f77f abd9 	ble.w	1001a568 <_dtoa_r+0x4a8>
1001adb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1001adb8:	9312      	str	r3, [sp, #72]	@ 0x48
1001adba:	3a01      	subs	r2, #1
1001adbc:	4b4c      	ldr	r3, [pc, #304]	@ (1001aef0 <_dtoa_r+0xe30>)
1001adbe:	9219      	str	r2, [sp, #100]	@ 0x64
1001adc0:	4640      	mov	r0, r8
1001adc2:	2200      	movs	r2, #0
1001adc4:	4649      	mov	r1, r9
1001adc6:	f007 f905 	bl	10021fd4 <__aeabi_dmul>
1001adca:	4680      	mov	r8, r0
1001adcc:	4689      	mov	r9, r1
1001adce:	1c78      	adds	r0, r7, #1
1001add0:	f007 f896 	bl	10021f00 <__aeabi_i2d>
1001add4:	4642      	mov	r2, r8
1001add6:	464b      	mov	r3, r9
1001add8:	f007 f8fc 	bl	10021fd4 <__aeabi_dmul>
1001addc:	4b46      	ldr	r3, [pc, #280]	@ (1001aef8 <_dtoa_r+0xe38>)
1001adde:	2200      	movs	r2, #0
1001ade0:	f006 ff42 	bl	10021c68 <__adddf3>
1001ade4:	4606      	mov	r6, r0
1001ade6:	f1a1 7750 	sub.w	r7, r1, #54525952	@ 0x3400000
1001adea:	f7ff bb01 	b.w	1001a3f0 <_dtoa_r+0x330>
1001adee:	f108 0801 	add.w	r8, r8, #1
1001adf2:	2331      	movs	r3, #49	@ 0x31
1001adf4:	f7ff bb86 	b.w	1001a504 <_dtoa_r+0x444>
1001adf8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001adfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001adfc:	46b3      	mov	fp, r6
1001adfe:	2339      	movs	r3, #57	@ 0x39
1001ae00:	463c      	mov	r4, r7
1001ae02:	f80b 3b01 	strb.w	r3, [fp], #1
1001ae06:	3501      	adds	r5, #1
1001ae08:	4647      	mov	r7, r8
1001ae0a:	e4d8      	b.n	1001a7be <_dtoa_r+0x6fe>
1001ae0c:	f04f 0900 	mov.w	r9, #0
1001ae10:	464f      	mov	r7, r9
1001ae12:	e5f6      	b.n	1001aa02 <_dtoa_r+0x942>
1001ae14:	469b      	mov	fp, r3
1001ae16:	e629      	b.n	1001aa6c <_dtoa_r+0x9ac>
1001ae18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001ae1a:	461e      	mov	r6, r3
1001ae1c:	4413      	add	r3, r2
1001ae1e:	4414      	add	r4, r2
1001ae20:	930b      	str	r3, [sp, #44]	@ 0x2c
1001ae22:	e51f      	b.n	1001a864 <_dtoa_r+0x7a4>
1001ae24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1001ae26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001ae28:	f103 0801 	add.w	r8, r3, #1
1001ae2c:	f7ff bb63 	b.w	1001a4f6 <_dtoa_r+0x436>
1001ae30:	f8dd a058 	ldr.w	sl, [sp, #88]	@ 0x58
1001ae34:	e7ab      	b.n	1001ad8e <_dtoa_r+0xcce>
1001ae36:	e9dd b41a 	ldrd	fp, r4, [sp, #104]	@ 0x68
1001ae3a:	f8dd a058 	ldr.w	sl, [sp, #88]	@ 0x58
1001ae3e:	f7ff bb93 	b.w	1001a568 <_dtoa_r+0x4a8>
1001ae42:	2b39      	cmp	r3, #57	@ 0x39
1001ae44:	d0d8      	beq.n	1001adf8 <_dtoa_r+0xd38>
1001ae46:	2d00      	cmp	r5, #0
1001ae48:	f73f ada7 	bgt.w	1001a99a <_dtoa_r+0x8da>
1001ae4c:	e5a7      	b.n	1001a99e <_dtoa_r+0x8de>
1001ae4e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
1001ae50:	2b02      	cmp	r3, #2
1001ae52:	dc0a      	bgt.n	1001ae6a <_dtoa_r+0xdaa>
1001ae54:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001ae56:	9306      	str	r3, [sp, #24]
1001ae58:	4649      	mov	r1, r9
1001ae5a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1001ae5c:	f7ff f898 	bl	10019f90 <quorem>
1001ae60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001ae62:	f100 0330 	add.w	r3, r0, #48	@ 0x30
1001ae66:	7013      	strb	r3, [r2, #0]
1001ae68:	e48d      	b.n	1001a786 <_dtoa_r+0x6c6>
1001ae6a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001ae6c:	9306      	str	r3, [sp, #24]
1001ae6e:	950e      	str	r5, [sp, #56]	@ 0x38
1001ae70:	e5b6      	b.n	1001a9e0 <_dtoa_r+0x920>
1001ae72:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
1001ae74:	2b02      	cmp	r3, #2
1001ae76:	dcf8      	bgt.n	1001ae6a <_dtoa_r+0xdaa>
1001ae78:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001ae7a:	950e      	str	r5, [sp, #56]	@ 0x38
1001ae7c:	9306      	str	r3, [sp, #24]
1001ae7e:	e50b      	b.n	1001a898 <_dtoa_r+0x7d8>
1001ae80:	4637      	mov	r7, r6
1001ae82:	e759      	b.n	1001ad38 <_dtoa_r+0xc78>
1001ae84:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	@ 0x48
1001ae88:	2702      	movs	r7, #2
1001ae8a:	f7ff ba90 	b.w	1001a3ae <_dtoa_r+0x2ee>
1001ae8e:	9b03      	ldr	r3, [sp, #12]
1001ae90:	2100      	movs	r1, #0
1001ae92:	63d9      	str	r1, [r3, #60]	@ 0x3c
1001ae94:	f7ff ba45 	b.w	1001a322 <_dtoa_r+0x262>
1001ae98:	9b03      	ldr	r3, [sp, #12]
1001ae9a:	2500      	movs	r5, #0
1001ae9c:	63dd      	str	r5, [r3, #60]	@ 0x3c
1001ae9e:	4629      	mov	r1, r5
1001aea0:	4618      	mov	r0, r3
1001aea2:	f003 fc59 	bl	1001e758 <_Balloc>
1001aea6:	900a      	str	r0, [sp, #40]	@ 0x28
1001aea8:	b9a8      	cbnz	r0, 1001aed6 <_dtoa_r+0xe16>
1001aeaa:	4b14      	ldr	r3, [pc, #80]	@ (1001aefc <_dtoa_r+0xe3c>)
1001aeac:	4814      	ldr	r0, [pc, #80]	@ (1001af00 <_dtoa_r+0xe40>)
1001aeae:	2200      	movs	r2, #0
1001aeb0:	f240 11af 	movw	r1, #431	@ 0x1af
1001aeb4:	f005 ff8e 	bl	10020dd4 <__assert_func>
1001aeb8:	2a00      	cmp	r2, #0
1001aeba:	f77f ad70 	ble.w	1001a99e <_dtoa_r+0x8de>
1001aebe:	e55b      	b.n	1001a978 <_dtoa_r+0x8b8>
1001aec0:	4b0e      	ldr	r3, [pc, #56]	@ (1001aefc <_dtoa_r+0xe3c>)
1001aec2:	480f      	ldr	r0, [pc, #60]	@ (1001af00 <_dtoa_r+0xe40>)
1001aec4:	462a      	mov	r2, r5
1001aec6:	f240 21ef 	movw	r1, #751	@ 0x2ef
1001aeca:	f005 ff83 	bl	10020dd4 <__assert_func>
1001aece:	4b0d      	ldr	r3, [pc, #52]	@ (1001af04 <_dtoa_r+0xe44>)
1001aed0:	930a      	str	r3, [sp, #40]	@ 0x28
1001aed2:	f7ff b930 	b.w	1001a136 <_dtoa_r+0x76>
1001aed6:	9b03      	ldr	r3, [sp, #12]
1001aed8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001aeda:	639a      	str	r2, [r3, #56]	@ 0x38
1001aedc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1001aee0:	2201      	movs	r2, #1
1001aee2:	9529      	str	r5, [sp, #164]	@ 0xa4
1001aee4:	9318      	str	r3, [sp, #96]	@ 0x60
1001aee6:	920c      	str	r2, [sp, #48]	@ 0x30
1001aee8:	9306      	str	r3, [sp, #24]
1001aeea:	f7ff bb3d 	b.w	1001a568 <_dtoa_r+0x4a8>
1001aeee:	bf00      	nop
1001aef0:	40240000 	.word	0x40240000
1001aef4:	3fe00000 	.word	0x3fe00000
1001aef8:	401c0000 	.word	0x401c0000
1001aefc:	10025650 	.word	0x10025650
1001af00:	10025664 	.word	0x10025664
1001af04:	10025640 	.word	0x10025640

1001af08 <_malloc_trim_r>:
1001af08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1001af0c:	4606      	mov	r6, r0
1001af0e:	2008      	movs	r0, #8
1001af10:	4689      	mov	r9, r1
1001af12:	f7fe fc7b 	bl	1001980c <sysconf>
1001af16:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 1001afb4 <_malloc_trim_r+0xac>
1001af1a:	4605      	mov	r5, r0
1001af1c:	4630      	mov	r0, r6
1001af1e:	f7fc ffd1 	bl	10017ec4 <__malloc_lock>
1001af22:	f8d8 3008 	ldr.w	r3, [r8, #8]
1001af26:	685f      	ldr	r7, [r3, #4]
1001af28:	f027 0703 	bic.w	r7, r7, #3
1001af2c:	f1a7 0411 	sub.w	r4, r7, #17
1001af30:	eba4 0409 	sub.w	r4, r4, r9
1001af34:	442c      	add	r4, r5
1001af36:	fbb4 f4f5 	udiv	r4, r4, r5
1001af3a:	3c01      	subs	r4, #1
1001af3c:	fb05 f404 	mul.w	r4, r5, r4
1001af40:	42a5      	cmp	r5, r4
1001af42:	dc08      	bgt.n	1001af56 <_malloc_trim_r+0x4e>
1001af44:	2100      	movs	r1, #0
1001af46:	4630      	mov	r0, r6
1001af48:	f7fe fc32 	bl	100197b0 <_sbrk_r>
1001af4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
1001af50:	443b      	add	r3, r7
1001af52:	4298      	cmp	r0, r3
1001af54:	d005      	beq.n	1001af62 <_malloc_trim_r+0x5a>
1001af56:	4630      	mov	r0, r6
1001af58:	f7fc ffba 	bl	10017ed0 <__malloc_unlock>
1001af5c:	2000      	movs	r0, #0
1001af5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1001af62:	4261      	negs	r1, r4
1001af64:	4630      	mov	r0, r6
1001af66:	f7fe fc23 	bl	100197b0 <_sbrk_r>
1001af6a:	3001      	adds	r0, #1
1001af6c:	d00f      	beq.n	1001af8e <_malloc_trim_r+0x86>
1001af6e:	4a12      	ldr	r2, [pc, #72]	@ (1001afb8 <_malloc_trim_r+0xb0>)
1001af70:	f8d8 3008 	ldr.w	r3, [r8, #8]
1001af74:	1b3f      	subs	r7, r7, r4
1001af76:	f047 0701 	orr.w	r7, r7, #1
1001af7a:	605f      	str	r7, [r3, #4]
1001af7c:	6813      	ldr	r3, [r2, #0]
1001af7e:	4630      	mov	r0, r6
1001af80:	1b1b      	subs	r3, r3, r4
1001af82:	6013      	str	r3, [r2, #0]
1001af84:	f7fc ffa4 	bl	10017ed0 <__malloc_unlock>
1001af88:	2001      	movs	r0, #1
1001af8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1001af8e:	2100      	movs	r1, #0
1001af90:	4630      	mov	r0, r6
1001af92:	f7fe fc0d 	bl	100197b0 <_sbrk_r>
1001af96:	f8d8 2008 	ldr.w	r2, [r8, #8]
1001af9a:	1a83      	subs	r3, r0, r2
1001af9c:	2b0f      	cmp	r3, #15
1001af9e:	ddda      	ble.n	1001af56 <_malloc_trim_r+0x4e>
1001afa0:	f043 0301 	orr.w	r3, r3, #1
1001afa4:	6053      	str	r3, [r2, #4]
1001afa6:	4b05      	ldr	r3, [pc, #20]	@ (1001afbc <_malloc_trim_r+0xb4>)
1001afa8:	4903      	ldr	r1, [pc, #12]	@ (1001afb8 <_malloc_trim_r+0xb0>)
1001afaa:	681b      	ldr	r3, [r3, #0]
1001afac:	1ac0      	subs	r0, r0, r3
1001afae:	6008      	str	r0, [r1, #0]
1001afb0:	e7d1      	b.n	1001af56 <_malloc_trim_r+0x4e>
1001afb2:	bf00      	nop
1001afb4:	20000018 	.word	0x20000018
1001afb8:	20001454 	.word	0x20001454
1001afbc:	20000010 	.word	0x20000010

1001afc0 <_free_r>:
1001afc0:	2900      	cmp	r1, #0
1001afc2:	d07c      	beq.n	1001b0be <_free_r+0xfe>
1001afc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001afc6:	460c      	mov	r4, r1
1001afc8:	4606      	mov	r6, r0
1001afca:	f7fc ff7b 	bl	10017ec4 <__malloc_lock>
1001afce:	f854 3c04 	ldr.w	r3, [r4, #-4]
1001afd2:	4f77      	ldr	r7, [pc, #476]	@ (1001b1b0 <_free_r+0x1f0>)
1001afd4:	f1a4 0508 	sub.w	r5, r4, #8
1001afd8:	f023 0101 	bic.w	r1, r3, #1
1001afdc:	1868      	adds	r0, r5, r1
1001afde:	f8d7 c008 	ldr.w	ip, [r7, #8]
1001afe2:	6842      	ldr	r2, [r0, #4]
1001afe4:	4584      	cmp	ip, r0
1001afe6:	f022 0203 	bic.w	r2, r2, #3
1001afea:	f000 8083 	beq.w	1001b0f4 <_free_r+0x134>
1001afee:	07db      	lsls	r3, r3, #31
1001aff0:	6042      	str	r2, [r0, #4]
1001aff2:	eb00 0c02 	add.w	ip, r0, r2
1001aff6:	d433      	bmi.n	1001b060 <_free_r+0xa0>
1001aff8:	f854 4c08 	ldr.w	r4, [r4, #-8]
1001affc:	f8dc 3004 	ldr.w	r3, [ip, #4]
1001b000:	1b2d      	subs	r5, r5, r4
1001b002:	4421      	add	r1, r4
1001b004:	68ac      	ldr	r4, [r5, #8]
1001b006:	f107 0c08 	add.w	ip, r7, #8
1001b00a:	4564      	cmp	r4, ip
1001b00c:	f003 0301 	and.w	r3, r3, #1
1001b010:	d064      	beq.n	1001b0dc <_free_r+0x11c>
1001b012:	f8d5 e00c 	ldr.w	lr, [r5, #12]
1001b016:	f8c4 e00c 	str.w	lr, [r4, #12]
1001b01a:	f8ce 4008 	str.w	r4, [lr, #8]
1001b01e:	2b00      	cmp	r3, #0
1001b020:	f000 8081 	beq.w	1001b126 <_free_r+0x166>
1001b024:	f041 0301 	orr.w	r3, r1, #1
1001b028:	606b      	str	r3, [r5, #4]
1001b02a:	6001      	str	r1, [r0, #0]
1001b02c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
1001b030:	d222      	bcs.n	1001b078 <_free_r+0xb8>
1001b032:	6878      	ldr	r0, [r7, #4]
1001b034:	08cb      	lsrs	r3, r1, #3
1001b036:	2201      	movs	r2, #1
1001b038:	0949      	lsrs	r1, r1, #5
1001b03a:	3301      	adds	r3, #1
1001b03c:	408a      	lsls	r2, r1
1001b03e:	4302      	orrs	r2, r0
1001b040:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
1001b044:	607a      	str	r2, [r7, #4]
1001b046:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
1001b04a:	3a08      	subs	r2, #8
1001b04c:	e9c5 1202 	strd	r1, r2, [r5, #8]
1001b050:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
1001b054:	60cd      	str	r5, [r1, #12]
1001b056:	4630      	mov	r0, r6
1001b058:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1001b05c:	f7fc bf38 	b.w	10017ed0 <__malloc_unlock>
1001b060:	f8dc 3004 	ldr.w	r3, [ip, #4]
1001b064:	07db      	lsls	r3, r3, #31
1001b066:	d52b      	bpl.n	1001b0c0 <_free_r+0x100>
1001b068:	f041 0301 	orr.w	r3, r1, #1
1001b06c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
1001b070:	f844 3c04 	str.w	r3, [r4, #-4]
1001b074:	6001      	str	r1, [r0, #0]
1001b076:	d3dc      	bcc.n	1001b032 <_free_r+0x72>
1001b078:	f5b1 6f20 	cmp.w	r1, #2560	@ 0xa00
1001b07c:	ea4f 2351 	mov.w	r3, r1, lsr #9
1001b080:	d253      	bcs.n	1001b12a <_free_r+0x16a>
1001b082:	098b      	lsrs	r3, r1, #6
1001b084:	f103 0039 	add.w	r0, r3, #57	@ 0x39
1001b088:	f103 0238 	add.w	r2, r3, #56	@ 0x38
1001b08c:	00c3      	lsls	r3, r0, #3
1001b08e:	18f8      	adds	r0, r7, r3
1001b090:	58fb      	ldr	r3, [r7, r3]
1001b092:	3808      	subs	r0, #8
1001b094:	4298      	cmp	r0, r3
1001b096:	d103      	bne.n	1001b0a0 <_free_r+0xe0>
1001b098:	e063      	b.n	1001b162 <_free_r+0x1a2>
1001b09a:	689b      	ldr	r3, [r3, #8]
1001b09c:	4298      	cmp	r0, r3
1001b09e:	d004      	beq.n	1001b0aa <_free_r+0xea>
1001b0a0:	685a      	ldr	r2, [r3, #4]
1001b0a2:	f022 0203 	bic.w	r2, r2, #3
1001b0a6:	428a      	cmp	r2, r1
1001b0a8:	d8f7      	bhi.n	1001b09a <_free_r+0xda>
1001b0aa:	68d8      	ldr	r0, [r3, #12]
1001b0ac:	e9c5 3002 	strd	r3, r0, [r5, #8]
1001b0b0:	6085      	str	r5, [r0, #8]
1001b0b2:	60dd      	str	r5, [r3, #12]
1001b0b4:	4630      	mov	r0, r6
1001b0b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1001b0ba:	f7fc bf09 	b.w	10017ed0 <__malloc_unlock>
1001b0be:	4770      	bx	lr
1001b0c0:	4411      	add	r1, r2
1001b0c2:	f107 0c08 	add.w	ip, r7, #8
1001b0c6:	6883      	ldr	r3, [r0, #8]
1001b0c8:	4563      	cmp	r3, ip
1001b0ca:	d03f      	beq.n	1001b14c <_free_r+0x18c>
1001b0cc:	68c2      	ldr	r2, [r0, #12]
1001b0ce:	60da      	str	r2, [r3, #12]
1001b0d0:	6093      	str	r3, [r2, #8]
1001b0d2:	f041 0301 	orr.w	r3, r1, #1
1001b0d6:	606b      	str	r3, [r5, #4]
1001b0d8:	5069      	str	r1, [r5, r1]
1001b0da:	e7a7      	b.n	1001b02c <_free_r+0x6c>
1001b0dc:	2b00      	cmp	r3, #0
1001b0de:	d161      	bne.n	1001b1a4 <_free_r+0x1e4>
1001b0e0:	440a      	add	r2, r1
1001b0e2:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
1001b0e6:	60cb      	str	r3, [r1, #12]
1001b0e8:	6099      	str	r1, [r3, #8]
1001b0ea:	f042 0301 	orr.w	r3, r2, #1
1001b0ee:	606b      	str	r3, [r5, #4]
1001b0f0:	50aa      	str	r2, [r5, r2]
1001b0f2:	e7b0      	b.n	1001b056 <_free_r+0x96>
1001b0f4:	440a      	add	r2, r1
1001b0f6:	07d9      	lsls	r1, r3, #31
1001b0f8:	d407      	bmi.n	1001b10a <_free_r+0x14a>
1001b0fa:	f854 3c08 	ldr.w	r3, [r4, #-8]
1001b0fe:	1aed      	subs	r5, r5, r3
1001b100:	441a      	add	r2, r3
1001b102:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
1001b106:	60cb      	str	r3, [r1, #12]
1001b108:	6099      	str	r1, [r3, #8]
1001b10a:	f042 0301 	orr.w	r3, r2, #1
1001b10e:	606b      	str	r3, [r5, #4]
1001b110:	4b28      	ldr	r3, [pc, #160]	@ (1001b1b4 <_free_r+0x1f4>)
1001b112:	60bd      	str	r5, [r7, #8]
1001b114:	681b      	ldr	r3, [r3, #0]
1001b116:	4293      	cmp	r3, r2
1001b118:	d89d      	bhi.n	1001b056 <_free_r+0x96>
1001b11a:	4b27      	ldr	r3, [pc, #156]	@ (1001b1b8 <_free_r+0x1f8>)
1001b11c:	4630      	mov	r0, r6
1001b11e:	6819      	ldr	r1, [r3, #0]
1001b120:	f7ff fef2 	bl	1001af08 <_malloc_trim_r>
1001b124:	e797      	b.n	1001b056 <_free_r+0x96>
1001b126:	4411      	add	r1, r2
1001b128:	e7cd      	b.n	1001b0c6 <_free_r+0x106>
1001b12a:	2b14      	cmp	r3, #20
1001b12c:	d908      	bls.n	1001b140 <_free_r+0x180>
1001b12e:	2b54      	cmp	r3, #84	@ 0x54
1001b130:	d81f      	bhi.n	1001b172 <_free_r+0x1b2>
1001b132:	0b0b      	lsrs	r3, r1, #12
1001b134:	f103 006f 	add.w	r0, r3, #111	@ 0x6f
1001b138:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
1001b13c:	00c3      	lsls	r3, r0, #3
1001b13e:	e7a6      	b.n	1001b08e <_free_r+0xce>
1001b140:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
1001b144:	f103 025b 	add.w	r2, r3, #91	@ 0x5b
1001b148:	00c3      	lsls	r3, r0, #3
1001b14a:	e7a0      	b.n	1001b08e <_free_r+0xce>
1001b14c:	f041 0301 	orr.w	r3, r1, #1
1001b150:	613d      	str	r5, [r7, #16]
1001b152:	617d      	str	r5, [r7, #20]
1001b154:	f8c5 c008 	str.w	ip, [r5, #8]
1001b158:	f8c5 c00c 	str.w	ip, [r5, #12]
1001b15c:	606b      	str	r3, [r5, #4]
1001b15e:	5069      	str	r1, [r5, r1]
1001b160:	e779      	b.n	1001b056 <_free_r+0x96>
1001b162:	6879      	ldr	r1, [r7, #4]
1001b164:	1092      	asrs	r2, r2, #2
1001b166:	2401      	movs	r4, #1
1001b168:	fa04 f202 	lsl.w	r2, r4, r2
1001b16c:	430a      	orrs	r2, r1
1001b16e:	607a      	str	r2, [r7, #4]
1001b170:	e79c      	b.n	1001b0ac <_free_r+0xec>
1001b172:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
1001b176:	d806      	bhi.n	1001b186 <_free_r+0x1c6>
1001b178:	0bcb      	lsrs	r3, r1, #15
1001b17a:	f103 0078 	add.w	r0, r3, #120	@ 0x78
1001b17e:	f103 0277 	add.w	r2, r3, #119	@ 0x77
1001b182:	00c3      	lsls	r3, r0, #3
1001b184:	e783      	b.n	1001b08e <_free_r+0xce>
1001b186:	f240 5254 	movw	r2, #1364	@ 0x554
1001b18a:	4293      	cmp	r3, r2
1001b18c:	d806      	bhi.n	1001b19c <_free_r+0x1dc>
1001b18e:	0c8b      	lsrs	r3, r1, #18
1001b190:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
1001b194:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
1001b198:	00c3      	lsls	r3, r0, #3
1001b19a:	e778      	b.n	1001b08e <_free_r+0xce>
1001b19c:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
1001b1a0:	227e      	movs	r2, #126	@ 0x7e
1001b1a2:	e774      	b.n	1001b08e <_free_r+0xce>
1001b1a4:	f041 0301 	orr.w	r3, r1, #1
1001b1a8:	606b      	str	r3, [r5, #4]
1001b1aa:	6001      	str	r1, [r0, #0]
1001b1ac:	e753      	b.n	1001b056 <_free_r+0x96>
1001b1ae:	bf00      	nop
1001b1b0:	20000018 	.word	0x20000018
1001b1b4:	20000014 	.word	0x20000014
1001b1b8:	20001484 	.word	0x20001484

1001b1bc <__ascii_mbtowc>:
1001b1bc:	b082      	sub	sp, #8
1001b1be:	b149      	cbz	r1, 1001b1d4 <__ascii_mbtowc+0x18>
1001b1c0:	b15a      	cbz	r2, 1001b1da <__ascii_mbtowc+0x1e>
1001b1c2:	b16b      	cbz	r3, 1001b1e0 <__ascii_mbtowc+0x24>
1001b1c4:	7813      	ldrb	r3, [r2, #0]
1001b1c6:	600b      	str	r3, [r1, #0]
1001b1c8:	7812      	ldrb	r2, [r2, #0]
1001b1ca:	1e10      	subs	r0, r2, #0
1001b1cc:	bf18      	it	ne
1001b1ce:	2001      	movne	r0, #1
1001b1d0:	b002      	add	sp, #8
1001b1d2:	4770      	bx	lr
1001b1d4:	a901      	add	r1, sp, #4
1001b1d6:	2a00      	cmp	r2, #0
1001b1d8:	d1f3      	bne.n	1001b1c2 <__ascii_mbtowc+0x6>
1001b1da:	4610      	mov	r0, r2
1001b1dc:	b002      	add	sp, #8
1001b1de:	4770      	bx	lr
1001b1e0:	f06f 0001 	mvn.w	r0, #1
1001b1e4:	e7f4      	b.n	1001b1d0 <__ascii_mbtowc+0x14>
1001b1e6:	bf00      	nop

1001b1e8 <_svfprintf_r>:
1001b1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001b1ec:	b0df      	sub	sp, #380	@ 0x17c
1001b1ee:	460c      	mov	r4, r1
1001b1f0:	9109      	str	r1, [sp, #36]	@ 0x24
1001b1f2:	4691      	mov	r9, r2
1001b1f4:	930d      	str	r3, [sp, #52]	@ 0x34
1001b1f6:	4683      	mov	fp, r0
1001b1f8:	f7fe fa6c 	bl	100196d4 <_localeconv_r>
1001b1fc:	6803      	ldr	r3, [r0, #0]
1001b1fe:	931a      	str	r3, [sp, #104]	@ 0x68
1001b200:	4618      	mov	r0, r3
1001b202:	f7fe fdbd 	bl	10019d80 <strlen>
1001b206:	2100      	movs	r1, #0
1001b208:	9018      	str	r0, [sp, #96]	@ 0x60
1001b20a:	2208      	movs	r2, #8
1001b20c:	a82e      	add	r0, sp, #184	@ 0xb8
1001b20e:	f7fe f9d5 	bl	100195bc <memset>
1001b212:	89a3      	ldrh	r3, [r4, #12]
1001b214:	0619      	lsls	r1, r3, #24
1001b216:	d503      	bpl.n	1001b220 <_svfprintf_r+0x38>
1001b218:	6923      	ldr	r3, [r4, #16]
1001b21a:	2b00      	cmp	r3, #0
1001b21c:	f000 8788 	beq.w	1001c130 <_svfprintf_r+0xf48>
1001b220:	2300      	movs	r3, #0
1001b222:	e9cd 3333 	strd	r3, r3, [sp, #204]	@ 0xcc
1001b226:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
1001b22a:	e9cd 331d 	strd	r3, r3, [sp, #116]	@ 0x74
1001b22e:	9313      	str	r3, [sp, #76]	@ 0x4c
1001b230:	9319      	str	r3, [sp, #100]	@ 0x64
1001b232:	930a      	str	r3, [sp, #40]	@ 0x28
1001b234:	2400      	movs	r4, #0
1001b236:	2300      	movs	r3, #0
1001b238:	e9cd 3416 	strd	r3, r4, [sp, #88]	@ 0x58
1001b23c:	aa35      	add	r2, sp, #212	@ 0xd4
1001b23e:	9232      	str	r2, [sp, #200]	@ 0xc8
1001b240:	4690      	mov	r8, r2
1001b242:	f8cd b01c 	str.w	fp, [sp, #28]
1001b246:	464d      	mov	r5, r9
1001b248:	9f07      	ldr	r7, [sp, #28]
1001b24a:	462e      	mov	r6, r5
1001b24c:	4b73      	ldr	r3, [pc, #460]	@ (1001b41c <_svfprintf_r+0x234>)
1001b24e:	f8d3 40e4 	ldr.w	r4, [r3, #228]	@ 0xe4
1001b252:	f7fe fa39 	bl	100196c8 <__locale_mb_cur_max>
1001b256:	4603      	mov	r3, r0
1001b258:	a82e      	add	r0, sp, #184	@ 0xb8
1001b25a:	9000      	str	r0, [sp, #0]
1001b25c:	4632      	mov	r2, r6
1001b25e:	a92a      	add	r1, sp, #168	@ 0xa8
1001b260:	4638      	mov	r0, r7
1001b262:	47a0      	blx	r4
1001b264:	2800      	cmp	r0, #0
1001b266:	f000 80a9 	beq.w	1001b3bc <_svfprintf_r+0x1d4>
1001b26a:	f2c0 809f 	blt.w	1001b3ac <_svfprintf_r+0x1c4>
1001b26e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
1001b270:	2a25      	cmp	r2, #37	@ 0x25
1001b272:	4603      	mov	r3, r0
1001b274:	d001      	beq.n	1001b27a <_svfprintf_r+0x92>
1001b276:	441e      	add	r6, r3
1001b278:	e7e8      	b.n	1001b24c <_svfprintf_r+0x64>
1001b27a:	1b77      	subs	r7, r6, r5
1001b27c:	4604      	mov	r4, r0
1001b27e:	f040 80a0 	bne.w	1001b3c2 <_svfprintf_r+0x1da>
1001b282:	2300      	movs	r3, #0
1001b284:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
1001b288:	4699      	mov	r9, r3
1001b28a:	930b      	str	r3, [sp, #44]	@ 0x2c
1001b28c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1001b290:	7873      	ldrb	r3, [r6, #1]
1001b292:	9208      	str	r2, [sp, #32]
1001b294:	1c74      	adds	r4, r6, #1
1001b296:	3401      	adds	r4, #1
1001b298:	f1a3 0220 	sub.w	r2, r3, #32
1001b29c:	2a5a      	cmp	r2, #90	@ 0x5a
1001b29e:	f200 80bf 	bhi.w	1001b420 <_svfprintf_r+0x238>
1001b2a2:	e8df f012 	tbh	[pc, r2, lsl #1]
1001b2a6:	02e6      	.short	0x02e6
1001b2a8:	00bd00bd 	.word	0x00bd00bd
1001b2ac:	00bd02e2 	.word	0x00bd02e2
1001b2b0:	00bd00bd 	.word	0x00bd00bd
1001b2b4:	00bd006a 	.word	0x00bd006a
1001b2b8:	024800bd 	.word	0x024800bd
1001b2bc:	00bd0257 	.word	0x00bd0257
1001b2c0:	02f40253 	.word	0x02f40253
1001b2c4:	02f000bd 	.word	0x02f000bd
1001b2c8:	005b005b 	.word	0x005b005b
1001b2cc:	005b005b 	.word	0x005b005b
1001b2d0:	005b005b 	.word	0x005b005b
1001b2d4:	005b005b 	.word	0x005b005b
1001b2d8:	00bd005b 	.word	0x00bd005b
1001b2dc:	00bd00bd 	.word	0x00bd00bd
1001b2e0:	00bd00bd 	.word	0x00bd00bd
1001b2e4:	00bd00bd 	.word	0x00bd00bd
1001b2e8:	00bd013e 	.word	0x00bd013e
1001b2ec:	030e01c7 	.word	0x030e01c7
1001b2f0:	013e013e 	.word	0x013e013e
1001b2f4:	00bd013e 	.word	0x00bd013e
1001b2f8:	00bd00bd 	.word	0x00bd00bd
1001b2fc:	02de00bd 	.word	0x02de00bd
1001b300:	00bd00bd 	.word	0x00bd00bd
1001b304:	00bd025c 	.word	0x00bd025c
1001b308:	00bd00bd 	.word	0x00bd00bd
1001b30c:	00bd01f1 	.word	0x00bd01f1
1001b310:	00bd02cb 	.word	0x00bd02cb
1001b314:	070600bd 	.word	0x070600bd
1001b318:	00bd00bd 	.word	0x00bd00bd
1001b31c:	00bd00bd 	.word	0x00bd00bd
1001b320:	00bd00bd 	.word	0x00bd00bd
1001b324:	00bd00bd 	.word	0x00bd00bd
1001b328:	00bd013e 	.word	0x00bd013e
1001b32c:	022301c7 	.word	0x022301c7
1001b330:	013e013e 	.word	0x013e013e
1001b334:	028d013e 	.word	0x028d013e
1001b338:	007f0223 	.word	0x007f0223
1001b33c:	02a600bd 	.word	0x02a600bd
1001b340:	029700bd 	.word	0x029700bd
1001b344:	02b906fb 	.word	0x02b906fb
1001b348:	00bd007f 	.word	0x00bd007f
1001b34c:	007d01f1 	.word	0x007d01f1
1001b350:	00bd0701 	.word	0x00bd0701
1001b354:	072a00bd 	.word	0x072a00bd
1001b358:	007d00bd 	.word	0x007d00bd
1001b35c:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
1001b360:	2100      	movs	r1, #0
1001b362:	f814 3b01 	ldrb.w	r3, [r4], #1
1001b366:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1001b36a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
1001b36e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
1001b372:	2a09      	cmp	r2, #9
1001b374:	d9f5      	bls.n	1001b362 <_svfprintf_r+0x17a>
1001b376:	910b      	str	r1, [sp, #44]	@ 0x2c
1001b378:	e78e      	b.n	1001b298 <_svfprintf_r+0xb0>
1001b37a:	9f07      	ldr	r7, [sp, #28]
1001b37c:	4638      	mov	r0, r7
1001b37e:	f7fe f9a9 	bl	100196d4 <_localeconv_r>
1001b382:	6843      	ldr	r3, [r0, #4]
1001b384:	931d      	str	r3, [sp, #116]	@ 0x74
1001b386:	4618      	mov	r0, r3
1001b388:	f7fe fcfa 	bl	10019d80 <strlen>
1001b38c:	901e      	str	r0, [sp, #120]	@ 0x78
1001b38e:	4606      	mov	r6, r0
1001b390:	4638      	mov	r0, r7
1001b392:	f7fe f99f 	bl	100196d4 <_localeconv_r>
1001b396:	6883      	ldr	r3, [r0, #8]
1001b398:	931b      	str	r3, [sp, #108]	@ 0x6c
1001b39a:	2e00      	cmp	r6, #0
1001b39c:	f040 8616 	bne.w	1001bfcc <_svfprintf_r+0xde4>
1001b3a0:	7823      	ldrb	r3, [r4, #0]
1001b3a2:	e778      	b.n	1001b296 <_svfprintf_r+0xae>
1001b3a4:	7823      	ldrb	r3, [r4, #0]
1001b3a6:	f049 0920 	orr.w	r9, r9, #32
1001b3aa:	e774      	b.n	1001b296 <_svfprintf_r+0xae>
1001b3ac:	2208      	movs	r2, #8
1001b3ae:	2100      	movs	r1, #0
1001b3b0:	a82e      	add	r0, sp, #184	@ 0xb8
1001b3b2:	f7fe f903 	bl	100195bc <memset>
1001b3b6:	2301      	movs	r3, #1
1001b3b8:	441e      	add	r6, r3
1001b3ba:	e747      	b.n	1001b24c <_svfprintf_r+0x64>
1001b3bc:	1b77      	subs	r7, r6, r5
1001b3be:	4604      	mov	r4, r0
1001b3c0:	d011      	beq.n	1001b3e6 <_svfprintf_r+0x1fe>
1001b3c2:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
1001b3c4:	443b      	add	r3, r7
1001b3c6:	9334      	str	r3, [sp, #208]	@ 0xd0
1001b3c8:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001b3ca:	3301      	adds	r3, #1
1001b3cc:	2b07      	cmp	r3, #7
1001b3ce:	e9c8 5700 	strd	r5, r7, [r8]
1001b3d2:	9333      	str	r3, [sp, #204]	@ 0xcc
1001b3d4:	dc18      	bgt.n	1001b408 <_svfprintf_r+0x220>
1001b3d6:	f108 0808 	add.w	r8, r8, #8
1001b3da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001b3dc:	443b      	add	r3, r7
1001b3de:	930a      	str	r3, [sp, #40]	@ 0x28
1001b3e0:	2c00      	cmp	r4, #0
1001b3e2:	f47f af4e 	bne.w	1001b282 <_svfprintf_r+0x9a>
1001b3e6:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
1001b3e8:	f8dd b01c 	ldr.w	fp, [sp, #28]
1001b3ec:	2b00      	cmp	r3, #0
1001b3ee:	f041 81ed 	bne.w	1001c7cc <_svfprintf_r+0x15e4>
1001b3f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001b3f4:	899b      	ldrh	r3, [r3, #12]
1001b3f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
1001b3fa:	2b00      	cmp	r3, #0
1001b3fc:	f041 83bd 	bne.w	1001cb7a <_svfprintf_r+0x1992>
1001b400:	980a      	ldr	r0, [sp, #40]	@ 0x28
1001b402:	b05f      	add	sp, #380	@ 0x17c
1001b404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001b408:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001b40a:	9807      	ldr	r0, [sp, #28]
1001b40c:	aa32      	add	r2, sp, #200	@ 0xc8
1001b40e:	f006 fa4f 	bl	100218b0 <__ssprint_r>
1001b412:	2800      	cmp	r0, #0
1001b414:	d1ed      	bne.n	1001b3f2 <_svfprintf_r+0x20a>
1001b416:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001b41a:	e7de      	b.n	1001b3da <_svfprintf_r+0x1f2>
1001b41c:	2000042c 	.word	0x2000042c
1001b420:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001b424:	2b00      	cmp	r3, #0
1001b426:	d0de      	beq.n	1001b3e6 <_svfprintf_r+0x1fe>
1001b428:	2200      	movs	r2, #0
1001b42a:	f88d 3114 	strb.w	r3, [sp, #276]	@ 0x114
1001b42e:	2301      	movs	r3, #1
1001b430:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
1001b434:	9306      	str	r3, [sp, #24]
1001b436:	920c      	str	r2, [sp, #48]	@ 0x30
1001b438:	469b      	mov	fp, r3
1001b43a:	9208      	str	r2, [sp, #32]
1001b43c:	9214      	str	r2, [sp, #80]	@ 0x50
1001b43e:	9210      	str	r2, [sp, #64]	@ 0x40
1001b440:	9212      	str	r2, [sp, #72]	@ 0x48
1001b442:	ad45      	add	r5, sp, #276	@ 0x114
1001b444:	f019 0302 	ands.w	r3, r9, #2
1001b448:	d002      	beq.n	1001b450 <_svfprintf_r+0x268>
1001b44a:	9906      	ldr	r1, [sp, #24]
1001b44c:	3102      	adds	r1, #2
1001b44e:	9106      	str	r1, [sp, #24]
1001b450:	f019 0784 	ands.w	r7, r9, #132	@ 0x84
1001b454:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001b456:	d105      	bne.n	1001b464 <_svfprintf_r+0x27c>
1001b458:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1001b45a:	9806      	ldr	r0, [sp, #24]
1001b45c:	1a0e      	subs	r6, r1, r0
1001b45e:	2e00      	cmp	r6, #0
1001b460:	f300 80a7 	bgt.w	1001b5b2 <_svfprintf_r+0x3ca>
1001b464:	b182      	cbz	r2, 1001b488 <_svfprintf_r+0x2a0>
1001b466:	2201      	movs	r2, #1
1001b468:	f8c8 2004 	str.w	r2, [r8, #4]
1001b46c:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
1001b46e:	3201      	adds	r2, #1
1001b470:	3401      	adds	r4, #1
1001b472:	f10d 019f 	add.w	r1, sp, #159	@ 0x9f
1001b476:	2a07      	cmp	r2, #7
1001b478:	9434      	str	r4, [sp, #208]	@ 0xd0
1001b47a:	9233      	str	r2, [sp, #204]	@ 0xcc
1001b47c:	f8c8 1000 	str.w	r1, [r8]
1001b480:	f300 8403 	bgt.w	1001bc8a <_svfprintf_r+0xaa2>
1001b484:	f108 0808 	add.w	r8, r8, #8
1001b488:	b183      	cbz	r3, 1001b4ac <_svfprintf_r+0x2c4>
1001b48a:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001b48c:	aa28      	add	r2, sp, #160	@ 0xa0
1001b48e:	3301      	adds	r3, #1
1001b490:	3402      	adds	r4, #2
1001b492:	f8c8 2000 	str.w	r2, [r8]
1001b496:	2b07      	cmp	r3, #7
1001b498:	f04f 0202 	mov.w	r2, #2
1001b49c:	9434      	str	r4, [sp, #208]	@ 0xd0
1001b49e:	9333      	str	r3, [sp, #204]	@ 0xcc
1001b4a0:	f8c8 2004 	str.w	r2, [r8, #4]
1001b4a4:	f300 83e5 	bgt.w	1001bc72 <_svfprintf_r+0xa8a>
1001b4a8:	f108 0808 	add.w	r8, r8, #8
1001b4ac:	2f80      	cmp	r7, #128	@ 0x80
1001b4ae:	f000 82be 	beq.w	1001ba2e <_svfprintf_r+0x846>
1001b4b2:	9b08      	ldr	r3, [sp, #32]
1001b4b4:	eba3 060b 	sub.w	r6, r3, fp
1001b4b8:	2e00      	cmp	r6, #0
1001b4ba:	f300 82fd 	bgt.w	1001bab8 <_svfprintf_r+0x8d0>
1001b4be:	f419 7f80 	tst.w	r9, #256	@ 0x100
1001b4c2:	f040 8217 	bne.w	1001b8f4 <_svfprintf_r+0x70c>
1001b4c6:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001b4c8:	f8c8 5000 	str.w	r5, [r8]
1001b4cc:	3301      	adds	r3, #1
1001b4ce:	445c      	add	r4, fp
1001b4d0:	2b07      	cmp	r3, #7
1001b4d2:	f8c8 b004 	str.w	fp, [r8, #4]
1001b4d6:	9434      	str	r4, [sp, #208]	@ 0xd0
1001b4d8:	9333      	str	r3, [sp, #204]	@ 0xcc
1001b4da:	f300 836a 	bgt.w	1001bbb2 <_svfprintf_r+0x9ca>
1001b4de:	f108 0808 	add.w	r8, r8, #8
1001b4e2:	f019 0f04 	tst.w	r9, #4
1001b4e6:	d005      	beq.n	1001b4f4 <_svfprintf_r+0x30c>
1001b4e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001b4ea:	9a06      	ldr	r2, [sp, #24]
1001b4ec:	1a9d      	subs	r5, r3, r2
1001b4ee:	2d00      	cmp	r5, #0
1001b4f0:	f300 83da 	bgt.w	1001bca8 <_svfprintf_r+0xac0>
1001b4f4:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	@ 0x28
1001b4f8:	9906      	ldr	r1, [sp, #24]
1001b4fa:	428a      	cmp	r2, r1
1001b4fc:	bfac      	ite	ge
1001b4fe:	189b      	addge	r3, r3, r2
1001b500:	185b      	addlt	r3, r3, r1
1001b502:	930a      	str	r3, [sp, #40]	@ 0x28
1001b504:	2c00      	cmp	r4, #0
1001b506:	f040 8316 	bne.w	1001bb36 <_svfprintf_r+0x94e>
1001b50a:	2300      	movs	r3, #0
1001b50c:	9333      	str	r3, [sp, #204]	@ 0xcc
1001b50e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1001b510:	b11b      	cbz	r3, 1001b51a <_svfprintf_r+0x332>
1001b512:	990c      	ldr	r1, [sp, #48]	@ 0x30
1001b514:	9807      	ldr	r0, [sp, #28]
1001b516:	f7ff fd53 	bl	1001afc0 <_free_r>
1001b51a:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001b51e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1001b520:	e692      	b.n	1001b248 <_svfprintf_r+0x60>
1001b522:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001b526:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001b528:	3307      	adds	r3, #7
1001b52a:	f023 0307 	bic.w	r3, r3, #7
1001b52e:	e8f3 6702 	ldrd	r6, r7, [r3], #8
1001b532:	930d      	str	r3, [sp, #52]	@ 0x34
1001b534:	f027 4300 	bic.w	r3, r7, #2147483648	@ 0x80000000
1001b538:	9323      	str	r3, [sp, #140]	@ 0x8c
1001b53a:	9622      	str	r6, [sp, #136]	@ 0x88
1001b53c:	e9dd ab22 	ldrd	sl, fp, [sp, #136]	@ 0x88
1001b540:	4bb1      	ldr	r3, [pc, #708]	@ (1001b808 <_svfprintf_r+0x620>)
1001b542:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1001b546:	4650      	mov	r0, sl
1001b548:	4659      	mov	r1, fp
1001b54a:	e9cd 6716 	strd	r6, r7, [sp, #88]	@ 0x58
1001b54e:	f006 ffdb 	bl	10022508 <__aeabi_dcmpun>
1001b552:	2800      	cmp	r0, #0
1001b554:	f040 8547 	bne.w	1001bfe6 <_svfprintf_r+0xdfe>
1001b558:	4bab      	ldr	r3, [pc, #684]	@ (1001b808 <_svfprintf_r+0x620>)
1001b55a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1001b55e:	4650      	mov	r0, sl
1001b560:	4659      	mov	r1, fp
1001b562:	f006 ffb3 	bl	100224cc <__aeabi_dcmple>
1001b566:	2800      	cmp	r0, #0
1001b568:	f040 853d 	bne.w	1001bfe6 <_svfprintf_r+0xdfe>
1001b56c:	2200      	movs	r2, #0
1001b56e:	2300      	movs	r3, #0
1001b570:	4630      	mov	r0, r6
1001b572:	4639      	mov	r1, r7
1001b574:	f006 ffa0 	bl	100224b8 <__aeabi_dcmplt>
1001b578:	2800      	cmp	r0, #0
1001b57a:	f041 8053 	bne.w	1001c624 <_svfprintf_r+0x143c>
1001b57e:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001b582:	4da2      	ldr	r5, [pc, #648]	@ (1001b80c <_svfprintf_r+0x624>)
1001b584:	4ba2      	ldr	r3, [pc, #648]	@ (1001b810 <_svfprintf_r+0x628>)
1001b586:	f029 0980 	bic.w	r9, r9, #128	@ 0x80
1001b58a:	990e      	ldr	r1, [sp, #56]	@ 0x38
1001b58c:	2947      	cmp	r1, #71	@ 0x47
1001b58e:	bfc8      	it	gt
1001b590:	461d      	movgt	r5, r3
1001b592:	2300      	movs	r3, #0
1001b594:	2103      	movs	r1, #3
1001b596:	930c      	str	r3, [sp, #48]	@ 0x30
1001b598:	9106      	str	r1, [sp, #24]
1001b59a:	468b      	mov	fp, r1
1001b59c:	9308      	str	r3, [sp, #32]
1001b59e:	9314      	str	r3, [sp, #80]	@ 0x50
1001b5a0:	9310      	str	r3, [sp, #64]	@ 0x40
1001b5a2:	9312      	str	r3, [sp, #72]	@ 0x48
1001b5a4:	2a00      	cmp	r2, #0
1001b5a6:	f43f af4d 	beq.w	1001b444 <_svfprintf_r+0x25c>
1001b5aa:	9b06      	ldr	r3, [sp, #24]
1001b5ac:	3301      	adds	r3, #1
1001b5ae:	9306      	str	r3, [sp, #24]
1001b5b0:	e748      	b.n	1001b444 <_svfprintf_r+0x25c>
1001b5b2:	2e10      	cmp	r6, #16
1001b5b4:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
1001b5b6:	f341 8279 	ble.w	1001caac <_svfprintf_r+0x18c4>
1001b5ba:	4896      	ldr	r0, [pc, #600]	@ (1001b814 <_svfprintf_r+0x62c>)
1001b5bc:	9521      	str	r5, [sp, #132]	@ 0x84
1001b5be:	e9cd 371f 	strd	r3, r7, [sp, #124]	@ 0x7c
1001b5c2:	4621      	mov	r1, r4
1001b5c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
1001b5c6:	9c07      	ldr	r4, [sp, #28]
1001b5c8:	9015      	str	r0, [sp, #84]	@ 0x54
1001b5ca:	f04f 0a10 	mov.w	sl, #16
1001b5ce:	4607      	mov	r7, r0
1001b5d0:	e004      	b.n	1001b5dc <_svfprintf_r+0x3f4>
1001b5d2:	3e10      	subs	r6, #16
1001b5d4:	2e10      	cmp	r6, #16
1001b5d6:	f108 0808 	add.w	r8, r8, #8
1001b5da:	dd16      	ble.n	1001b60a <_svfprintf_r+0x422>
1001b5dc:	3201      	adds	r2, #1
1001b5de:	3110      	adds	r1, #16
1001b5e0:	2a07      	cmp	r2, #7
1001b5e2:	e9c8 7a00 	strd	r7, sl, [r8]
1001b5e6:	e9cd 2133 	strd	r2, r1, [sp, #204]	@ 0xcc
1001b5ea:	ddf2      	ble.n	1001b5d2 <_svfprintf_r+0x3ea>
1001b5ec:	aa32      	add	r2, sp, #200	@ 0xc8
1001b5ee:	4629      	mov	r1, r5
1001b5f0:	4620      	mov	r0, r4
1001b5f2:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001b5f6:	f006 f95b 	bl	100218b0 <__ssprint_r>
1001b5fa:	2800      	cmp	r0, #0
1001b5fc:	f040 86f1 	bne.w	1001c3e2 <_svfprintf_r+0x11fa>
1001b600:	3e10      	subs	r6, #16
1001b602:	2e10      	cmp	r6, #16
1001b604:	e9dd 2133 	ldrd	r2, r1, [sp, #204]	@ 0xcc
1001b608:	dce8      	bgt.n	1001b5dc <_svfprintf_r+0x3f4>
1001b60a:	e9dd 371f 	ldrd	r3, r7, [sp, #124]	@ 0x7c
1001b60e:	9d21      	ldr	r5, [sp, #132]	@ 0x84
1001b610:	460c      	mov	r4, r1
1001b612:	3201      	adds	r2, #1
1001b614:	9915      	ldr	r1, [sp, #84]	@ 0x54
1001b616:	f8c8 1000 	str.w	r1, [r8]
1001b61a:	4434      	add	r4, r6
1001b61c:	2a07      	cmp	r2, #7
1001b61e:	e9cd 2433 	strd	r2, r4, [sp, #204]	@ 0xcc
1001b622:	f8c8 6004 	str.w	r6, [r8, #4]
1001b626:	f300 86cb 	bgt.w	1001c3c0 <_svfprintf_r+0x11d8>
1001b62a:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001b62e:	f108 0808 	add.w	r8, r8, #8
1001b632:	e717      	b.n	1001b464 <_svfprintf_r+0x27c>
1001b634:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1001b636:	2b43      	cmp	r3, #67	@ 0x43
1001b638:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001b63c:	f102 0404 	add.w	r4, r2, #4
1001b640:	d003      	beq.n	1001b64a <_svfprintf_r+0x462>
1001b642:	f019 0f10 	tst.w	r9, #16
1001b646:	f000 855d 	beq.w	1001c104 <_svfprintf_r+0xf1c>
1001b64a:	2208      	movs	r2, #8
1001b64c:	2100      	movs	r1, #0
1001b64e:	a830      	add	r0, sp, #192	@ 0xc0
1001b650:	f7fd ffb4 	bl	100195bc <memset>
1001b654:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001b656:	9807      	ldr	r0, [sp, #28]
1001b658:	681a      	ldr	r2, [r3, #0]
1001b65a:	ad45      	add	r5, sp, #276	@ 0x114
1001b65c:	ab30      	add	r3, sp, #192	@ 0xc0
1001b65e:	4629      	mov	r1, r5
1001b660:	f7fe fc1a 	bl	10019e98 <_wcrtomb_r>
1001b664:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
1001b668:	4683      	mov	fp, r0
1001b66a:	f001 8281 	beq.w	1001cb70 <_svfprintf_r+0x1988>
1001b66e:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
1001b672:	9306      	str	r3, [sp, #24]
1001b674:	2200      	movs	r2, #0
1001b676:	940d      	str	r4, [sp, #52]	@ 0x34
1001b678:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
1001b67c:	920c      	str	r2, [sp, #48]	@ 0x30
1001b67e:	9208      	str	r2, [sp, #32]
1001b680:	9214      	str	r2, [sp, #80]	@ 0x50
1001b682:	9210      	str	r2, [sp, #64]	@ 0x40
1001b684:	9212      	str	r2, [sp, #72]	@ 0x48
1001b686:	e6dd      	b.n	1001b444 <_svfprintf_r+0x25c>
1001b688:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1001b68a:	f856 5b04 	ldr.w	r5, [r6], #4
1001b68e:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001b692:	2300      	movs	r3, #0
1001b694:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
1001b698:	2d00      	cmp	r5, #0
1001b69a:	f000 8558 	beq.w	1001c14e <_svfprintf_r+0xf66>
1001b69e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001b6a0:	2b53      	cmp	r3, #83	@ 0x53
1001b6a2:	f000 86ba 	beq.w	1001c41a <_svfprintf_r+0x1232>
1001b6a6:	f019 0310 	ands.w	r3, r9, #16
1001b6aa:	9312      	str	r3, [sp, #72]	@ 0x48
1001b6ac:	f040 86b5 	bne.w	1001c41a <_svfprintf_r+0x1232>
1001b6b0:	9b08      	ldr	r3, [sp, #32]
1001b6b2:	1c5a      	adds	r2, r3, #1
1001b6b4:	f001 8095 	beq.w	1001c7e2 <_svfprintf_r+0x15fa>
1001b6b8:	9912      	ldr	r1, [sp, #72]	@ 0x48
1001b6ba:	461a      	mov	r2, r3
1001b6bc:	4628      	mov	r0, r5
1001b6be:	f7fe fa67 	bl	10019b90 <memchr>
1001b6c2:	900c      	str	r0, [sp, #48]	@ 0x30
1001b6c4:	2800      	cmp	r0, #0
1001b6c6:	f001 82f0 	beq.w	1001ccaa <_svfprintf_r+0x1ac2>
1001b6ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1001b6cc:	960d      	str	r6, [sp, #52]	@ 0x34
1001b6ce:	eba3 0b05 	sub.w	fp, r3, r5
1001b6d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
1001b6d4:	9308      	str	r3, [sp, #32]
1001b6d6:	ea2b 71eb 	bic.w	r1, fp, fp, asr #31
1001b6da:	9314      	str	r3, [sp, #80]	@ 0x50
1001b6dc:	9310      	str	r3, [sp, #64]	@ 0x40
1001b6de:	930c      	str	r3, [sp, #48]	@ 0x30
1001b6e0:	2373      	movs	r3, #115	@ 0x73
1001b6e2:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001b6e6:	9106      	str	r1, [sp, #24]
1001b6e8:	930e      	str	r3, [sp, #56]	@ 0x38
1001b6ea:	e75b      	b.n	1001b5a4 <_svfprintf_r+0x3bc>
1001b6ec:	f019 0f20 	tst.w	r9, #32
1001b6f0:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001b6f4:	f000 80ed 	beq.w	1001b8d2 <_svfprintf_r+0x6ea>
1001b6f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001b6fa:	3307      	adds	r3, #7
1001b6fc:	f023 0307 	bic.w	r3, r3, #7
1001b700:	461a      	mov	r2, r3
1001b702:	6859      	ldr	r1, [r3, #4]
1001b704:	f852 3b08 	ldr.w	r3, [r2], #8
1001b708:	920d      	str	r2, [sp, #52]	@ 0x34
1001b70a:	460a      	mov	r2, r1
1001b70c:	2900      	cmp	r1, #0
1001b70e:	f2c0 841a 	blt.w	1001bf46 <_svfprintf_r+0xd5e>
1001b712:	9908      	ldr	r1, [sp, #32]
1001b714:	3101      	adds	r1, #1
1001b716:	f000 829d 	beq.w	1001bc54 <_svfprintf_r+0xa6c>
1001b71a:	ea53 0102 	orrs.w	r1, r3, r2
1001b71e:	f029 0480 	bic.w	r4, r9, #128	@ 0x80
1001b722:	f040 8298 	bne.w	1001bc56 <_svfprintf_r+0xa6e>
1001b726:	9a08      	ldr	r2, [sp, #32]
1001b728:	2a00      	cmp	r2, #0
1001b72a:	f040 8299 	bne.w	1001bc60 <_svfprintf_r+0xa78>
1001b72e:	46a1      	mov	r9, r4
1001b730:	4693      	mov	fp, r2
1001b732:	ad5e      	add	r5, sp, #376	@ 0x178
1001b734:	e152      	b.n	1001b9dc <_svfprintf_r+0x7f4>
1001b736:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001b738:	f853 2b04 	ldr.w	r2, [r3], #4
1001b73c:	920b      	str	r2, [sp, #44]	@ 0x2c
1001b73e:	2a00      	cmp	r2, #0
1001b740:	f280 8425 	bge.w	1001bf8e <_svfprintf_r+0xda6>
1001b744:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1001b746:	930d      	str	r3, [sp, #52]	@ 0x34
1001b748:	4252      	negs	r2, r2
1001b74a:	920b      	str	r2, [sp, #44]	@ 0x2c
1001b74c:	7823      	ldrb	r3, [r4, #0]
1001b74e:	f049 0904 	orr.w	r9, r9, #4
1001b752:	e5a0      	b.n	1001b296 <_svfprintf_r+0xae>
1001b754:	232b      	movs	r3, #43	@ 0x2b
1001b756:	f88d 309f 	strb.w	r3, [sp, #159]	@ 0x9f
1001b75a:	7823      	ldrb	r3, [r4, #0]
1001b75c:	e59b      	b.n	1001b296 <_svfprintf_r+0xae>
1001b75e:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001b762:	f049 0910 	orr.w	r9, r9, #16
1001b766:	f019 0220 	ands.w	r2, r9, #32
1001b76a:	f000 83b5 	beq.w	1001bed8 <_svfprintf_r+0xcf0>
1001b76e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001b770:	3307      	adds	r3, #7
1001b772:	f023 0307 	bic.w	r3, r3, #7
1001b776:	4619      	mov	r1, r3
1001b778:	685a      	ldr	r2, [r3, #4]
1001b77a:	f851 3b08 	ldr.w	r3, [r1], #8
1001b77e:	910d      	str	r1, [sp, #52]	@ 0x34
1001b780:	f429 6480 	bic.w	r4, r9, #1024	@ 0x400
1001b784:	2100      	movs	r1, #0
1001b786:	2000      	movs	r0, #0
1001b788:	9d08      	ldr	r5, [sp, #32]
1001b78a:	f88d 009f 	strb.w	r0, [sp, #159]	@ 0x9f
1001b78e:	1c6f      	adds	r7, r5, #1
1001b790:	f000 810d 	beq.w	1001b9ae <_svfprintf_r+0x7c6>
1001b794:	ea53 0002 	orrs.w	r0, r3, r2
1001b798:	f024 0980 	bic.w	r9, r4, #128	@ 0x80
1001b79c:	f040 8106 	bne.w	1001b9ac <_svfprintf_r+0x7c4>
1001b7a0:	2d00      	cmp	r5, #0
1001b7a2:	f040 8628 	bne.w	1001c3f6 <_svfprintf_r+0x120e>
1001b7a6:	2900      	cmp	r1, #0
1001b7a8:	f040 83c9 	bne.w	1001bf3e <_svfprintf_r+0xd56>
1001b7ac:	f014 0b01 	ands.w	fp, r4, #1
1001b7b0:	f000 83f1 	beq.w	1001bf96 <_svfprintf_r+0xdae>
1001b7b4:	2330      	movs	r3, #48	@ 0x30
1001b7b6:	f88d 3177 	strb.w	r3, [sp, #375]	@ 0x177
1001b7ba:	f20d 1577 	addw	r5, sp, #375	@ 0x177
1001b7be:	e10d      	b.n	1001b9dc <_svfprintf_r+0x7f4>
1001b7c0:	7823      	ldrb	r3, [r4, #0]
1001b7c2:	2b68      	cmp	r3, #104	@ 0x68
1001b7c4:	bf03      	ittte	eq
1001b7c6:	7863      	ldrbeq	r3, [r4, #1]
1001b7c8:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
1001b7cc:	3401      	addeq	r4, #1
1001b7ce:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
1001b7d2:	e560      	b.n	1001b296 <_svfprintf_r+0xae>
1001b7d4:	f019 0f20 	tst.w	r9, #32
1001b7d8:	940f      	str	r4, [sp, #60]	@ 0x3c
1001b7da:	f000 83e6 	beq.w	1001bfaa <_svfprintf_r+0xdc2>
1001b7de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001b7e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001b7e2:	681b      	ldr	r3, [r3, #0]
1001b7e4:	601a      	str	r2, [r3, #0]
1001b7e6:	17d2      	asrs	r2, r2, #31
1001b7e8:	605a      	str	r2, [r3, #4]
1001b7ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001b7ec:	3304      	adds	r3, #4
1001b7ee:	930d      	str	r3, [sp, #52]	@ 0x34
1001b7f0:	e695      	b.n	1001b51e <_svfprintf_r+0x336>
1001b7f2:	7823      	ldrb	r3, [r4, #0]
1001b7f4:	2b6c      	cmp	r3, #108	@ 0x6c
1001b7f6:	bf03      	ittte	eq
1001b7f8:	7863      	ldrbeq	r3, [r4, #1]
1001b7fa:	f049 0920 	orreq.w	r9, r9, #32
1001b7fe:	3401      	addeq	r4, #1
1001b800:	f049 0910 	orrne.w	r9, r9, #16
1001b804:	e547      	b.n	1001b296 <_svfprintf_r+0xae>
1001b806:	bf00      	nop
1001b808:	7fefffff 	.word	0x7fefffff
1001b80c:	10025474 	.word	0x10025474
1001b810:	10025478 	.word	0x10025478
1001b814:	100256d8 	.word	0x100256d8
1001b818:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1001b81a:	940f      	str	r4, [sp, #60]	@ 0x3c
1001b81c:	f852 3b04 	ldr.w	r3, [r2], #4
1001b820:	920d      	str	r2, [sp, #52]	@ 0x34
1001b822:	f647 0230 	movw	r2, #30768	@ 0x7830
1001b826:	f8ad 20a0 	strh.w	r2, [sp, #160]	@ 0xa0
1001b82a:	2078      	movs	r0, #120	@ 0x78
1001b82c:	4aa8      	ldr	r2, [pc, #672]	@ (1001bad0 <_svfprintf_r+0x8e8>)
1001b82e:	9219      	str	r2, [sp, #100]	@ 0x64
1001b830:	f049 0402 	orr.w	r4, r9, #2
1001b834:	2200      	movs	r2, #0
1001b836:	2102      	movs	r1, #2
1001b838:	900e      	str	r0, [sp, #56]	@ 0x38
1001b83a:	e7a4      	b.n	1001b786 <_svfprintf_r+0x59e>
1001b83c:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001b840:	f049 0410 	orr.w	r4, r9, #16
1001b844:	f014 0220 	ands.w	r2, r4, #32
1001b848:	f000 8355 	beq.w	1001bef6 <_svfprintf_r+0xd0e>
1001b84c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001b84e:	3307      	adds	r3, #7
1001b850:	f023 0307 	bic.w	r3, r3, #7
1001b854:	4619      	mov	r1, r3
1001b856:	685a      	ldr	r2, [r3, #4]
1001b858:	f851 3b08 	ldr.w	r3, [r1], #8
1001b85c:	910d      	str	r1, [sp, #52]	@ 0x34
1001b85e:	2101      	movs	r1, #1
1001b860:	e791      	b.n	1001b786 <_svfprintf_r+0x59e>
1001b862:	7823      	ldrb	r3, [r4, #0]
1001b864:	f049 0908 	orr.w	r9, r9, #8
1001b868:	e515      	b.n	1001b296 <_svfprintf_r+0xae>
1001b86a:	7823      	ldrb	r3, [r4, #0]
1001b86c:	f049 0901 	orr.w	r9, r9, #1
1001b870:	e511      	b.n	1001b296 <_svfprintf_r+0xae>
1001b872:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001b876:	7823      	ldrb	r3, [r4, #0]
1001b878:	2a00      	cmp	r2, #0
1001b87a:	f47f ad0c 	bne.w	1001b296 <_svfprintf_r+0xae>
1001b87e:	2220      	movs	r2, #32
1001b880:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
1001b884:	e507      	b.n	1001b296 <_svfprintf_r+0xae>
1001b886:	7823      	ldrb	r3, [r4, #0]
1001b888:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
1001b88c:	e503      	b.n	1001b296 <_svfprintf_r+0xae>
1001b88e:	4621      	mov	r1, r4
1001b890:	f811 3b01 	ldrb.w	r3, [r1], #1
1001b894:	2b2a      	cmp	r3, #42	@ 0x2a
1001b896:	f001 822b 	beq.w	1001ccf0 <_svfprintf_r+0x1b08>
1001b89a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
1001b89e:	2a09      	cmp	r2, #9
1001b8a0:	460c      	mov	r4, r1
1001b8a2:	bf98      	it	ls
1001b8a4:	2100      	movls	r1, #0
1001b8a6:	f201 8132 	bhi.w	1001cb0e <_svfprintf_r+0x1926>
1001b8aa:	f814 3b01 	ldrb.w	r3, [r4], #1
1001b8ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1001b8b2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
1001b8b6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
1001b8ba:	2a09      	cmp	r2, #9
1001b8bc:	d9f5      	bls.n	1001b8aa <_svfprintf_r+0x6c2>
1001b8be:	9108      	str	r1, [sp, #32]
1001b8c0:	e4ea      	b.n	1001b298 <_svfprintf_r+0xb0>
1001b8c2:	f049 0910 	orr.w	r9, r9, #16
1001b8c6:	f019 0f20 	tst.w	r9, #32
1001b8ca:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001b8ce:	f47f af13 	bne.w	1001b6f8 <_svfprintf_r+0x510>
1001b8d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1001b8d4:	f019 0f10 	tst.w	r9, #16
1001b8d8:	f852 3b04 	ldr.w	r3, [r2], #4
1001b8dc:	920d      	str	r2, [sp, #52]	@ 0x34
1001b8de:	f040 8360 	bne.w	1001bfa2 <_svfprintf_r+0xdba>
1001b8e2:	f019 0f40 	tst.w	r9, #64	@ 0x40
1001b8e6:	f000 8358 	beq.w	1001bf9a <_svfprintf_r+0xdb2>
1001b8ea:	f343 32c0 	sbfx	r2, r3, #15, #1
1001b8ee:	4611      	mov	r1, r2
1001b8f0:	b21b      	sxth	r3, r3
1001b8f2:	e70b      	b.n	1001b70c <_svfprintf_r+0x524>
1001b8f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001b8f6:	2b65      	cmp	r3, #101	@ 0x65
1001b8f8:	f340 8166 	ble.w	1001bbc8 <_svfprintf_r+0x9e0>
1001b8fc:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
1001b900:	2200      	movs	r2, #0
1001b902:	2300      	movs	r3, #0
1001b904:	f006 fdce 	bl	100224a4 <__aeabi_dcmpeq>
1001b908:	2800      	cmp	r0, #0
1001b90a:	f000 8211 	beq.w	1001bd30 <_svfprintf_r+0xb48>
1001b90e:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001b910:	4a70      	ldr	r2, [pc, #448]	@ (1001bad4 <_svfprintf_r+0x8ec>)
1001b912:	f8c8 2000 	str.w	r2, [r8]
1001b916:	3301      	adds	r3, #1
1001b918:	3401      	adds	r4, #1
1001b91a:	2201      	movs	r2, #1
1001b91c:	2b07      	cmp	r3, #7
1001b91e:	9434      	str	r4, [sp, #208]	@ 0xd0
1001b920:	9333      	str	r3, [sp, #204]	@ 0xcc
1001b922:	f8c8 2004 	str.w	r2, [r8, #4]
1001b926:	f300 856b 	bgt.w	1001c400 <_svfprintf_r+0x1218>
1001b92a:	f108 0808 	add.w	r8, r8, #8
1001b92e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
1001b930:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
1001b932:	4293      	cmp	r3, r2
1001b934:	f280 8326 	bge.w	1001bf84 <_svfprintf_r+0xd9c>
1001b938:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001b93a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
1001b93c:	441c      	add	r4, r3
1001b93e:	e9c8 2300 	strd	r2, r3, [r8]
1001b942:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001b944:	9434      	str	r4, [sp, #208]	@ 0xd0
1001b946:	3301      	adds	r3, #1
1001b948:	2b07      	cmp	r3, #7
1001b94a:	9333      	str	r3, [sp, #204]	@ 0xcc
1001b94c:	f300 83e4 	bgt.w	1001c118 <_svfprintf_r+0xf30>
1001b950:	f108 0808 	add.w	r8, r8, #8
1001b954:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001b956:	1e5d      	subs	r5, r3, #1
1001b958:	2d00      	cmp	r5, #0
1001b95a:	f77f adc2 	ble.w	1001b4e2 <_svfprintf_r+0x2fa>
1001b95e:	2d10      	cmp	r5, #16
1001b960:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001b962:	f340 85ae 	ble.w	1001c4c2 <_svfprintf_r+0x12da>
1001b966:	4f5c      	ldr	r7, [pc, #368]	@ (1001bad8 <_svfprintf_r+0x8f0>)
1001b968:	f8dd b01c 	ldr.w	fp, [sp, #28]
1001b96c:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
1001b970:	9715      	str	r7, [sp, #84]	@ 0x54
1001b972:	2610      	movs	r6, #16
1001b974:	e005      	b.n	1001b982 <_svfprintf_r+0x79a>
1001b976:	f108 0808 	add.w	r8, r8, #8
1001b97a:	3d10      	subs	r5, #16
1001b97c:	2d10      	cmp	r5, #16
1001b97e:	f340 85a2 	ble.w	1001c4c6 <_svfprintf_r+0x12de>
1001b982:	3301      	adds	r3, #1
1001b984:	3410      	adds	r4, #16
1001b986:	2b07      	cmp	r3, #7
1001b988:	e9c8 7600 	strd	r7, r6, [r8]
1001b98c:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001b990:	ddf1      	ble.n	1001b976 <_svfprintf_r+0x78e>
1001b992:	aa32      	add	r2, sp, #200	@ 0xc8
1001b994:	4651      	mov	r1, sl
1001b996:	4658      	mov	r0, fp
1001b998:	f005 ff8a 	bl	100218b0 <__ssprint_r>
1001b99c:	2800      	cmp	r0, #0
1001b99e:	f040 82c0 	bne.w	1001bf22 <_svfprintf_r+0xd3a>
1001b9a2:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
1001b9a6:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001b9aa:	e7e6      	b.n	1001b97a <_svfprintf_r+0x792>
1001b9ac:	464c      	mov	r4, r9
1001b9ae:	2901      	cmp	r1, #1
1001b9b0:	f000 8151 	beq.w	1001bc56 <_svfprintf_r+0xa6e>
1001b9b4:	2902      	cmp	r1, #2
1001b9b6:	ad5e      	add	r5, sp, #376	@ 0x178
1001b9b8:	d11e      	bne.n	1001b9f8 <_svfprintf_r+0x810>
1001b9ba:	9819      	ldr	r0, [sp, #100]	@ 0x64
1001b9bc:	f003 010f 	and.w	r1, r3, #15
1001b9c0:	091b      	lsrs	r3, r3, #4
1001b9c2:	5c41      	ldrb	r1, [r0, r1]
1001b9c4:	f805 1d01 	strb.w	r1, [r5, #-1]!
1001b9c8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
1001b9cc:	0912      	lsrs	r2, r2, #4
1001b9ce:	ea53 0102 	orrs.w	r1, r3, r2
1001b9d2:	d1f3      	bne.n	1001b9bc <_svfprintf_r+0x7d4>
1001b9d4:	ab5e      	add	r3, sp, #376	@ 0x178
1001b9d6:	46a1      	mov	r9, r4
1001b9d8:	eba3 0b05 	sub.w	fp, r3, r5
1001b9dc:	9908      	ldr	r1, [sp, #32]
1001b9de:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001b9e2:	4559      	cmp	r1, fp
1001b9e4:	f04f 0300 	mov.w	r3, #0
1001b9e8:	bfb8      	it	lt
1001b9ea:	4659      	movlt	r1, fp
1001b9ec:	930c      	str	r3, [sp, #48]	@ 0x30
1001b9ee:	9106      	str	r1, [sp, #24]
1001b9f0:	9314      	str	r3, [sp, #80]	@ 0x50
1001b9f2:	9310      	str	r3, [sp, #64]	@ 0x40
1001b9f4:	9312      	str	r3, [sp, #72]	@ 0x48
1001b9f6:	e5d5      	b.n	1001b5a4 <_svfprintf_r+0x3bc>
1001b9f8:	f003 0107 	and.w	r1, r3, #7
1001b9fc:	08db      	lsrs	r3, r3, #3
1001b9fe:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
1001ba02:	08d2      	lsrs	r2, r2, #3
1001ba04:	3130      	adds	r1, #48	@ 0x30
1001ba06:	ea53 0602 	orrs.w	r6, r3, r2
1001ba0a:	4628      	mov	r0, r5
1001ba0c:	f805 1d01 	strb.w	r1, [r5, #-1]!
1001ba10:	d1f2      	bne.n	1001b9f8 <_svfprintf_r+0x810>
1001ba12:	07e6      	lsls	r6, r4, #31
1001ba14:	d5de      	bpl.n	1001b9d4 <_svfprintf_r+0x7ec>
1001ba16:	2930      	cmp	r1, #48	@ 0x30
1001ba18:	d0dc      	beq.n	1001b9d4 <_svfprintf_r+0x7ec>
1001ba1a:	2330      	movs	r3, #48	@ 0x30
1001ba1c:	3802      	subs	r0, #2
1001ba1e:	f805 3c01 	strb.w	r3, [r5, #-1]
1001ba22:	ab5e      	add	r3, sp, #376	@ 0x178
1001ba24:	46a1      	mov	r9, r4
1001ba26:	eba3 0b00 	sub.w	fp, r3, r0
1001ba2a:	4605      	mov	r5, r0
1001ba2c:	e7d6      	b.n	1001b9dc <_svfprintf_r+0x7f4>
1001ba2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001ba30:	9a06      	ldr	r2, [sp, #24]
1001ba32:	1a9e      	subs	r6, r3, r2
1001ba34:	2e00      	cmp	r6, #0
1001ba36:	f77f ad3c 	ble.w	1001b4b2 <_svfprintf_r+0x2ca>
1001ba3a:	2e10      	cmp	r6, #16
1001ba3c:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001ba3e:	f341 80a1 	ble.w	1001cb84 <_svfprintf_r+0x199c>
1001ba42:	4825      	ldr	r0, [pc, #148]	@ (1001bad8 <_svfprintf_r+0x8f0>)
1001ba44:	f8dd a01c 	ldr.w	sl, [sp, #28]
1001ba48:	9015      	str	r0, [sp, #84]	@ 0x54
1001ba4a:	4621      	mov	r1, r4
1001ba4c:	2710      	movs	r7, #16
1001ba4e:	461a      	mov	r2, r3
1001ba50:	4604      	mov	r4, r0
1001ba52:	e004      	b.n	1001ba5e <_svfprintf_r+0x876>
1001ba54:	3e10      	subs	r6, #16
1001ba56:	2e10      	cmp	r6, #16
1001ba58:	f108 0808 	add.w	r8, r8, #8
1001ba5c:	dd16      	ble.n	1001ba8c <_svfprintf_r+0x8a4>
1001ba5e:	3201      	adds	r2, #1
1001ba60:	3110      	adds	r1, #16
1001ba62:	2a07      	cmp	r2, #7
1001ba64:	e9c8 4700 	strd	r4, r7, [r8]
1001ba68:	e9cd 2133 	strd	r2, r1, [sp, #204]	@ 0xcc
1001ba6c:	ddf2      	ble.n	1001ba54 <_svfprintf_r+0x86c>
1001ba6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001ba70:	aa32      	add	r2, sp, #200	@ 0xc8
1001ba72:	4650      	mov	r0, sl
1001ba74:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001ba78:	f005 ff1a 	bl	100218b0 <__ssprint_r>
1001ba7c:	2800      	cmp	r0, #0
1001ba7e:	f040 84b2 	bne.w	1001c3e6 <_svfprintf_r+0x11fe>
1001ba82:	3e10      	subs	r6, #16
1001ba84:	2e10      	cmp	r6, #16
1001ba86:	e9dd 2133 	ldrd	r2, r1, [sp, #204]	@ 0xcc
1001ba8a:	dce8      	bgt.n	1001ba5e <_svfprintf_r+0x876>
1001ba8c:	460c      	mov	r4, r1
1001ba8e:	4613      	mov	r3, r2
1001ba90:	3301      	adds	r3, #1
1001ba92:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1001ba94:	f8c8 2000 	str.w	r2, [r8]
1001ba98:	4434      	add	r4, r6
1001ba9a:	2b07      	cmp	r3, #7
1001ba9c:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001baa0:	f8c8 6004 	str.w	r6, [r8, #4]
1001baa4:	f300 851d 	bgt.w	1001c4e2 <_svfprintf_r+0x12fa>
1001baa8:	9b08      	ldr	r3, [sp, #32]
1001baaa:	eba3 060b 	sub.w	r6, r3, fp
1001baae:	2e00      	cmp	r6, #0
1001bab0:	f108 0808 	add.w	r8, r8, #8
1001bab4:	f77f ad03 	ble.w	1001b4be <_svfprintf_r+0x2d6>
1001bab8:	4a07      	ldr	r2, [pc, #28]	@ (1001bad8 <_svfprintf_r+0x8f0>)
1001baba:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001babc:	9215      	str	r2, [sp, #84]	@ 0x54
1001babe:	2e10      	cmp	r6, #16
1001bac0:	dd2a      	ble.n	1001bb18 <_svfprintf_r+0x930>
1001bac2:	4622      	mov	r2, r4
1001bac4:	9f07      	ldr	r7, [sp, #28]
1001bac6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1001bac8:	f04f 0a10 	mov.w	sl, #16
1001bacc:	e00b      	b.n	1001bae6 <_svfprintf_r+0x8fe>
1001bace:	bf00      	nop
1001bad0:	10025484 	.word	0x10025484
1001bad4:	100254b4 	.word	0x100254b4
1001bad8:	100256c8 	.word	0x100256c8
1001badc:	3e10      	subs	r6, #16
1001bade:	2e10      	cmp	r6, #16
1001bae0:	f108 0808 	add.w	r8, r8, #8
1001bae4:	dd17      	ble.n	1001bb16 <_svfprintf_r+0x92e>
1001bae6:	3301      	adds	r3, #1
1001bae8:	498e      	ldr	r1, [pc, #568]	@ (1001bd24 <_svfprintf_r+0xb3c>)
1001baea:	3210      	adds	r2, #16
1001baec:	2b07      	cmp	r3, #7
1001baee:	e9c8 1a00 	strd	r1, sl, [r8]
1001baf2:	e9cd 3233 	strd	r3, r2, [sp, #204]	@ 0xcc
1001baf6:	ddf1      	ble.n	1001badc <_svfprintf_r+0x8f4>
1001baf8:	aa32      	add	r2, sp, #200	@ 0xc8
1001bafa:	4621      	mov	r1, r4
1001bafc:	4638      	mov	r0, r7
1001bafe:	f005 fed7 	bl	100218b0 <__ssprint_r>
1001bb02:	2800      	cmp	r0, #0
1001bb04:	f040 820c 	bne.w	1001bf20 <_svfprintf_r+0xd38>
1001bb08:	3e10      	subs	r6, #16
1001bb0a:	2e10      	cmp	r6, #16
1001bb0c:	e9dd 3233 	ldrd	r3, r2, [sp, #204]	@ 0xcc
1001bb10:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001bb14:	dce7      	bgt.n	1001bae6 <_svfprintf_r+0x8fe>
1001bb16:	4614      	mov	r4, r2
1001bb18:	3301      	adds	r3, #1
1001bb1a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1001bb1c:	f8c8 2000 	str.w	r2, [r8]
1001bb20:	4434      	add	r4, r6
1001bb22:	2b07      	cmp	r3, #7
1001bb24:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001bb28:	f8c8 6004 	str.w	r6, [r8, #4]
1001bb2c:	f300 81c7 	bgt.w	1001bebe <_svfprintf_r+0xcd6>
1001bb30:	f108 0808 	add.w	r8, r8, #8
1001bb34:	e4c3      	b.n	1001b4be <_svfprintf_r+0x2d6>
1001bb36:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001bb38:	9807      	ldr	r0, [sp, #28]
1001bb3a:	aa32      	add	r2, sp, #200	@ 0xc8
1001bb3c:	f005 feb8 	bl	100218b0 <__ssprint_r>
1001bb40:	2800      	cmp	r0, #0
1001bb42:	f43f ace2 	beq.w	1001b50a <_svfprintf_r+0x322>
1001bb46:	f8dd b01c 	ldr.w	fp, [sp, #28]
1001bb4a:	e1ea      	b.n	1001bf22 <_svfprintf_r+0xd3a>
1001bb4c:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001bb4e:	4976      	ldr	r1, [pc, #472]	@ (1001bd28 <_svfprintf_r+0xb40>)
1001bb50:	f8c8 1000 	str.w	r1, [r8]
1001bb54:	3301      	adds	r3, #1
1001bb56:	3401      	adds	r4, #1
1001bb58:	2101      	movs	r1, #1
1001bb5a:	2b07      	cmp	r3, #7
1001bb5c:	9434      	str	r4, [sp, #208]	@ 0xd0
1001bb5e:	9333      	str	r3, [sp, #204]	@ 0xcc
1001bb60:	f8c8 1004 	str.w	r1, [r8, #4]
1001bb64:	f300 8574 	bgt.w	1001c650 <_svfprintf_r+0x1468>
1001bb68:	f108 0808 	add.w	r8, r8, #8
1001bb6c:	2a00      	cmp	r2, #0
1001bb6e:	f040 84e6 	bne.w	1001c53e <_svfprintf_r+0x1356>
1001bb72:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
1001bb74:	f009 0301 	and.w	r3, r9, #1
1001bb78:	4313      	orrs	r3, r2
1001bb7a:	f43f acb2 	beq.w	1001b4e2 <_svfprintf_r+0x2fa>
1001bb7e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001bb80:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
1001bb82:	441c      	add	r4, r3
1001bb84:	e9c8 2300 	strd	r2, r3, [r8]
1001bb88:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001bb8a:	9434      	str	r4, [sp, #208]	@ 0xd0
1001bb8c:	3301      	adds	r3, #1
1001bb8e:	2b07      	cmp	r3, #7
1001bb90:	9333      	str	r3, [sp, #204]	@ 0xcc
1001bb92:	f300 8645 	bgt.w	1001c820 <_svfprintf_r+0x1638>
1001bb96:	f108 0808 	add.w	r8, r8, #8
1001bb9a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
1001bb9c:	f8c8 5000 	str.w	r5, [r8]
1001bba0:	3301      	adds	r3, #1
1001bba2:	4414      	add	r4, r2
1001bba4:	2b07      	cmp	r3, #7
1001bba6:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001bbaa:	f8c8 2004 	str.w	r2, [r8, #4]
1001bbae:	f77f ac96 	ble.w	1001b4de <_svfprintf_r+0x2f6>
1001bbb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001bbb4:	9807      	ldr	r0, [sp, #28]
1001bbb6:	aa32      	add	r2, sp, #200	@ 0xc8
1001bbb8:	f005 fe7a 	bl	100218b0 <__ssprint_r>
1001bbbc:	2800      	cmp	r0, #0
1001bbbe:	d1c2      	bne.n	1001bb46 <_svfprintf_r+0x95e>
1001bbc0:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001bbc2:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001bbc6:	e48c      	b.n	1001b4e2 <_svfprintf_r+0x2fa>
1001bbc8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001bbca:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
1001bbcc:	2b01      	cmp	r3, #1
1001bbce:	f104 0401 	add.w	r4, r4, #1
1001bbd2:	f106 0601 	add.w	r6, r6, #1
1001bbd6:	f108 0708 	add.w	r7, r8, #8
1001bbda:	f340 8129 	ble.w	1001be30 <_svfprintf_r+0xc48>
1001bbde:	2301      	movs	r3, #1
1001bbe0:	2e07      	cmp	r6, #7
1001bbe2:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
1001bbe6:	f8c8 5000 	str.w	r5, [r8]
1001bbea:	f8c8 3004 	str.w	r3, [r8, #4]
1001bbee:	f300 81b1 	bgt.w	1001bf54 <_svfprintf_r+0xd6c>
1001bbf2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001bbf4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
1001bbf6:	3601      	adds	r6, #1
1001bbf8:	441c      	add	r4, r3
1001bbfa:	2e07      	cmp	r6, #7
1001bbfc:	e9c7 2300 	strd	r2, r3, [r7]
1001bc00:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
1001bc04:	f300 81b2 	bgt.w	1001bf6c <_svfprintf_r+0xd84>
1001bc08:	3708      	adds	r7, #8
1001bc0a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001bc0c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
1001bc10:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
1001bc14:	2200      	movs	r2, #0
1001bc16:	2300      	movs	r3, #0
1001bc18:	f006 fc44 	bl	100224a4 <__aeabi_dcmpeq>
1001bc1c:	2800      	cmp	r0, #0
1001bc1e:	f040 8121 	bne.w	1001be64 <_svfprintf_r+0xc7c>
1001bc22:	3601      	adds	r6, #1
1001bc24:	3501      	adds	r5, #1
1001bc26:	4444      	add	r4, r8
1001bc28:	2e07      	cmp	r6, #7
1001bc2a:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
1001bc2e:	603d      	str	r5, [r7, #0]
1001bc30:	f8c7 8004 	str.w	r8, [r7, #4]
1001bc34:	f300 810a 	bgt.w	1001be4c <_svfprintf_r+0xc64>
1001bc38:	3708      	adds	r7, #8
1001bc3a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
1001bc3c:	607b      	str	r3, [r7, #4]
1001bc3e:	3601      	adds	r6, #1
1001bc40:	441c      	add	r4, r3
1001bc42:	2e07      	cmp	r6, #7
1001bc44:	ab2c      	add	r3, sp, #176	@ 0xb0
1001bc46:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
1001bc4a:	603b      	str	r3, [r7, #0]
1001bc4c:	dcb1      	bgt.n	1001bbb2 <_svfprintf_r+0x9ca>
1001bc4e:	f107 0808 	add.w	r8, r7, #8
1001bc52:	e446      	b.n	1001b4e2 <_svfprintf_r+0x2fa>
1001bc54:	464c      	mov	r4, r9
1001bc56:	2b0a      	cmp	r3, #10
1001bc58:	f172 0100 	sbcs.w	r1, r2, #0
1001bc5c:	f080 8353 	bcs.w	1001c306 <_svfprintf_r+0x111e>
1001bc60:	3330      	adds	r3, #48	@ 0x30
1001bc62:	f88d 3177 	strb.w	r3, [sp, #375]	@ 0x177
1001bc66:	46a1      	mov	r9, r4
1001bc68:	f04f 0b01 	mov.w	fp, #1
1001bc6c:	f20d 1577 	addw	r5, sp, #375	@ 0x177
1001bc70:	e6b4      	b.n	1001b9dc <_svfprintf_r+0x7f4>
1001bc72:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001bc74:	9807      	ldr	r0, [sp, #28]
1001bc76:	aa32      	add	r2, sp, #200	@ 0xc8
1001bc78:	f005 fe1a 	bl	100218b0 <__ssprint_r>
1001bc7c:	2800      	cmp	r0, #0
1001bc7e:	f47f af62 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001bc82:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001bc84:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001bc88:	e410      	b.n	1001b4ac <_svfprintf_r+0x2c4>
1001bc8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001bc8c:	9807      	ldr	r0, [sp, #28]
1001bc8e:	9315      	str	r3, [sp, #84]	@ 0x54
1001bc90:	aa32      	add	r2, sp, #200	@ 0xc8
1001bc92:	f005 fe0d 	bl	100218b0 <__ssprint_r>
1001bc96:	2800      	cmp	r0, #0
1001bc98:	f47f af55 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001bc9c:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001bc9e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1001bca0:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001bca4:	f7ff bbf0 	b.w	1001b488 <_svfprintf_r+0x2a0>
1001bca8:	2d10      	cmp	r5, #16
1001bcaa:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001bcac:	f340 8733 	ble.w	1001cb16 <_svfprintf_r+0x192e>
1001bcb0:	4f1e      	ldr	r7, [pc, #120]	@ (1001bd2c <_svfprintf_r+0xb44>)
1001bcb2:	f8dd 901c 	ldr.w	r9, [sp, #28]
1001bcb6:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
1001bcba:	9715      	str	r7, [sp, #84]	@ 0x54
1001bcbc:	2610      	movs	r6, #16
1001bcbe:	e004      	b.n	1001bcca <_svfprintf_r+0xae2>
1001bcc0:	3d10      	subs	r5, #16
1001bcc2:	2d10      	cmp	r5, #16
1001bcc4:	f108 0808 	add.w	r8, r8, #8
1001bcc8:	dd16      	ble.n	1001bcf8 <_svfprintf_r+0xb10>
1001bcca:	3301      	adds	r3, #1
1001bccc:	3410      	adds	r4, #16
1001bcce:	2b07      	cmp	r3, #7
1001bcd0:	e9c8 7600 	strd	r7, r6, [r8]
1001bcd4:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001bcd8:	ddf2      	ble.n	1001bcc0 <_svfprintf_r+0xad8>
1001bcda:	aa32      	add	r2, sp, #200	@ 0xc8
1001bcdc:	4651      	mov	r1, sl
1001bcde:	4648      	mov	r0, r9
1001bce0:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001bce4:	f005 fde4 	bl	100218b0 <__ssprint_r>
1001bce8:	2800      	cmp	r0, #0
1001bcea:	f040 83e8 	bne.w	1001c4be <_svfprintf_r+0x12d6>
1001bcee:	3d10      	subs	r5, #16
1001bcf0:	2d10      	cmp	r5, #16
1001bcf2:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
1001bcf6:	dce8      	bgt.n	1001bcca <_svfprintf_r+0xae2>
1001bcf8:	3301      	adds	r3, #1
1001bcfa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1001bcfc:	442c      	add	r4, r5
1001bcfe:	2b07      	cmp	r3, #7
1001bd00:	e9c8 2500 	strd	r2, r5, [r8]
1001bd04:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001bd08:	f77f abf4 	ble.w	1001b4f4 <_svfprintf_r+0x30c>
1001bd0c:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001bd0e:	9807      	ldr	r0, [sp, #28]
1001bd10:	aa32      	add	r2, sp, #200	@ 0xc8
1001bd12:	f005 fdcd 	bl	100218b0 <__ssprint_r>
1001bd16:	2800      	cmp	r0, #0
1001bd18:	f47f af15 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001bd1c:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001bd1e:	f7ff bbe9 	b.w	1001b4f4 <_svfprintf_r+0x30c>
1001bd22:	bf00      	nop
1001bd24:	100256c8 	.word	0x100256c8
1001bd28:	100254b4 	.word	0x100254b4
1001bd2c:	100256d8 	.word	0x100256d8
1001bd30:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
1001bd32:	2a00      	cmp	r2, #0
1001bd34:	f77f af0a 	ble.w	1001bb4c <_svfprintf_r+0x964>
1001bd38:	e9dd 7312 	ldrd	r7, r3, [sp, #72]	@ 0x48
1001bd3c:	429f      	cmp	r7, r3
1001bd3e:	bfa8      	it	ge
1001bd40:	461f      	movge	r7, r3
1001bd42:	2f00      	cmp	r7, #0
1001bd44:	eb05 0b03 	add.w	fp, r5, r3
1001bd48:	dd0b      	ble.n	1001bd62 <_svfprintf_r+0xb7a>
1001bd4a:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001bd4c:	3301      	adds	r3, #1
1001bd4e:	443c      	add	r4, r7
1001bd50:	2b07      	cmp	r3, #7
1001bd52:	e9c8 5700 	strd	r5, r7, [r8]
1001bd56:	9434      	str	r4, [sp, #208]	@ 0xd0
1001bd58:	9333      	str	r3, [sp, #204]	@ 0xcc
1001bd5a:	f300 8642 	bgt.w	1001c9e2 <_svfprintf_r+0x17fa>
1001bd5e:	f108 0808 	add.w	r8, r8, #8
1001bd62:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1001bd64:	2f00      	cmp	r7, #0
1001bd66:	bfa8      	it	ge
1001bd68:	1bf6      	subge	r6, r6, r7
1001bd6a:	2e00      	cmp	r6, #0
1001bd6c:	f300 8200 	bgt.w	1001c170 <_svfprintf_r+0xf88>
1001bd70:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
1001bd74:	f419 6f80 	tst.w	r9, #1024	@ 0x400
1001bd78:	44aa      	add	sl, r5
1001bd7a:	f040 8221 	bne.w	1001c1c0 <_svfprintf_r+0xfd8>
1001bd7e:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
1001bd80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001bd82:	429d      	cmp	r5, r3
1001bd84:	db03      	blt.n	1001bd8e <_svfprintf_r+0xba6>
1001bd86:	f019 0f01 	tst.w	r9, #1
1001bd8a:	f000 846f 	beq.w	1001c66c <_svfprintf_r+0x1484>
1001bd8e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001bd90:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
1001bd92:	441c      	add	r4, r3
1001bd94:	e9c8 2300 	strd	r2, r3, [r8]
1001bd98:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001bd9a:	9434      	str	r4, [sp, #208]	@ 0xd0
1001bd9c:	3301      	adds	r3, #1
1001bd9e:	2b07      	cmp	r3, #7
1001bda0:	9333      	str	r3, [sp, #204]	@ 0xcc
1001bda2:	f300 8675 	bgt.w	1001ca90 <_svfprintf_r+0x18a8>
1001bda6:	f108 0808 	add.w	r8, r8, #8
1001bdaa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001bdac:	ebab 060a 	sub.w	r6, fp, sl
1001bdb0:	1b5d      	subs	r5, r3, r5
1001bdb2:	42ae      	cmp	r6, r5
1001bdb4:	bfa8      	it	ge
1001bdb6:	462e      	movge	r6, r5
1001bdb8:	2e00      	cmp	r6, #0
1001bdba:	dd0d      	ble.n	1001bdd8 <_svfprintf_r+0xbf0>
1001bdbc:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001bdbe:	f8c8 a000 	str.w	sl, [r8]
1001bdc2:	3301      	adds	r3, #1
1001bdc4:	4434      	add	r4, r6
1001bdc6:	2b07      	cmp	r3, #7
1001bdc8:	f8c8 6004 	str.w	r6, [r8, #4]
1001bdcc:	9434      	str	r4, [sp, #208]	@ 0xd0
1001bdce:	9333      	str	r3, [sp, #204]	@ 0xcc
1001bdd0:	f300 8670 	bgt.w	1001cab4 <_svfprintf_r+0x18cc>
1001bdd4:	f108 0808 	add.w	r8, r8, #8
1001bdd8:	2e00      	cmp	r6, #0
1001bdda:	bfa8      	it	ge
1001bddc:	1bad      	subge	r5, r5, r6
1001bdde:	2d00      	cmp	r5, #0
1001bde0:	f77f ab7f 	ble.w	1001b4e2 <_svfprintf_r+0x2fa>
1001bde4:	2d10      	cmp	r5, #16
1001bde6:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001bde8:	f340 836b 	ble.w	1001c4c2 <_svfprintf_r+0x12da>
1001bdec:	4fad      	ldr	r7, [pc, #692]	@ (1001c0a4 <_svfprintf_r+0xebc>)
1001bdee:	f8dd b01c 	ldr.w	fp, [sp, #28]
1001bdf2:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
1001bdf6:	9715      	str	r7, [sp, #84]	@ 0x54
1001bdf8:	2610      	movs	r6, #16
1001bdfa:	e005      	b.n	1001be08 <_svfprintf_r+0xc20>
1001bdfc:	f108 0808 	add.w	r8, r8, #8
1001be00:	3d10      	subs	r5, #16
1001be02:	2d10      	cmp	r5, #16
1001be04:	f340 835f 	ble.w	1001c4c6 <_svfprintf_r+0x12de>
1001be08:	3301      	adds	r3, #1
1001be0a:	3410      	adds	r4, #16
1001be0c:	2b07      	cmp	r3, #7
1001be0e:	e9c8 7600 	strd	r7, r6, [r8]
1001be12:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001be16:	ddf1      	ble.n	1001bdfc <_svfprintf_r+0xc14>
1001be18:	aa32      	add	r2, sp, #200	@ 0xc8
1001be1a:	4651      	mov	r1, sl
1001be1c:	4658      	mov	r0, fp
1001be1e:	f005 fd47 	bl	100218b0 <__ssprint_r>
1001be22:	2800      	cmp	r0, #0
1001be24:	d17d      	bne.n	1001bf22 <_svfprintf_r+0xd3a>
1001be26:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
1001be2a:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001be2e:	e7e7      	b.n	1001be00 <_svfprintf_r+0xc18>
1001be30:	f019 0f01 	tst.w	r9, #1
1001be34:	f47f aed3 	bne.w	1001bbde <_svfprintf_r+0x9f6>
1001be38:	2301      	movs	r3, #1
1001be3a:	2e07      	cmp	r6, #7
1001be3c:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
1001be40:	f8c8 5000 	str.w	r5, [r8]
1001be44:	f8c8 3004 	str.w	r3, [r8, #4]
1001be48:	f77f aef7 	ble.w	1001bc3a <_svfprintf_r+0xa52>
1001be4c:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001be4e:	9807      	ldr	r0, [sp, #28]
1001be50:	aa32      	add	r2, sp, #200	@ 0xc8
1001be52:	f005 fd2d 	bl	100218b0 <__ssprint_r>
1001be56:	2800      	cmp	r0, #0
1001be58:	f47f ae75 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001be5c:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
1001be60:	af35      	add	r7, sp, #212	@ 0xd4
1001be62:	e6ea      	b.n	1001bc3a <_svfprintf_r+0xa52>
1001be64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001be66:	2b01      	cmp	r3, #1
1001be68:	f77f aee7 	ble.w	1001bc3a <_svfprintf_r+0xa52>
1001be6c:	2b11      	cmp	r3, #17
1001be6e:	4b8d      	ldr	r3, [pc, #564]	@ (1001c0a4 <_svfprintf_r+0xebc>)
1001be70:	9315      	str	r3, [sp, #84]	@ 0x54
1001be72:	f340 8358 	ble.w	1001c526 <_svfprintf_r+0x133e>
1001be76:	f8cd 9020 	str.w	r9, [sp, #32]
1001be7a:	f8dd a01c 	ldr.w	sl, [sp, #28]
1001be7e:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
1001be82:	2510      	movs	r5, #16
1001be84:	4699      	mov	r9, r3
1001be86:	e006      	b.n	1001be96 <_svfprintf_r+0xcae>
1001be88:	3708      	adds	r7, #8
1001be8a:	f1a8 0810 	sub.w	r8, r8, #16
1001be8e:	f1b8 0f10 	cmp.w	r8, #16
1001be92:	f340 8346 	ble.w	1001c522 <_svfprintf_r+0x133a>
1001be96:	3601      	adds	r6, #1
1001be98:	3410      	adds	r4, #16
1001be9a:	2e07      	cmp	r6, #7
1001be9c:	e9c7 9500 	strd	r9, r5, [r7]
1001bea0:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
1001bea4:	ddf0      	ble.n	1001be88 <_svfprintf_r+0xca0>
1001bea6:	aa32      	add	r2, sp, #200	@ 0xc8
1001bea8:	4659      	mov	r1, fp
1001beaa:	4650      	mov	r0, sl
1001beac:	f005 fd00 	bl	100218b0 <__ssprint_r>
1001beb0:	2800      	cmp	r0, #0
1001beb2:	f040 8298 	bne.w	1001c3e6 <_svfprintf_r+0x11fe>
1001beb6:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
1001beba:	af35      	add	r7, sp, #212	@ 0xd4
1001bebc:	e7e5      	b.n	1001be8a <_svfprintf_r+0xca2>
1001bebe:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001bec0:	9807      	ldr	r0, [sp, #28]
1001bec2:	aa32      	add	r2, sp, #200	@ 0xc8
1001bec4:	f005 fcf4 	bl	100218b0 <__ssprint_r>
1001bec8:	2800      	cmp	r0, #0
1001beca:	f47f ae3c 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001bece:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001bed0:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001bed4:	f7ff baf3 	b.w	1001b4be <_svfprintf_r+0x2d6>
1001bed8:	990d      	ldr	r1, [sp, #52]	@ 0x34
1001beda:	f851 3b04 	ldr.w	r3, [r1], #4
1001bede:	910d      	str	r1, [sp, #52]	@ 0x34
1001bee0:	f019 0110 	ands.w	r1, r9, #16
1001bee4:	f47f ac4c 	bne.w	1001b780 <_svfprintf_r+0x598>
1001bee8:	f019 0040 	ands.w	r0, r9, #64	@ 0x40
1001beec:	f000 8363 	beq.w	1001c5b6 <_svfprintf_r+0x13ce>
1001bef0:	b29b      	uxth	r3, r3
1001bef2:	460a      	mov	r2, r1
1001bef4:	e444      	b.n	1001b780 <_svfprintf_r+0x598>
1001bef6:	990d      	ldr	r1, [sp, #52]	@ 0x34
1001bef8:	f851 3b04 	ldr.w	r3, [r1], #4
1001befc:	910d      	str	r1, [sp, #52]	@ 0x34
1001befe:	f014 0110 	ands.w	r1, r4, #16
1001bf02:	d10b      	bne.n	1001bf1c <_svfprintf_r+0xd34>
1001bf04:	f014 0040 	ands.w	r0, r4, #64	@ 0x40
1001bf08:	d003      	beq.n	1001bf12 <_svfprintf_r+0xd2a>
1001bf0a:	460a      	mov	r2, r1
1001bf0c:	b29b      	uxth	r3, r3
1001bf0e:	2101      	movs	r1, #1
1001bf10:	e439      	b.n	1001b786 <_svfprintf_r+0x59e>
1001bf12:	f414 7200 	ands.w	r2, r4, #512	@ 0x200
1001bf16:	bf1c      	itt	ne
1001bf18:	b2db      	uxtbne	r3, r3
1001bf1a:	4602      	movne	r2, r0
1001bf1c:	2101      	movs	r1, #1
1001bf1e:	e432      	b.n	1001b786 <_svfprintf_r+0x59e>
1001bf20:	46bb      	mov	fp, r7
1001bf22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1001bf24:	2b00      	cmp	r3, #0
1001bf26:	f43f aa64 	beq.w	1001b3f2 <_svfprintf_r+0x20a>
1001bf2a:	990c      	ldr	r1, [sp, #48]	@ 0x30
1001bf2c:	4658      	mov	r0, fp
1001bf2e:	f7ff f847 	bl	1001afc0 <_free_r>
1001bf32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001bf34:	899b      	ldrh	r3, [r3, #12]
1001bf36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
1001bf3a:	f7ff ba5e 	b.w	1001b3fa <_svfprintf_r+0x212>
1001bf3e:	f8dd b020 	ldr.w	fp, [sp, #32]
1001bf42:	ad5e      	add	r5, sp, #376	@ 0x178
1001bf44:	e54a      	b.n	1001b9dc <_svfprintf_r+0x7f4>
1001bf46:	425b      	negs	r3, r3
1001bf48:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
1001bf4c:	464c      	mov	r4, r9
1001bf4e:	202d      	movs	r0, #45	@ 0x2d
1001bf50:	2101      	movs	r1, #1
1001bf52:	e419      	b.n	1001b788 <_svfprintf_r+0x5a0>
1001bf54:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001bf56:	9807      	ldr	r0, [sp, #28]
1001bf58:	aa32      	add	r2, sp, #200	@ 0xc8
1001bf5a:	f005 fca9 	bl	100218b0 <__ssprint_r>
1001bf5e:	2800      	cmp	r0, #0
1001bf60:	f47f adf1 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001bf64:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
1001bf68:	af35      	add	r7, sp, #212	@ 0xd4
1001bf6a:	e642      	b.n	1001bbf2 <_svfprintf_r+0xa0a>
1001bf6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001bf6e:	9807      	ldr	r0, [sp, #28]
1001bf70:	aa32      	add	r2, sp, #200	@ 0xc8
1001bf72:	f005 fc9d 	bl	100218b0 <__ssprint_r>
1001bf76:	2800      	cmp	r0, #0
1001bf78:	f47f ade5 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001bf7c:	e9dd 6433 	ldrd	r6, r4, [sp, #204]	@ 0xcc
1001bf80:	af35      	add	r7, sp, #212	@ 0xd4
1001bf82:	e642      	b.n	1001bc0a <_svfprintf_r+0xa22>
1001bf84:	f019 0f01 	tst.w	r9, #1
1001bf88:	f43f aaab 	beq.w	1001b4e2 <_svfprintf_r+0x2fa>
1001bf8c:	e4d4      	b.n	1001b938 <_svfprintf_r+0x750>
1001bf8e:	930d      	str	r3, [sp, #52]	@ 0x34
1001bf90:	7823      	ldrb	r3, [r4, #0]
1001bf92:	f7ff b980 	b.w	1001b296 <_svfprintf_r+0xae>
1001bf96:	ad5e      	add	r5, sp, #376	@ 0x178
1001bf98:	e520      	b.n	1001b9dc <_svfprintf_r+0x7f4>
1001bf9a:	f419 7f00 	tst.w	r9, #512	@ 0x200
1001bf9e:	f040 8374 	bne.w	1001c68a <_svfprintf_r+0x14a2>
1001bfa2:	17da      	asrs	r2, r3, #31
1001bfa4:	4611      	mov	r1, r2
1001bfa6:	f7ff bbb1 	b.w	1001b70c <_svfprintf_r+0x524>
1001bfaa:	f019 0f10 	tst.w	r9, #16
1001bfae:	f040 82b2 	bne.w	1001c516 <_svfprintf_r+0x132e>
1001bfb2:	f019 0f40 	tst.w	r9, #64	@ 0x40
1001bfb6:	f040 8362 	bne.w	1001c67e <_svfprintf_r+0x1496>
1001bfba:	f419 7f00 	tst.w	r9, #512	@ 0x200
1001bfbe:	f000 82aa 	beq.w	1001c516 <_svfprintf_r+0x132e>
1001bfc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001bfc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001bfc6:	681b      	ldr	r3, [r3, #0]
1001bfc8:	701a      	strb	r2, [r3, #0]
1001bfca:	e40e      	b.n	1001b7ea <_svfprintf_r+0x602>
1001bfcc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
1001bfce:	7823      	ldrb	r3, [r4, #0]
1001bfd0:	2a00      	cmp	r2, #0
1001bfd2:	f43f a960 	beq.w	1001b296 <_svfprintf_r+0xae>
1001bfd6:	7812      	ldrb	r2, [r2, #0]
1001bfd8:	2a00      	cmp	r2, #0
1001bfda:	f43f a95c 	beq.w	1001b296 <_svfprintf_r+0xae>
1001bfde:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
1001bfe2:	f7ff b958 	b.w	1001b296 <_svfprintf_r+0xae>
1001bfe6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	@ 0x58
1001bfea:	4602      	mov	r2, r0
1001bfec:	460b      	mov	r3, r1
1001bfee:	f006 fa8b 	bl	10022508 <__aeabi_dcmpun>
1001bff2:	2800      	cmp	r0, #0
1001bff4:	f040 860f 	bne.w	1001cc16 <_svfprintf_r+0x1a2e>
1001bff8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001bffa:	2b61      	cmp	r3, #97	@ 0x61
1001bffc:	f000 8506 	beq.w	1001ca0c <_svfprintf_r+0x1824>
1001c000:	2b41      	cmp	r3, #65	@ 0x41
1001c002:	f000 8582 	beq.w	1001cb0a <_svfprintf_r+0x1922>
1001c006:	9b08      	ldr	r3, [sp, #32]
1001c008:	3301      	adds	r3, #1
1001c00a:	f000 8417 	beq.w	1001c83c <_svfprintf_r+0x1654>
1001c00e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001c010:	f023 0320 	bic.w	r3, r3, #32
1001c014:	2b47      	cmp	r3, #71	@ 0x47
1001c016:	d104      	bne.n	1001c022 <_svfprintf_r+0xe3a>
1001c018:	9b08      	ldr	r3, [sp, #32]
1001c01a:	2b00      	cmp	r3, #0
1001c01c:	bf08      	it	eq
1001c01e:	2301      	moveq	r3, #1
1001c020:	9308      	str	r3, [sp, #32]
1001c022:	e9dd 1216 	ldrd	r1, r2, [sp, #88]	@ 0x58
1001c026:	f449 7080 	orr.w	r0, r9, #256	@ 0x100
1001c02a:	2a00      	cmp	r2, #0
1001c02c:	9015      	str	r0, [sp, #84]	@ 0x54
1001c02e:	f8cd 9018 	str.w	r9, [sp, #24]
1001c032:	f04f 0300 	mov.w	r3, #0
1001c036:	f2c0 8521 	blt.w	1001ca7c <_svfprintf_r+0x1894>
1001c03a:	e9cd 1224 	strd	r1, r2, [sp, #144]	@ 0x90
1001c03e:	931f      	str	r3, [sp, #124]	@ 0x7c
1001c040:	930c      	str	r3, [sp, #48]	@ 0x30
1001c042:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001c044:	3b41      	subs	r3, #65	@ 0x41
1001c046:	2b25      	cmp	r3, #37	@ 0x25
1001c048:	f200 8328 	bhi.w	1001c69c <_svfprintf_r+0x14b4>
1001c04c:	e8df f013 	tbh	[pc, r3, lsl #1]
1001c050:	03260401 	.word	0x03260401
1001c054:	03260326 	.word	0x03260326
1001c058:	03fe03fa 	.word	0x03fe03fa
1001c05c:	03260326 	.word	0x03260326
1001c060:	03260326 	.word	0x03260326
1001c064:	03260326 	.word	0x03260326
1001c068:	03260326 	.word	0x03260326
1001c06c:	03260326 	.word	0x03260326
1001c070:	03260326 	.word	0x03260326
1001c074:	03260326 	.word	0x03260326
1001c078:	03260326 	.word	0x03260326
1001c07c:	03260326 	.word	0x03260326
1001c080:	03260326 	.word	0x03260326
1001c084:	03260326 	.word	0x03260326
1001c088:	03260326 	.word	0x03260326
1001c08c:	03260326 	.word	0x03260326
1001c090:	03260326 	.word	0x03260326
1001c094:	03260326 	.word	0x03260326
1001c098:	03fe03fa 	.word	0x03fe03fa
1001c09c:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001c0a0:	f7ff bb61 	b.w	1001b766 <_svfprintf_r+0x57e>
1001c0a4:	100256c8 	.word	0x100256c8
1001c0a8:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001c0ac:	464c      	mov	r4, r9
1001c0ae:	f7ff bbc9 	b.w	1001b844 <_svfprintf_r+0x65c>
1001c0b2:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001c0b6:	4bbd      	ldr	r3, [pc, #756]	@ (1001c3ac <_svfprintf_r+0x11c4>)
1001c0b8:	9319      	str	r3, [sp, #100]	@ 0x64
1001c0ba:	f019 0220 	ands.w	r2, r9, #32
1001c0be:	f000 8108 	beq.w	1001c2d2 <_svfprintf_r+0x10ea>
1001c0c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001c0c4:	3307      	adds	r3, #7
1001c0c6:	f023 0307 	bic.w	r3, r3, #7
1001c0ca:	4619      	mov	r1, r3
1001c0cc:	685a      	ldr	r2, [r3, #4]
1001c0ce:	f851 3b08 	ldr.w	r3, [r1], #8
1001c0d2:	910d      	str	r1, [sp, #52]	@ 0x34
1001c0d4:	f019 0f01 	tst.w	r9, #1
1001c0d8:	d00a      	beq.n	1001c0f0 <_svfprintf_r+0xf08>
1001c0da:	ea53 0102 	orrs.w	r1, r3, r2
1001c0de:	d007      	beq.n	1001c0f0 <_svfprintf_r+0xf08>
1001c0e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
1001c0e2:	f88d 10a1 	strb.w	r1, [sp, #161]	@ 0xa1
1001c0e6:	2130      	movs	r1, #48	@ 0x30
1001c0e8:	f049 0902 	orr.w	r9, r9, #2
1001c0ec:	f88d 10a0 	strb.w	r1, [sp, #160]	@ 0xa0
1001c0f0:	f429 6480 	bic.w	r4, r9, #1024	@ 0x400
1001c0f4:	2102      	movs	r1, #2
1001c0f6:	f7ff bb46 	b.w	1001b786 <_svfprintf_r+0x59e>
1001c0fa:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
1001c0fe:	4bac      	ldr	r3, [pc, #688]	@ (1001c3b0 <_svfprintf_r+0x11c8>)
1001c100:	9319      	str	r3, [sp, #100]	@ 0x64
1001c102:	e7da      	b.n	1001c0ba <_svfprintf_r+0xed2>
1001c104:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001c106:	681b      	ldr	r3, [r3, #0]
1001c108:	f88d 3114 	strb.w	r3, [sp, #276]	@ 0x114
1001c10c:	2301      	movs	r3, #1
1001c10e:	9306      	str	r3, [sp, #24]
1001c110:	469b      	mov	fp, r3
1001c112:	ad45      	add	r5, sp, #276	@ 0x114
1001c114:	f7ff baae 	b.w	1001b674 <_svfprintf_r+0x48c>
1001c118:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c11a:	9807      	ldr	r0, [sp, #28]
1001c11c:	aa32      	add	r2, sp, #200	@ 0xc8
1001c11e:	f005 fbc7 	bl	100218b0 <__ssprint_r>
1001c122:	2800      	cmp	r0, #0
1001c124:	f47f ad0f 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001c128:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001c12a:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c12e:	e411      	b.n	1001b954 <_svfprintf_r+0x76c>
1001c130:	2140      	movs	r1, #64	@ 0x40
1001c132:	4658      	mov	r0, fp
1001c134:	f7f8 fd30 	bl	10014b98 <_malloc_r>
1001c138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001c13a:	6018      	str	r0, [r3, #0]
1001c13c:	6118      	str	r0, [r3, #16]
1001c13e:	2800      	cmp	r0, #0
1001c140:	f000 8614 	beq.w	1001cd6c <_svfprintf_r+0x1b84>
1001c144:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1001c146:	2340      	movs	r3, #64	@ 0x40
1001c148:	6153      	str	r3, [r2, #20]
1001c14a:	f7ff b869 	b.w	1001b220 <_svfprintf_r+0x38>
1001c14e:	9b08      	ldr	r3, [sp, #32]
1001c150:	950c      	str	r5, [sp, #48]	@ 0x30
1001c152:	2b06      	cmp	r3, #6
1001c154:	4629      	mov	r1, r5
1001c156:	bf28      	it	cs
1001c158:	2306      	movcs	r3, #6
1001c15a:	9508      	str	r5, [sp, #32]
1001c15c:	462a      	mov	r2, r5
1001c15e:	9306      	str	r3, [sp, #24]
1001c160:	4d94      	ldr	r5, [pc, #592]	@ (1001c3b4 <_svfprintf_r+0x11cc>)
1001c162:	960d      	str	r6, [sp, #52]	@ 0x34
1001c164:	469b      	mov	fp, r3
1001c166:	9114      	str	r1, [sp, #80]	@ 0x50
1001c168:	9110      	str	r1, [sp, #64]	@ 0x40
1001c16a:	9112      	str	r1, [sp, #72]	@ 0x48
1001c16c:	f7ff ba1a 	b.w	1001b5a4 <_svfprintf_r+0x3bc>
1001c170:	2e10      	cmp	r6, #16
1001c172:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001c174:	f340 85eb 	ble.w	1001cd4e <_svfprintf_r+0x1b66>
1001c178:	488f      	ldr	r0, [pc, #572]	@ (1001c3b8 <_svfprintf_r+0x11d0>)
1001c17a:	f8dd a01c 	ldr.w	sl, [sp, #28]
1001c17e:	9015      	str	r0, [sp, #84]	@ 0x54
1001c180:	4642      	mov	r2, r8
1001c182:	4621      	mov	r1, r4
1001c184:	46a8      	mov	r8, r5
1001c186:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1001c188:	2710      	movs	r7, #16
1001c18a:	4605      	mov	r5, r0
1001c18c:	e004      	b.n	1001c198 <_svfprintf_r+0xfb0>
1001c18e:	3208      	adds	r2, #8
1001c190:	3e10      	subs	r6, #16
1001c192:	2e10      	cmp	r6, #16
1001c194:	f340 8224 	ble.w	1001c5e0 <_svfprintf_r+0x13f8>
1001c198:	3301      	adds	r3, #1
1001c19a:	3110      	adds	r1, #16
1001c19c:	2b07      	cmp	r3, #7
1001c19e:	e9c2 5700 	strd	r5, r7, [r2]
1001c1a2:	e9cd 3133 	strd	r3, r1, [sp, #204]	@ 0xcc
1001c1a6:	ddf2      	ble.n	1001c18e <_svfprintf_r+0xfa6>
1001c1a8:	aa32      	add	r2, sp, #200	@ 0xc8
1001c1aa:	4621      	mov	r1, r4
1001c1ac:	4650      	mov	r0, sl
1001c1ae:	f005 fb7f 	bl	100218b0 <__ssprint_r>
1001c1b2:	2800      	cmp	r0, #0
1001c1b4:	f040 8117 	bne.w	1001c3e6 <_svfprintf_r+0x11fe>
1001c1b8:	e9dd 3133 	ldrd	r3, r1, [sp, #204]	@ 0xcc
1001c1bc:	aa35      	add	r2, sp, #212	@ 0xd4
1001c1be:	e7e7      	b.n	1001c190 <_svfprintf_r+0xfa8>
1001c1c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1001c1c2:	f8cd b020 	str.w	fp, [sp, #32]
1001c1c6:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
1001c1ca:	4642      	mov	r2, r8
1001c1cc:	4621      	mov	r1, r4
1001c1ce:	4f7a      	ldr	r7, [pc, #488]	@ (1001c3b8 <_svfprintf_r+0x11d0>)
1001c1d0:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
1001c1d4:	f8dd 8078 	ldr.w	r8, [sp, #120]	@ 0x78
1001c1d8:	f8dd b01c 	ldr.w	fp, [sp, #28]
1001c1dc:	4654      	mov	r4, sl
1001c1de:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
1001c1e2:	b383      	cbz	r3, 1001c246 <_svfprintf_r+0x105e>
1001c1e4:	f1b9 0f00 	cmp.w	r9, #0
1001c1e8:	f000 80ff 	beq.w	1001c3ea <_svfprintf_r+0x1202>
1001c1ec:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
1001c1f0:	9833      	ldr	r0, [sp, #204]	@ 0xcc
1001c1f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1001c1f4:	3001      	adds	r0, #1
1001c1f6:	4441      	add	r1, r8
1001c1f8:	2807      	cmp	r0, #7
1001c1fa:	e9c2 3800 	strd	r3, r8, [r2]
1001c1fe:	9134      	str	r1, [sp, #208]	@ 0xd0
1001c200:	9033      	str	r0, [sp, #204]	@ 0xcc
1001c202:	dc75      	bgt.n	1001c2f0 <_svfprintf_r+0x1108>
1001c204:	3208      	adds	r2, #8
1001c206:	9b08      	ldr	r3, [sp, #32]
1001c208:	f89a 0000 	ldrb.w	r0, [sl]
1001c20c:	1b1e      	subs	r6, r3, r4
1001c20e:	4286      	cmp	r6, r0
1001c210:	bfa8      	it	ge
1001c212:	4606      	movge	r6, r0
1001c214:	2e00      	cmp	r6, #0
1001c216:	dd0c      	ble.n	1001c232 <_svfprintf_r+0x104a>
1001c218:	9833      	ldr	r0, [sp, #204]	@ 0xcc
1001c21a:	3001      	adds	r0, #1
1001c21c:	4431      	add	r1, r6
1001c21e:	2807      	cmp	r0, #7
1001c220:	e9c2 4600 	strd	r4, r6, [r2]
1001c224:	9134      	str	r1, [sp, #208]	@ 0xd0
1001c226:	9033      	str	r0, [sp, #204]	@ 0xcc
1001c228:	f300 8168 	bgt.w	1001c4fc <_svfprintf_r+0x1314>
1001c22c:	f89a 0000 	ldrb.w	r0, [sl]
1001c230:	3208      	adds	r2, #8
1001c232:	2e00      	cmp	r6, #0
1001c234:	bfac      	ite	ge
1001c236:	1b85      	subge	r5, r0, r6
1001c238:	4605      	movlt	r5, r0
1001c23a:	2d00      	cmp	r5, #0
1001c23c:	dc13      	bgt.n	1001c266 <_svfprintf_r+0x107e>
1001c23e:	4404      	add	r4, r0
1001c240:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1001c242:	2b00      	cmp	r3, #0
1001c244:	d1ce      	bne.n	1001c1e4 <_svfprintf_r+0xffc>
1001c246:	f1b9 0f00 	cmp.w	r9, #0
1001c24a:	d1cf      	bne.n	1001c1ec <_svfprintf_r+0x1004>
1001c24c:	f8dd b020 	ldr.w	fp, [sp, #32]
1001c250:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
1001c254:	46a2      	mov	sl, r4
1001c256:	45da      	cmp	sl, fp
1001c258:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
1001c25c:	4690      	mov	r8, r2
1001c25e:	460c      	mov	r4, r1
1001c260:	bf28      	it	cs
1001c262:	46da      	movcs	sl, fp
1001c264:	e58b      	b.n	1001bd7e <_svfprintf_r+0xb96>
1001c266:	2d10      	cmp	r5, #16
1001c268:	9833      	ldr	r0, [sp, #204]	@ 0xcc
1001c26a:	f340 853e 	ble.w	1001ccea <_svfprintf_r+0x1b02>
1001c26e:	4623      	mov	r3, r4
1001c270:	463e      	mov	r6, r7
1001c272:	462c      	mov	r4, r5
1001c274:	461d      	mov	r5, r3
1001c276:	e004      	b.n	1001c282 <_svfprintf_r+0x109a>
1001c278:	3c10      	subs	r4, #16
1001c27a:	2c10      	cmp	r4, #16
1001c27c:	f102 0208 	add.w	r2, r2, #8
1001c280:	dd16      	ble.n	1001c2b0 <_svfprintf_r+0x10c8>
1001c282:	3001      	adds	r0, #1
1001c284:	3110      	adds	r1, #16
1001c286:	2310      	movs	r3, #16
1001c288:	2807      	cmp	r0, #7
1001c28a:	e9cd 0133 	strd	r0, r1, [sp, #204]	@ 0xcc
1001c28e:	6017      	str	r7, [r2, #0]
1001c290:	6053      	str	r3, [r2, #4]
1001c292:	ddf1      	ble.n	1001c278 <_svfprintf_r+0x1090>
1001c294:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c296:	aa32      	add	r2, sp, #200	@ 0xc8
1001c298:	4658      	mov	r0, fp
1001c29a:	f005 fb09 	bl	100218b0 <__ssprint_r>
1001c29e:	2800      	cmp	r0, #0
1001c2a0:	f47f ae3f 	bne.w	1001bf22 <_svfprintf_r+0xd3a>
1001c2a4:	3c10      	subs	r4, #16
1001c2a6:	2c10      	cmp	r4, #16
1001c2a8:	e9dd 0133 	ldrd	r0, r1, [sp, #204]	@ 0xcc
1001c2ac:	aa35      	add	r2, sp, #212	@ 0xd4
1001c2ae:	dce8      	bgt.n	1001c282 <_svfprintf_r+0x109a>
1001c2b0:	462b      	mov	r3, r5
1001c2b2:	4625      	mov	r5, r4
1001c2b4:	461c      	mov	r4, r3
1001c2b6:	3001      	adds	r0, #1
1001c2b8:	4429      	add	r1, r5
1001c2ba:	2807      	cmp	r0, #7
1001c2bc:	e9cd 0133 	strd	r0, r1, [sp, #204]	@ 0xcc
1001c2c0:	6016      	str	r6, [r2, #0]
1001c2c2:	6055      	str	r5, [r2, #4]
1001c2c4:	f300 837f 	bgt.w	1001c9c6 <_svfprintf_r+0x17de>
1001c2c8:	f89a 0000 	ldrb.w	r0, [sl]
1001c2cc:	3208      	adds	r2, #8
1001c2ce:	4404      	add	r4, r0
1001c2d0:	e7b6      	b.n	1001c240 <_svfprintf_r+0x1058>
1001c2d2:	990d      	ldr	r1, [sp, #52]	@ 0x34
1001c2d4:	f851 3b04 	ldr.w	r3, [r1], #4
1001c2d8:	910d      	str	r1, [sp, #52]	@ 0x34
1001c2da:	f019 0110 	ands.w	r1, r9, #16
1001c2de:	f47f aef9 	bne.w	1001c0d4 <_svfprintf_r+0xeec>
1001c2e2:	f019 0040 	ands.w	r0, r9, #64	@ 0x40
1001c2e6:	f000 8160 	beq.w	1001c5aa <_svfprintf_r+0x13c2>
1001c2ea:	b29b      	uxth	r3, r3
1001c2ec:	460a      	mov	r2, r1
1001c2ee:	e6f1      	b.n	1001c0d4 <_svfprintf_r+0xeec>
1001c2f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c2f2:	aa32      	add	r2, sp, #200	@ 0xc8
1001c2f4:	4658      	mov	r0, fp
1001c2f6:	f005 fadb 	bl	100218b0 <__ssprint_r>
1001c2fa:	2800      	cmp	r0, #0
1001c2fc:	f47f ae11 	bne.w	1001bf22 <_svfprintf_r+0xd3a>
1001c300:	9934      	ldr	r1, [sp, #208]	@ 0xd0
1001c302:	aa35      	add	r2, sp, #212	@ 0xd4
1001c304:	e77f      	b.n	1001c206 <_svfprintf_r+0x101e>
1001c306:	f404 6b80 	and.w	fp, r4, #1024	@ 0x400
1001c30a:	2100      	movs	r1, #0
1001c30c:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
1001c310:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 1001c3bc <_svfprintf_r+0x11d4>
1001c314:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
1001c318:	9406      	str	r4, [sp, #24]
1001c31a:	ad5e      	add	r5, sp, #376	@ 0x178
1001c31c:	f04f 3acc 	mov.w	sl, #3435973836	@ 0xcccccccc
1001c320:	2705      	movs	r7, #5
1001c322:	468c      	mov	ip, r1
1001c324:	465e      	mov	r6, fp
1001c326:	e005      	b.n	1001c334 <_svfprintf_r+0x114c>
1001c328:	2b0a      	cmp	r3, #10
1001c32a:	f172 0200 	sbcs.w	r2, r2, #0
1001c32e:	d333      	bcc.n	1001c398 <_svfprintf_r+0x11b0>
1001c330:	465b      	mov	r3, fp
1001c332:	4622      	mov	r2, r4
1001c334:	1899      	adds	r1, r3, r2
1001c336:	f141 0100 	adc.w	r1, r1, #0
1001c33a:	fba9 0401 	umull	r0, r4, r9, r1
1001c33e:	f024 0003 	bic.w	r0, r4, #3
1001c342:	eb00 0094 	add.w	r0, r0, r4, lsr #2
1001c346:	1a09      	subs	r1, r1, r0
1001c348:	1a58      	subs	r0, r3, r1
1001c34a:	f162 0e00 	sbc.w	lr, r2, #0
1001c34e:	fb0a f400 	mul.w	r4, sl, r0
1001c352:	fba0 b009 	umull	fp, r0, r0, r9
1001c356:	fb09 440e 	mla	r4, r9, lr, r4
1001c35a:	f00b 0e01 	and.w	lr, fp, #1
1001c35e:	4404      	add	r4, r0
1001c360:	fbae 0e07 	umull	r0, lr, lr, r7
1001c364:	1840      	adds	r0, r0, r1
1001c366:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
1001c36a:	3030      	adds	r0, #48	@ 0x30
1001c36c:	f805 0c01 	strb.w	r0, [r5, #-1]
1001c370:	ea4b 7bc4 	orr.w	fp, fp, r4, lsl #31
1001c374:	f10c 0c01 	add.w	ip, ip, #1
1001c378:	3d01      	subs	r5, #1
1001c37a:	0864      	lsrs	r4, r4, #1
1001c37c:	2e00      	cmp	r6, #0
1001c37e:	d0d3      	beq.n	1001c328 <_svfprintf_r+0x1140>
1001c380:	f898 1000 	ldrb.w	r1, [r8]
1001c384:	458c      	cmp	ip, r1
1001c386:	d1cf      	bne.n	1001c328 <_svfprintf_r+0x1140>
1001c388:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
1001c38c:	d0cc      	beq.n	1001c328 <_svfprintf_r+0x1140>
1001c38e:	2b0a      	cmp	r3, #10
1001c390:	f172 0200 	sbcs.w	r2, r2, #0
1001c394:	f080 8137 	bcs.w	1001c606 <_svfprintf_r+0x141e>
1001c398:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
1001c39c:	9c06      	ldr	r4, [sp, #24]
1001c39e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
1001c3a2:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
1001c3a6:	f7ff bb15 	b.w	1001b9d4 <_svfprintf_r+0x7ec>
1001c3aa:	bf00      	nop
1001c3ac:	10025498 	.word	0x10025498
1001c3b0:	10025484 	.word	0x10025484
1001c3b4:	100254ac 	.word	0x100254ac
1001c3b8:	100256c8 	.word	0x100256c8
1001c3bc:	cccccccd 	.word	0xcccccccd
1001c3c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c3c2:	9807      	ldr	r0, [sp, #28]
1001c3c4:	9315      	str	r3, [sp, #84]	@ 0x54
1001c3c6:	aa32      	add	r2, sp, #200	@ 0xc8
1001c3c8:	f005 fa72 	bl	100218b0 <__ssprint_r>
1001c3cc:	2800      	cmp	r0, #0
1001c3ce:	f47f abba 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001c3d2:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001c3d6:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001c3d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1001c3da:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c3de:	f7ff b841 	b.w	1001b464 <_svfprintf_r+0x27c>
1001c3e2:	46a3      	mov	fp, r4
1001c3e4:	e59d      	b.n	1001bf22 <_svfprintf_r+0xd3a>
1001c3e6:	46d3      	mov	fp, sl
1001c3e8:	e59b      	b.n	1001bf22 <_svfprintf_r+0xd3a>
1001c3ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1001c3ec:	3b01      	subs	r3, #1
1001c3ee:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
1001c3f2:	9310      	str	r3, [sp, #64]	@ 0x40
1001c3f4:	e6fc      	b.n	1001c1f0 <_svfprintf_r+0x1008>
1001c3f6:	2901      	cmp	r1, #1
1001c3f8:	464c      	mov	r4, r9
1001c3fa:	f47f aadb 	bne.w	1001b9b4 <_svfprintf_r+0x7cc>
1001c3fe:	e42f      	b.n	1001bc60 <_svfprintf_r+0xa78>
1001c400:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c402:	9807      	ldr	r0, [sp, #28]
1001c404:	aa32      	add	r2, sp, #200	@ 0xc8
1001c406:	f005 fa53 	bl	100218b0 <__ssprint_r>
1001c40a:	2800      	cmp	r0, #0
1001c40c:	f47f ab9b 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001c410:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001c412:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c416:	f7ff ba8a 	b.w	1001b92e <_svfprintf_r+0x746>
1001c41a:	af30      	add	r7, sp, #192	@ 0xc0
1001c41c:	2208      	movs	r2, #8
1001c41e:	2100      	movs	r1, #0
1001c420:	4638      	mov	r0, r7
1001c422:	952b      	str	r5, [sp, #172]	@ 0xac
1001c424:	f7fd f8ca 	bl	100195bc <memset>
1001c428:	f8dd a020 	ldr.w	sl, [sp, #32]
1001c42c:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
1001c430:	f000 80c8 	beq.w	1001c5c4 <_svfprintf_r+0x13dc>
1001c434:	2400      	movs	r4, #0
1001c436:	f8cd 9018 	str.w	r9, [sp, #24]
1001c43a:	46a3      	mov	fp, r4
1001c43c:	f8dd 901c 	ldr.w	r9, [sp, #28]
1001c440:	e00c      	b.n	1001c45c <_svfprintf_r+0x1274>
1001c442:	a945      	add	r1, sp, #276	@ 0x114
1001c444:	4648      	mov	r0, r9
1001c446:	f7fd fd27 	bl	10019e98 <_wcrtomb_r>
1001c44a:	1c41      	adds	r1, r0, #1
1001c44c:	4458      	add	r0, fp
1001c44e:	f000 838f 	beq.w	1001cb70 <_svfprintf_r+0x1988>
1001c452:	4550      	cmp	r0, sl
1001c454:	dc08      	bgt.n	1001c468 <_svfprintf_r+0x1280>
1001c456:	f000 8442 	beq.w	1001ccde <_svfprintf_r+0x1af6>
1001c45a:	4683      	mov	fp, r0
1001c45c:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
1001c45e:	5912      	ldr	r2, [r2, r4]
1001c460:	463b      	mov	r3, r7
1001c462:	3404      	adds	r4, #4
1001c464:	2a00      	cmp	r2, #0
1001c466:	d1ec      	bne.n	1001c442 <_svfprintf_r+0x125a>
1001c468:	f8dd 9018 	ldr.w	r9, [sp, #24]
1001c46c:	f1bb 0f00 	cmp.w	fp, #0
1001c470:	f000 80dd 	beq.w	1001c62e <_svfprintf_r+0x1446>
1001c474:	f1bb 0f63 	cmp.w	fp, #99	@ 0x63
1001c478:	f300 81ba 	bgt.w	1001c7f0 <_svfprintf_r+0x1608>
1001c47c:	2300      	movs	r3, #0
1001c47e:	930c      	str	r3, [sp, #48]	@ 0x30
1001c480:	ad45      	add	r5, sp, #276	@ 0x114
1001c482:	2208      	movs	r2, #8
1001c484:	2100      	movs	r1, #0
1001c486:	4638      	mov	r0, r7
1001c488:	f7fd f898 	bl	100195bc <memset>
1001c48c:	9807      	ldr	r0, [sp, #28]
1001c48e:	9700      	str	r7, [sp, #0]
1001c490:	465b      	mov	r3, fp
1001c492:	aa2b      	add	r2, sp, #172	@ 0xac
1001c494:	4629      	mov	r1, r5
1001c496:	f7fd fd25 	bl	10019ee4 <_wcsrtombs_r>
1001c49a:	4583      	cmp	fp, r0
1001c49c:	f040 845d 	bne.w	1001cd5a <_svfprintf_r+0x1b72>
1001c4a0:	2300      	movs	r3, #0
1001c4a2:	f805 300b 	strb.w	r3, [r5, fp]
1001c4a6:	ea2b 71eb 	bic.w	r1, fp, fp, asr #31
1001c4aa:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001c4ae:	960d      	str	r6, [sp, #52]	@ 0x34
1001c4b0:	9308      	str	r3, [sp, #32]
1001c4b2:	9106      	str	r1, [sp, #24]
1001c4b4:	9314      	str	r3, [sp, #80]	@ 0x50
1001c4b6:	9310      	str	r3, [sp, #64]	@ 0x40
1001c4b8:	9312      	str	r3, [sp, #72]	@ 0x48
1001c4ba:	f7ff b873 	b.w	1001b5a4 <_svfprintf_r+0x3bc>
1001c4be:	46cb      	mov	fp, r9
1001c4c0:	e52f      	b.n	1001bf22 <_svfprintf_r+0xd3a>
1001c4c2:	4a75      	ldr	r2, [pc, #468]	@ (1001c698 <_svfprintf_r+0x14b0>)
1001c4c4:	9215      	str	r2, [sp, #84]	@ 0x54
1001c4c6:	3301      	adds	r3, #1
1001c4c8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1001c4ca:	f8c8 2000 	str.w	r2, [r8]
1001c4ce:	442c      	add	r4, r5
1001c4d0:	2b07      	cmp	r3, #7
1001c4d2:	f8c8 5004 	str.w	r5, [r8, #4]
1001c4d6:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001c4da:	f77f a800 	ble.w	1001b4de <_svfprintf_r+0x2f6>
1001c4de:	f7ff bb68 	b.w	1001bbb2 <_svfprintf_r+0x9ca>
1001c4e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c4e4:	9807      	ldr	r0, [sp, #28]
1001c4e6:	aa32      	add	r2, sp, #200	@ 0xc8
1001c4e8:	f005 f9e2 	bl	100218b0 <__ssprint_r>
1001c4ec:	2800      	cmp	r0, #0
1001c4ee:	f47f ab2a 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001c4f2:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001c4f4:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c4f8:	f7fe bfdb 	b.w	1001b4b2 <_svfprintf_r+0x2ca>
1001c4fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c4fe:	aa32      	add	r2, sp, #200	@ 0xc8
1001c500:	4658      	mov	r0, fp
1001c502:	f005 f9d5 	bl	100218b0 <__ssprint_r>
1001c506:	2800      	cmp	r0, #0
1001c508:	f47f ad0b 	bne.w	1001bf22 <_svfprintf_r+0xd3a>
1001c50c:	f89a 0000 	ldrb.w	r0, [sl]
1001c510:	9934      	ldr	r1, [sp, #208]	@ 0xd0
1001c512:	aa35      	add	r2, sp, #212	@ 0xd4
1001c514:	e68d      	b.n	1001c232 <_svfprintf_r+0x104a>
1001c516:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001c518:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001c51a:	681b      	ldr	r3, [r3, #0]
1001c51c:	601a      	str	r2, [r3, #0]
1001c51e:	f7ff b964 	b.w	1001b7ea <_svfprintf_r+0x602>
1001c522:	f8dd 9020 	ldr.w	r9, [sp, #32]
1001c526:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1001c528:	603b      	str	r3, [r7, #0]
1001c52a:	3601      	adds	r6, #1
1001c52c:	4444      	add	r4, r8
1001c52e:	2e07      	cmp	r6, #7
1001c530:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
1001c534:	f8c7 8004 	str.w	r8, [r7, #4]
1001c538:	f77f ab7e 	ble.w	1001bc38 <_svfprintf_r+0xa50>
1001c53c:	e486      	b.n	1001be4c <_svfprintf_r+0xc64>
1001c53e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001c540:	991a      	ldr	r1, [sp, #104]	@ 0x68
1001c542:	441c      	add	r4, r3
1001c544:	e9c8 1300 	strd	r1, r3, [r8]
1001c548:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
1001c54a:	9434      	str	r4, [sp, #208]	@ 0xd0
1001c54c:	3301      	adds	r3, #1
1001c54e:	2b07      	cmp	r3, #7
1001c550:	9333      	str	r3, [sp, #204]	@ 0xcc
1001c552:	f300 8165 	bgt.w	1001c820 <_svfprintf_r+0x1638>
1001c556:	f108 0808 	add.w	r8, r8, #8
1001c55a:	2a00      	cmp	r2, #0
1001c55c:	f6bf ab1d 	bge.w	1001bb9a <_svfprintf_r+0x9b2>
1001c560:	4256      	negs	r6, r2
1001c562:	3210      	adds	r2, #16
1001c564:	4a4c      	ldr	r2, [pc, #304]	@ (1001c698 <_svfprintf_r+0x14b0>)
1001c566:	9215      	str	r2, [sp, #84]	@ 0x54
1001c568:	f280 82e8 	bge.w	1001cb3c <_svfprintf_r+0x1954>
1001c56c:	46aa      	mov	sl, r5
1001c56e:	2710      	movs	r7, #16
1001c570:	4615      	mov	r5, r2
1001c572:	e005      	b.n	1001c580 <_svfprintf_r+0x1398>
1001c574:	f108 0808 	add.w	r8, r8, #8
1001c578:	3e10      	subs	r6, #16
1001c57a:	2e10      	cmp	r6, #16
1001c57c:	f340 82dd 	ble.w	1001cb3a <_svfprintf_r+0x1952>
1001c580:	3301      	adds	r3, #1
1001c582:	3410      	adds	r4, #16
1001c584:	2b07      	cmp	r3, #7
1001c586:	e9c8 5700 	strd	r5, r7, [r8]
1001c58a:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001c58e:	ddf1      	ble.n	1001c574 <_svfprintf_r+0x138c>
1001c590:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c592:	9807      	ldr	r0, [sp, #28]
1001c594:	aa32      	add	r2, sp, #200	@ 0xc8
1001c596:	f005 f98b 	bl	100218b0 <__ssprint_r>
1001c59a:	2800      	cmp	r0, #0
1001c59c:	f47f aad3 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001c5a0:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
1001c5a4:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c5a8:	e7e6      	b.n	1001c578 <_svfprintf_r+0x1390>
1001c5aa:	f419 7200 	ands.w	r2, r9, #512	@ 0x200
1001c5ae:	bf1c      	itt	ne
1001c5b0:	b2db      	uxtbne	r3, r3
1001c5b2:	4602      	movne	r2, r0
1001c5b4:	e58e      	b.n	1001c0d4 <_svfprintf_r+0xeec>
1001c5b6:	f419 7200 	ands.w	r2, r9, #512	@ 0x200
1001c5ba:	bf1c      	itt	ne
1001c5bc:	b2db      	uxtbne	r3, r3
1001c5be:	4602      	movne	r2, r0
1001c5c0:	f7ff b8de 	b.w	1001b780 <_svfprintf_r+0x598>
1001c5c4:	2300      	movs	r3, #0
1001c5c6:	9807      	ldr	r0, [sp, #28]
1001c5c8:	9700      	str	r7, [sp, #0]
1001c5ca:	aa2b      	add	r2, sp, #172	@ 0xac
1001c5cc:	4619      	mov	r1, r3
1001c5ce:	f7fd fc89 	bl	10019ee4 <_wcsrtombs_r>
1001c5d2:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
1001c5d6:	4683      	mov	fp, r0
1001c5d8:	f000 82ca 	beq.w	1001cb70 <_svfprintf_r+0x1988>
1001c5dc:	952b      	str	r5, [sp, #172]	@ 0xac
1001c5de:	e745      	b.n	1001c46c <_svfprintf_r+0x1284>
1001c5e0:	4645      	mov	r5, r8
1001c5e2:	460c      	mov	r4, r1
1001c5e4:	4690      	mov	r8, r2
1001c5e6:	3301      	adds	r3, #1
1001c5e8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1001c5ea:	f8c8 2000 	str.w	r2, [r8]
1001c5ee:	4434      	add	r4, r6
1001c5f0:	2b07      	cmp	r3, #7
1001c5f2:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001c5f6:	f8c8 6004 	str.w	r6, [r8, #4]
1001c5fa:	f300 8104 	bgt.w	1001c806 <_svfprintf_r+0x161e>
1001c5fe:	f108 0808 	add.w	r8, r8, #8
1001c602:	f7ff bbb5 	b.w	1001bd70 <_svfprintf_r+0xb88>
1001c606:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
1001c608:	991d      	ldr	r1, [sp, #116]	@ 0x74
1001c60a:	1aed      	subs	r5, r5, r3
1001c60c:	461a      	mov	r2, r3
1001c60e:	4628      	mov	r0, r5
1001c610:	f7fd f826 	bl	10019660 <strncpy>
1001c614:	f898 3001 	ldrb.w	r3, [r8, #1]
1001c618:	b10b      	cbz	r3, 1001c61e <_svfprintf_r+0x1436>
1001c61a:	f108 0801 	add.w	r8, r8, #1
1001c61e:	f04f 0c00 	mov.w	ip, #0
1001c622:	e685      	b.n	1001c330 <_svfprintf_r+0x1148>
1001c624:	222d      	movs	r2, #45	@ 0x2d
1001c626:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
1001c62a:	f7fe bfaa 	b.w	1001b582 <_svfprintf_r+0x39a>
1001c62e:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001c632:	960d      	str	r6, [sp, #52]	@ 0x34
1001c634:	f8cd b018 	str.w	fp, [sp, #24]
1001c638:	f8cd b020 	str.w	fp, [sp, #32]
1001c63c:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
1001c640:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
1001c644:	f8cd b048 	str.w	fp, [sp, #72]	@ 0x48
1001c648:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
1001c64c:	f7fe bfaa 	b.w	1001b5a4 <_svfprintf_r+0x3bc>
1001c650:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c652:	9807      	ldr	r0, [sp, #28]
1001c654:	aa32      	add	r2, sp, #200	@ 0xc8
1001c656:	f005 f92b 	bl	100218b0 <__ssprint_r>
1001c65a:	2800      	cmp	r0, #0
1001c65c:	f47f aa73 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001c660:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
1001c662:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001c664:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c668:	f7ff ba80 	b.w	1001bb6c <_svfprintf_r+0x984>
1001c66c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001c66e:	ebab 060a 	sub.w	r6, fp, sl
1001c672:	1b5d      	subs	r5, r3, r5
1001c674:	42ae      	cmp	r6, r5
1001c676:	bfa8      	it	ge
1001c678:	462e      	movge	r6, r5
1001c67a:	f7ff bbad 	b.w	1001bdd8 <_svfprintf_r+0xbf0>
1001c67e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1001c680:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001c682:	681b      	ldr	r3, [r3, #0]
1001c684:	801a      	strh	r2, [r3, #0]
1001c686:	f7ff b8b0 	b.w	1001b7ea <_svfprintf_r+0x602>
1001c68a:	f343 12c0 	sbfx	r2, r3, #7, #1
1001c68e:	4611      	mov	r1, r2
1001c690:	b25b      	sxtb	r3, r3
1001c692:	f7ff b83b 	b.w	1001b70c <_svfprintf_r+0x524>
1001c696:	bf00      	nop
1001c698:	100256c8 	.word	0x100256c8
1001c69c:	9e08      	ldr	r6, [sp, #32]
1001c69e:	2302      	movs	r3, #2
1001c6a0:	e9cd 3600 	strd	r3, r6, [sp]
1001c6a4:	ab30      	add	r3, sp, #192	@ 0xc0
1001c6a6:	9304      	str	r3, [sp, #16]
1001c6a8:	ab2b      	add	r3, sp, #172	@ 0xac
1001c6aa:	9303      	str	r3, [sp, #12]
1001c6ac:	ab29      	add	r3, sp, #164	@ 0xa4
1001c6ae:	9302      	str	r3, [sp, #8]
1001c6b0:	9807      	ldr	r0, [sp, #28]
1001c6b2:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
1001c6b6:	f7fd fd03 	bl	1001a0c0 <_dtoa_r>
1001c6ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001c6bc:	2b67      	cmp	r3, #103	@ 0x67
1001c6be:	4605      	mov	r5, r0
1001c6c0:	f000 813b 	beq.w	1001c93a <_svfprintf_r+0x1752>
1001c6c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001c6c6:	2b47      	cmp	r3, #71	@ 0x47
1001c6c8:	f000 8137 	beq.w	1001c93a <_svfprintf_r+0x1752>
1001c6cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001c6ce:	f023 0720 	bic.w	r7, r3, #32
1001c6d2:	2f46      	cmp	r7, #70	@ 0x46
1001c6d4:	eb00 0406 	add.w	r4, r0, r6
1001c6d8:	d105      	bne.n	1001c6e6 <_svfprintf_r+0x14fe>
1001c6da:	7803      	ldrb	r3, [r0, #0]
1001c6dc:	2b30      	cmp	r3, #48	@ 0x30
1001c6de:	f000 82f1 	beq.w	1001ccc4 <_svfprintf_r+0x1adc>
1001c6e2:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
1001c6e4:	4434      	add	r4, r6
1001c6e6:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
1001c6ea:	2200      	movs	r2, #0
1001c6ec:	2300      	movs	r3, #0
1001c6ee:	f005 fed9 	bl	100224a4 <__aeabi_dcmpeq>
1001c6f2:	2800      	cmp	r0, #0
1001c6f4:	f000 813f 	beq.w	1001c976 <_svfprintf_r+0x178e>
1001c6f8:	4623      	mov	r3, r4
1001c6fa:	1b5b      	subs	r3, r3, r5
1001c6fc:	9313      	str	r3, [sp, #76]	@ 0x4c
1001c6fe:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
1001c700:	9212      	str	r2, [sp, #72]	@ 0x48
1001c702:	2f47      	cmp	r7, #71	@ 0x47
1001c704:	f000 8121 	beq.w	1001c94a <_svfprintf_r+0x1762>
1001c708:	2f46      	cmp	r7, #70	@ 0x46
1001c70a:	f000 81e3 	beq.w	1001cad4 <_svfprintf_r+0x18ec>
1001c70e:	990e      	ldr	r1, [sp, #56]	@ 0x38
1001c710:	1e53      	subs	r3, r2, #1
1001c712:	2961      	cmp	r1, #97	@ 0x61
1001c714:	9329      	str	r3, [sp, #164]	@ 0xa4
1001c716:	f000 8318 	beq.w	1001cd4a <_svfprintf_r+0x1b62>
1001c71a:	2941      	cmp	r1, #65	@ 0x41
1001c71c:	f040 8120 	bne.w	1001c960 <_svfprintf_r+0x1778>
1001c720:	2150      	movs	r1, #80	@ 0x50
1001c722:	2001      	movs	r0, #1
1001c724:	2b00      	cmp	r3, #0
1001c726:	bfb6      	itet	lt
1001c728:	f1c2 0301 	rsblt	r3, r2, #1
1001c72c:	222b      	movge	r2, #43	@ 0x2b
1001c72e:	222d      	movlt	r2, #45	@ 0x2d
1001c730:	2b09      	cmp	r3, #9
1001c732:	f88d 10b0 	strb.w	r1, [sp, #176]	@ 0xb0
1001c736:	f88d 20b1 	strb.w	r2, [sp, #177]	@ 0xb1
1001c73a:	f340 8227 	ble.w	1001cb8c <_svfprintf_r+0x19a4>
1001c73e:	f10d 04c7 	add.w	r4, sp, #199	@ 0xc7
1001c742:	4eae      	ldr	r6, [pc, #696]	@ (1001c9fc <_svfprintf_r+0x1814>)
1001c744:	4622      	mov	r2, r4
1001c746:	4610      	mov	r0, r2
1001c748:	fba6 1203 	umull	r1, r2, r6, r3
1001c74c:	08d2      	lsrs	r2, r2, #3
1001c74e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1001c752:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
1001c756:	3130      	adds	r1, #48	@ 0x30
1001c758:	f800 1c01 	strb.w	r1, [r0, #-1]
1001c75c:	4619      	mov	r1, r3
1001c75e:	2963      	cmp	r1, #99	@ 0x63
1001c760:	4613      	mov	r3, r2
1001c762:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
1001c766:	dcee      	bgt.n	1001c746 <_svfprintf_r+0x155e>
1001c768:	3330      	adds	r3, #48	@ 0x30
1001c76a:	f802 3c01 	strb.w	r3, [r2, #-1]
1001c76e:	1e83      	subs	r3, r0, #2
1001c770:	42a3      	cmp	r3, r4
1001c772:	f080 82ef 	bcs.w	1001cd54 <_svfprintf_r+0x1b6c>
1001c776:	f10d 02b1 	add.w	r2, sp, #177	@ 0xb1
1001c77a:	f813 1b01 	ldrb.w	r1, [r3], #1
1001c77e:	f802 1f01 	strb.w	r1, [r2, #1]!
1001c782:	42a3      	cmp	r3, r4
1001c784:	d1f9      	bne.n	1001c77a <_svfprintf_r+0x1592>
1001c786:	ab5e      	add	r3, sp, #376	@ 0x178
1001c788:	1a18      	subs	r0, r3, r0
1001c78a:	f1a0 03ad 	sub.w	r3, r0, #173	@ 0xad
1001c78e:	931c      	str	r3, [sp, #112]	@ 0x70
1001c790:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001c792:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
1001c794:	2b01      	cmp	r3, #1
1001c796:	eb03 0b02 	add.w	fp, r3, r2
1001c79a:	f340 822a 	ble.w	1001cbf2 <_svfprintf_r+0x1a0a>
1001c79e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001c7a0:	449b      	add	fp, r3
1001c7a2:	9b06      	ldr	r3, [sp, #24]
1001c7a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
1001c7a8:	f443 7980 	orr.w	r9, r3, #256	@ 0x100
1001c7ac:	ea2b 72eb 	bic.w	r2, fp, fp, asr #31
1001c7b0:	2300      	movs	r3, #0
1001c7b2:	9314      	str	r3, [sp, #80]	@ 0x50
1001c7b4:	9206      	str	r2, [sp, #24]
1001c7b6:	9310      	str	r3, [sp, #64]	@ 0x40
1001c7b8:	9312      	str	r3, [sp, #72]	@ 0x48
1001c7ba:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
1001c7bc:	2b00      	cmp	r3, #0
1001c7be:	f040 80d3 	bne.w	1001c968 <_svfprintf_r+0x1780>
1001c7c2:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001c7c6:	9308      	str	r3, [sp, #32]
1001c7c8:	f7fe beec 	b.w	1001b5a4 <_svfprintf_r+0x3bc>
1001c7cc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1001c7ce:	aa32      	add	r2, sp, #200	@ 0xc8
1001c7d0:	4621      	mov	r1, r4
1001c7d2:	4658      	mov	r0, fp
1001c7d4:	f005 f86c 	bl	100218b0 <__ssprint_r>
1001c7d8:	89a3      	ldrh	r3, [r4, #12]
1001c7da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
1001c7de:	f7fe be0c 	b.w	1001b3fa <_svfprintf_r+0x212>
1001c7e2:	4628      	mov	r0, r5
1001c7e4:	960d      	str	r6, [sp, #52]	@ 0x34
1001c7e6:	f7fd facb 	bl	10019d80 <strlen>
1001c7ea:	4683      	mov	fp, r0
1001c7ec:	f7fe bf71 	b.w	1001b6d2 <_svfprintf_r+0x4ea>
1001c7f0:	9807      	ldr	r0, [sp, #28]
1001c7f2:	f10b 0101 	add.w	r1, fp, #1
1001c7f6:	f7f8 f9cf 	bl	10014b98 <_malloc_r>
1001c7fa:	4605      	mov	r5, r0
1001c7fc:	2800      	cmp	r0, #0
1001c7fe:	f000 81b7 	beq.w	1001cb70 <_svfprintf_r+0x1988>
1001c802:	900c      	str	r0, [sp, #48]	@ 0x30
1001c804:	e63d      	b.n	1001c482 <_svfprintf_r+0x129a>
1001c806:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c808:	9807      	ldr	r0, [sp, #28]
1001c80a:	aa32      	add	r2, sp, #200	@ 0xc8
1001c80c:	f005 f850 	bl	100218b0 <__ssprint_r>
1001c810:	2800      	cmp	r0, #0
1001c812:	f47f a998 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001c816:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001c818:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c81c:	f7ff baa8 	b.w	1001bd70 <_svfprintf_r+0xb88>
1001c820:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c822:	9807      	ldr	r0, [sp, #28]
1001c824:	aa32      	add	r2, sp, #200	@ 0xc8
1001c826:	f005 f843 	bl	100218b0 <__ssprint_r>
1001c82a:	2800      	cmp	r0, #0
1001c82c:	f47f a98b 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001c830:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
1001c834:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
1001c836:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c83a:	e68e      	b.n	1001c55a <_svfprintf_r+0x1372>
1001c83c:	2306      	movs	r3, #6
1001c83e:	9308      	str	r3, [sp, #32]
1001c840:	f7ff bbef 	b.w	1001c022 <_svfprintf_r+0xe3a>
1001c844:	9b08      	ldr	r3, [sp, #32]
1001c846:	1c5e      	adds	r6, r3, #1
1001c848:	2302      	movs	r3, #2
1001c84a:	e729      	b.n	1001c6a0 <_svfprintf_r+0x14b8>
1001c84c:	9e08      	ldr	r6, [sp, #32]
1001c84e:	2303      	movs	r3, #3
1001c850:	e726      	b.n	1001c6a0 <_svfprintf_r+0x14b8>
1001c852:	aa29      	add	r2, sp, #164	@ 0xa4
1001c854:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
1001c858:	f7fd fb52 	bl	10019f00 <frexp>
1001c85c:	2200      	movs	r2, #0
1001c85e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
1001c862:	f005 fbb7 	bl	10021fd4 <__aeabi_dmul>
1001c866:	4602      	mov	r2, r0
1001c868:	460b      	mov	r3, r1
1001c86a:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
1001c86e:	2200      	movs	r2, #0
1001c870:	2300      	movs	r3, #0
1001c872:	f005 fe17 	bl	100224a4 <__aeabi_dcmpeq>
1001c876:	2800      	cmp	r0, #0
1001c878:	f040 81c0 	bne.w	1001cbfc <_svfprintf_r+0x1a14>
1001c87c:	4b60      	ldr	r3, [pc, #384]	@ (1001ca00 <_svfprintf_r+0x1818>)
1001c87e:	9312      	str	r3, [sp, #72]	@ 0x48
1001c880:	9b08      	ldr	r3, [sp, #32]
1001c882:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
1001c886:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
1001c88a:	462e      	mov	r6, r5
1001c88c:	9514      	str	r5, [sp, #80]	@ 0x50
1001c88e:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
1001c892:	464d      	mov	r5, r9
1001c894:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	@ 0x40
1001c898:	e005      	b.n	1001c8a6 <_svfprintf_r+0x16be>
1001c89a:	2200      	movs	r2, #0
1001c89c:	2300      	movs	r3, #0
1001c89e:	f005 fe01 	bl	100224a4 <__aeabi_dcmpeq>
1001c8a2:	b9f0      	cbnz	r0, 1001c8e2 <_svfprintf_r+0x16fa>
1001c8a4:	463d      	mov	r5, r7
1001c8a6:	4b57      	ldr	r3, [pc, #348]	@ (1001ca04 <_svfprintf_r+0x181c>)
1001c8a8:	2200      	movs	r2, #0
1001c8aa:	4640      	mov	r0, r8
1001c8ac:	4649      	mov	r1, r9
1001c8ae:	f005 fb91 	bl	10021fd4 <__aeabi_dmul>
1001c8b2:	4689      	mov	r9, r1
1001c8b4:	4680      	mov	r8, r0
1001c8b6:	f005 fe3d 	bl	10022534 <__aeabi_d2iz>
1001c8ba:	4604      	mov	r4, r0
1001c8bc:	f005 fb20 	bl	10021f00 <__aeabi_i2d>
1001c8c0:	4602      	mov	r2, r0
1001c8c2:	460b      	mov	r3, r1
1001c8c4:	4640      	mov	r0, r8
1001c8c6:	4649      	mov	r1, r9
1001c8c8:	f005 f9cc 	bl	10021c64 <__aeabi_dsub>
1001c8cc:	f81b 3004 	ldrb.w	r3, [fp, r4]
1001c8d0:	1c6a      	adds	r2, r5, #1
1001c8d2:	46b2      	mov	sl, r6
1001c8d4:	f105 37ff 	add.w	r7, r5, #4294967295	@ 0xffffffff
1001c8d8:	f806 3b01 	strb.w	r3, [r6], #1
1001c8dc:	4680      	mov	r8, r0
1001c8de:	4689      	mov	r9, r1
1001c8e0:	d1db      	bne.n	1001c89a <_svfprintf_r+0x16b2>
1001c8e2:	46cb      	mov	fp, r9
1001c8e4:	4657      	mov	r7, sl
1001c8e6:	46c2      	mov	sl, r8
1001c8e8:	4b47      	ldr	r3, [pc, #284]	@ (1001ca08 <_svfprintf_r+0x1820>)
1001c8ea:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
1001c8ee:	2200      	movs	r2, #0
1001c8f0:	4650      	mov	r0, sl
1001c8f2:	4659      	mov	r1, fp
1001c8f4:	46a9      	mov	r9, r5
1001c8f6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
1001c8f8:	f005 fdfc 	bl	100224f4 <__aeabi_dcmpgt>
1001c8fc:	2800      	cmp	r0, #0
1001c8fe:	f040 8153 	bne.w	1001cba8 <_svfprintf_r+0x19c0>
1001c902:	4b41      	ldr	r3, [pc, #260]	@ (1001ca08 <_svfprintf_r+0x1820>)
1001c904:	4650      	mov	r0, sl
1001c906:	4659      	mov	r1, fp
1001c908:	2200      	movs	r2, #0
1001c90a:	f005 fdcb 	bl	100224a4 <__aeabi_dcmpeq>
1001c90e:	b110      	cbz	r0, 1001c916 <_svfprintf_r+0x172e>
1001c910:	07e3      	lsls	r3, r4, #31
1001c912:	f100 8149 	bmi.w	1001cba8 <_svfprintf_r+0x19c0>
1001c916:	f1b9 0f00 	cmp.w	r9, #0
1001c91a:	f2c0 815f 	blt.w	1001cbdc <_svfprintf_r+0x19f4>
1001c91e:	f109 0301 	add.w	r3, r9, #1
1001c922:	4433      	add	r3, r6
1001c924:	2230      	movs	r2, #48	@ 0x30
1001c926:	f806 2b01 	strb.w	r2, [r6], #1
1001c92a:	42b3      	cmp	r3, r6
1001c92c:	d1fb      	bne.n	1001c926 <_svfprintf_r+0x173e>
1001c92e:	1b5b      	subs	r3, r3, r5
1001c930:	9313      	str	r3, [sp, #76]	@ 0x4c
1001c932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001c934:	f023 0720 	bic.w	r7, r3, #32
1001c938:	e6e1      	b.n	1001c6fe <_svfprintf_r+0x1516>
1001c93a:	9b06      	ldr	r3, [sp, #24]
1001c93c:	07df      	lsls	r7, r3, #31
1001c93e:	f100 80f9 	bmi.w	1001cb34 <_svfprintf_r+0x194c>
1001c942:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
1001c944:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
1001c946:	1b5b      	subs	r3, r3, r5
1001c948:	9313      	str	r3, [sp, #76]	@ 0x4c
1001c94a:	1cd3      	adds	r3, r2, #3
1001c94c:	9212      	str	r2, [sp, #72]	@ 0x48
1001c94e:	db02      	blt.n	1001c956 <_svfprintf_r+0x176e>
1001c950:	9b08      	ldr	r3, [sp, #32]
1001c952:	4293      	cmp	r3, r2
1001c954:	da1b      	bge.n	1001c98e <_svfprintf_r+0x17a6>
1001c956:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001c958:	3b02      	subs	r3, #2
1001c95a:	930e      	str	r3, [sp, #56]	@ 0x38
1001c95c:	1e53      	subs	r3, r2, #1
1001c95e:	9329      	str	r3, [sp, #164]	@ 0xa4
1001c960:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
1001c964:	2000      	movs	r0, #0
1001c966:	e6dd      	b.n	1001c724 <_svfprintf_r+0x153c>
1001c968:	222d      	movs	r2, #45	@ 0x2d
1001c96a:	2300      	movs	r3, #0
1001c96c:	f88d 209f 	strb.w	r2, [sp, #159]	@ 0x9f
1001c970:	9308      	str	r3, [sp, #32]
1001c972:	f7fe be1a 	b.w	1001b5aa <_svfprintf_r+0x3c2>
1001c976:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
1001c978:	42a3      	cmp	r3, r4
1001c97a:	f4bf aebe 	bcs.w	1001c6fa <_svfprintf_r+0x1512>
1001c97e:	2130      	movs	r1, #48	@ 0x30
1001c980:	1c5a      	adds	r2, r3, #1
1001c982:	9230      	str	r2, [sp, #192]	@ 0xc0
1001c984:	7019      	strb	r1, [r3, #0]
1001c986:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
1001c988:	429c      	cmp	r4, r3
1001c98a:	d8f9      	bhi.n	1001c980 <_svfprintf_r+0x1798>
1001c98c:	e6b5      	b.n	1001c6fa <_svfprintf_r+0x1512>
1001c98e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1001c990:	428a      	cmp	r2, r1
1001c992:	f2c0 80c4 	blt.w	1001cb1e <_svfprintf_r+0x1936>
1001c996:	9b06      	ldr	r3, [sp, #24]
1001c998:	07dc      	lsls	r4, r3, #31
1001c99a:	f140 8184 	bpl.w	1001cca6 <_svfprintf_r+0x1abe>
1001c99e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001c9a0:	eb02 0b03 	add.w	fp, r2, r3
1001c9a4:	9b06      	ldr	r3, [sp, #24]
1001c9a6:	0558      	lsls	r0, r3, #21
1001c9a8:	d502      	bpl.n	1001c9b0 <_svfprintf_r+0x17c8>
1001c9aa:	2a00      	cmp	r2, #0
1001c9ac:	f300 814d 	bgt.w	1001cc4a <_svfprintf_r+0x1a62>
1001c9b0:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
1001c9b4:	9306      	str	r3, [sp, #24]
1001c9b6:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
1001c9ba:	2367      	movs	r3, #103	@ 0x67
1001c9bc:	930e      	str	r3, [sp, #56]	@ 0x38
1001c9be:	2300      	movs	r3, #0
1001c9c0:	9314      	str	r3, [sp, #80]	@ 0x50
1001c9c2:	9310      	str	r3, [sp, #64]	@ 0x40
1001c9c4:	e6f9      	b.n	1001c7ba <_svfprintf_r+0x15d2>
1001c9c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c9c8:	aa32      	add	r2, sp, #200	@ 0xc8
1001c9ca:	4658      	mov	r0, fp
1001c9cc:	f004 ff70 	bl	100218b0 <__ssprint_r>
1001c9d0:	2800      	cmp	r0, #0
1001c9d2:	f47f aaa6 	bne.w	1001bf22 <_svfprintf_r+0xd3a>
1001c9d6:	f89a 0000 	ldrb.w	r0, [sl]
1001c9da:	9934      	ldr	r1, [sp, #208]	@ 0xd0
1001c9dc:	aa35      	add	r2, sp, #212	@ 0xd4
1001c9de:	4404      	add	r4, r0
1001c9e0:	e42e      	b.n	1001c240 <_svfprintf_r+0x1058>
1001c9e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001c9e4:	9807      	ldr	r0, [sp, #28]
1001c9e6:	aa32      	add	r2, sp, #200	@ 0xc8
1001c9e8:	f004 ff62 	bl	100218b0 <__ssprint_r>
1001c9ec:	2800      	cmp	r0, #0
1001c9ee:	f47f a8aa 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001c9f2:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001c9f4:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001c9f8:	f7ff b9b3 	b.w	1001bd62 <_svfprintf_r+0xb7a>
1001c9fc:	cccccccd 	.word	0xcccccccd
1001ca00:	10025498 	.word	0x10025498
1001ca04:	40300000 	.word	0x40300000
1001ca08:	3fe00000 	.word	0x3fe00000
1001ca0c:	2378      	movs	r3, #120	@ 0x78
1001ca0e:	f88d 30a1 	strb.w	r3, [sp, #161]	@ 0xa1
1001ca12:	2330      	movs	r3, #48	@ 0x30
1001ca14:	f88d 30a0 	strb.w	r3, [sp, #160]	@ 0xa0
1001ca18:	f049 0302 	orr.w	r3, r9, #2
1001ca1c:	9306      	str	r3, [sp, #24]
1001ca1e:	9b08      	ldr	r3, [sp, #32]
1001ca20:	2b63      	cmp	r3, #99	@ 0x63
1001ca22:	f300 80dd 	bgt.w	1001cbe0 <_svfprintf_r+0x19f8>
1001ca26:	2300      	movs	r3, #0
1001ca28:	930c      	str	r3, [sp, #48]	@ 0x30
1001ca2a:	ad45      	add	r5, sp, #276	@ 0x114
1001ca2c:	f449 7381 	orr.w	r3, r9, #258	@ 0x102
1001ca30:	9315      	str	r3, [sp, #84]	@ 0x54
1001ca32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
1001ca34:	2b00      	cmp	r3, #0
1001ca36:	db22      	blt.n	1001ca7e <_svfprintf_r+0x1896>
1001ca38:	2300      	movs	r3, #0
1001ca3a:	931f      	str	r3, [sp, #124]	@ 0x7c
1001ca3c:	e9dd 3416 	ldrd	r3, r4, [sp, #88]	@ 0x58
1001ca40:	e9cd 3424 	strd	r3, r4, [sp, #144]	@ 0x90
1001ca44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001ca46:	2b61      	cmp	r3, #97	@ 0x61
1001ca48:	f47f aafb 	bne.w	1001c042 <_svfprintf_r+0xe5a>
1001ca4c:	aa29      	add	r2, sp, #164	@ 0xa4
1001ca4e:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
1001ca52:	f7fd fa55 	bl	10019f00 <frexp>
1001ca56:	2200      	movs	r2, #0
1001ca58:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
1001ca5c:	f005 faba 	bl	10021fd4 <__aeabi_dmul>
1001ca60:	4602      	mov	r2, r0
1001ca62:	460b      	mov	r3, r1
1001ca64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
1001ca68:	2200      	movs	r2, #0
1001ca6a:	2300      	movs	r3, #0
1001ca6c:	f005 fd1a 	bl	100224a4 <__aeabi_dcmpeq>
1001ca70:	2800      	cmp	r0, #0
1001ca72:	f040 80c3 	bne.w	1001cbfc <_svfprintf_r+0x1a14>
1001ca76:	4ba9      	ldr	r3, [pc, #676]	@ (1001cd1c <_svfprintf_r+0x1b34>)
1001ca78:	9312      	str	r3, [sp, #72]	@ 0x48
1001ca7a:	e701      	b.n	1001c880 <_svfprintf_r+0x1698>
1001ca7c:	930c      	str	r3, [sp, #48]	@ 0x30
1001ca7e:	e9dd 3416 	ldrd	r3, r4, [sp, #88]	@ 0x58
1001ca82:	9324      	str	r3, [sp, #144]	@ 0x90
1001ca84:	f104 4300 	add.w	r3, r4, #2147483648	@ 0x80000000
1001ca88:	9325      	str	r3, [sp, #148]	@ 0x94
1001ca8a:	232d      	movs	r3, #45	@ 0x2d
1001ca8c:	931f      	str	r3, [sp, #124]	@ 0x7c
1001ca8e:	e7d9      	b.n	1001ca44 <_svfprintf_r+0x185c>
1001ca90:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001ca92:	9807      	ldr	r0, [sp, #28]
1001ca94:	aa32      	add	r2, sp, #200	@ 0xc8
1001ca96:	f004 ff0b 	bl	100218b0 <__ssprint_r>
1001ca9a:	2800      	cmp	r0, #0
1001ca9c:	f47f a853 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001caa0:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
1001caa2:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001caa4:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001caa8:	f7ff b97f 	b.w	1001bdaa <_svfprintf_r+0xbc2>
1001caac:	499c      	ldr	r1, [pc, #624]	@ (1001cd20 <_svfprintf_r+0x1b38>)
1001caae:	9115      	str	r1, [sp, #84]	@ 0x54
1001cab0:	f7fe bdaf 	b.w	1001b612 <_svfprintf_r+0x42a>
1001cab4:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001cab6:	9807      	ldr	r0, [sp, #28]
1001cab8:	aa32      	add	r2, sp, #200	@ 0xc8
1001caba:	f004 fef9 	bl	100218b0 <__ssprint_r>
1001cabe:	2800      	cmp	r0, #0
1001cac0:	f47f a841 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001cac4:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
1001cac6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001cac8:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
1001caca:	1b5d      	subs	r5, r3, r5
1001cacc:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001cad0:	f7ff b982 	b.w	1001bdd8 <_svfprintf_r+0xbf0>
1001cad4:	9b06      	ldr	r3, [sp, #24]
1001cad6:	9912      	ldr	r1, [sp, #72]	@ 0x48
1001cad8:	9a08      	ldr	r2, [sp, #32]
1001cada:	f003 0301 	and.w	r3, r3, #1
1001cade:	2900      	cmp	r1, #0
1001cae0:	ea43 0302 	orr.w	r3, r3, r2
1001cae4:	f340 810f 	ble.w	1001cd06 <_svfprintf_r+0x1b1e>
1001cae8:	2b00      	cmp	r3, #0
1001caea:	f040 80d5 	bne.w	1001cc98 <_svfprintf_r+0x1ab0>
1001caee:	2366      	movs	r3, #102	@ 0x66
1001caf0:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
1001caf4:	930e      	str	r3, [sp, #56]	@ 0x38
1001caf6:	9b06      	ldr	r3, [sp, #24]
1001caf8:	055a      	lsls	r2, r3, #21
1001cafa:	f100 80a8 	bmi.w	1001cc4e <_svfprintf_r+0x1a66>
1001cafe:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
1001cb02:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
1001cb06:	9306      	str	r3, [sp, #24]
1001cb08:	e759      	b.n	1001c9be <_svfprintf_r+0x17d6>
1001cb0a:	2358      	movs	r3, #88	@ 0x58
1001cb0c:	e77f      	b.n	1001ca0e <_svfprintf_r+0x1826>
1001cb0e:	2200      	movs	r2, #0
1001cb10:	9208      	str	r2, [sp, #32]
1001cb12:	f7fe bbc1 	b.w	1001b298 <_svfprintf_r+0xb0>
1001cb16:	4a82      	ldr	r2, [pc, #520]	@ (1001cd20 <_svfprintf_r+0x1b38>)
1001cb18:	9215      	str	r2, [sp, #84]	@ 0x54
1001cb1a:	f7ff b8ed 	b.w	1001bcf8 <_svfprintf_r+0xb10>
1001cb1e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1001cb20:	9a18      	ldr	r2, [sp, #96]	@ 0x60
1001cb22:	eb03 0b02 	add.w	fp, r3, r2
1001cb26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
1001cb28:	2b00      	cmp	r3, #0
1001cb2a:	f340 8083 	ble.w	1001cc34 <_svfprintf_r+0x1a4c>
1001cb2e:	2367      	movs	r3, #103	@ 0x67
1001cb30:	930e      	str	r3, [sp, #56]	@ 0x38
1001cb32:	e7e0      	b.n	1001caf6 <_svfprintf_r+0x190e>
1001cb34:	19ac      	adds	r4, r5, r6
1001cb36:	2747      	movs	r7, #71	@ 0x47
1001cb38:	e5d5      	b.n	1001c6e6 <_svfprintf_r+0x14fe>
1001cb3a:	4655      	mov	r5, sl
1001cb3c:	3301      	adds	r3, #1
1001cb3e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1001cb40:	f8c8 2000 	str.w	r2, [r8]
1001cb44:	4434      	add	r4, r6
1001cb46:	2b07      	cmp	r3, #7
1001cb48:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
1001cb4c:	f8c8 6004 	str.w	r6, [r8, #4]
1001cb50:	f77f a821 	ble.w	1001bb96 <_svfprintf_r+0x9ae>
1001cb54:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001cb56:	9807      	ldr	r0, [sp, #28]
1001cb58:	aa32      	add	r2, sp, #200	@ 0xc8
1001cb5a:	f004 fea9 	bl	100218b0 <__ssprint_r>
1001cb5e:	2800      	cmp	r0, #0
1001cb60:	f47e aff1 	bne.w	1001bb46 <_svfprintf_r+0x95e>
1001cb64:	e9dd 3433 	ldrd	r3, r4, [sp, #204]	@ 0xcc
1001cb68:	f10d 08d4 	add.w	r8, sp, #212	@ 0xd4
1001cb6c:	f7ff b815 	b.w	1001bb9a <_svfprintf_r+0x9b2>
1001cb70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1001cb72:	8993      	ldrh	r3, [r2, #12]
1001cb74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1001cb78:	8193      	strh	r3, [r2, #12]
1001cb7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1001cb7e:	930a      	str	r3, [sp, #40]	@ 0x28
1001cb80:	f7fe bc3e 	b.w	1001b400 <_svfprintf_r+0x218>
1001cb84:	4a67      	ldr	r2, [pc, #412]	@ (1001cd24 <_svfprintf_r+0x1b3c>)
1001cb86:	9215      	str	r2, [sp, #84]	@ 0x54
1001cb88:	f7fe bf82 	b.w	1001ba90 <_svfprintf_r+0x8a8>
1001cb8c:	2800      	cmp	r0, #0
1001cb8e:	d13f      	bne.n	1001cc10 <_svfprintf_r+0x1a28>
1001cb90:	2230      	movs	r2, #48	@ 0x30
1001cb92:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
1001cb96:	f10d 02b3 	add.w	r2, sp, #179	@ 0xb3
1001cb9a:	3330      	adds	r3, #48	@ 0x30
1001cb9c:	f802 3b01 	strb.w	r3, [r2], #1
1001cba0:	ab2c      	add	r3, sp, #176	@ 0xb0
1001cba2:	1ad3      	subs	r3, r2, r3
1001cba4:	931c      	str	r3, [sp, #112]	@ 0x70
1001cba6:	e5f3      	b.n	1001c790 <_svfprintf_r+0x15a8>
1001cba8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
1001cbaa:	9730      	str	r7, [sp, #192]	@ 0xc0
1001cbac:	7bd9      	ldrb	r1, [r3, #15]
1001cbae:	f816 2c01 	ldrb.w	r2, [r6, #-1]
1001cbb2:	428a      	cmp	r2, r1
1001cbb4:	4633      	mov	r3, r6
1001cbb6:	d109      	bne.n	1001cbcc <_svfprintf_r+0x19e4>
1001cbb8:	2030      	movs	r0, #48	@ 0x30
1001cbba:	f803 0c01 	strb.w	r0, [r3, #-1]
1001cbbe:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
1001cbc0:	1e5a      	subs	r2, r3, #1
1001cbc2:	9230      	str	r2, [sp, #192]	@ 0xc0
1001cbc4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1001cbc8:	4291      	cmp	r1, r2
1001cbca:	d0f6      	beq.n	1001cbba <_svfprintf_r+0x19d2>
1001cbcc:	2a39      	cmp	r2, #57	@ 0x39
1001cbce:	bf0b      	itete	eq
1001cbd0:	9a12      	ldreq	r2, [sp, #72]	@ 0x48
1001cbd2:	3201      	addne	r2, #1
1001cbd4:	7a92      	ldrbeq	r2, [r2, #10]
1001cbd6:	b2d2      	uxtbne	r2, r2
1001cbd8:	f803 2c01 	strb.w	r2, [r3, #-1]
1001cbdc:	4633      	mov	r3, r6
1001cbde:	e6a6      	b.n	1001c92e <_svfprintf_r+0x1746>
1001cbe0:	9807      	ldr	r0, [sp, #28]
1001cbe2:	1c59      	adds	r1, r3, #1
1001cbe4:	f7f7 ffd8 	bl	10014b98 <_malloc_r>
1001cbe8:	4605      	mov	r5, r0
1001cbea:	2800      	cmp	r0, #0
1001cbec:	d0c0      	beq.n	1001cb70 <_svfprintf_r+0x1988>
1001cbee:	900c      	str	r0, [sp, #48]	@ 0x30
1001cbf0:	e71c      	b.n	1001ca2c <_svfprintf_r+0x1844>
1001cbf2:	9b06      	ldr	r3, [sp, #24]
1001cbf4:	07de      	lsls	r6, r3, #31
1001cbf6:	f57f add4 	bpl.w	1001c7a2 <_svfprintf_r+0x15ba>
1001cbfa:	e5d0      	b.n	1001c79e <_svfprintf_r+0x15b6>
1001cbfc:	4b4a      	ldr	r3, [pc, #296]	@ (1001cd28 <_svfprintf_r+0x1b40>)
1001cbfe:	4a47      	ldr	r2, [pc, #284]	@ (1001cd1c <_svfprintf_r+0x1b34>)
1001cc00:	990e      	ldr	r1, [sp, #56]	@ 0x38
1001cc02:	2961      	cmp	r1, #97	@ 0x61
1001cc04:	bf18      	it	ne
1001cc06:	461a      	movne	r2, r3
1001cc08:	2301      	movs	r3, #1
1001cc0a:	9212      	str	r2, [sp, #72]	@ 0x48
1001cc0c:	9329      	str	r3, [sp, #164]	@ 0xa4
1001cc0e:	e637      	b.n	1001c880 <_svfprintf_r+0x1698>
1001cc10:	f10d 02b2 	add.w	r2, sp, #178	@ 0xb2
1001cc14:	e7c1      	b.n	1001cb9a <_svfprintf_r+0x19b2>
1001cc16:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
1001cc18:	4d44      	ldr	r5, [pc, #272]	@ (1001cd2c <_svfprintf_r+0x1b44>)
1001cc1a:	2b00      	cmp	r3, #0
1001cc1c:	bfb4      	ite	lt
1001cc1e:	222d      	movlt	r2, #45	@ 0x2d
1001cc20:	f89d 209f 	ldrbge.w	r2, [sp, #159]	@ 0x9f
1001cc24:	4b42      	ldr	r3, [pc, #264]	@ (1001cd30 <_svfprintf_r+0x1b48>)
1001cc26:	bfb8      	it	lt
1001cc28:	f88d 209f 	strblt.w	r2, [sp, #159]	@ 0x9f
1001cc2c:	f029 0980 	bic.w	r9, r9, #128	@ 0x80
1001cc30:	f7fe bcab 	b.w	1001b58a <_svfprintf_r+0x3a2>
1001cc34:	f1c3 0301 	rsb	r3, r3, #1
1001cc38:	449b      	add	fp, r3
1001cc3a:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
1001cc3e:	9306      	str	r3, [sp, #24]
1001cc40:	2367      	movs	r3, #103	@ 0x67
1001cc42:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
1001cc46:	930e      	str	r3, [sp, #56]	@ 0x38
1001cc48:	e6b9      	b.n	1001c9be <_svfprintf_r+0x17d6>
1001cc4a:	2367      	movs	r3, #103	@ 0x67
1001cc4c:	930e      	str	r3, [sp, #56]	@ 0x38
1001cc4e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
1001cc50:	780b      	ldrb	r3, [r1, #0]
1001cc52:	2bff      	cmp	r3, #255	@ 0xff
1001cc54:	f000 808e 	beq.w	1001cd74 <_svfprintf_r+0x1b8c>
1001cc58:	2400      	movs	r4, #0
1001cc5a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
1001cc5c:	4620      	mov	r0, r4
1001cc5e:	e003      	b.n	1001cc68 <_svfprintf_r+0x1a80>
1001cc60:	3001      	adds	r0, #1
1001cc62:	3101      	adds	r1, #1
1001cc64:	2bff      	cmp	r3, #255	@ 0xff
1001cc66:	d008      	beq.n	1001cc7a <_svfprintf_r+0x1a92>
1001cc68:	4293      	cmp	r3, r2
1001cc6a:	da06      	bge.n	1001cc7a <_svfprintf_r+0x1a92>
1001cc6c:	1ad2      	subs	r2, r2, r3
1001cc6e:	784b      	ldrb	r3, [r1, #1]
1001cc70:	2b00      	cmp	r3, #0
1001cc72:	d1f5      	bne.n	1001cc60 <_svfprintf_r+0x1a78>
1001cc74:	780b      	ldrb	r3, [r1, #0]
1001cc76:	3401      	adds	r4, #1
1001cc78:	e7f4      	b.n	1001cc64 <_svfprintf_r+0x1a7c>
1001cc7a:	911b      	str	r1, [sp, #108]	@ 0x6c
1001cc7c:	9010      	str	r0, [sp, #64]	@ 0x40
1001cc7e:	9414      	str	r4, [sp, #80]	@ 0x50
1001cc80:	9212      	str	r2, [sp, #72]	@ 0x48
1001cc82:	e9dd 3914 	ldrd	r3, r9, [sp, #80]	@ 0x50
1001cc86:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1001cc88:	4413      	add	r3, r2
1001cc8a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
1001cc8c:	fb02 bb03 	mla	fp, r2, r3, fp
1001cc90:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
1001cc94:	9306      	str	r3, [sp, #24]
1001cc96:	e590      	b.n	1001c7ba <_svfprintf_r+0x15d2>
1001cc98:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001cc9a:	18cf      	adds	r7, r1, r3
1001cc9c:	443a      	add	r2, r7
1001cc9e:	2366      	movs	r3, #102	@ 0x66
1001cca0:	4693      	mov	fp, r2
1001cca2:	930e      	str	r3, [sp, #56]	@ 0x38
1001cca4:	e727      	b.n	1001caf6 <_svfprintf_r+0x190e>
1001cca6:	4693      	mov	fp, r2
1001cca8:	e67c      	b.n	1001c9a4 <_svfprintf_r+0x17bc>
1001ccaa:	9b08      	ldr	r3, [sp, #32]
1001ccac:	9306      	str	r3, [sp, #24]
1001ccae:	469b      	mov	fp, r3
1001ccb0:	2373      	movs	r3, #115	@ 0x73
1001ccb2:	f89d 209f 	ldrb.w	r2, [sp, #159]	@ 0x9f
1001ccb6:	960d      	str	r6, [sp, #52]	@ 0x34
1001ccb8:	9008      	str	r0, [sp, #32]
1001ccba:	9014      	str	r0, [sp, #80]	@ 0x50
1001ccbc:	9010      	str	r0, [sp, #64]	@ 0x40
1001ccbe:	930e      	str	r3, [sp, #56]	@ 0x38
1001ccc0:	f7fe bc70 	b.w	1001b5a4 <_svfprintf_r+0x3bc>
1001ccc4:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	@ 0x90
1001ccc8:	2200      	movs	r2, #0
1001ccca:	2300      	movs	r3, #0
1001cccc:	f005 fbea 	bl	100224a4 <__aeabi_dcmpeq>
1001ccd0:	2800      	cmp	r0, #0
1001ccd2:	f47f ad06 	bne.w	1001c6e2 <_svfprintf_r+0x14fa>
1001ccd6:	f1c6 0601 	rsb	r6, r6, #1
1001ccda:	9629      	str	r6, [sp, #164]	@ 0xa4
1001ccdc:	e502      	b.n	1001c6e4 <_svfprintf_r+0x14fc>
1001ccde:	f8dd 9018 	ldr.w	r9, [sp, #24]
1001cce2:	f8dd b020 	ldr.w	fp, [sp, #32]
1001cce6:	f7ff bbc1 	b.w	1001c46c <_svfprintf_r+0x1284>
1001ccea:	4e0e      	ldr	r6, [pc, #56]	@ (1001cd24 <_svfprintf_r+0x1b3c>)
1001ccec:	f7ff bae3 	b.w	1001c2b6 <_svfprintf_r+0x10ce>
1001ccf0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1001ccf2:	7863      	ldrb	r3, [r4, #1]
1001ccf4:	460c      	mov	r4, r1
1001ccf6:	f852 1b04 	ldr.w	r1, [r2], #4
1001ccfa:	920d      	str	r2, [sp, #52]	@ 0x34
1001ccfc:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
1001cd00:	9108      	str	r1, [sp, #32]
1001cd02:	f7fe bac8 	b.w	1001b296 <_svfprintf_r+0xae>
1001cd06:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
1001cd0a:	b99b      	cbnz	r3, 1001cd34 <_svfprintf_r+0x1b4c>
1001cd0c:	f04f 0b01 	mov.w	fp, #1
1001cd10:	2366      	movs	r3, #102	@ 0x66
1001cd12:	f8cd b018 	str.w	fp, [sp, #24]
1001cd16:	930e      	str	r3, [sp, #56]	@ 0x38
1001cd18:	e651      	b.n	1001c9be <_svfprintf_r+0x17d6>
1001cd1a:	bf00      	nop
1001cd1c:	10025484 	.word	0x10025484
1001cd20:	100256d8 	.word	0x100256d8
1001cd24:	100256c8 	.word	0x100256c8
1001cd28:	10025498 	.word	0x10025498
1001cd2c:	1002547c 	.word	0x1002547c
1001cd30:	10025480 	.word	0x10025480
1001cd34:	9b18      	ldr	r3, [sp, #96]	@ 0x60
1001cd36:	f8dd b020 	ldr.w	fp, [sp, #32]
1001cd3a:	1c5f      	adds	r7, r3, #1
1001cd3c:	44bb      	add	fp, r7
1001cd3e:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
1001cd42:	9306      	str	r3, [sp, #24]
1001cd44:	2366      	movs	r3, #102	@ 0x66
1001cd46:	930e      	str	r3, [sp, #56]	@ 0x38
1001cd48:	e639      	b.n	1001c9be <_svfprintf_r+0x17d6>
1001cd4a:	2170      	movs	r1, #112	@ 0x70
1001cd4c:	e4e9      	b.n	1001c722 <_svfprintf_r+0x153a>
1001cd4e:	4a0b      	ldr	r2, [pc, #44]	@ (1001cd7c <_svfprintf_r+0x1b94>)
1001cd50:	9215      	str	r2, [sp, #84]	@ 0x54
1001cd52:	e448      	b.n	1001c5e6 <_svfprintf_r+0x13fe>
1001cd54:	2302      	movs	r3, #2
1001cd56:	931c      	str	r3, [sp, #112]	@ 0x70
1001cd58:	e51a      	b.n	1001c790 <_svfprintf_r+0x15a8>
1001cd5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1001cd5c:	f8dd b01c 	ldr.w	fp, [sp, #28]
1001cd60:	8993      	ldrh	r3, [r2, #12]
1001cd62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1001cd66:	8193      	strh	r3, [r2, #12]
1001cd68:	f7ff b8db 	b.w	1001bf22 <_svfprintf_r+0xd3a>
1001cd6c:	230c      	movs	r3, #12
1001cd6e:	f8cb 3000 	str.w	r3, [fp]
1001cd72:	e702      	b.n	1001cb7a <_svfprintf_r+0x1992>
1001cd74:	2300      	movs	r3, #0
1001cd76:	9314      	str	r3, [sp, #80]	@ 0x50
1001cd78:	9310      	str	r3, [sp, #64]	@ 0x40
1001cd7a:	e782      	b.n	1001cc82 <_svfprintf_r+0x1a9a>
1001cd7c:	100256c8 	.word	0x100256c8

1001cd80 <__smakebuf_r>:
1001cd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1001cd84:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1001cd88:	460c      	mov	r4, r1
1001cd8a:	0799      	lsls	r1, r3, #30
1001cd8c:	b096      	sub	sp, #88	@ 0x58
1001cd8e:	d508      	bpl.n	1001cda2 <__smakebuf_r+0x22>
1001cd90:	f104 0343 	add.w	r3, r4, #67	@ 0x43
1001cd94:	2201      	movs	r2, #1
1001cd96:	e9c4 3204 	strd	r3, r2, [r4, #16]
1001cd9a:	6023      	str	r3, [r4, #0]
1001cd9c:	b016      	add	sp, #88	@ 0x58
1001cd9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001cda2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1001cda6:	2900      	cmp	r1, #0
1001cda8:	4606      	mov	r6, r0
1001cdaa:	db26      	blt.n	1001cdfa <__smakebuf_r+0x7a>
1001cdac:	466a      	mov	r2, sp
1001cdae:	f7fc fca7 	bl	10019700 <_fstat_r>
1001cdb2:	2800      	cmp	r0, #0
1001cdb4:	db1f      	blt.n	1001cdf6 <__smakebuf_r+0x76>
1001cdb6:	9d01      	ldr	r5, [sp, #4]
1001cdb8:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
1001cdbc:	f5a5 5500 	sub.w	r5, r5, #8192	@ 0x2000
1001cdc0:	fab5 f585 	clz	r5, r5
1001cdc4:	f44f 6880 	mov.w	r8, #1024	@ 0x400
1001cdc8:	096d      	lsrs	r5, r5, #5
1001cdca:	f44f 6700 	mov.w	r7, #2048	@ 0x800
1001cdce:	4641      	mov	r1, r8
1001cdd0:	4630      	mov	r0, r6
1001cdd2:	f7f7 fee1 	bl	10014b98 <_malloc_r>
1001cdd6:	b1e8      	cbz	r0, 1001ce14 <__smakebuf_r+0x94>
1001cdd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001cddc:	f8c4 8014 	str.w	r8, [r4, #20]
1001cde0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1001cde4:	6020      	str	r0, [r4, #0]
1001cde6:	6120      	str	r0, [r4, #16]
1001cde8:	81a3      	strh	r3, [r4, #12]
1001cdea:	bb3d      	cbnz	r5, 1001ce3c <__smakebuf_r+0xbc>
1001cdec:	433b      	orrs	r3, r7
1001cdee:	81a3      	strh	r3, [r4, #12]
1001cdf0:	b016      	add	sp, #88	@ 0x58
1001cdf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001cdf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001cdfa:	f013 0580 	ands.w	r5, r3, #128	@ 0x80
1001cdfe:	d019      	beq.n	1001ce34 <__smakebuf_r+0xb4>
1001ce00:	f04f 0840 	mov.w	r8, #64	@ 0x40
1001ce04:	2500      	movs	r5, #0
1001ce06:	4641      	mov	r1, r8
1001ce08:	4630      	mov	r0, r6
1001ce0a:	462f      	mov	r7, r5
1001ce0c:	f7f7 fec4 	bl	10014b98 <_malloc_r>
1001ce10:	2800      	cmp	r0, #0
1001ce12:	d1e1      	bne.n	1001cdd8 <__smakebuf_r+0x58>
1001ce14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001ce18:	059a      	lsls	r2, r3, #22
1001ce1a:	d4bf      	bmi.n	1001cd9c <__smakebuf_r+0x1c>
1001ce1c:	f023 0303 	bic.w	r3, r3, #3
1001ce20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
1001ce24:	f043 0302 	orr.w	r3, r3, #2
1001ce28:	2101      	movs	r1, #1
1001ce2a:	e9c4 2104 	strd	r2, r1, [r4, #16]
1001ce2e:	81a3      	strh	r3, [r4, #12]
1001ce30:	6022      	str	r2, [r4, #0]
1001ce32:	e7b3      	b.n	1001cd9c <__smakebuf_r+0x1c>
1001ce34:	f44f 6880 	mov.w	r8, #1024	@ 0x400
1001ce38:	462f      	mov	r7, r5
1001ce3a:	e7c8      	b.n	1001cdce <__smakebuf_r+0x4e>
1001ce3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1001ce40:	4630      	mov	r0, r6
1001ce42:	f003 fd01 	bl	10020848 <_isatty_r>
1001ce46:	b910      	cbnz	r0, 1001ce4e <__smakebuf_r+0xce>
1001ce48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001ce4c:	e7ce      	b.n	1001cdec <__smakebuf_r+0x6c>
1001ce4e:	89a3      	ldrh	r3, [r4, #12]
1001ce50:	f023 0303 	bic.w	r3, r3, #3
1001ce54:	f043 0301 	orr.w	r3, r3, #1
1001ce58:	b21b      	sxth	r3, r3
1001ce5a:	e7c7      	b.n	1001cdec <__smakebuf_r+0x6c>

1001ce5c <__ssvfscanf_r>:
1001ce5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001ce60:	f5ad 7d37 	sub.w	sp, sp, #732	@ 0x2dc
1001ce64:	468a      	mov	sl, r1
1001ce66:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
1001ce6a:	af02      	add	r7, sp, #8
1001ce6c:	048c      	lsls	r4, r1, #18
1001ce6e:	64f8      	str	r0, [r7, #76]	@ 0x4c
1001ce70:	4615      	mov	r5, r2
1001ce72:	637b      	str	r3, [r7, #52]	@ 0x34
1001ce74:	d409      	bmi.n	1001ce8a <__ssvfscanf_r+0x2e>
1001ce76:	f8da 3064 	ldr.w	r3, [sl, #100]	@ 0x64
1001ce7a:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
1001ce7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
1001ce82:	f8aa 100c 	strh.w	r1, [sl, #12]
1001ce86:	f8ca 3064 	str.w	r3, [sl, #100]	@ 0x64
1001ce8a:	2300      	movs	r3, #0
1001ce8c:	461c      	mov	r4, r3
1001ce8e:	2208      	movs	r2, #8
1001ce90:	4619      	mov	r1, r3
1001ce92:	f107 0058 	add.w	r0, r7, #88	@ 0x58
1001ce96:	62bb      	str	r3, [r7, #40]	@ 0x28
1001ce98:	46a1      	mov	r9, r4
1001ce9a:	f7fc fb8f 	bl	100195bc <memset>
1001ce9e:	46a8      	mov	r8, r5
1001cea0:	63fc      	str	r4, [r7, #60]	@ 0x3c
1001cea2:	627c      	str	r4, [r7, #36]	@ 0x24
1001cea4:	63bc      	str	r4, [r7, #56]	@ 0x38
1001cea6:	643c      	str	r4, [r7, #64]	@ 0x40
1001cea8:	4b83      	ldr	r3, [pc, #524]	@ (1001d0b8 <__ssvfscanf_r+0x25c>)
1001ceaa:	f8d3 40e4 	ldr.w	r4, [r3, #228]	@ 0xe4
1001ceae:	f7fc fc0b 	bl	100196c8 <__locale_mb_cur_max>
1001ceb2:	f107 0258 	add.w	r2, r7, #88	@ 0x58
1001ceb6:	9200      	str	r2, [sp, #0]
1001ceb8:	4603      	mov	r3, r0
1001ceba:	4642      	mov	r2, r8
1001cebc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001cebe:	f107 0154 	add.w	r1, r7, #84	@ 0x54
1001cec2:	47a0      	blx	r4
1001cec4:	2800      	cmp	r0, #0
1001cec6:	db4c      	blt.n	1001cf62 <__ssvfscanf_r+0x106>
1001cec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1001ceca:	4480      	add	r8, r0
1001cecc:	4606      	mov	r6, r0
1001cece:	2b00      	cmp	r3, #0
1001ced0:	f000 85a8 	beq.w	1001da24 <__ssvfscanf_r+0xbc8>
1001ced4:	2801      	cmp	r0, #1
1001ced6:	d053      	beq.n	1001cf80 <__ssvfscanf_r+0x124>
1001ced8:	2b25      	cmp	r3, #37	@ 0x25
1001ceda:	d05a      	beq.n	1001cf92 <__ssvfscanf_r+0x136>
1001cedc:	2800      	cmp	r0, #0
1001cede:	d0e3      	beq.n	1001cea8 <__ssvfscanf_r+0x4c>
1001cee0:	f8da 3004 	ldr.w	r3, [sl, #4]
1001cee4:	461a      	mov	r2, r3
1001cee6:	eba8 0606 	sub.w	r6, r8, r6
1001ceea:	3801      	subs	r0, #1
1001ceec:	2a00      	cmp	r2, #0
1001ceee:	eb06 0400 	add.w	r4, r6, r0
1001cef2:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
1001cef6:	dd17      	ble.n	1001cf28 <__ssvfscanf_r+0xcc>
1001cef8:	f8da 3000 	ldr.w	r3, [sl]
1001cefc:	786a      	ldrb	r2, [r5, #1]
1001cefe:	7818      	ldrb	r0, [r3, #0]
1001cf00:	4290      	cmp	r0, r2
1001cf02:	f103 0301 	add.w	r3, r3, #1
1001cf06:	f105 0101 	add.w	r1, r5, #1
1001cf0a:	f040 858b 	bne.w	1001da24 <__ssvfscanf_r+0xbc8>
1001cf0e:	f8da 2004 	ldr.w	r2, [sl, #4]
1001cf12:	f8ca 3000 	str.w	r3, [sl]
1001cf16:	3a01      	subs	r2, #1
1001cf18:	428c      	cmp	r4, r1
1001cf1a:	f8ca 2004 	str.w	r2, [sl, #4]
1001cf1e:	f000 809b 	beq.w	1001d058 <__ssvfscanf_r+0x1fc>
1001cf22:	2a00      	cmp	r2, #0
1001cf24:	460d      	mov	r5, r1
1001cf26:	dce7      	bgt.n	1001cef8 <__ssvfscanf_r+0x9c>
1001cf28:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001cf2a:	4651      	mov	r1, sl
1001cf2c:	f004 fd80 	bl	10021a30 <__ssrefill_r>
1001cf30:	2800      	cmp	r0, #0
1001cf32:	d0e1      	beq.n	1001cef8 <__ssvfscanf_r+0x9c>
1001cf34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001cf36:	2b00      	cmp	r3, #0
1001cf38:	f001 81e3 	beq.w	1001e302 <__ssvfscanf_r+0x14a6>
1001cf3c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1001cf40:	f013 0f40 	tst.w	r3, #64	@ 0x40
1001cf44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001cf46:	f041 81dd 	bne.w	1001e304 <__ssvfscanf_r+0x14a8>
1001cf4a:	b123      	cbz	r3, 1001cf56 <__ssvfscanf_r+0xfa>
1001cf4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001cf4e:	6818      	ldr	r0, [r3, #0]
1001cf50:	b108      	cbz	r0, 1001cf56 <__ssvfscanf_r+0xfa>
1001cf52:	f7f7 fe19 	bl	10014b88 <free>
1001cf56:	6c38      	ldr	r0, [r7, #64]	@ 0x40
1001cf58:	f507 7735 	add.w	r7, r7, #724	@ 0x2d4
1001cf5c:	46bd      	mov	sp, r7
1001cf5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001cf62:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
1001cf66:	2208      	movs	r2, #8
1001cf68:	2100      	movs	r1, #0
1001cf6a:	f107 0058 	add.w	r0, r7, #88	@ 0x58
1001cf6e:	657b      	str	r3, [r7, #84]	@ 0x54
1001cf70:	f7fc fb24 	bl	100195bc <memset>
1001cf74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1001cf76:	f108 0801 	add.w	r8, r8, #1
1001cf7a:	2b00      	cmp	r3, #0
1001cf7c:	f000 8552 	beq.w	1001da24 <__ssvfscanf_r+0xbc8>
1001cf80:	4a4e      	ldr	r2, [pc, #312]	@ (1001d0bc <__ssvfscanf_r+0x260>)
1001cf82:	5cd2      	ldrb	r2, [r2, r3]
1001cf84:	0710      	lsls	r0, r2, #28
1001cf86:	f100 855b 	bmi.w	1001da40 <__ssvfscanf_r+0xbe4>
1001cf8a:	2601      	movs	r6, #1
1001cf8c:	2b25      	cmp	r3, #37	@ 0x25
1001cf8e:	4630      	mov	r0, r6
1001cf90:	d1a6      	bne.n	1001cee0 <__ssvfscanf_r+0x84>
1001cf92:	2400      	movs	r4, #0
1001cf94:	f898 2000 	ldrb.w	r2, [r8]
1001cf98:	4625      	mov	r5, r4
1001cf9a:	f1a2 0325 	sub.w	r3, r2, #37	@ 0x25
1001cf9e:	f108 0101 	add.w	r1, r8, #1
1001cfa2:	2b55      	cmp	r3, #85	@ 0x55
1001cfa4:	f200 8649 	bhi.w	1001dc3a <__ssvfscanf_r+0xdde>
1001cfa8:	e8df f013 	tbh	[pc, r3, lsl #1]
1001cfac:	0647073d 	.word	0x0647073d
1001cfb0:	06470647 	.word	0x06470647
1001cfb4:	07340647 	.word	0x07340647
1001cfb8:	06470647 	.word	0x06470647
1001cfbc:	06470647 	.word	0x06470647
1001cfc0:	064d0647 	.word	0x064d0647
1001cfc4:	064d064d 	.word	0x064d064d
1001cfc8:	064d064d 	.word	0x064d064d
1001cfcc:	064d064d 	.word	0x064d064d
1001cfd0:	064d064d 	.word	0x064d064d
1001cfd4:	0647064d 	.word	0x0647064d
1001cfd8:	06470647 	.word	0x06470647
1001cfdc:	06470647 	.word	0x06470647
1001cfe0:	06470647 	.word	0x06470647
1001cfe4:	06470658 	.word	0x06470658
1001cfe8:	04f4006b 	.word	0x04f4006b
1001cfec:	06580658 	.word	0x06580658
1001cff0:	06470658 	.word	0x06470658
1001cff4:	06470647 	.word	0x06470647
1001cff8:	00620647 	.word	0x00620647
1001cffc:	06470647 	.word	0x06470647
1001d000:	064704ff 	.word	0x064704ff
1001d004:	06470647 	.word	0x06470647
1001d008:	064704b5 	.word	0x064704b5
1001d00c:	06470647 	.word	0x06470647
1001d010:	06980647 	.word	0x06980647
1001d014:	06470647 	.word	0x06470647
1001d018:	064706d9 	.word	0x064706d9
1001d01c:	06470647 	.word	0x06470647
1001d020:	06470647 	.word	0x06470647
1001d024:	06470658 	.word	0x06470658
1001d028:	04f6006d 	.word	0x04f6006d
1001d02c:	06580658 	.word	0x06580658
1001d030:	06ed0658 	.word	0x06ed0658
1001d034:	006206e4 	.word	0x006206e4
1001d038:	071e0647 	.word	0x071e0647
1001d03c:	06fd070f 	.word	0x06fd070f
1001d040:	06fa0501 	.word	0x06fa0501
1001d044:	06470647 	.word	0x06470647
1001d048:	005b04b7 	.word	0x005b04b7
1001d04c:	0647072b 	.word	0x0647072b
1001d050:	06980647 	.word	0x06980647
1001d054:	005b0647 	.word	0x005b0647
1001d058:	3502      	adds	r5, #2
1001d05a:	444d      	add	r5, r9
1001d05c:	eba5 0906 	sub.w	r9, r5, r6
1001d060:	e722      	b.n	1001cea8 <__ssvfscanf_r+0x4c>
1001d062:	0723      	lsls	r3, r4, #28
1001d064:	f040 84de 	bne.w	1001da24 <__ssvfscanf_r+0xbc8>
1001d068:	f898 2001 	ldrb.w	r2, [r8, #1]
1001d06c:	4688      	mov	r8, r1
1001d06e:	e794      	b.n	1001cf9a <__ssvfscanf_r+0x13e>
1001d070:	0722      	lsls	r2, r4, #28
1001d072:	f040 84d7 	bne.w	1001da24 <__ssvfscanf_r+0xbc8>
1001d076:	f898 2001 	ldrb.w	r2, [r8, #1]
1001d07a:	f044 0402 	orr.w	r4, r4, #2
1001d07e:	4688      	mov	r8, r1
1001d080:	e78b      	b.n	1001cf9a <__ssvfscanf_r+0x13e>
1001d082:	f044 0401 	orr.w	r4, r4, #1
1001d086:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
1001d08a:	4688      	mov	r8, r1
1001d08c:	f04f 0b00 	mov.w	fp, #0
1001d090:	f8da 3004 	ldr.w	r3, [sl, #4]
1001d094:	2b00      	cmp	r3, #0
1001d096:	f340 8448 	ble.w	1001d92a <__ssvfscanf_r+0xace>
1001d09a:	0660      	lsls	r0, r4, #25
1001d09c:	f140 844f 	bpl.w	1001d93e <__ssvfscanf_r+0xae2>
1001d0a0:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
1001d0a4:	2b03      	cmp	r3, #3
1001d0a6:	f200 8793 	bhi.w	1001dfd0 <__ssvfscanf_r+0x1174>
1001d0aa:	e8df f013 	tbh	[pc, r3, lsl #1]
1001d0ae:	02b1      	.short	0x02b1
1001d0b0:	014801f4 	.word	0x014801f4
1001d0b4:	0009      	.short	0x0009
1001d0b6:	bf00      	nop
1001d0b8:	2000042c 	.word	0x2000042c
1001d0bc:	1002553d 	.word	0x1002553d
1001d0c0:	f444 63f0 	orr.w	r3, r4, #1920	@ 0x780
1001d0c4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d0c6:	64bb      	str	r3, [r7, #72]	@ 0x48
1001d0c8:	f7fc fb04 	bl	100196d4 <_localeconv_r>
1001d0cc:	6803      	ldr	r3, [r0, #0]
1001d0ce:	61fb      	str	r3, [r7, #28]
1001d0d0:	1e6b      	subs	r3, r5, #1
1001d0d2:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
1001d0d6:	f04f 0400 	mov.w	r4, #0
1001d0da:	bf88      	it	hi
1001d0dc:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
1001d0e0:	e9c7 4404 	strd	r4, r4, [r7, #16]
1001d0e4:	bf88      	it	hi
1001d0e6:	eb05 0c00 	addhi.w	ip, r5, r0
1001d0ea:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
1001d0ee:	bf94      	ite	ls
1001d0f0:	f04f 0c00 	movls.w	ip, #0
1001d0f4:	f240 155d 	movwhi	r5, #349	@ 0x15d
1001d0f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
1001d0fa:	647c      	str	r4, [r7, #68]	@ 0x44
1001d0fc:	633c      	str	r4, [r7, #48]	@ 0x30
1001d0fe:	61bc      	str	r4, [r7, #24]
1001d100:	469b      	mov	fp, r3
1001d102:	f8c7 c00c 	str.w	ip, [r7, #12]
1001d106:	f8c7 8020 	str.w	r8, [r7, #32]
1001d10a:	f8da 1000 	ldr.w	r1, [sl]
1001d10e:	780a      	ldrb	r2, [r1, #0]
1001d110:	f1a2 032b 	sub.w	r3, r2, #43	@ 0x2b
1001d114:	2b4e      	cmp	r3, #78	@ 0x4e
1001d116:	d850      	bhi.n	1001d1ba <__ssvfscanf_r+0x35e>
1001d118:	e8df f013 	tbh	[pc, r3, lsl #1]
1001d11c:	004f03b7 	.word	0x004f03b7
1001d120:	004f03b7 	.word	0x004f03b7
1001d124:	0099004f 	.word	0x0099004f
1001d128:	009d009d 	.word	0x009d009d
1001d12c:	009d009d 	.word	0x009d009d
1001d130:	009d009d 	.word	0x009d009d
1001d134:	009d009d 	.word	0x009d009d
1001d138:	004f009d 	.word	0x004f009d
1001d13c:	004f004f 	.word	0x004f004f
1001d140:	004f004f 	.word	0x004f004f
1001d144:	004f004f 	.word	0x004f004f
1001d148:	033b03ac 	.word	0x033b03ac
1001d14c:	033b033b 	.word	0x033b033b
1001d150:	03d003d9 	.word	0x03d003d9
1001d154:	004f004f 	.word	0x004f004f
1001d158:	004f03bf 	.word	0x004f03bf
1001d15c:	004f004f 	.word	0x004f004f
1001d160:	0393004f 	.word	0x0393004f
1001d164:	0372004f 	.word	0x0372004f
1001d168:	004f004f 	.word	0x004f004f
1001d16c:	036d004f 	.word	0x036d004f
1001d170:	004f004f 	.word	0x004f004f
1001d174:	0356004f 	.word	0x0356004f
1001d178:	004f03a7 	.word	0x004f03a7
1001d17c:	004f004f 	.word	0x004f004f
1001d180:	004f004f 	.word	0x004f004f
1001d184:	004f004f 	.word	0x004f004f
1001d188:	033b03ac 	.word	0x033b03ac
1001d18c:	033b033b 	.word	0x033b033b
1001d190:	03d003d9 	.word	0x03d003d9
1001d194:	004f004f 	.word	0x004f004f
1001d198:	004f03bf 	.word	0x004f03bf
1001d19c:	004f004f 	.word	0x004f004f
1001d1a0:	0393004f 	.word	0x0393004f
1001d1a4:	0372004f 	.word	0x0372004f
1001d1a8:	004f004f 	.word	0x004f004f
1001d1ac:	036d004f 	.word	0x036d004f
1001d1b0:	004f004f 	.word	0x004f004f
1001d1b4:	0356004f 	.word	0x0356004f
1001d1b8:	03a7      	.short	0x03a7
1001d1ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d1bc:	059e      	lsls	r6, r3, #22
1001d1be:	d568      	bpl.n	1001d292 <__ssvfscanf_r+0x436>
1001d1c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
1001d1c4:	f898 3000 	ldrb.w	r3, [r8]
1001d1c8:	4293      	cmp	r3, r2
1001d1ca:	d162      	bne.n	1001d292 <__ssvfscanf_r+0x436>
1001d1cc:	e9c7 5401 	strd	r5, r4, [r7, #4]
1001d1d0:	2600      	movs	r6, #0
1001d1d2:	4655      	mov	r5, sl
1001d1d4:	e006      	b.n	1001d1e4 <__ssvfscanf_r+0x388>
1001d1d6:	6029      	str	r1, [r5, #0]
1001d1d8:	f891 e000 	ldrb.w	lr, [r1]
1001d1dc:	f898 0000 	ldrb.w	r0, [r8]
1001d1e0:	4586      	cmp	lr, r0
1001d1e2:	d11b      	bne.n	1001d21c <__ssvfscanf_r+0x3c0>
1001d1e4:	f818 0f01 	ldrb.w	r0, [r8, #1]!
1001d1e8:	46b2      	mov	sl, r6
1001d1ea:	464c      	mov	r4, r9
1001d1ec:	3101      	adds	r1, #1
1001d1ee:	3601      	adds	r6, #1
1001d1f0:	f109 0901 	add.w	r9, r9, #1
1001d1f4:	2800      	cmp	r0, #0
1001d1f6:	f000 8693 	beq.w	1001df20 <__ssvfscanf_r+0x10c4>
1001d1fa:	6868      	ldr	r0, [r5, #4]
1001d1fc:	3801      	subs	r0, #1
1001d1fe:	2800      	cmp	r0, #0
1001d200:	6068      	str	r0, [r5, #4]
1001d202:	dce8      	bgt.n	1001d1d6 <__ssvfscanf_r+0x37a>
1001d204:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d206:	4629      	mov	r1, r5
1001d208:	f004 fc12 	bl	10021a30 <__ssrefill_r>
1001d20c:	b930      	cbnz	r0, 1001d21c <__ssvfscanf_r+0x3c0>
1001d20e:	6829      	ldr	r1, [r5, #0]
1001d210:	f898 0000 	ldrb.w	r0, [r8]
1001d214:	f891 e000 	ldrb.w	lr, [r1]
1001d218:	4586      	cmp	lr, r0
1001d21a:	d0e3      	beq.n	1001d1e4 <__ssvfscanf_r+0x388>
1001d21c:	4652      	mov	r2, sl
1001d21e:	46aa      	mov	sl, r5
1001d220:	e9d7 5807 	ldrd	r5, r8, [r7, #28]
1001d224:	4623      	mov	r3, r4
1001d226:	442e      	add	r6, r5
1001d228:	68bc      	ldr	r4, [r7, #8]
1001d22a:	623c      	str	r4, [r7, #32]
1001d22c:	4634      	mov	r4, r6
1001d22e:	6cfe      	ldr	r6, [r7, #76]	@ 0x4c
1001d230:	61fa      	str	r2, [r7, #28]
1001d232:	4699      	mov	r9, r3
1001d234:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
1001d238:	4652      	mov	r2, sl
1001d23a:	4630      	mov	r0, r6
1001d23c:	f004 fbbc 	bl	100219b8 <_sungetc_r>
1001d240:	42ac      	cmp	r4, r5
1001d242:	d1f7      	bne.n	1001d234 <__ssvfscanf_r+0x3d8>
1001d244:	69fa      	ldr	r2, [r7, #28]
1001d246:	6a3c      	ldr	r4, [r7, #32]
1001d248:	eba9 0902 	sub.w	r9, r9, r2
1001d24c:	e023      	b.n	1001d296 <__ssvfscanf_r+0x43a>
1001d24e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d250:	05d9      	lsls	r1, r3, #23
1001d252:	f100 854e 	bmi.w	1001dcf2 <__ssvfscanf_r+0xe96>
1001d256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001d258:	191b      	adds	r3, r3, r4
1001d25a:	d11a      	bne.n	1001d292 <__ssvfscanf_r+0x436>
1001d25c:	461c      	mov	r4, r3
1001d25e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d260:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
1001d264:	e9c7 4311 	strd	r4, r3, [r7, #68]	@ 0x44
1001d268:	f80b 2b01 	strb.w	r2, [fp], #1
1001d26c:	3d01      	subs	r5, #1
1001d26e:	f8da 3004 	ldr.w	r3, [sl, #4]
1001d272:	3b01      	subs	r3, #1
1001d274:	2b00      	cmp	r3, #0
1001d276:	f109 0901 	add.w	r9, r9, #1
1001d27a:	f8ca 3004 	str.w	r3, [sl, #4]
1001d27e:	f340 83d4 	ble.w	1001da2a <__ssvfscanf_r+0xbce>
1001d282:	f8da 3000 	ldr.w	r3, [sl]
1001d286:	3301      	adds	r3, #1
1001d288:	f8ca 3000 	str.w	r3, [sl]
1001d28c:	2d00      	cmp	r5, #0
1001d28e:	f47f af3c 	bne.w	1001d10a <__ssvfscanf_r+0x2ae>
1001d292:	f8d7 8020 	ldr.w	r8, [r7, #32]
1001d296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001d298:	2b00      	cmp	r3, #0
1001d29a:	f040 8337 	bne.w	1001d90c <__ssvfscanf_r+0xab0>
1001d29e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001d2a0:	3b01      	subs	r3, #1
1001d2a2:	2b01      	cmp	r3, #1
1001d2a4:	f240 83b1 	bls.w	1001da0a <__ssvfscanf_r+0xbae>
1001d2a8:	1e63      	subs	r3, r4, #1
1001d2aa:	2b06      	cmp	r3, #6
1001d2ac:	f240 864f 	bls.w	1001df4e <__ssvfscanf_r+0x10f2>
1001d2b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d2b2:	05d8      	lsls	r0, r3, #23
1001d2b4:	d51c      	bpl.n	1001d2f0 <__ssvfscanf_r+0x494>
1001d2b6:	0559      	lsls	r1, r3, #21
1001d2b8:	f101 8127 	bmi.w	1001e50a <__ssvfscanf_r+0x16ae>
1001d2bc:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
1001d2c0:	2965      	cmp	r1, #101	@ 0x65
1001d2c2:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
1001d2c6:	f109 34ff 	add.w	r4, r9, #4294967295	@ 0xffffffff
1001d2ca:	d00b      	beq.n	1001d2e4 <__ssvfscanf_r+0x488>
1001d2cc:	2945      	cmp	r1, #69	@ 0x45
1001d2ce:	d009      	beq.n	1001d2e4 <__ssvfscanf_r+0x488>
1001d2d0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d2d2:	4652      	mov	r2, sl
1001d2d4:	f004 fb70 	bl	100219b8 <_sungetc_r>
1001d2d8:	f81b 1c02 	ldrb.w	r1, [fp, #-2]
1001d2dc:	f1a9 0402 	sub.w	r4, r9, #2
1001d2e0:	f1ab 0302 	sub.w	r3, fp, #2
1001d2e4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d2e6:	4652      	mov	r2, sl
1001d2e8:	46a1      	mov	r9, r4
1001d2ea:	469b      	mov	fp, r3
1001d2ec:	f004 fb64 	bl	100219b8 <_sungetc_r>
1001d2f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d2f2:	f013 0210 	ands.w	r2, r3, #16
1001d2f6:	f47f add7 	bne.w	1001cea8 <__ssvfscanf_r+0x4c>
1001d2fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
1001d2fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
1001d302:	f88b 2000 	strb.w	r2, [fp]
1001d306:	f000 850f 	beq.w	1001dd28 <__ssvfscanf_r+0xecc>
1001d30a:	697b      	ldr	r3, [r7, #20]
1001d30c:	2b00      	cmp	r3, #0
1001d30e:	f041 8023 	bne.w	1001e358 <__ssvfscanf_r+0x14fc>
1001d312:	2200      	movs	r2, #0
1001d314:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
1001d316:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d318:	f003 f814 	bl	10020344 <_strtod_r>
1001d31c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1001d31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001d320:	07d2      	lsls	r2, r2, #31
1001d322:	4605      	mov	r5, r0
1001d324:	460e      	mov	r6, r1
1001d326:	f103 0404 	add.w	r4, r3, #4
1001d32a:	f140 8629 	bpl.w	1001df80 <__ssvfscanf_r+0x1124>
1001d32e:	681b      	ldr	r3, [r3, #0]
1001d330:	e9c3 5600 	strd	r5, r6, [r3]
1001d334:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001d336:	637c      	str	r4, [r7, #52]	@ 0x34
1001d338:	3301      	adds	r3, #1
1001d33a:	643b      	str	r3, [r7, #64]	@ 0x40
1001d33c:	e5b4      	b.n	1001cea8 <__ssvfscanf_r+0x4c>
1001d33e:	1e6b      	subs	r3, r5, #1
1001d340:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
1001d344:	bf88      	it	hi
1001d346:	f46f 72ae 	mvnhi.w	r2, #348	@ 0x15c
1001d34a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
1001d34e:	bf8c      	ite	hi
1001d350:	18a9      	addhi	r1, r5, r2
1001d352:	2100      	movls	r1, #0
1001d354:	62fb      	str	r3, [r7, #44]	@ 0x2c
1001d356:	461e      	mov	r6, r3
1001d358:	6bba      	ldr	r2, [r7, #56]	@ 0x38
1001d35a:	6479      	str	r1, [r7, #68]	@ 0x44
1001d35c:	4653      	mov	r3, sl
1001d35e:	f444 6458 	orr.w	r4, r4, #3456	@ 0xd80
1001d362:	46ca      	mov	sl, r9
1001d364:	bf88      	it	hi
1001d366:	f240 155d 	movwhi	r5, #349	@ 0x15d
1001d36a:	f04f 0b00 	mov.w	fp, #0
1001d36e:	4699      	mov	r9, r3
1001d370:	f8d9 0000 	ldr.w	r0, [r9]
1001d374:	f890 c000 	ldrb.w	ip, [r0]
1001d378:	f1ac 032b 	sub.w	r3, ip, #43	@ 0x2b
1001d37c:	2b4d      	cmp	r3, #77	@ 0x4d
1001d37e:	d862      	bhi.n	1001d446 <__ssvfscanf_r+0x5ea>
1001d380:	e8df f013 	tbh	[pc, r3, lsl #1]
1001d384:	006102b5 	.word	0x006102b5
1001d388:	006102b5 	.word	0x006102b5
1001d38c:	031e0061 	.word	0x031e0061
1001d390:	02150215 	.word	0x02150215
1001d394:	02150215 	.word	0x02150215
1001d398:	02150215 	.word	0x02150215
1001d39c:	02bb0215 	.word	0x02bb0215
1001d3a0:	006102bb 	.word	0x006102bb
1001d3a4:	00610061 	.word	0x00610061
1001d3a8:	00610061 	.word	0x00610061
1001d3ac:	00610061 	.word	0x00610061
1001d3b0:	004e004e 	.word	0x004e004e
1001d3b4:	004e004e 	.word	0x004e004e
1001d3b8:	004e004e 	.word	0x004e004e
1001d3bc:	00610061 	.word	0x00610061
1001d3c0:	00610061 	.word	0x00610061
1001d3c4:	00610061 	.word	0x00610061
1001d3c8:	00610061 	.word	0x00610061
1001d3cc:	00610061 	.word	0x00610061
1001d3d0:	00610061 	.word	0x00610061
1001d3d4:	00610061 	.word	0x00610061
1001d3d8:	00610061 	.word	0x00610061
1001d3dc:	02a90061 	.word	0x02a90061
1001d3e0:	00610061 	.word	0x00610061
1001d3e4:	00610061 	.word	0x00610061
1001d3e8:	00610061 	.word	0x00610061
1001d3ec:	00610061 	.word	0x00610061
1001d3f0:	004e004e 	.word	0x004e004e
1001d3f4:	004e004e 	.word	0x004e004e
1001d3f8:	004e004e 	.word	0x004e004e
1001d3fc:	00610061 	.word	0x00610061
1001d400:	00610061 	.word	0x00610061
1001d404:	00610061 	.word	0x00610061
1001d408:	00610061 	.word	0x00610061
1001d40c:	00610061 	.word	0x00610061
1001d410:	00610061 	.word	0x00610061
1001d414:	00610061 	.word	0x00610061
1001d418:	00610061 	.word	0x00610061
1001d41c:	02a90061 	.word	0x02a90061
1001d420:	2a0a      	cmp	r2, #10
1001d422:	dd10      	ble.n	1001d446 <__ssvfscanf_r+0x5ea>
1001d424:	f424 6438 	bic.w	r4, r4, #2944	@ 0xb80
1001d428:	f806 cb01 	strb.w	ip, [r6], #1
1001d42c:	f8d9 3004 	ldr.w	r3, [r9, #4]
1001d430:	3b01      	subs	r3, #1
1001d432:	2b00      	cmp	r3, #0
1001d434:	f8c9 3004 	str.w	r3, [r9, #4]
1001d438:	f340 82dd 	ble.w	1001d9f6 <__ssvfscanf_r+0xb9a>
1001d43c:	3001      	adds	r0, #1
1001d43e:	f8c9 0000 	str.w	r0, [r9]
1001d442:	3d01      	subs	r5, #1
1001d444:	d194      	bne.n	1001d370 <__ssvfscanf_r+0x514>
1001d446:	464b      	mov	r3, r9
1001d448:	05e0      	lsls	r0, r4, #23
1001d44a:	46d1      	mov	r9, sl
1001d44c:	63ba      	str	r2, [r7, #56]	@ 0x38
1001d44e:	469a      	mov	sl, r3
1001d450:	d507      	bpl.n	1001d462 <__ssvfscanf_r+0x606>
1001d452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1001d454:	429e      	cmp	r6, r3
1001d456:	f200 8479 	bhi.w	1001dd4c <__ssvfscanf_r+0xef0>
1001d45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1001d45c:	429e      	cmp	r6, r3
1001d45e:	f000 82e1 	beq.w	1001da24 <__ssvfscanf_r+0xbc8>
1001d462:	f014 0210 	ands.w	r2, r4, #16
1001d466:	d111      	bne.n	1001d48c <__ssvfscanf_r+0x630>
1001d468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1001d46a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
1001d46c:	6abd      	ldr	r5, [r7, #40]	@ 0x28
1001d46e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d470:	7032      	strb	r2, [r6, #0]
1001d472:	47a8      	blx	r5
1001d474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001d476:	06a1      	lsls	r1, r4, #26
1001d478:	f103 0504 	add.w	r5, r3, #4
1001d47c:	f140 844c 	bpl.w	1001dd18 <__ssvfscanf_r+0xebc>
1001d480:	681b      	ldr	r3, [r3, #0]
1001d482:	6018      	str	r0, [r3, #0]
1001d484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001d486:	637d      	str	r5, [r7, #52]	@ 0x34
1001d488:	3301      	adds	r3, #1
1001d48a:	643b      	str	r3, [r7, #64]	@ 0x40
1001d48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1001d48e:	1af6      	subs	r6, r6, r3
1001d490:	445e      	add	r6, fp
1001d492:	44b1      	add	r9, r6
1001d494:	e508      	b.n	1001cea8 <__ssvfscanf_r+0x4c>
1001d496:	2d00      	cmp	r5, #0
1001d498:	bf08      	it	eq
1001d49a:	f04f 35ff 	moveq.w	r5, #4294967295	@ 0xffffffff
1001d49e:	07e0      	lsls	r0, r4, #31
1001d4a0:	f004 0310 	and.w	r3, r4, #16
1001d4a4:	f140 82eb 	bpl.w	1001da7e <__ssvfscanf_r+0xc22>
1001d4a8:	2b00      	cmp	r3, #0
1001d4aa:	f040 84bf 	bne.w	1001de2c <__ssvfscanf_r+0xfd0>
1001d4ae:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
1001d4b0:	0621      	lsls	r1, r4, #24
1001d4b2:	f856 2b04 	ldr.w	r2, [r6], #4
1001d4b6:	64ba      	str	r2, [r7, #72]	@ 0x48
1001d4b8:	f140 875d 	bpl.w	1001e376 <__ssvfscanf_r+0x151a>
1001d4bc:	647b      	str	r3, [r7, #68]	@ 0x44
1001d4be:	2a00      	cmp	r2, #0
1001d4c0:	f000 82b0 	beq.w	1001da24 <__ssvfscanf_r+0xbc8>
1001d4c4:	2080      	movs	r0, #128	@ 0x80
1001d4c6:	f7f7 fb57 	bl	10014b78 <malloc>
1001d4ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001d4cc:	4602      	mov	r2, r0
1001d4ce:	2800      	cmp	r0, #0
1001d4d0:	f000 8717 	beq.w	1001e302 <__ssvfscanf_r+0x14a6>
1001d4d4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1001d4d6:	6008      	str	r0, [r1, #0]
1001d4d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
1001d4da:	88c4      	ldrh	r4, [r0, #6]
1001d4dc:	8881      	ldrh	r1, [r0, #4]
1001d4de:	428c      	cmp	r4, r1
1001d4e0:	f080 8607 	bcs.w	1001e0f2 <__ssvfscanf_r+0x1296>
1001d4e4:	6800      	ldr	r0, [r0, #0]
1001d4e6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1001d4e8:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
1001d4ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
1001d4ee:	637e      	str	r6, [r7, #52]	@ 0x34
1001d4f0:	3401      	adds	r4, #1
1001d4f2:	80cc      	strh	r4, [r1, #6]
1001d4f4:	4696      	mov	lr, r2
1001d4f6:	f04f 0c20 	mov.w	ip, #32
1001d4fa:	f8da 1000 	ldr.w	r1, [sl]
1001d4fe:	4eaf      	ldr	r6, [pc, #700]	@ (1001d7bc <__ssvfscanf_r+0x960>)
1001d500:	7809      	ldrb	r1, [r1, #0]
1001d502:	f816 b001 	ldrb.w	fp, [r6, r1]
1001d506:	f01b 0b08 	ands.w	fp, fp, #8
1001d50a:	d170      	bne.n	1001d5ee <__ssvfscanf_r+0x792>
1001d50c:	f8c7 801c 	str.w	r8, [r7, #28]
1001d510:	623e      	str	r6, [r7, #32]
1001d512:	f8c7 e030 	str.w	lr, [r7, #48]	@ 0x30
1001d516:	462e      	mov	r6, r5
1001d518:	f8c7 c044 	str.w	ip, [r7, #68]	@ 0x44
1001d51c:	4698      	mov	r8, r3
1001d51e:	4615      	mov	r5, r2
1001d520:	f7fc f8d2 	bl	100196c8 <__locale_mb_cur_max>
1001d524:	4558      	cmp	r0, fp
1001d526:	f43f ad05 	beq.w	1001cf34 <__ssvfscanf_r+0xd8>
1001d52a:	e9da 3200 	ldrd	r3, r2, [sl]
1001d52e:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
1001d532:	4608      	mov	r0, r1
1001d534:	62f9      	str	r1, [r7, #44]	@ 0x2c
1001d536:	f813 1b01 	ldrb.w	r1, [r3], #1
1001d53a:	f800 100b 	strb.w	r1, [r0, fp]
1001d53e:	3a01      	subs	r2, #1
1001d540:	e9ca 3200 	strd	r3, r2, [sl]
1001d544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1001d546:	2b03      	cmp	r3, #3
1001d548:	f10b 0b01 	add.w	fp, fp, #1
1001d54c:	f107 0468 	add.w	r4, r7, #104	@ 0x68
1001d550:	d102      	bne.n	1001d558 <__ssvfscanf_r+0x6fc>
1001d552:	6823      	ldr	r3, [r4, #0]
1001d554:	2b04      	cmp	r3, #4
1001d556:	d004      	beq.n	1001d562 <__ssvfscanf_r+0x706>
1001d558:	2208      	movs	r2, #8
1001d55a:	2100      	movs	r1, #0
1001d55c:	4620      	mov	r0, r4
1001d55e:	f7fc f82d 	bl	100195bc <memset>
1001d562:	9400      	str	r4, [sp, #0]
1001d564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1001d566:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d568:	465b      	mov	r3, fp
1001d56a:	4629      	mov	r1, r5
1001d56c:	f003 fb1e 	bl	10020bac <_mbrtowc_r>
1001d570:	1c42      	adds	r2, r0, #1
1001d572:	6278      	str	r0, [r7, #36]	@ 0x24
1001d574:	f43f acde 	beq.w	1001cf34 <__ssvfscanf_r+0xd8>
1001d578:	2800      	cmp	r0, #0
1001d57a:	f000 860c 	beq.w	1001e196 <__ssvfscanf_r+0x133a>
1001d57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1001d580:	3302      	adds	r3, #2
1001d582:	d01e      	beq.n	1001d5c2 <__ssvfscanf_r+0x766>
1001d584:	6828      	ldr	r0, [r5, #0]
1001d586:	f003 fbc3 	bl	10020d10 <iswspace>
1001d58a:	2800      	cmp	r0, #0
1001d58c:	f040 877a 	bne.w	1001e484 <__ssvfscanf_r+0x1628>
1001d590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1001d592:	2b03      	cmp	r3, #3
1001d594:	44d9      	add	r9, fp
1001d596:	d102      	bne.n	1001d59e <__ssvfscanf_r+0x742>
1001d598:	6823      	ldr	r3, [r4, #0]
1001d59a:	2b04      	cmp	r3, #4
1001d59c:	d000      	beq.n	1001d5a0 <__ssvfscanf_r+0x744>
1001d59e:	3e01      	subs	r6, #1
1001d5a0:	f1b8 0f00 	cmp.w	r8, #0
1001d5a4:	f040 86e3 	bne.w	1001e36e <__ssvfscanf_r+0x1512>
1001d5a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d5aa:	3504      	adds	r5, #4
1001d5ac:	2b00      	cmp	r3, #0
1001d5ae:	f000 86de 	beq.w	1001e36e <__ssvfscanf_r+0x1512>
1001d5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001d5b4:	1aec      	subs	r4, r5, r3
1001d5b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001d5b8:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
1001d5bc:	f240 8794 	bls.w	1001e4e8 <__ssvfscanf_r+0x168c>
1001d5c0:	46c3      	mov	fp, r8
1001d5c2:	f8da 3004 	ldr.w	r3, [sl, #4]
1001d5c6:	2b00      	cmp	r3, #0
1001d5c8:	f340 8728 	ble.w	1001e41c <__ssvfscanf_r+0x15c0>
1001d5cc:	f8da 3000 	ldr.w	r3, [sl]
1001d5d0:	6a3a      	ldr	r2, [r7, #32]
1001d5d2:	781b      	ldrb	r3, [r3, #0]
1001d5d4:	5cd3      	ldrb	r3, [r2, r3]
1001d5d6:	0718      	lsls	r0, r3, #28
1001d5d8:	d401      	bmi.n	1001d5de <__ssvfscanf_r+0x782>
1001d5da:	2e00      	cmp	r6, #0
1001d5dc:	d1a0      	bne.n	1001d520 <__ssvfscanf_r+0x6c4>
1001d5de:	4643      	mov	r3, r8
1001d5e0:	f8d7 e030 	ldr.w	lr, [r7, #48]	@ 0x30
1001d5e4:	f8d7 c044 	ldr.w	ip, [r7, #68]	@ 0x44
1001d5e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
1001d5ec:	462a      	mov	r2, r5
1001d5ee:	2b00      	cmp	r3, #0
1001d5f0:	f47f ac5a 	bne.w	1001cea8 <__ssvfscanf_r+0x4c>
1001d5f4:	6013      	str	r3, [r2, #0]
1001d5f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d5f8:	b133      	cbz	r3, 1001d608 <__ssvfscanf_r+0x7ac>
1001d5fa:	eba2 020e 	sub.w	r2, r2, lr
1001d5fe:	1093      	asrs	r3, r2, #2
1001d600:	3301      	adds	r3, #1
1001d602:	459c      	cmp	ip, r3
1001d604:	f200 8611 	bhi.w	1001e22a <__ssvfscanf_r+0x13ce>
1001d608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001d60a:	3301      	adds	r3, #1
1001d60c:	643b      	str	r3, [r7, #64]	@ 0x40
1001d60e:	e44b      	b.n	1001cea8 <__ssvfscanf_r+0x4c>
1001d610:	2d00      	cmp	r5, #0
1001d612:	bf08      	it	eq
1001d614:	f04f 35ff 	moveq.w	r5, #4294967295	@ 0xffffffff
1001d618:	07e6      	lsls	r6, r4, #31
1001d61a:	f004 0210 	and.w	r2, r4, #16
1001d61e:	f140 829d 	bpl.w	1001db5c <__ssvfscanf_r+0xd00>
1001d622:	2a00      	cmp	r2, #0
1001d624:	f040 843e 	bne.w	1001dea4 <__ssvfscanf_r+0x1048>
1001d628:	6b79      	ldr	r1, [r7, #52]	@ 0x34
1001d62a:	0624      	lsls	r4, r4, #24
1001d62c:	f851 3b04 	ldr.w	r3, [r1], #4
1001d630:	637b      	str	r3, [r7, #52]	@ 0x34
1001d632:	6239      	str	r1, [r7, #32]
1001d634:	f140 86aa 	bpl.w	1001e38c <__ssvfscanf_r+0x1530>
1001d638:	64ba      	str	r2, [r7, #72]	@ 0x48
1001d63a:	2b00      	cmp	r3, #0
1001d63c:	f000 81f2 	beq.w	1001da24 <__ssvfscanf_r+0xbc8>
1001d640:	2080      	movs	r0, #128	@ 0x80
1001d642:	f7f7 fa99 	bl	10014b78 <malloc>
1001d646:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1001d648:	4683      	mov	fp, r0
1001d64a:	2800      	cmp	r0, #0
1001d64c:	f000 8659 	beq.w	1001e302 <__ssvfscanf_r+0x14a6>
1001d650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001d652:	6018      	str	r0, [r3, #0]
1001d654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001d656:	88dc      	ldrh	r4, [r3, #6]
1001d658:	8899      	ldrh	r1, [r3, #4]
1001d65a:	428c      	cmp	r4, r1
1001d65c:	f080 8535 	bcs.w	1001e0ca <__ssvfscanf_r+0x126e>
1001d660:	6818      	ldr	r0, [r3, #0]
1001d662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001d664:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
1001d668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001d66a:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
1001d66e:	3401      	adds	r4, #1
1001d670:	80dc      	strh	r4, [r3, #6]
1001d672:	2320      	movs	r3, #32
1001d674:	62fb      	str	r3, [r7, #44]	@ 0x2c
1001d676:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
1001d678:	f8c7 801c 	str.w	r8, [r7, #28]
1001d67c:	2600      	movs	r6, #0
1001d67e:	647a      	str	r2, [r7, #68]	@ 0x44
1001d680:	46a8      	mov	r8, r5
1001d682:	f7fc f821 	bl	100196c8 <__locale_mb_cur_max>
1001d686:	42b0      	cmp	r0, r6
1001d688:	f43f ac54 	beq.w	1001cf34 <__ssvfscanf_r+0xd8>
1001d68c:	e9da 3200 	ldrd	r3, r2, [sl]
1001d690:	f507 70b8 	add.w	r0, r7, #368	@ 0x170
1001d694:	f813 1b01 	ldrb.w	r1, [r3], #1
1001d698:	5581      	strb	r1, [r0, r6]
1001d69a:	3a01      	subs	r2, #1
1001d69c:	2c03      	cmp	r4, #3
1001d69e:	e9ca 3200 	strd	r3, r2, [sl]
1001d6a2:	f106 0601 	add.w	r6, r6, #1
1001d6a6:	f107 0560 	add.w	r5, r7, #96	@ 0x60
1001d6aa:	d102      	bne.n	1001d6b2 <__ssvfscanf_r+0x856>
1001d6ac:	682b      	ldr	r3, [r5, #0]
1001d6ae:	2b04      	cmp	r3, #4
1001d6b0:	d004      	beq.n	1001d6bc <__ssvfscanf_r+0x860>
1001d6b2:	2208      	movs	r2, #8
1001d6b4:	2100      	movs	r1, #0
1001d6b6:	4628      	mov	r0, r5
1001d6b8:	f7fb ff80 	bl	100195bc <memset>
1001d6bc:	9500      	str	r5, [sp, #0]
1001d6be:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d6c0:	4633      	mov	r3, r6
1001d6c2:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
1001d6c6:	4659      	mov	r1, fp
1001d6c8:	f003 fa70 	bl	10020bac <_mbrtowc_r>
1001d6cc:	4604      	mov	r4, r0
1001d6ce:	1c60      	adds	r0, r4, #1
1001d6d0:	f43f ac30 	beq.w	1001cf34 <__ssvfscanf_r+0xd8>
1001d6d4:	2c00      	cmp	r4, #0
1001d6d6:	f040 83f2 	bne.w	1001debe <__ssvfscanf_r+0x1062>
1001d6da:	f8cb 4000 	str.w	r4, [fp]
1001d6de:	4623      	mov	r3, r4
1001d6e0:	2208      	movs	r2, #8
1001d6e2:	2100      	movs	r1, #0
1001d6e4:	f107 0068 	add.w	r0, r7, #104	@ 0x68
1001d6e8:	64bb      	str	r3, [r7, #72]	@ 0x48
1001d6ea:	f7fb ff67 	bl	100195bc <memset>
1001d6ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d6f0:	461a      	mov	r2, r3
1001d6f2:	4b33      	ldr	r3, [pc, #204]	@ (1001d7c0 <__ssvfscanf_r+0x964>)
1001d6f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
1001d6f8:	64bb      	str	r3, [r7, #72]	@ 0x48
1001d6fa:	e9d7 c012 	ldrd	ip, r0, [r7, #72]	@ 0x48
1001d6fe:	f107 0368 	add.w	r3, r7, #104	@ 0x68
1001d702:	f107 0150 	add.w	r1, r7, #80	@ 0x50
1001d706:	47e0      	blx	ip
1001d708:	2801      	cmp	r0, #1
1001d70a:	bf0c      	ite	eq
1001d70c:	f897 3050 	ldrbeq.w	r3, [r7, #80]	@ 0x50
1001d710:	2300      	movne	r3, #0
1001d712:	f107 0270 	add.w	r2, r7, #112	@ 0x70
1001d716:	5cd3      	ldrb	r3, [r2, r3]
1001d718:	2b00      	cmp	r3, #0
1001d71a:	f000 863e 	beq.w	1001e39a <__ssvfscanf_r+0x153e>
1001d71e:	2c03      	cmp	r4, #3
1001d720:	44b1      	add	r9, r6
1001d722:	f000 83d5 	beq.w	1001ded0 <__ssvfscanf_r+0x1074>
1001d726:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
1001d72a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001d72c:	2b00      	cmp	r3, #0
1001d72e:	f040 83c4 	bne.w	1001deba <__ssvfscanf_r+0x105e>
1001d732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001d734:	f10b 0b04 	add.w	fp, fp, #4
1001d738:	2b00      	cmp	r3, #0
1001d73a:	f000 83be 	beq.w	1001deba <__ssvfscanf_r+0x105e>
1001d73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001d740:	ebab 0503 	sub.w	r5, fp, r3
1001d744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1001d746:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
1001d74a:	f240 83d8 	bls.w	1001defe <__ssvfscanf_r+0x10a2>
1001d74e:	6c7e      	ldr	r6, [r7, #68]	@ 0x44
1001d750:	f8da 3004 	ldr.w	r3, [sl, #4]
1001d754:	2b00      	cmp	r3, #0
1001d756:	f340 82a3 	ble.w	1001dca0 <__ssvfscanf_r+0xe44>
1001d75a:	f1b8 0f00 	cmp.w	r8, #0
1001d75e:	d190      	bne.n	1001d682 <__ssvfscanf_r+0x826>
1001d760:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1001d762:	f8d7 801c 	ldr.w	r8, [r7, #28]
1001d766:	627c      	str	r4, [r7, #36]	@ 0x24
1001d768:	b97a      	cbnz	r2, 1001d78a <__ssvfscanf_r+0x92e>
1001d76a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001d76c:	f8cb 2000 	str.w	r2, [fp]
1001d770:	b143      	cbz	r3, 1001d784 <__ssvfscanf_r+0x928>
1001d772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001d774:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
1001d776:	ebab 0303 	sub.w	r3, fp, r3
1001d77a:	109a      	asrs	r2, r3, #2
1001d77c:	3201      	adds	r2, #1
1001d77e:	4291      	cmp	r1, r2
1001d780:	f200 86a7 	bhi.w	1001e4d2 <__ssvfscanf_r+0x1676>
1001d784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001d786:	3301      	adds	r3, #1
1001d788:	643b      	str	r3, [r7, #64]	@ 0x40
1001d78a:	6a3b      	ldr	r3, [r7, #32]
1001d78c:	637b      	str	r3, [r7, #52]	@ 0x34
1001d78e:	f7ff bb8b 	b.w	1001cea8 <__ssvfscanf_r+0x4c>
1001d792:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1001d794:	050e      	lsls	r6, r1, #20
1001d796:	f57f ad7c 	bpl.w	1001d292 <__ssvfscanf_r+0x436>
1001d79a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001d79c:	191b      	adds	r3, r3, r4
1001d79e:	f47f ad78 	bne.w	1001d292 <__ssvfscanf_r+0x436>
1001d7a2:	461c      	mov	r4, r3
1001d7a4:	f421 73c0 	bic.w	r3, r1, #384	@ 0x180
1001d7a8:	e9c7 4311 	strd	r4, r3, [r7, #68]	@ 0x44
1001d7ac:	e55c      	b.n	1001d268 <__ssvfscanf_r+0x40c>
1001d7ae:	4b05      	ldr	r3, [pc, #20]	@ (1001d7c4 <__ssvfscanf_r+0x968>)
1001d7b0:	f424 6438 	bic.w	r4, r4, #2944	@ 0xb80
1001d7b4:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
1001d7b8:	e636      	b.n	1001d428 <__ssvfscanf_r+0x5cc>
1001d7ba:	bf00      	nop
1001d7bc:	1002553d 	.word	0x1002553d
1001d7c0:	2000042c 	.word	0x2000042c
1001d7c4:	100256f0 	.word	0x100256f0
1001d7c8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1001d7ca:	f401 6318 	and.w	r3, r1, #2432	@ 0x980
1001d7ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
1001d7d2:	f47f ad5e 	bne.w	1001d292 <__ssvfscanf_r+0x436>
1001d7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001d7d8:	2b01      	cmp	r3, #1
1001d7da:	f47f ad5a 	bne.w	1001d292 <__ssvfscanf_r+0x436>
1001d7de:	f421 7380 	bic.w	r3, r1, #256	@ 0x100
1001d7e2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
1001d7e6:	64bb      	str	r3, [r7, #72]	@ 0x48
1001d7e8:	2330      	movs	r3, #48	@ 0x30
1001d7ea:	f80b 3b01 	strb.w	r3, [fp], #1
1001d7ee:	2300      	movs	r3, #0
1001d7f0:	3d01      	subs	r5, #1
1001d7f2:	633b      	str	r3, [r7, #48]	@ 0x30
1001d7f4:	e538      	b.n	1001d268 <__ssvfscanf_r+0x40c>
1001d7f6:	2c06      	cmp	r4, #6
1001d7f8:	f47f ad4b 	bne.w	1001d292 <__ssvfscanf_r+0x436>
1001d7fc:	2407      	movs	r4, #7
1001d7fe:	e533      	b.n	1001d268 <__ssvfscanf_r+0x40c>
1001d800:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d802:	051e      	lsls	r6, r3, #20
1001d804:	f57f ad45 	bpl.w	1001d292 <__ssvfscanf_r+0x436>
1001d808:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1001d80a:	f401 63a0 	and.w	r3, r1, #1280	@ 0x500
1001d80e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
1001d812:	d005      	beq.n	1001d820 <__ssvfscanf_r+0x9c4>
1001d814:	0549      	lsls	r1, r1, #21
1001d816:	f57f ad3c 	bpl.w	1001d292 <__ssvfscanf_r+0x436>
1001d81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001d81c:	2b00      	cmp	r3, #0
1001d81e:	d048      	beq.n	1001d8b2 <__ssvfscanf_r+0xa56>
1001d820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d822:	059b      	lsls	r3, r3, #22
1001d824:	d404      	bmi.n	1001d830 <__ssvfscanf_r+0x9d4>
1001d826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001d828:	69b9      	ldr	r1, [r7, #24]
1001d82a:	1a5b      	subs	r3, r3, r1
1001d82c:	e9c7 b304 	strd	fp, r3, [r7, #16]
1001d830:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d832:	f423 6378 	bic.w	r3, r3, #3968	@ 0xf80
1001d836:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
1001d83a:	64bb      	str	r3, [r7, #72]	@ 0x48
1001d83c:	2300      	movs	r3, #0
1001d83e:	633b      	str	r3, [r7, #48]	@ 0x30
1001d840:	e512      	b.n	1001d268 <__ssvfscanf_r+0x40c>
1001d842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001d844:	2b00      	cmp	r3, #0
1001d846:	f040 821d 	bne.w	1001dc84 <__ssvfscanf_r+0xe28>
1001d84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001d84c:	b933      	cbnz	r3, 1001d85c <__ssvfscanf_r+0xa00>
1001d84e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d850:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
1001d854:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
1001d858:	f000 8606 	beq.w	1001e468 <__ssvfscanf_r+0x160c>
1001d85c:	2c01      	cmp	r4, #1
1001d85e:	f000 820d 	beq.w	1001dc7c <__ssvfscanf_r+0xe20>
1001d862:	2c04      	cmp	r4, #4
1001d864:	f000 820a 	beq.w	1001dc7c <__ssvfscanf_r+0xe20>
1001d868:	e513      	b.n	1001d292 <__ssvfscanf_r+0x436>
1001d86a:	2c07      	cmp	r4, #7
1001d86c:	f47f ad11 	bne.w	1001d292 <__ssvfscanf_r+0x436>
1001d870:	2408      	movs	r4, #8
1001d872:	e4f9      	b.n	1001d268 <__ssvfscanf_r+0x40c>
1001d874:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d876:	0519      	lsls	r1, r3, #20
1001d878:	f100 820c 	bmi.w	1001dc94 <__ssvfscanf_r+0xe38>
1001d87c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001d87e:	2b01      	cmp	r3, #1
1001d880:	f47f ad07 	bne.w	1001d292 <__ssvfscanf_r+0x436>
1001d884:	2302      	movs	r3, #2
1001d886:	647b      	str	r3, [r7, #68]	@ 0x44
1001d888:	e4ee      	b.n	1001d268 <__ssvfscanf_r+0x40c>
1001d88a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d88c:	0618      	lsls	r0, r3, #24
1001d88e:	f57f ad00 	bpl.w	1001d292 <__ssvfscanf_r+0x436>
1001d892:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
1001d896:	64bb      	str	r3, [r7, #72]	@ 0x48
1001d898:	e4e6      	b.n	1001d268 <__ssvfscanf_r+0x40c>
1001d89a:	2c00      	cmp	r4, #0
1001d89c:	f040 81e9 	bne.w	1001dc72 <__ssvfscanf_r+0xe16>
1001d8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001d8a2:	bb8b      	cbnz	r3, 1001d908 <__ssvfscanf_r+0xaac>
1001d8a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d8a6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
1001d8aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
1001d8ae:	f000 85cd 	beq.w	1001e44c <__ssvfscanf_r+0x15f0>
1001d8b2:	2300      	movs	r3, #0
1001d8b4:	f8d7 8020 	ldr.w	r8, [r7, #32]
1001d8b8:	633b      	str	r3, [r7, #48]	@ 0x30
1001d8ba:	e4f0      	b.n	1001d29e <__ssvfscanf_r+0x442>
1001d8bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d8be:	051b      	lsls	r3, r3, #20
1001d8c0:	f100 81d1 	bmi.w	1001dc66 <__ssvfscanf_r+0xe0a>
1001d8c4:	2c02      	cmp	r4, #2
1001d8c6:	f47f ace4 	bne.w	1001d292 <__ssvfscanf_r+0x436>
1001d8ca:	2403      	movs	r4, #3
1001d8cc:	e4cc      	b.n	1001d268 <__ssvfscanf_r+0x40c>
1001d8ce:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1001d8d0:	0508      	lsls	r0, r1, #20
1001d8d2:	d599      	bpl.n	1001d808 <__ssvfscanf_r+0x9ac>
1001d8d4:	e761      	b.n	1001d79a <__ssvfscanf_r+0x93e>
1001d8d6:	f404 63c0 	and.w	r3, r4, #1536	@ 0x600
1001d8da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
1001d8de:	f47f adb2 	bne.w	1001d446 <__ssvfscanf_r+0x5ea>
1001d8e2:	f424 7400 	bic.w	r4, r4, #512	@ 0x200
1001d8e6:	f444 64a0 	orr.w	r4, r4, #1280	@ 0x500
1001d8ea:	2210      	movs	r2, #16
1001d8ec:	e59c      	b.n	1001d428 <__ssvfscanf_r+0x5cc>
1001d8ee:	0623      	lsls	r3, r4, #24
1001d8f0:	f57f ada9 	bpl.w	1001d446 <__ssvfscanf_r+0x5ea>
1001d8f4:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
1001d8f8:	e596      	b.n	1001d428 <__ssvfscanf_r+0x5cc>
1001d8fa:	4b94      	ldr	r3, [pc, #592]	@ (1001db4c <__ssvfscanf_r+0xcf0>)
1001d8fc:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
1001d900:	2a08      	cmp	r2, #8
1001d902:	f73f ad8f 	bgt.w	1001d424 <__ssvfscanf_r+0x5c8>
1001d906:	e59e      	b.n	1001d446 <__ssvfscanf_r+0x5ea>
1001d908:	f8d7 8020 	ldr.w	r8, [r7, #32]
1001d90c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001d90e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
1001d912:	64bb      	str	r3, [r7, #72]	@ 0x48
1001d914:	e4c3      	b.n	1001d29e <__ssvfscanf_r+0x442>
1001d916:	f044 0401 	orr.w	r4, r4, #1
1001d91a:	f8da 3004 	ldr.w	r3, [sl, #4]
1001d91e:	2b00      	cmp	r3, #0
1001d920:	4688      	mov	r8, r1
1001d922:	f04f 0b02 	mov.w	fp, #2
1001d926:	f73f abb8 	bgt.w	1001d09a <__ssvfscanf_r+0x23e>
1001d92a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d92c:	4651      	mov	r1, sl
1001d92e:	f004 f87f 	bl	10021a30 <__ssrefill_r>
1001d932:	2800      	cmp	r0, #0
1001d934:	f47f aafe 	bne.w	1001cf34 <__ssvfscanf_r+0xd8>
1001d938:	0660      	lsls	r0, r4, #25
1001d93a:	f53f abb1 	bmi.w	1001d0a0 <__ssvfscanf_r+0x244>
1001d93e:	f8da 2000 	ldr.w	r2, [sl]
1001d942:	4e83      	ldr	r6, [pc, #524]	@ (1001db50 <__ssvfscanf_r+0xcf4>)
1001d944:	7813      	ldrb	r3, [r2, #0]
1001d946:	5cf3      	ldrb	r3, [r6, r3]
1001d948:	0719      	lsls	r1, r3, #28
1001d94a:	f57f aba9 	bpl.w	1001d0a0 <__ssvfscanf_r+0x244>
1001d94e:	4633      	mov	r3, r6
1001d950:	4656      	mov	r6, sl
1001d952:	469a      	mov	sl, r3
1001d954:	e005      	b.n	1001d962 <__ssvfscanf_r+0xb06>
1001d956:	6032      	str	r2, [r6, #0]
1001d958:	7813      	ldrb	r3, [r2, #0]
1001d95a:	f81a 3003 	ldrb.w	r3, [sl, r3]
1001d95e:	071b      	lsls	r3, r3, #28
1001d960:	d515      	bpl.n	1001d98e <__ssvfscanf_r+0xb32>
1001d962:	6873      	ldr	r3, [r6, #4]
1001d964:	3b01      	subs	r3, #1
1001d966:	2b00      	cmp	r3, #0
1001d968:	f109 0901 	add.w	r9, r9, #1
1001d96c:	6073      	str	r3, [r6, #4]
1001d96e:	f102 0201 	add.w	r2, r2, #1
1001d972:	dcf0      	bgt.n	1001d956 <__ssvfscanf_r+0xafa>
1001d974:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d976:	4631      	mov	r1, r6
1001d978:	f004 f85a 	bl	10021a30 <__ssrefill_r>
1001d97c:	2800      	cmp	r0, #0
1001d97e:	f040 82e3 	bne.w	1001df48 <__ssvfscanf_r+0x10ec>
1001d982:	6832      	ldr	r2, [r6, #0]
1001d984:	7813      	ldrb	r3, [r2, #0]
1001d986:	f81a 3003 	ldrb.w	r3, [sl, r3]
1001d98a:	071b      	lsls	r3, r3, #28
1001d98c:	d4e9      	bmi.n	1001d962 <__ssvfscanf_r+0xb06>
1001d98e:	46b2      	mov	sl, r6
1001d990:	f7ff bb86 	b.w	1001d0a0 <__ssvfscanf_r+0x244>
1001d994:	f044 0401 	orr.w	r4, r4, #1
1001d998:	4b6e      	ldr	r3, [pc, #440]	@ (1001db54 <__ssvfscanf_r+0xcf8>)
1001d99a:	62bb      	str	r3, [r7, #40]	@ 0x28
1001d99c:	230a      	movs	r3, #10
1001d99e:	4688      	mov	r8, r1
1001d9a0:	63bb      	str	r3, [r7, #56]	@ 0x38
1001d9a2:	f04f 0b03 	mov.w	fp, #3
1001d9a6:	f7ff bb73 	b.w	1001d090 <__ssvfscanf_r+0x234>
1001d9aa:	f044 0401 	orr.w	r4, r4, #1
1001d9ae:	4b6a      	ldr	r3, [pc, #424]	@ (1001db58 <__ssvfscanf_r+0xcfc>)
1001d9b0:	62bb      	str	r3, [r7, #40]	@ 0x28
1001d9b2:	2308      	movs	r3, #8
1001d9b4:	4688      	mov	r8, r1
1001d9b6:	63bb      	str	r3, [r7, #56]	@ 0x38
1001d9b8:	f04f 0b03 	mov.w	fp, #3
1001d9bc:	f7ff bb68 	b.w	1001d090 <__ssvfscanf_r+0x234>
1001d9c0:	0523      	lsls	r3, r4, #20
1001d9c2:	f57f ad31 	bpl.w	1001d428 <__ssvfscanf_r+0x5cc>
1001d9c6:	b912      	cbnz	r2, 1001d9ce <__ssvfscanf_r+0xb72>
1001d9c8:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
1001d9cc:	2208      	movs	r2, #8
1001d9ce:	0561      	lsls	r1, r4, #21
1001d9d0:	f100 819e 	bmi.w	1001dd10 <__ssvfscanf_r+0xeb4>
1001d9d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001d9d6:	f424 7460 	bic.w	r4, r4, #896	@ 0x380
1001d9da:	b113      	cbz	r3, 1001d9e2 <__ssvfscanf_r+0xb86>
1001d9dc:	3b01      	subs	r3, #1
1001d9de:	647b      	str	r3, [r7, #68]	@ 0x44
1001d9e0:	3501      	adds	r5, #1
1001d9e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
1001d9e6:	3b01      	subs	r3, #1
1001d9e8:	2b00      	cmp	r3, #0
1001d9ea:	f10b 0b01 	add.w	fp, fp, #1
1001d9ee:	f8c9 3004 	str.w	r3, [r9, #4]
1001d9f2:	f73f ad23 	bgt.w	1001d43c <__ssvfscanf_r+0x5e0>
1001d9f6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001d9f8:	64ba      	str	r2, [r7, #72]	@ 0x48
1001d9fa:	4649      	mov	r1, r9
1001d9fc:	f004 f818 	bl	10021a30 <__ssrefill_r>
1001da00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1001da02:	2800      	cmp	r0, #0
1001da04:	f43f ad1d 	beq.w	1001d442 <__ssvfscanf_r+0x5e6>
1001da08:	e51d      	b.n	1001d446 <__ssvfscanf_r+0x5ea>
1001da0a:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
1001da0c:	45ab      	cmp	fp, r5
1001da0e:	f240 8114 	bls.w	1001dc3a <__ssvfscanf_r+0xdde>
1001da12:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
1001da14:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
1001da18:	4652      	mov	r2, sl
1001da1a:	4620      	mov	r0, r4
1001da1c:	f003 ffcc 	bl	100219b8 <_sungetc_r>
1001da20:	45ab      	cmp	fp, r5
1001da22:	d1f7      	bne.n	1001da14 <__ssvfscanf_r+0xbb8>
1001da24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001da26:	f7ff ba90 	b.w	1001cf4a <__ssvfscanf_r+0xee>
1001da2a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001da2c:	4651      	mov	r1, sl
1001da2e:	f003 ffff 	bl	10021a30 <__ssrefill_r>
1001da32:	2800      	cmp	r0, #0
1001da34:	f47f ac2d 	bne.w	1001d292 <__ssvfscanf_r+0x436>
1001da38:	2d00      	cmp	r5, #0
1001da3a:	f47f ab66 	bne.w	1001d10a <__ssvfscanf_r+0x2ae>
1001da3e:	e428      	b.n	1001d292 <__ssvfscanf_r+0x436>
1001da40:	f8da 2004 	ldr.w	r2, [sl, #4]
1001da44:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
1001da46:	e010      	b.n	1001da6a <__ssvfscanf_r+0xc0e>
1001da48:	f8da 3000 	ldr.w	r3, [sl]
1001da4c:	4940      	ldr	r1, [pc, #256]	@ (1001db50 <__ssvfscanf_r+0xcf4>)
1001da4e:	781a      	ldrb	r2, [r3, #0]
1001da50:	5c8a      	ldrb	r2, [r1, r2]
1001da52:	0711      	lsls	r1, r2, #28
1001da54:	f103 0301 	add.w	r3, r3, #1
1001da58:	f57f aa26 	bpl.w	1001cea8 <__ssvfscanf_r+0x4c>
1001da5c:	f8da 2004 	ldr.w	r2, [sl, #4]
1001da60:	3a01      	subs	r2, #1
1001da62:	e9ca 3200 	strd	r3, r2, [sl]
1001da66:	f109 0901 	add.w	r9, r9, #1
1001da6a:	2a00      	cmp	r2, #0
1001da6c:	dcec      	bgt.n	1001da48 <__ssvfscanf_r+0xbec>
1001da6e:	4651      	mov	r1, sl
1001da70:	4620      	mov	r0, r4
1001da72:	f003 ffdd 	bl	10021a30 <__ssrefill_r>
1001da76:	2800      	cmp	r0, #0
1001da78:	d0e6      	beq.n	1001da48 <__ssvfscanf_r+0xbec>
1001da7a:	f7ff ba15 	b.w	1001cea8 <__ssvfscanf_r+0x4c>
1001da7e:	2b00      	cmp	r3, #0
1001da80:	f040 8395 	bne.w	1001e1ae <__ssvfscanf_r+0x1352>
1001da84:	f8d7 b034 	ldr.w	fp, [r7, #52]	@ 0x34
1001da88:	f014 0280 	ands.w	r2, r4, #128	@ 0x80
1001da8c:	f85b 6b04 	ldr.w	r6, [fp], #4
1001da90:	64be      	str	r6, [r7, #72]	@ 0x48
1001da92:	f000 8446 	beq.w	1001e322 <__ssvfscanf_r+0x14c6>
1001da96:	2e00      	cmp	r6, #0
1001da98:	d0c4      	beq.n	1001da24 <__ssvfscanf_r+0xbc8>
1001da9a:	2020      	movs	r0, #32
1001da9c:	f7f7 f86c 	bl	10014b78 <malloc>
1001daa0:	4604      	mov	r4, r0
1001daa2:	2800      	cmp	r0, #0
1001daa4:	f000 842d 	beq.w	1001e302 <__ssvfscanf_r+0x14a6>
1001daa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001daaa:	6030      	str	r0, [r6, #0]
1001daac:	889a      	ldrh	r2, [r3, #4]
1001daae:	88de      	ldrh	r6, [r3, #6]
1001dab0:	4296      	cmp	r6, r2
1001dab2:	f080 8273 	bcs.w	1001df9c <__ssvfscanf_r+0x1140>
1001dab6:	6818      	ldr	r0, [r3, #0]
1001dab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001daba:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
1001dabe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001dac0:	3601      	adds	r6, #1
1001dac2:	80de      	strh	r6, [r3, #6]
1001dac4:	2320      	movs	r3, #32
1001dac6:	647b      	str	r3, [r7, #68]	@ 0x44
1001dac8:	f8da 0000 	ldr.w	r0, [sl]
1001dacc:	4e20      	ldr	r6, [pc, #128]	@ (1001db50 <__ssvfscanf_r+0xcf4>)
1001dace:	7802      	ldrb	r2, [r0, #0]
1001dad0:	5cb2      	ldrb	r2, [r6, r2]
1001dad2:	0713      	lsls	r3, r2, #28
1001dad4:	f100 82e4 	bmi.w	1001e0a0 <__ssvfscanf_r+0x1244>
1001dad8:	4643      	mov	r3, r8
1001dada:	4622      	mov	r2, r4
1001dadc:	46b0      	mov	r8, r6
1001dade:	4626      	mov	r6, r4
1001dae0:	f8da 1004 	ldr.w	r1, [sl, #4]
1001dae4:	3901      	subs	r1, #1
1001dae6:	f8ca 1004 	str.w	r1, [sl, #4]
1001daea:	1c41      	adds	r1, r0, #1
1001daec:	f8ca 1000 	str.w	r1, [sl]
1001daf0:	4634      	mov	r4, r6
1001daf2:	7801      	ldrb	r1, [r0, #0]
1001daf4:	f804 1b01 	strb.w	r1, [r4], #1
1001daf8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1001dafa:	b121      	cbz	r1, 1001db06 <__ssvfscanf_r+0xcaa>
1001dafc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
1001dafe:	1aa6      	subs	r6, r4, r2
1001db00:	428e      	cmp	r6, r1
1001db02:	f080 8419 	bcs.w	1001e338 <__ssvfscanf_r+0x14dc>
1001db06:	3d01      	subs	r5, #1
1001db08:	d00c      	beq.n	1001db24 <__ssvfscanf_r+0xcc8>
1001db0a:	f8da 1004 	ldr.w	r1, [sl, #4]
1001db0e:	2900      	cmp	r1, #0
1001db10:	4626      	mov	r6, r4
1001db12:	f340 8462 	ble.w	1001e3da <__ssvfscanf_r+0x157e>
1001db16:	f8da 0000 	ldr.w	r0, [sl]
1001db1a:	7801      	ldrb	r1, [r0, #0]
1001db1c:	f818 1001 	ldrb.w	r1, [r8, r1]
1001db20:	0709      	lsls	r1, r1, #28
1001db22:	d5dd      	bpl.n	1001dae0 <__ssvfscanf_r+0xc84>
1001db24:	1aa2      	subs	r2, r4, r2
1001db26:	4698      	mov	r8, r3
1001db28:	4491      	add	r9, r2
1001db2a:	1c51      	adds	r1, r2, #1
1001db2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001db2e:	2200      	movs	r2, #0
1001db30:	7022      	strb	r2, [r4, #0]
1001db32:	b11b      	cbz	r3, 1001db3c <__ssvfscanf_r+0xce0>
1001db34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001db36:	428b      	cmp	r3, r1
1001db38:	f200 8445 	bhi.w	1001e3c6 <__ssvfscanf_r+0x156a>
1001db3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001db3e:	f8c7 b034 	str.w	fp, [r7, #52]	@ 0x34
1001db42:	3301      	adds	r3, #1
1001db44:	643b      	str	r3, [r7, #64]	@ 0x40
1001db46:	f7ff b9af 	b.w	1001cea8 <__ssvfscanf_r+0x4c>
1001db4a:	bf00      	nop
1001db4c:	100256f0 	.word	0x100256f0
1001db50:	1002553d 	.word	0x1002553d
1001db54:	10020489 	.word	0x10020489
1001db58:	100205c1 	.word	0x100205c1
1001db5c:	2a00      	cmp	r2, #0
1001db5e:	f040 816e 	bne.w	1001de3e <__ssvfscanf_r+0xfe2>
1001db62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001db64:	f014 0480 	ands.w	r4, r4, #128	@ 0x80
1001db68:	f853 bb04 	ldr.w	fp, [r3], #4
1001db6c:	64bb      	str	r3, [r7, #72]	@ 0x48
1001db6e:	f000 8409 	beq.w	1001e384 <__ssvfscanf_r+0x1528>
1001db72:	f1bb 0f00 	cmp.w	fp, #0
1001db76:	f43f af55 	beq.w	1001da24 <__ssvfscanf_r+0xbc8>
1001db7a:	2020      	movs	r0, #32
1001db7c:	f7f6 fffc 	bl	10014b78 <malloc>
1001db80:	4606      	mov	r6, r0
1001db82:	2800      	cmp	r0, #0
1001db84:	f000 83bd 	beq.w	1001e302 <__ssvfscanf_r+0x14a6>
1001db88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1001db8a:	f8cb 0000 	str.w	r0, [fp]
1001db8e:	88d4      	ldrh	r4, [r2, #6]
1001db90:	8893      	ldrh	r3, [r2, #4]
1001db92:	429c      	cmp	r4, r3
1001db94:	f080 8286 	bcs.w	1001e0a4 <__ssvfscanf_r+0x1248>
1001db98:	6810      	ldr	r0, [r2, #0]
1001db9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001db9c:	f840 b024 	str.w	fp, [r0, r4, lsl #2]
1001dba0:	3401      	adds	r4, #1
1001dba2:	80dc      	strh	r4, [r3, #6]
1001dba4:	2320      	movs	r3, #32
1001dba6:	f8da 1000 	ldr.w	r1, [sl]
1001dbaa:	f107 0270 	add.w	r2, r7, #112	@ 0x70
1001dbae:	7808      	ldrb	r0, [r1, #0]
1001dbb0:	5c10      	ldrb	r0, [r2, r0]
1001dbb2:	2800      	cmp	r0, #0
1001dbb4:	f43f af36 	beq.w	1001da24 <__ssvfscanf_r+0xbc8>
1001dbb8:	f8c7 9044 	str.w	r9, [r7, #68]	@ 0x44
1001dbbc:	f8c7 8034 	str.w	r8, [r7, #52]	@ 0x34
1001dbc0:	46d9      	mov	r9, fp
1001dbc2:	4634      	mov	r4, r6
1001dbc4:	4698      	mov	r8, r3
1001dbc6:	4693      	mov	fp, r2
1001dbc8:	f8da 0004 	ldr.w	r0, [sl, #4]
1001dbcc:	1c4b      	adds	r3, r1, #1
1001dbce:	3801      	subs	r0, #1
1001dbd0:	e9ca 3000 	strd	r3, r0, [sl]
1001dbd4:	4630      	mov	r0, r6
1001dbd6:	7809      	ldrb	r1, [r1, #0]
1001dbd8:	f800 1b01 	strb.w	r1, [r0], #1
1001dbdc:	f1b9 0f00 	cmp.w	r9, #0
1001dbe0:	d002      	beq.n	1001dbe8 <__ssvfscanf_r+0xd8c>
1001dbe2:	1b06      	subs	r6, r0, r4
1001dbe4:	4546      	cmp	r6, r8
1001dbe6:	d26b      	bcs.n	1001dcc0 <__ssvfscanf_r+0xe64>
1001dbe8:	4606      	mov	r6, r0
1001dbea:	3d01      	subs	r5, #1
1001dbec:	d00b      	beq.n	1001dc06 <__ssvfscanf_r+0xdaa>
1001dbee:	f8da 1004 	ldr.w	r1, [sl, #4]
1001dbf2:	2900      	cmp	r1, #0
1001dbf4:	f340 8171 	ble.w	1001deda <__ssvfscanf_r+0x107e>
1001dbf8:	f8da 1000 	ldr.w	r1, [sl]
1001dbfc:	7808      	ldrb	r0, [r1, #0]
1001dbfe:	f81b 0000 	ldrb.w	r0, [fp, r0]
1001dc02:	2800      	cmp	r0, #0
1001dc04:	d1e0      	bne.n	1001dbc8 <__ssvfscanf_r+0xd6c>
1001dc06:	1b34      	subs	r4, r6, r4
1001dc08:	46cb      	mov	fp, r9
1001dc0a:	4643      	mov	r3, r8
1001dc0c:	f8d7 9044 	ldr.w	r9, [r7, #68]	@ 0x44
1001dc10:	f8d7 8034 	ldr.w	r8, [r7, #52]	@ 0x34
1001dc14:	f43f af06 	beq.w	1001da24 <__ssvfscanf_r+0xbc8>
1001dc18:	2200      	movs	r2, #0
1001dc1a:	7032      	strb	r2, [r6, #0]
1001dc1c:	f1bb 0f00 	cmp.w	fp, #0
1001dc20:	d003      	beq.n	1001dc2a <__ssvfscanf_r+0xdce>
1001dc22:	1c61      	adds	r1, r4, #1
1001dc24:	428b      	cmp	r3, r1
1001dc26:	f200 83e5 	bhi.w	1001e3f4 <__ssvfscanf_r+0x1598>
1001dc2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001dc2c:	3301      	adds	r3, #1
1001dc2e:	643b      	str	r3, [r7, #64]	@ 0x40
1001dc30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001dc32:	637b      	str	r3, [r7, #52]	@ 0x34
1001dc34:	44a1      	add	r9, r4
1001dc36:	f7ff b937 	b.w	1001cea8 <__ssvfscanf_r+0x4c>
1001dc3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001dc3c:	2b00      	cmp	r3, #0
1001dc3e:	f47f a986 	bne.w	1001cf4e <__ssvfscanf_r+0xf2>
1001dc42:	f7ff b988 	b.w	1001cf56 <__ssvfscanf_r+0xfa>
1001dc46:	f014 0f8f 	tst.w	r4, #143	@ 0x8f
1001dc4a:	f47f aeeb 	bne.w	1001da24 <__ssvfscanf_r+0xbc8>
1001dc4e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
1001dc52:	eb02 0545 	add.w	r5, r2, r5, lsl #1
1001dc56:	3d30      	subs	r5, #48	@ 0x30
1001dc58:	f7ff ba06 	b.w	1001d068 <__ssvfscanf_r+0x20c>
1001dc5c:	4688      	mov	r8, r1
1001dc5e:	f04f 0b04 	mov.w	fp, #4
1001dc62:	f7ff ba15 	b.w	1001d090 <__ssvfscanf_r+0x234>
1001dc66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001dc68:	191b      	adds	r3, r3, r4
1001dc6a:	f47f ae2b 	bne.w	1001d8c4 <__ssvfscanf_r+0xa68>
1001dc6e:	f7ff baf5 	b.w	1001d25c <__ssvfscanf_r+0x400>
1001dc72:	2c03      	cmp	r4, #3
1001dc74:	d002      	beq.n	1001dc7c <__ssvfscanf_r+0xe20>
1001dc76:	2c05      	cmp	r4, #5
1001dc78:	f47f ab0b 	bne.w	1001d292 <__ssvfscanf_r+0x436>
1001dc7c:	3401      	adds	r4, #1
1001dc7e:	b2e4      	uxtb	r4, r4
1001dc80:	f7ff baf2 	b.w	1001d268 <__ssvfscanf_r+0x40c>
1001dc84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001dc86:	2b02      	cmp	r3, #2
1001dc88:	f47f ade8 	bne.w	1001d85c <__ssvfscanf_r+0xa00>
1001dc8c:	2303      	movs	r3, #3
1001dc8e:	647b      	str	r3, [r7, #68]	@ 0x44
1001dc90:	f7ff baea 	b.w	1001d268 <__ssvfscanf_r+0x40c>
1001dc94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001dc96:	191b      	adds	r3, r3, r4
1001dc98:	f47f adf0 	bne.w	1001d87c <__ssvfscanf_r+0xa20>
1001dc9c:	f7ff bade 	b.w	1001d25c <__ssvfscanf_r+0x400>
1001dca0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001dca2:	4651      	mov	r1, sl
1001dca4:	f003 fec4 	bl	10021a30 <__ssrefill_r>
1001dca8:	2800      	cmp	r0, #0
1001dcaa:	f43f ad56 	beq.w	1001d75a <__ssvfscanf_r+0x8fe>
1001dcae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1001dcb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
1001dcb4:	627c      	str	r4, [r7, #36]	@ 0x24
1001dcb6:	2e00      	cmp	r6, #0
1001dcb8:	f43f ad56 	beq.w	1001d768 <__ssvfscanf_r+0x90c>
1001dcbc:	f7ff b93a 	b.w	1001cf34 <__ssvfscanf_r+0xd8>
1001dcc0:	ea4f 0848 	mov.w	r8, r8, lsl #1
1001dcc4:	4620      	mov	r0, r4
1001dcc6:	4641      	mov	r1, r8
1001dcc8:	f7fa f95c 	bl	10017f84 <realloc>
1001dccc:	4604      	mov	r4, r0
1001dcce:	2800      	cmp	r0, #0
1001dcd0:	f000 8317 	beq.w	1001e302 <__ssvfscanf_r+0x14a6>
1001dcd4:	4406      	add	r6, r0
1001dcd6:	f8c9 0000 	str.w	r0, [r9]
1001dcda:	e786      	b.n	1001dbea <__ssvfscanf_r+0xd8e>
1001dcdc:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
1001dce0:	4bb8      	ldr	r3, [pc, #736]	@ (1001dfc4 <__ssvfscanf_r+0x1168>)
1001dce2:	62bb      	str	r3, [r7, #40]	@ 0x28
1001dce4:	2310      	movs	r3, #16
1001dce6:	4688      	mov	r8, r1
1001dce8:	63bb      	str	r3, [r7, #56]	@ 0x38
1001dcea:	f04f 0b03 	mov.w	fp, #3
1001dcee:	f7ff b9cf 	b.w	1001d090 <__ssvfscanf_r+0x234>
1001dcf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
1001dcf6:	64bb      	str	r3, [r7, #72]	@ 0x48
1001dcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001dcfa:	3301      	adds	r3, #1
1001dcfc:	633b      	str	r3, [r7, #48]	@ 0x30
1001dcfe:	68fb      	ldr	r3, [r7, #12]
1001dd00:	2b00      	cmp	r3, #0
1001dd02:	f43f aab3 	beq.w	1001d26c <__ssvfscanf_r+0x410>
1001dd06:	68fb      	ldr	r3, [r7, #12]
1001dd08:	3b01      	subs	r3, #1
1001dd0a:	60fb      	str	r3, [r7, #12]
1001dd0c:	f7ff baaf 	b.w	1001d26e <__ssvfscanf_r+0x412>
1001dd10:	f424 64b0 	bic.w	r4, r4, #1408	@ 0x580
1001dd14:	f7ff bb88 	b.w	1001d428 <__ssvfscanf_r+0x5cc>
1001dd18:	0722      	lsls	r2, r4, #28
1001dd1a:	f140 8213 	bpl.w	1001e144 <__ssvfscanf_r+0x12e8>
1001dd1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001dd20:	681b      	ldr	r3, [r3, #0]
1001dd22:	7018      	strb	r0, [r3, #0]
1001dd24:	f7ff bbae 	b.w	1001d484 <__ssvfscanf_r+0x628>
1001dd28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1001dd2a:	69bb      	ldr	r3, [r7, #24]
1001dd2c:	429a      	cmp	r2, r3
1001dd2e:	f43f aaf0 	beq.w	1001d312 <__ssvfscanf_r+0x4b6>
1001dd32:	1a9a      	subs	r2, r3, r2
1001dd34:	f207 23c3 	addw	r3, r7, #707	@ 0x2c3
1001dd38:	459b      	cmp	fp, r3
1001dd3a:	bf28      	it	cs
1001dd3c:	f207 2bc2 	addwcs	fp, r7, #706	@ 0x2c2
1001dd40:	49a1      	ldr	r1, [pc, #644]	@ (1001dfc8 <__ssvfscanf_r+0x116c>)
1001dd42:	4658      	mov	r0, fp
1001dd44:	f002 fc3e 	bl	100205c4 <sprintf>
1001dd48:	f7ff bae3 	b.w	1001d312 <__ssvfscanf_r+0x4b6>
1001dd4c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
1001dd50:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001dd52:	4652      	mov	r2, sl
1001dd54:	3e01      	subs	r6, #1
1001dd56:	f003 fe2f 	bl	100219b8 <_sungetc_r>
1001dd5a:	f7ff bb7e 	b.w	1001d45a <__ssvfscanf_r+0x5fe>
1001dd5e:	f107 0070 	add.w	r0, r7, #112	@ 0x70
1001dd62:	f001 fabf 	bl	1001f2e4 <__sccl>
1001dd66:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
1001dd6a:	4680      	mov	r8, r0
1001dd6c:	f04f 0b01 	mov.w	fp, #1
1001dd70:	f7ff b98e 	b.w	1001d090 <__ssvfscanf_r+0x234>
1001dd74:	4b95      	ldr	r3, [pc, #596]	@ (1001dfcc <__ssvfscanf_r+0x1170>)
1001dd76:	62bb      	str	r3, [r7, #40]	@ 0x28
1001dd78:	2300      	movs	r3, #0
1001dd7a:	4688      	mov	r8, r1
1001dd7c:	63bb      	str	r3, [r7, #56]	@ 0x38
1001dd7e:	f04f 0b03 	mov.w	fp, #3
1001dd82:	f7ff b985 	b.w	1001d090 <__ssvfscanf_r+0x234>
1001dd86:	0723      	lsls	r3, r4, #28
1001dd88:	f47f ae4c 	bne.w	1001da24 <__ssvfscanf_r+0xbc8>
1001dd8c:	f898 2001 	ldrb.w	r2, [r8, #1]
1001dd90:	2a68      	cmp	r2, #104	@ 0x68
1001dd92:	f000 81cf 	beq.w	1001e134 <__ssvfscanf_r+0x12d8>
1001dd96:	f044 0404 	orr.w	r4, r4, #4
1001dd9a:	4688      	mov	r8, r1
1001dd9c:	f7ff b8fd 	b.w	1001cf9a <__ssvfscanf_r+0x13e>
1001dda0:	f444 7408 	orr.w	r4, r4, #544	@ 0x220
1001dda4:	e79c      	b.n	1001dce0 <__ssvfscanf_r+0xe84>
1001dda6:	06e5      	lsls	r5, r4, #27
1001dda8:	f100 80f5 	bmi.w	1001df96 <__ssvfscanf_r+0x113a>
1001ddac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001ddae:	0720      	lsls	r0, r4, #28
1001ddb0:	f853 2b04 	ldr.w	r2, [r3], #4
1001ddb4:	f100 81f8 	bmi.w	1001e1a8 <__ssvfscanf_r+0x134c>
1001ddb8:	0766      	lsls	r6, r4, #29
1001ddba:	f140 8325 	bpl.w	1001e408 <__ssvfscanf_r+0x15ac>
1001ddbe:	f8a2 9000 	strh.w	r9, [r2]
1001ddc2:	637b      	str	r3, [r7, #52]	@ 0x34
1001ddc4:	4688      	mov	r8, r1
1001ddc6:	f7ff b86f 	b.w	1001cea8 <__ssvfscanf_r+0x4c>
1001ddca:	f014 038f 	ands.w	r3, r4, #143	@ 0x8f
1001ddce:	f47f ae29 	bne.w	1001da24 <__ssvfscanf_r+0xbc8>
1001ddd2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1001ddd4:	2a00      	cmp	r2, #0
1001ddd6:	f000 82a9 	beq.w	1001e32c <__ssvfscanf_r+0x14d0>
1001ddda:	f898 2001 	ldrb.w	r2, [r8, #1]
1001ddde:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
1001dde2:	4688      	mov	r8, r1
1001dde4:	f7ff b8d9 	b.w	1001cf9a <__ssvfscanf_r+0x13e>
1001dde8:	0722      	lsls	r2, r4, #28
1001ddea:	f47f ae1b 	bne.w	1001da24 <__ssvfscanf_r+0xbc8>
1001ddee:	f898 2001 	ldrb.w	r2, [r8, #1]
1001ddf2:	2a6c      	cmp	r2, #108	@ 0x6c
1001ddf4:	f000 8196 	beq.w	1001e124 <__ssvfscanf_r+0x12c8>
1001ddf8:	f044 0401 	orr.w	r4, r4, #1
1001ddfc:	4688      	mov	r8, r1
1001ddfe:	f7ff b8cc 	b.w	1001cf9a <__ssvfscanf_r+0x13e>
1001de02:	4b70      	ldr	r3, [pc, #448]	@ (1001dfc4 <__ssvfscanf_r+0x1168>)
1001de04:	62bb      	str	r3, [r7, #40]	@ 0x28
1001de06:	230a      	movs	r3, #10
1001de08:	4688      	mov	r8, r1
1001de0a:	63bb      	str	r3, [r7, #56]	@ 0x38
1001de0c:	f04f 0b03 	mov.w	fp, #3
1001de10:	f7ff b93e 	b.w	1001d090 <__ssvfscanf_r+0x234>
1001de14:	4325      	orrs	r5, r4
1001de16:	f47f ae05 	bne.w	1001da24 <__ssvfscanf_r+0xbc8>
1001de1a:	f898 2001 	ldrb.w	r2, [r8, #1]
1001de1e:	2410      	movs	r4, #16
1001de20:	4688      	mov	r8, r1
1001de22:	f7ff b8ba 	b.w	1001cf9a <__ssvfscanf_r+0x13e>
1001de26:	4688      	mov	r8, r1
1001de28:	f7ff b858 	b.w	1001cedc <__ssvfscanf_r+0x80>
1001de2c:	f04f 0c00 	mov.w	ip, #0
1001de30:	46e6      	mov	lr, ip
1001de32:	f8c7 c048 	str.w	ip, [r7, #72]	@ 0x48
1001de36:	f107 0254 	add.w	r2, r7, #84	@ 0x54
1001de3a:	f7ff bb5e 	b.w	1001d4fa <__ssvfscanf_r+0x69e>
1001de3e:	f8da 3000 	ldr.w	r3, [sl]
1001de42:	f107 0270 	add.w	r2, r7, #112	@ 0x70
1001de46:	7819      	ldrb	r1, [r3, #0]
1001de48:	5c51      	ldrb	r1, [r2, r1]
1001de4a:	2900      	cmp	r1, #0
1001de4c:	f43f aef5 	beq.w	1001dc3a <__ssvfscanf_r+0xdde>
1001de50:	3301      	adds	r3, #1
1001de52:	f8ca 3000 	str.w	r3, [sl]
1001de56:	f8da 3004 	ldr.w	r3, [sl, #4]
1001de5a:	2d01      	cmp	r5, #1
1001de5c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
1001de60:	f8ca 3004 	str.w	r3, [sl, #4]
1001de64:	d01b      	beq.n	1001de9e <__ssvfscanf_r+0x1042>
1001de66:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
1001de68:	4616      	mov	r6, r2
1001de6a:	e010      	b.n	1001de8e <__ssvfscanf_r+0x1032>
1001de6c:	f8da 3000 	ldr.w	r3, [sl]
1001de70:	781a      	ldrb	r2, [r3, #0]
1001de72:	5cb2      	ldrb	r2, [r6, r2]
1001de74:	3301      	adds	r3, #1
1001de76:	b192      	cbz	r2, 1001de9e <__ssvfscanf_r+0x1042>
1001de78:	f8ca 3000 	str.w	r3, [sl]
1001de7c:	f8da 3004 	ldr.w	r3, [sl, #4]
1001de80:	f10b 0b01 	add.w	fp, fp, #1
1001de84:	3b01      	subs	r3, #1
1001de86:	455d      	cmp	r5, fp
1001de88:	f8ca 3004 	str.w	r3, [sl, #4]
1001de8c:	d007      	beq.n	1001de9e <__ssvfscanf_r+0x1042>
1001de8e:	2b00      	cmp	r3, #0
1001de90:	dcec      	bgt.n	1001de6c <__ssvfscanf_r+0x1010>
1001de92:	4651      	mov	r1, sl
1001de94:	4620      	mov	r0, r4
1001de96:	f003 fdcb 	bl	10021a30 <__ssrefill_r>
1001de9a:	2800      	cmp	r0, #0
1001de9c:	d0e6      	beq.n	1001de6c <__ssvfscanf_r+0x1010>
1001de9e:	44d9      	add	r9, fp
1001dea0:	f7ff b802 	b.w	1001cea8 <__ssvfscanf_r+0x4c>
1001dea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001dea6:	623b      	str	r3, [r7, #32]
1001dea8:	2300      	movs	r3, #0
1001deaa:	e9c7 330b 	strd	r3, r3, [r7, #44]	@ 0x2c
1001deae:	637b      	str	r3, [r7, #52]	@ 0x34
1001deb0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
1001deb4:	469b      	mov	fp, r3
1001deb6:	f7ff bbde 	b.w	1001d676 <__ssvfscanf_r+0x81a>
1001deba:	2600      	movs	r6, #0
1001debc:	e448      	b.n	1001d750 <__ssvfscanf_r+0x8f4>
1001debe:	1ca1      	adds	r1, r4, #2
1001dec0:	f43f ac46 	beq.w	1001d750 <__ssvfscanf_r+0x8f4>
1001dec4:	f8db 3000 	ldr.w	r3, [fp]
1001dec8:	1c5a      	adds	r2, r3, #1
1001deca:	f47f ac09 	bne.w	1001d6e0 <__ssvfscanf_r+0x884>
1001dece:	e420      	b.n	1001d712 <__ssvfscanf_r+0x8b6>
1001ded0:	682b      	ldr	r3, [r5, #0]
1001ded2:	2b04      	cmp	r3, #4
1001ded4:	f47f ac27 	bne.w	1001d726 <__ssvfscanf_r+0x8ca>
1001ded8:	e427      	b.n	1001d72a <__ssvfscanf_r+0x8ce>
1001deda:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001dedc:	4651      	mov	r1, sl
1001dede:	f003 fda7 	bl	10021a30 <__ssrefill_r>
1001dee2:	2800      	cmp	r0, #0
1001dee4:	f43f ae88 	beq.w	1001dbf8 <__ssvfscanf_r+0xd9c>
1001dee8:	42a6      	cmp	r6, r4
1001deea:	46cb      	mov	fp, r9
1001deec:	4643      	mov	r3, r8
1001deee:	f8d7 9044 	ldr.w	r9, [r7, #68]	@ 0x44
1001def2:	f8d7 8034 	ldr.w	r8, [r7, #52]	@ 0x34
1001def6:	f43f a81d 	beq.w	1001cf34 <__ssvfscanf_r+0xd8>
1001defa:	1b34      	subs	r4, r6, r4
1001defc:	e68c      	b.n	1001dc18 <__ssvfscanf_r+0xdbc>
1001defe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
1001df00:	00d9      	lsls	r1, r3, #3
1001df02:	461e      	mov	r6, r3
1001df04:	f7fa f83e 	bl	10017f84 <realloc>
1001df08:	6338      	str	r0, [r7, #48]	@ 0x30
1001df0a:	2800      	cmp	r0, #0
1001df0c:	f000 81f9 	beq.w	1001e302 <__ssvfscanf_r+0x14a6>
1001df10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1001df12:	0073      	lsls	r3, r6, #1
1001df14:	eb00 0b05 	add.w	fp, r0, r5
1001df18:	6c7e      	ldr	r6, [r7, #68]	@ 0x44
1001df1a:	6010      	str	r0, [r2, #0]
1001df1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
1001df1e:	e417      	b.n	1001d750 <__ssvfscanf_r+0x8f4>
1001df20:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1001df22:	f421 7120 	bic.w	r1, r1, #640	@ 0x280
1001df26:	4623      	mov	r3, r4
1001df28:	4658      	mov	r0, fp
1001df2a:	64b9      	str	r1, [r7, #72]	@ 0x48
1001df2c:	4632      	mov	r2, r6
1001df2e:	69f9      	ldr	r1, [r7, #28]
1001df30:	68bc      	ldr	r4, [r7, #8]
1001df32:	4699      	mov	r9, r3
1001df34:	46aa      	mov	sl, r5
1001df36:	687d      	ldr	r5, [r7, #4]
1001df38:	f002 fc4c 	bl	100207d4 <stpncpy>
1001df3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1001df3e:	61bb      	str	r3, [r7, #24]
1001df40:	3d01      	subs	r5, #1
1001df42:	4683      	mov	fp, r0
1001df44:	f7ff b993 	b.w	1001d26e <__ssvfscanf_r+0x412>
1001df48:	46b2      	mov	sl, r6
1001df4a:	f7fe bff3 	b.w	1001cf34 <__ssvfscanf_r+0xd8>
1001df4e:	2c02      	cmp	r4, #2
1001df50:	f240 82ea 	bls.w	1001e528 <__ssvfscanf_r+0x16cc>
1001df54:	2c03      	cmp	r4, #3
1001df56:	f43f a9ab 	beq.w	1001d2b0 <__ssvfscanf_r+0x454>
1001df5a:	3c04      	subs	r4, #4
1001df5c:	b2e5      	uxtb	r5, r4
1001df5e:	43ec      	mvns	r4, r5
1001df60:	6cfe      	ldr	r6, [r7, #76]	@ 0x4c
1001df62:	445c      	add	r4, fp
1001df64:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
1001df68:	4652      	mov	r2, sl
1001df6a:	4630      	mov	r0, r6
1001df6c:	f003 fd24 	bl	100219b8 <_sungetc_r>
1001df70:	455c      	cmp	r4, fp
1001df72:	d1f7      	bne.n	1001df64 <__ssvfscanf_r+0x1108>
1001df74:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
1001df78:	eba9 0905 	sub.w	r9, r9, r5
1001df7c:	f7ff b998 	b.w	1001d2b0 <__ssvfscanf_r+0x454>
1001df80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001df82:	f8d3 b000 	ldr.w	fp, [r3]
1001df86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001df88:	079a      	lsls	r2, r3, #30
1001df8a:	f140 80f5 	bpl.w	1001e178 <__ssvfscanf_r+0x131c>
1001df8e:	e9cb 5600 	strd	r5, r6, [fp]
1001df92:	f7ff b9cf 	b.w	1001d334 <__ssvfscanf_r+0x4d8>
1001df96:	4688      	mov	r8, r1
1001df98:	f7fe bf86 	b.w	1001cea8 <__ssvfscanf_r+0x4c>
1001df9c:	f64f 71f6 	movw	r1, #65526	@ 0xfff6
1001dfa0:	428a      	cmp	r2, r1
1001dfa2:	d864      	bhi.n	1001e06e <__ssvfscanf_r+0x1212>
1001dfa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001dfa6:	3208      	adds	r2, #8
1001dfa8:	b292      	uxth	r2, r2
1001dfaa:	6818      	ldr	r0, [r3, #0]
1001dfac:	647a      	str	r2, [r7, #68]	@ 0x44
1001dfae:	0091      	lsls	r1, r2, #2
1001dfb0:	f7f9 ffe8 	bl	10017f84 <realloc>
1001dfb4:	2800      	cmp	r0, #0
1001dfb6:	d05a      	beq.n	1001e06e <__ssvfscanf_r+0x1212>
1001dfb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001dfba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1001dfbc:	809a      	strh	r2, [r3, #4]
1001dfbe:	6018      	str	r0, [r3, #0]
1001dfc0:	e57a      	b.n	1001dab8 <__ssvfscanf_r+0xc5c>
1001dfc2:	bf00      	nop
1001dfc4:	100205c1 	.word	0x100205c1
1001dfc8:	100256e8 	.word	0x100256e8
1001dfcc:	10020489 	.word	0x10020489
1001dfd0:	f004 0310 	and.w	r3, r4, #16
1001dfd4:	2d01      	cmp	r5, #1
1001dfd6:	bf38      	it	cc
1001dfd8:	2501      	movcc	r5, #1
1001dfda:	461a      	mov	r2, r3
1001dfdc:	64bb      	str	r3, [r7, #72]	@ 0x48
1001dfde:	f014 0301 	ands.w	r3, r4, #1
1001dfe2:	f040 812d 	bne.w	1001e240 <__ssvfscanf_r+0x13e4>
1001dfe6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1001dfe8:	2a00      	cmp	r2, #0
1001dfea:	f040 82b5 	bne.w	1001e558 <__ssvfscanf_r+0x16fc>
1001dfee:	f8d7 b034 	ldr.w	fp, [r7, #52]	@ 0x34
1001dff2:	0623      	lsls	r3, r4, #24
1001dff4:	f85b 6b04 	ldr.w	r6, [fp], #4
1001dff8:	f140 82c5 	bpl.w	1001e586 <__ssvfscanf_r+0x172a>
1001dffc:	2e00      	cmp	r6, #0
1001dffe:	f43f ad11 	beq.w	1001da24 <__ssvfscanf_r+0xbc8>
1001e002:	4628      	mov	r0, r5
1001e004:	f7f6 fdb8 	bl	10014b78 <malloc>
1001e008:	4604      	mov	r4, r0
1001e00a:	2800      	cmp	r0, #0
1001e00c:	f000 8179 	beq.w	1001e302 <__ssvfscanf_r+0x14a6>
1001e010:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
1001e012:	6030      	str	r0, [r6, #0]
1001e014:	88cb      	ldrh	r3, [r1, #6]
1001e016:	888a      	ldrh	r2, [r1, #4]
1001e018:	4293      	cmp	r3, r2
1001e01a:	f0c0 8300 	bcc.w	1001e61e <__ssvfscanf_r+0x17c2>
1001e01e:	f64f 71f6 	movw	r1, #65526	@ 0xfff6
1001e022:	428a      	cmp	r2, r1
1001e024:	647b      	str	r3, [r7, #68]	@ 0x44
1001e026:	d822      	bhi.n	1001e06e <__ssvfscanf_r+0x1212>
1001e028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e02a:	3208      	adds	r2, #8
1001e02c:	b292      	uxth	r2, r2
1001e02e:	6818      	ldr	r0, [r3, #0]
1001e030:	64ba      	str	r2, [r7, #72]	@ 0x48
1001e032:	0091      	lsls	r1, r2, #2
1001e034:	f7f9 ffa6 	bl	10017f84 <realloc>
1001e038:	b1c8      	cbz	r0, 1001e06e <__ssvfscanf_r+0x1212>
1001e03a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e03c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1001e03e:	809a      	strh	r2, [r3, #4]
1001e040:	6018      	str	r0, [r3, #0]
1001e042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e044:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1001e046:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
1001e04a:	3301      	adds	r3, #1
1001e04c:	80d3      	strh	r3, [r2, #6]
1001e04e:	f8cd a000 	str.w	sl, [sp]
1001e052:	4621      	mov	r1, r4
1001e054:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e056:	462b      	mov	r3, r5
1001e058:	2201      	movs	r2, #1
1001e05a:	f003 fd05 	bl	10021a68 <_sfread_r>
1001e05e:	4604      	mov	r4, r0
1001e060:	2800      	cmp	r0, #0
1001e062:	f040 82de 	bne.w	1001e622 <__ssvfscanf_r+0x17c6>
1001e066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001e068:	2b00      	cmp	r3, #0
1001e06a:	f040 82e4 	bne.w	1001e636 <__ssvfscanf_r+0x17da>
1001e06e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e070:	88de      	ldrh	r6, [r3, #6]
1001e072:	6818      	ldr	r0, [r3, #0]
1001e074:	b17e      	cbz	r6, 1001e096 <__ssvfscanf_r+0x123a>
1001e076:	2400      	movs	r4, #0
1001e078:	1f05      	subs	r5, r0, #4
1001e07a:	46a0      	mov	r8, r4
1001e07c:	4681      	mov	r9, r0
1001e07e:	f855 3f04 	ldr.w	r3, [r5, #4]!
1001e082:	6818      	ldr	r0, [r3, #0]
1001e084:	f7f6 fd80 	bl	10014b88 <free>
1001e088:	3401      	adds	r4, #1
1001e08a:	682b      	ldr	r3, [r5, #0]
1001e08c:	42a6      	cmp	r6, r4
1001e08e:	f8c3 8000 	str.w	r8, [r3]
1001e092:	d1f4      	bne.n	1001e07e <__ssvfscanf_r+0x1222>
1001e094:	4648      	mov	r0, r9
1001e096:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1001e09a:	643b      	str	r3, [r7, #64]	@ 0x40
1001e09c:	f7fe bf58 	b.w	1001cf50 <__ssvfscanf_r+0xf4>
1001e0a0:	2101      	movs	r1, #1
1001e0a2:	e543      	b.n	1001db2c <__ssvfscanf_r+0xcd0>
1001e0a4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
1001e0a8:	4293      	cmp	r3, r2
1001e0aa:	d8e0      	bhi.n	1001e06e <__ssvfscanf_r+0x1212>
1001e0ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1001e0ae:	3308      	adds	r3, #8
1001e0b0:	b29b      	uxth	r3, r3
1001e0b2:	6810      	ldr	r0, [r2, #0]
1001e0b4:	647b      	str	r3, [r7, #68]	@ 0x44
1001e0b6:	0099      	lsls	r1, r3, #2
1001e0b8:	f7f9 ff64 	bl	10017f84 <realloc>
1001e0bc:	2800      	cmp	r0, #0
1001e0be:	d0d6      	beq.n	1001e06e <__ssvfscanf_r+0x1212>
1001e0c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1001e0c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e0c4:	8093      	strh	r3, [r2, #4]
1001e0c6:	6010      	str	r0, [r2, #0]
1001e0c8:	e567      	b.n	1001db9a <__ssvfscanf_r+0xd3e>
1001e0ca:	f64f 70f6 	movw	r0, #65526	@ 0xfff6
1001e0ce:	4281      	cmp	r1, r0
1001e0d0:	64ba      	str	r2, [r7, #72]	@ 0x48
1001e0d2:	d8cc      	bhi.n	1001e06e <__ssvfscanf_r+0x1212>
1001e0d4:	3108      	adds	r1, #8
1001e0d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e0d8:	b28e      	uxth	r6, r1
1001e0da:	6818      	ldr	r0, [r3, #0]
1001e0dc:	00b1      	lsls	r1, r6, #2
1001e0de:	f7f9 ff51 	bl	10017f84 <realloc>
1001e0e2:	2800      	cmp	r0, #0
1001e0e4:	d0c3      	beq.n	1001e06e <__ssvfscanf_r+0x1212>
1001e0e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e0e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1001e0ea:	809e      	strh	r6, [r3, #4]
1001e0ec:	6018      	str	r0, [r3, #0]
1001e0ee:	f7ff bab8 	b.w	1001d662 <__ssvfscanf_r+0x806>
1001e0f2:	f64f 70f6 	movw	r0, #65526	@ 0xfff6
1001e0f6:	4281      	cmp	r1, r0
1001e0f8:	637b      	str	r3, [r7, #52]	@ 0x34
1001e0fa:	647a      	str	r2, [r7, #68]	@ 0x44
1001e0fc:	d8b7      	bhi.n	1001e06e <__ssvfscanf_r+0x1212>
1001e0fe:	3108      	adds	r1, #8
1001e100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e102:	fa1f fb81 	uxth.w	fp, r1
1001e106:	6818      	ldr	r0, [r3, #0]
1001e108:	ea4f 018b 	mov.w	r1, fp, lsl #2
1001e10c:	f7f9 ff3a 	bl	10017f84 <realloc>
1001e110:	2800      	cmp	r0, #0
1001e112:	d0ac      	beq.n	1001e06e <__ssvfscanf_r+0x1212>
1001e114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1001e118:	f8a3 b004 	strh.w	fp, [r3, #4]
1001e11c:	6018      	str	r0, [r3, #0]
1001e11e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001e120:	f7ff b9e1 	b.w	1001d4e6 <__ssvfscanf_r+0x68a>
1001e124:	f898 2002 	ldrb.w	r2, [r8, #2]
1001e128:	f044 0402 	orr.w	r4, r4, #2
1001e12c:	f108 0802 	add.w	r8, r8, #2
1001e130:	f7fe bf33 	b.w	1001cf9a <__ssvfscanf_r+0x13e>
1001e134:	f898 2002 	ldrb.w	r2, [r8, #2]
1001e138:	f044 0408 	orr.w	r4, r4, #8
1001e13c:	f108 0802 	add.w	r8, r8, #2
1001e140:	f7fe bf2b 	b.w	1001cf9a <__ssvfscanf_r+0x13e>
1001e144:	0763      	lsls	r3, r4, #29
1001e146:	d46b      	bmi.n	1001e220 <__ssvfscanf_r+0x13c4>
1001e148:	f014 0201 	ands.w	r2, r4, #1
1001e14c:	f040 817b 	bne.w	1001e446 <__ssvfscanf_r+0x15ea>
1001e150:	07a4      	lsls	r4, r4, #30
1001e152:	f140 8178 	bpl.w	1001e446 <__ssvfscanf_r+0x15ea>
1001e156:	4bc1      	ldr	r3, [pc, #772]	@ (1001e45c <__ssvfscanf_r+0x1600>)
1001e158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
1001e15a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e15c:	4299      	cmp	r1, r3
1001e15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1001e160:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
1001e162:	f000 81f0 	beq.w	1001e546 <__ssvfscanf_r+0x16ea>
1001e166:	f002 fc3f 	bl	100209e8 <_strtoll_r>
1001e16a:	460b      	mov	r3, r1
1001e16c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1001e16e:	6811      	ldr	r1, [r2, #0]
1001e170:	e9c1 0300 	strd	r0, r3, [r1]
1001e174:	f7ff b986 	b.w	1001d484 <__ssvfscanf_r+0x628>
1001e178:	4602      	mov	r2, r0
1001e17a:	460b      	mov	r3, r1
1001e17c:	f004 f9c4 	bl	10022508 <__aeabi_dcmpun>
1001e180:	2800      	cmp	r0, #0
1001e182:	f040 80c7 	bne.w	1001e314 <__ssvfscanf_r+0x14b8>
1001e186:	4628      	mov	r0, r5
1001e188:	4631      	mov	r1, r6
1001e18a:	f004 fa1b 	bl	100225c4 <__aeabi_d2f>
1001e18e:	f8cb 0000 	str.w	r0, [fp]
1001e192:	f7ff b8cf 	b.w	1001d334 <__ssvfscanf_r+0x4d8>
1001e196:	6028      	str	r0, [r5, #0]
1001e198:	f002 fdba 	bl	10020d10 <iswspace>
1001e19c:	2800      	cmp	r0, #0
1001e19e:	f040 8171 	bne.w	1001e484 <__ssvfscanf_r+0x1628>
1001e1a2:	44d9      	add	r9, fp
1001e1a4:	f7ff b9fb 	b.w	1001d59e <__ssvfscanf_r+0x742>
1001e1a8:	f882 9000 	strb.w	r9, [r2]
1001e1ac:	e609      	b.n	1001ddc2 <__ssvfscanf_r+0xf66>
1001e1ae:	f8da 3000 	ldr.w	r3, [sl]
1001e1b2:	4eab      	ldr	r6, [pc, #684]	@ (1001e460 <__ssvfscanf_r+0x1604>)
1001e1b4:	781a      	ldrb	r2, [r3, #0]
1001e1b6:	5cb2      	ldrb	r2, [r6, r2]
1001e1b8:	0711      	lsls	r1, r2, #28
1001e1ba:	f53e ae75 	bmi.w	1001cea8 <__ssvfscanf_r+0x4c>
1001e1be:	3301      	adds	r3, #1
1001e1c0:	f8ca 3000 	str.w	r3, [sl]
1001e1c4:	f8da 3004 	ldr.w	r3, [sl, #4]
1001e1c8:	2d01      	cmp	r5, #1
1001e1ca:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
1001e1ce:	f8ca 3004 	str.w	r3, [sl, #4]
1001e1d2:	bf08      	it	eq
1001e1d4:	f109 0901 	addeq.w	r9, r9, #1
1001e1d8:	f43e ae66 	beq.w	1001cea8 <__ssvfscanf_r+0x4c>
1001e1dc:	f8d7 b04c 	ldr.w	fp, [r7, #76]	@ 0x4c
1001e1e0:	2401      	movs	r4, #1
1001e1e2:	e012      	b.n	1001e20a <__ssvfscanf_r+0x13ae>
1001e1e4:	f8da 3000 	ldr.w	r3, [sl]
1001e1e8:	781a      	ldrb	r2, [r3, #0]
1001e1ea:	5cb2      	ldrb	r2, [r6, r2]
1001e1ec:	0712      	lsls	r2, r2, #28
1001e1ee:	f103 0301 	add.w	r3, r3, #1
1001e1f2:	d412      	bmi.n	1001e21a <__ssvfscanf_r+0x13be>
1001e1f4:	f8ca 3000 	str.w	r3, [sl]
1001e1f8:	f8da 3004 	ldr.w	r3, [sl, #4]
1001e1fc:	3401      	adds	r4, #1
1001e1fe:	3b01      	subs	r3, #1
1001e200:	42a5      	cmp	r5, r4
1001e202:	f8ca 3004 	str.w	r3, [sl, #4]
1001e206:	f000 813a 	beq.w	1001e47e <__ssvfscanf_r+0x1622>
1001e20a:	2b00      	cmp	r3, #0
1001e20c:	dcea      	bgt.n	1001e1e4 <__ssvfscanf_r+0x1388>
1001e20e:	4651      	mov	r1, sl
1001e210:	4658      	mov	r0, fp
1001e212:	f003 fc0d 	bl	10021a30 <__ssrefill_r>
1001e216:	2800      	cmp	r0, #0
1001e218:	d0e4      	beq.n	1001e1e4 <__ssvfscanf_r+0x1388>
1001e21a:	44a1      	add	r9, r4
1001e21c:	f7fe be44 	b.w	1001cea8 <__ssvfscanf_r+0x4c>
1001e220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001e222:	681b      	ldr	r3, [r3, #0]
1001e224:	8018      	strh	r0, [r3, #0]
1001e226:	f7ff b92d 	b.w	1001d484 <__ssvfscanf_r+0x628>
1001e22a:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
1001e22c:	1d11      	adds	r1, r2, #4
1001e22e:	6820      	ldr	r0, [r4, #0]
1001e230:	f7f9 fea8 	bl	10017f84 <realloc>
1001e234:	2800      	cmp	r0, #0
1001e236:	f43f a9e7 	beq.w	1001d608 <__ssvfscanf_r+0x7ac>
1001e23a:	6020      	str	r0, [r4, #0]
1001e23c:	f7ff b9e4 	b.w	1001d608 <__ssvfscanf_r+0x7ac>
1001e240:	2a00      	cmp	r2, #0
1001e242:	f040 8184 	bne.w	1001e54e <__ssvfscanf_r+0x16f2>
1001e246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001e248:	461a      	mov	r2, r3
1001e24a:	0624      	lsls	r4, r4, #24
1001e24c:	f852 3b04 	ldr.w	r3, [r2], #4
1001e250:	637a      	str	r2, [r7, #52]	@ 0x34
1001e252:	f100 81ac 	bmi.w	1001e5ae <__ssvfscanf_r+0x1752>
1001e256:	469b      	mov	fp, r3
1001e258:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001e25a:	461a      	mov	r2, r3
1001e25c:	469c      	mov	ip, r3
1001e25e:	f8c7 8030 	str.w	r8, [r7, #48]	@ 0x30
1001e262:	2600      	movs	r6, #0
1001e264:	4664      	mov	r4, ip
1001e266:	647b      	str	r3, [r7, #68]	@ 0x44
1001e268:	4690      	mov	r8, r2
1001e26a:	f7fb fa2d 	bl	100196c8 <__locale_mb_cur_max>
1001e26e:	42b0      	cmp	r0, r6
1001e270:	f43e ae60 	beq.w	1001cf34 <__ssvfscanf_r+0xd8>
1001e274:	e9da 3200 	ldrd	r3, r2, [sl]
1001e278:	f813 1b01 	ldrb.w	r1, [r3], #1
1001e27c:	3a01      	subs	r2, #1
1001e27e:	e9ca 3200 	strd	r3, r2, [sl]
1001e282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1001e284:	f507 70b8 	add.w	r0, r7, #368	@ 0x170
1001e288:	2a03      	cmp	r2, #3
1001e28a:	5581      	strb	r1, [r0, r6]
1001e28c:	f106 0301 	add.w	r3, r6, #1
1001e290:	f107 0668 	add.w	r6, r7, #104	@ 0x68
1001e294:	d102      	bne.n	1001e29c <__ssvfscanf_r+0x1440>
1001e296:	6832      	ldr	r2, [r6, #0]
1001e298:	2a04      	cmp	r2, #4
1001e29a:	d006      	beq.n	1001e2aa <__ssvfscanf_r+0x144e>
1001e29c:	2208      	movs	r2, #8
1001e29e:	2100      	movs	r1, #0
1001e2a0:	4630      	mov	r0, r6
1001e2a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
1001e2a4:	f7fb f98a 	bl	100195bc <memset>
1001e2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1001e2aa:	9600      	str	r6, [sp, #0]
1001e2ac:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
1001e2b0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e2b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
1001e2b4:	4659      	mov	r1, fp
1001e2b6:	f002 fc79 	bl	10020bac <_mbrtowc_r>
1001e2ba:	4602      	mov	r2, r0
1001e2bc:	6278      	str	r0, [r7, #36]	@ 0x24
1001e2be:	1c50      	adds	r0, r2, #1
1001e2c0:	f43e ae38 	beq.w	1001cf34 <__ssvfscanf_r+0xd8>
1001e2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1001e2c6:	2a00      	cmp	r2, #0
1001e2c8:	f040 81bd 	bne.w	1001e646 <__ssvfscanf_r+0x17ea>
1001e2cc:	4499      	add	r9, r3
1001e2ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001e2d0:	3d01      	subs	r5, #1
1001e2d2:	2b00      	cmp	r3, #0
1001e2d4:	f040 81c5 	bne.w	1001e662 <__ssvfscanf_r+0x1806>
1001e2d8:	f8cb 3000 	str.w	r3, [fp]
1001e2dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e2de:	2b00      	cmp	r3, #0
1001e2e0:	f000 81f1 	beq.w	1001e6c6 <__ssvfscanf_r+0x186a>
1001e2e4:	ebab 0604 	sub.w	r6, fp, r4
1001e2e8:	ebb8 0fa6 	cmp.w	r8, r6, asr #2
1001e2ec:	f200 81eb 	bhi.w	1001e6c6 <__ssvfscanf_r+0x186a>
1001e2f0:	4620      	mov	r0, r4
1001e2f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
1001e2f6:	f7f9 fe45 	bl	10017f84 <realloc>
1001e2fa:	4604      	mov	r4, r0
1001e2fc:	2800      	cmp	r0, #0
1001e2fe:	f040 81dc 	bne.w	1001e6ba <__ssvfscanf_r+0x185e>
1001e302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e304:	2b00      	cmp	r3, #0
1001e306:	f47f aeb2 	bne.w	1001e06e <__ssvfscanf_r+0x1212>
1001e30a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1001e30e:	643b      	str	r3, [r7, #64]	@ 0x40
1001e310:	f7fe be21 	b.w	1001cf56 <__ssvfscanf_r+0xfa>
1001e314:	4853      	ldr	r0, [pc, #332]	@ (1001e464 <__ssvfscanf_r+0x1608>)
1001e316:	f002 fd59 	bl	10020dcc <nanf>
1001e31a:	f8cb 0000 	str.w	r0, [fp]
1001e31e:	f7ff b809 	b.w	1001d334 <__ssvfscanf_r+0x4d8>
1001e322:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
1001e324:	e9c7 2211 	strd	r2, r2, [r7, #68]	@ 0x44
1001e328:	f7ff bbce 	b.w	1001dac8 <__ssvfscanf_r+0xc6c>
1001e32c:	b082      	sub	sp, #8
1001e32e:	e9cd 3302 	strd	r3, r3, [sp, #8]
1001e332:	ab02      	add	r3, sp, #8
1001e334:	63fb      	str	r3, [r7, #60]	@ 0x3c
1001e336:	e550      	b.n	1001ddda <__ssvfscanf_r+0xf7e>
1001e338:	637b      	str	r3, [r7, #52]	@ 0x34
1001e33a:	004b      	lsls	r3, r1, #1
1001e33c:	4610      	mov	r0, r2
1001e33e:	4619      	mov	r1, r3
1001e340:	647b      	str	r3, [r7, #68]	@ 0x44
1001e342:	f7f9 fe1f 	bl	10017f84 <realloc>
1001e346:	4602      	mov	r2, r0
1001e348:	2800      	cmp	r0, #0
1001e34a:	d0da      	beq.n	1001e302 <__ssvfscanf_r+0x14a6>
1001e34c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001e34e:	1984      	adds	r4, r0, r6
1001e350:	6018      	str	r0, [r3, #0]
1001e352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001e354:	f7ff bbd7 	b.w	1001db06 <__ssvfscanf_r+0xcaa>
1001e358:	6938      	ldr	r0, [r7, #16]
1001e35a:	4601      	mov	r1, r0
1001e35c:	230a      	movs	r3, #10
1001e35e:	3101      	adds	r1, #1
1001e360:	4683      	mov	fp, r0
1001e362:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e364:	f002 f890 	bl	10020488 <_strtol_r>
1001e368:	697b      	ldr	r3, [r7, #20]
1001e36a:	1ac2      	subs	r2, r0, r3
1001e36c:	e4e2      	b.n	1001dd34 <__ssvfscanf_r+0xed8>
1001e36e:	f04f 0b00 	mov.w	fp, #0
1001e372:	f7ff b926 	b.w	1001d5c2 <__ssvfscanf_r+0x766>
1001e376:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1001e378:	637e      	str	r6, [r7, #52]	@ 0x34
1001e37a:	469c      	mov	ip, r3
1001e37c:	469e      	mov	lr, r3
1001e37e:	64bb      	str	r3, [r7, #72]	@ 0x48
1001e380:	f7ff b8bb 	b.w	1001d4fa <__ssvfscanf_r+0x69e>
1001e384:	465e      	mov	r6, fp
1001e386:	4623      	mov	r3, r4
1001e388:	46a3      	mov	fp, r4
1001e38a:	e40c      	b.n	1001dba6 <__ssvfscanf_r+0xd4a>
1001e38c:	f8d7 b034 	ldr.w	fp, [r7, #52]	@ 0x34
1001e390:	637a      	str	r2, [r7, #52]	@ 0x34
1001e392:	e9c7 220b 	strd	r2, r2, [r7, #44]	@ 0x2c
1001e396:	f7ff b96e 	b.w	1001d676 <__ssvfscanf_r+0x81a>
1001e39a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1001e39c:	f8d7 801c 	ldr.w	r8, [r7, #28]
1001e3a0:	627c      	str	r4, [r7, #36]	@ 0x24
1001e3a2:	2e00      	cmp	r6, #0
1001e3a4:	f43f a9e0 	beq.w	1001d768 <__ssvfscanf_r+0x90c>
1001e3a8:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
1001e3aa:	4615      	mov	r5, r2
1001e3ac:	3e01      	subs	r6, #1
1001e3ae:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
1001e3b2:	4652      	mov	r2, sl
1001e3b4:	5d99      	ldrb	r1, [r3, r6]
1001e3b6:	4620      	mov	r0, r4
1001e3b8:	f003 fafe 	bl	100219b8 <_sungetc_r>
1001e3bc:	2e00      	cmp	r6, #0
1001e3be:	d1f5      	bne.n	1001e3ac <__ssvfscanf_r+0x1550>
1001e3c0:	462a      	mov	r2, r5
1001e3c2:	f7ff b9d1 	b.w	1001d768 <__ssvfscanf_r+0x90c>
1001e3c6:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
1001e3c8:	6820      	ldr	r0, [r4, #0]
1001e3ca:	f7f9 fddb 	bl	10017f84 <realloc>
1001e3ce:	2800      	cmp	r0, #0
1001e3d0:	f43f abb4 	beq.w	1001db3c <__ssvfscanf_r+0xce0>
1001e3d4:	6020      	str	r0, [r4, #0]
1001e3d6:	f7ff bbb1 	b.w	1001db3c <__ssvfscanf_r+0xce0>
1001e3da:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e3dc:	4651      	mov	r1, sl
1001e3de:	e9c7 320c 	strd	r3, r2, [r7, #48]	@ 0x30
1001e3e2:	f003 fb25 	bl	10021a30 <__ssrefill_r>
1001e3e6:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	@ 0x30
1001e3ea:	2800      	cmp	r0, #0
1001e3ec:	f43f ab93 	beq.w	1001db16 <__ssvfscanf_r+0xcba>
1001e3f0:	f7ff bb98 	b.w	1001db24 <__ssvfscanf_r+0xcc8>
1001e3f4:	f8db 0000 	ldr.w	r0, [fp]
1001e3f8:	f7f9 fdc4 	bl	10017f84 <realloc>
1001e3fc:	2800      	cmp	r0, #0
1001e3fe:	f43f ac14 	beq.w	1001dc2a <__ssvfscanf_r+0xdce>
1001e402:	f8cb 0000 	str.w	r0, [fp]
1001e406:	e410      	b.n	1001dc2a <__ssvfscanf_r+0xdce>
1001e408:	07e5      	lsls	r5, r4, #31
1001e40a:	d435      	bmi.n	1001e478 <__ssvfscanf_r+0x161c>
1001e40c:	07a4      	lsls	r4, r4, #30
1001e40e:	d533      	bpl.n	1001e478 <__ssvfscanf_r+0x161c>
1001e410:	ea4f 70e9 	mov.w	r0, r9, asr #31
1001e414:	f8c2 9000 	str.w	r9, [r2]
1001e418:	6050      	str	r0, [r2, #4]
1001e41a:	e4d2      	b.n	1001ddc2 <__ssvfscanf_r+0xf66>
1001e41c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e41e:	4651      	mov	r1, sl
1001e420:	f003 fb06 	bl	10021a30 <__ssrefill_r>
1001e424:	2800      	cmp	r0, #0
1001e426:	f43f a8d1 	beq.w	1001d5cc <__ssvfscanf_r+0x770>
1001e42a:	4643      	mov	r3, r8
1001e42c:	f8d7 e030 	ldr.w	lr, [r7, #48]	@ 0x30
1001e430:	f8d7 c044 	ldr.w	ip, [r7, #68]	@ 0x44
1001e434:	f8d7 801c 	ldr.w	r8, [r7, #28]
1001e438:	462a      	mov	r2, r5
1001e43a:	f1bb 0f00 	cmp.w	fp, #0
1001e43e:	f47e ad79 	bne.w	1001cf34 <__ssvfscanf_r+0xd8>
1001e442:	f7ff b8d4 	b.w	1001d5ee <__ssvfscanf_r+0x792>
1001e446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1001e448:	f7ff b81a 	b.w	1001d480 <__ssvfscanf_r+0x624>
1001e44c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001e44e:	f423 63f0 	bic.w	r3, r3, #1920	@ 0x780
1001e452:	64bb      	str	r3, [r7, #72]	@ 0x48
1001e454:	2401      	movs	r4, #1
1001e456:	f7fe bf07 	b.w	1001d268 <__ssvfscanf_r+0x40c>
1001e45a:	bf00      	nop
1001e45c:	100205c1 	.word	0x100205c1
1001e460:	1002553d 	.word	0x1002553d
1001e464:	10022c94 	.word	0x10022c94
1001e468:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001e46a:	f423 63f0 	bic.w	r3, r3, #1920	@ 0x780
1001e46e:	64bb      	str	r3, [r7, #72]	@ 0x48
1001e470:	2301      	movs	r3, #1
1001e472:	647b      	str	r3, [r7, #68]	@ 0x44
1001e474:	f7fe bef8 	b.w	1001d268 <__ssvfscanf_r+0x40c>
1001e478:	f8c2 9000 	str.w	r9, [r2]
1001e47c:	e4a1      	b.n	1001ddc2 <__ssvfscanf_r+0xf66>
1001e47e:	44a9      	add	r9, r5
1001e480:	f7fe bd12 	b.w	1001cea8 <__ssvfscanf_r+0x4c>
1001e484:	4643      	mov	r3, r8
1001e486:	f8d7 e030 	ldr.w	lr, [r7, #48]	@ 0x30
1001e48a:	f8d7 c044 	ldr.w	ip, [r7, #68]	@ 0x44
1001e48e:	f8d7 801c 	ldr.w	r8, [r7, #28]
1001e492:	462a      	mov	r2, r5
1001e494:	f1bb 0f00 	cmp.w	fp, #0
1001e498:	f43f a8a9 	beq.w	1001d5ee <__ssvfscanf_r+0x792>
1001e49c:	633d      	str	r5, [r7, #48]	@ 0x30
1001e49e:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
1001e4a0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
1001e4a2:	f8c7 9044 	str.w	r9, [r7, #68]	@ 0x44
1001e4a6:	465e      	mov	r6, fp
1001e4a8:	46f1      	mov	r9, lr
1001e4aa:	46c3      	mov	fp, r8
1001e4ac:	623b      	str	r3, [r7, #32]
1001e4ae:	46e0      	mov	r8, ip
1001e4b0:	3e01      	subs	r6, #1
1001e4b2:	4652      	mov	r2, sl
1001e4b4:	5da9      	ldrb	r1, [r5, r6]
1001e4b6:	4620      	mov	r0, r4
1001e4b8:	f003 fa7e 	bl	100219b8 <_sungetc_r>
1001e4bc:	2e00      	cmp	r6, #0
1001e4be:	d1f7      	bne.n	1001e4b0 <__ssvfscanf_r+0x1654>
1001e4c0:	46ce      	mov	lr, r9
1001e4c2:	46c4      	mov	ip, r8
1001e4c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1001e4c6:	f8d7 9044 	ldr.w	r9, [r7, #68]	@ 0x44
1001e4ca:	6a3b      	ldr	r3, [r7, #32]
1001e4cc:	46d8      	mov	r8, fp
1001e4ce:	f7ff b88e 	b.w	1001d5ee <__ssvfscanf_r+0x792>
1001e4d2:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
1001e4d4:	1d19      	adds	r1, r3, #4
1001e4d6:	6820      	ldr	r0, [r4, #0]
1001e4d8:	f7f9 fd54 	bl	10017f84 <realloc>
1001e4dc:	2800      	cmp	r0, #0
1001e4de:	f43f a951 	beq.w	1001d784 <__ssvfscanf_r+0x928>
1001e4e2:	6020      	str	r0, [r4, #0]
1001e4e4:	f7ff b94e 	b.w	1001d784 <__ssvfscanf_r+0x928>
1001e4e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
1001e4ea:	00d9      	lsls	r1, r3, #3
1001e4ec:	f7f9 fd4a 	bl	10017f84 <realloc>
1001e4f0:	6338      	str	r0, [r7, #48]	@ 0x30
1001e4f2:	2800      	cmp	r0, #0
1001e4f4:	f43f af05 	beq.w	1001e302 <__ssvfscanf_r+0x14a6>
1001e4f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e4fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1001e4fc:	005b      	lsls	r3, r3, #1
1001e4fe:	1905      	adds	r5, r0, r4
1001e500:	6010      	str	r0, [r2, #0]
1001e502:	647b      	str	r3, [r7, #68]	@ 0x44
1001e504:	46c3      	mov	fp, r8
1001e506:	f7ff b85c 	b.w	1001d5c2 <__ssvfscanf_r+0x766>
1001e50a:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
1001e50c:	45ab      	cmp	fp, r5
1001e50e:	f67f ab94 	bls.w	1001dc3a <__ssvfscanf_r+0xdde>
1001e512:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
1001e514:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
1001e518:	4652      	mov	r2, sl
1001e51a:	4620      	mov	r0, r4
1001e51c:	f003 fa4c 	bl	100219b8 <_sungetc_r>
1001e520:	45ab      	cmp	fp, r5
1001e522:	d1f7      	bne.n	1001e514 <__ssvfscanf_r+0x16b8>
1001e524:	f7ff ba7e 	b.w	1001da24 <__ssvfscanf_r+0xbc8>
1001e528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1001e52a:	459b      	cmp	fp, r3
1001e52c:	f67f ab85 	bls.w	1001dc3a <__ssvfscanf_r+0xdde>
1001e530:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
1001e532:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
1001e536:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e538:	4652      	mov	r2, sl
1001e53a:	f003 fa3d 	bl	100219b8 <_sungetc_r>
1001e53e:	45a3      	cmp	fp, r4
1001e540:	d1f7      	bne.n	1001e532 <__ssvfscanf_r+0x16d6>
1001e542:	f7ff ba6f 	b.w	1001da24 <__ssvfscanf_r+0xbc8>
1001e546:	f002 fb2f 	bl	10020ba8 <_strtoull_r>
1001e54a:	460b      	mov	r3, r1
1001e54c:	e60e      	b.n	1001e16c <__ssvfscanf_r+0x1310>
1001e54e:	2200      	movs	r2, #0
1001e550:	4694      	mov	ip, r2
1001e552:	4613      	mov	r3, r2
1001e554:	4693      	mov	fp, r2
1001e556:	e682      	b.n	1001e25e <__ssvfscanf_r+0x1402>
1001e558:	461c      	mov	r4, r3
1001e55a:	e9da 2300 	ldrd	r2, r3, [sl]
1001e55e:	429d      	cmp	r5, r3
1001e560:	eb02 0103 	add.w	r1, r2, r3
1001e564:	dd51      	ble.n	1001e60a <__ssvfscanf_r+0x17ae>
1001e566:	f8ca 1000 	str.w	r1, [sl]
1001e56a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e56c:	4651      	mov	r1, sl
1001e56e:	441c      	add	r4, r3
1001e570:	1aed      	subs	r5, r5, r3
1001e572:	f003 fa5d 	bl	10021a30 <__ssrefill_r>
1001e576:	2800      	cmp	r0, #0
1001e578:	d0ef      	beq.n	1001e55a <__ssvfscanf_r+0x16fe>
1001e57a:	2c00      	cmp	r4, #0
1001e57c:	f43e acda 	beq.w	1001cf34 <__ssvfscanf_r+0xd8>
1001e580:	44a1      	add	r9, r4
1001e582:	f7fe bc91 	b.w	1001cea8 <__ssvfscanf_r+0x4c>
1001e586:	f8cd a000 	str.w	sl, [sp]
1001e58a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e58c:	462b      	mov	r3, r5
1001e58e:	4631      	mov	r1, r6
1001e590:	2201      	movs	r2, #1
1001e592:	f003 fa69 	bl	10021a68 <_sfread_r>
1001e596:	4604      	mov	r4, r0
1001e598:	2800      	cmp	r0, #0
1001e59a:	f43e accb 	beq.w	1001cf34 <__ssvfscanf_r+0xd8>
1001e59e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1001e5a0:	f8c7 b034 	str.w	fp, [r7, #52]	@ 0x34
1001e5a4:	3301      	adds	r3, #1
1001e5a6:	44a1      	add	r9, r4
1001e5a8:	643b      	str	r3, [r7, #64]	@ 0x40
1001e5aa:	f7fe bc7d 	b.w	1001cea8 <__ssvfscanf_r+0x4c>
1001e5ae:	647b      	str	r3, [r7, #68]	@ 0x44
1001e5b0:	2b00      	cmp	r3, #0
1001e5b2:	f43f aa37 	beq.w	1001da24 <__ssvfscanf_r+0xbc8>
1001e5b6:	2080      	movs	r0, #128	@ 0x80
1001e5b8:	f7f6 fade 	bl	10014b78 <malloc>
1001e5bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e5be:	4683      	mov	fp, r0
1001e5c0:	2800      	cmp	r0, #0
1001e5c2:	f43f ae9e 	beq.w	1001e302 <__ssvfscanf_r+0x14a6>
1001e5c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
1001e5c8:	6018      	str	r0, [r3, #0]
1001e5ca:	88ce      	ldrh	r6, [r1, #6]
1001e5cc:	888a      	ldrh	r2, [r1, #4]
1001e5ce:	4296      	cmp	r6, r2
1001e5d0:	d337      	bcc.n	1001e642 <__ssvfscanf_r+0x17e6>
1001e5d2:	f64f 71f6 	movw	r1, #65526	@ 0xfff6
1001e5d6:	428a      	cmp	r2, r1
1001e5d8:	647b      	str	r3, [r7, #68]	@ 0x44
1001e5da:	f63f ad48 	bhi.w	1001e06e <__ssvfscanf_r+0x1212>
1001e5de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e5e0:	3208      	adds	r2, #8
1001e5e2:	b294      	uxth	r4, r2
1001e5e4:	6818      	ldr	r0, [r3, #0]
1001e5e6:	00a1      	lsls	r1, r4, #2
1001e5e8:	f7f9 fccc 	bl	10017f84 <realloc>
1001e5ec:	2800      	cmp	r0, #0
1001e5ee:	f43f ad3e 	beq.w	1001e06e <__ssvfscanf_r+0x1212>
1001e5f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1001e5f4:	809c      	strh	r4, [r3, #4]
1001e5f6:	6018      	str	r0, [r3, #0]
1001e5f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e5fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1001e5fc:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
1001e600:	3601      	adds	r6, #1
1001e602:	80d6      	strh	r6, [r2, #6]
1001e604:	46dc      	mov	ip, fp
1001e606:	2220      	movs	r2, #32
1001e608:	e629      	b.n	1001e25e <__ssvfscanf_r+0x1402>
1001e60a:	1b5b      	subs	r3, r3, r5
1001e60c:	442a      	add	r2, r5
1001e60e:	442c      	add	r4, r5
1001e610:	f8ca 3004 	str.w	r3, [sl, #4]
1001e614:	f8ca 2000 	str.w	r2, [sl]
1001e618:	44a1      	add	r9, r4
1001e61a:	f7fe bc45 	b.w	1001cea8 <__ssvfscanf_r+0x4c>
1001e61e:	6808      	ldr	r0, [r1, #0]
1001e620:	e510      	b.n	1001e044 <__ssvfscanf_r+0x11e8>
1001e622:	4285      	cmp	r5, r0
1001e624:	d9bb      	bls.n	1001e59e <__ssvfscanf_r+0x1742>
1001e626:	6830      	ldr	r0, [r6, #0]
1001e628:	4621      	mov	r1, r4
1001e62a:	f7f9 fcab 	bl	10017f84 <realloc>
1001e62e:	2800      	cmp	r0, #0
1001e630:	d0b5      	beq.n	1001e59e <__ssvfscanf_r+0x1742>
1001e632:	6030      	str	r0, [r6, #0]
1001e634:	e7b3      	b.n	1001e59e <__ssvfscanf_r+0x1742>
1001e636:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1001e63a:	065b      	lsls	r3, r3, #25
1001e63c:	f57e ac86 	bpl.w	1001cf4c <__ssvfscanf_r+0xf0>
1001e640:	e515      	b.n	1001e06e <__ssvfscanf_r+0x1212>
1001e642:	6808      	ldr	r0, [r1, #0]
1001e644:	e7d9      	b.n	1001e5fa <__ssvfscanf_r+0x179e>
1001e646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1001e648:	1c91      	adds	r1, r2, #2
1001e64a:	d034      	beq.n	1001e6b6 <__ssvfscanf_r+0x185a>
1001e64c:	2a03      	cmp	r2, #3
1001e64e:	4499      	add	r9, r3
1001e650:	d102      	bne.n	1001e658 <__ssvfscanf_r+0x17fc>
1001e652:	6833      	ldr	r3, [r6, #0]
1001e654:	2b04      	cmp	r3, #4
1001e656:	d000      	beq.n	1001e65a <__ssvfscanf_r+0x17fe>
1001e658:	3d01      	subs	r5, #1
1001e65a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001e65c:	2b00      	cmp	r3, #0
1001e65e:	f43f ae3d 	beq.w	1001e2dc <__ssvfscanf_r+0x1480>
1001e662:	2600      	movs	r6, #0
1001e664:	f8da 3004 	ldr.w	r3, [sl, #4]
1001e668:	2b00      	cmp	r3, #0
1001e66a:	dd13      	ble.n	1001e694 <__ssvfscanf_r+0x1838>
1001e66c:	2d00      	cmp	r5, #0
1001e66e:	f47f adfc 	bne.w	1001e26a <__ssvfscanf_r+0x140e>
1001e672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e674:	4642      	mov	r2, r8
1001e676:	46a4      	mov	ip, r4
1001e678:	f8d7 8030 	ldr.w	r8, [r7, #48]	@ 0x30
1001e67c:	b123      	cbz	r3, 1001e688 <__ssvfscanf_r+0x182c>
1001e67e:	ebab 010c 	sub.w	r1, fp, ip
1001e682:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
1001e686:	d821      	bhi.n	1001e6cc <__ssvfscanf_r+0x1870>
1001e688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1001e68a:	2b00      	cmp	r3, #0
1001e68c:	f47e ac0c 	bne.w	1001cea8 <__ssvfscanf_r+0x4c>
1001e690:	f7fe bfba 	b.w	1001d608 <__ssvfscanf_r+0x7ac>
1001e694:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
1001e696:	4651      	mov	r1, sl
1001e698:	f003 f9ca 	bl	10021a30 <__ssrefill_r>
1001e69c:	2800      	cmp	r0, #0
1001e69e:	d0e5      	beq.n	1001e66c <__ssvfscanf_r+0x1810>
1001e6a0:	4642      	mov	r2, r8
1001e6a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e6a4:	f8d7 8030 	ldr.w	r8, [r7, #48]	@ 0x30
1001e6a8:	46a4      	mov	ip, r4
1001e6aa:	2e00      	cmp	r6, #0
1001e6ac:	f47e ac42 	bne.w	1001cf34 <__ssvfscanf_r+0xd8>
1001e6b0:	2b00      	cmp	r3, #0
1001e6b2:	d1e4      	bne.n	1001e67e <__ssvfscanf_r+0x1822>
1001e6b4:	e7e8      	b.n	1001e688 <__ssvfscanf_r+0x182c>
1001e6b6:	461e      	mov	r6, r3
1001e6b8:	e7d4      	b.n	1001e664 <__ssvfscanf_r+0x1808>
1001e6ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e6bc:	eb00 0b06 	add.w	fp, r0, r6
1001e6c0:	6018      	str	r0, [r3, #0]
1001e6c2:	ea4f 0848 	mov.w	r8, r8, lsl #1
1001e6c6:	f10b 0b04 	add.w	fp, fp, #4
1001e6ca:	e7ca      	b.n	1001e662 <__ssvfscanf_r+0x1806>
1001e6cc:	6818      	ldr	r0, [r3, #0]
1001e6ce:	647b      	str	r3, [r7, #68]	@ 0x44
1001e6d0:	f7f9 fc58 	bl	10017f84 <realloc>
1001e6d4:	2800      	cmp	r0, #0
1001e6d6:	d0d7      	beq.n	1001e688 <__ssvfscanf_r+0x182c>
1001e6d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e6da:	6018      	str	r0, [r3, #0]
1001e6dc:	e7d4      	b.n	1001e688 <__ssvfscanf_r+0x182c>
1001e6de:	bf00      	nop

1001e6e0 <_putc_r>:
1001e6e0:	b570      	push	{r4, r5, r6, lr}
1001e6e2:	460e      	mov	r6, r1
1001e6e4:	4614      	mov	r4, r2
1001e6e6:	4605      	mov	r5, r0
1001e6e8:	b110      	cbz	r0, 1001e6f0 <_putc_r+0x10>
1001e6ea:	6b43      	ldr	r3, [r0, #52]	@ 0x34
1001e6ec:	2b00      	cmp	r3, #0
1001e6ee:	d02f      	beq.n	1001e750 <_putc_r+0x70>
1001e6f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1001e6f2:	07d8      	lsls	r0, r3, #31
1001e6f4:	d402      	bmi.n	1001e6fc <_putc_r+0x1c>
1001e6f6:	89a3      	ldrh	r3, [r4, #12]
1001e6f8:	0599      	lsls	r1, r3, #22
1001e6fa:	d520      	bpl.n	1001e73e <_putc_r+0x5e>
1001e6fc:	68a3      	ldr	r3, [r4, #8]
1001e6fe:	3b01      	subs	r3, #1
1001e700:	2b00      	cmp	r3, #0
1001e702:	60a3      	str	r3, [r4, #8]
1001e704:	da19      	bge.n	1001e73a <_putc_r+0x5a>
1001e706:	69a2      	ldr	r2, [r4, #24]
1001e708:	4293      	cmp	r3, r2
1001e70a:	db0f      	blt.n	1001e72c <_putc_r+0x4c>
1001e70c:	b2f0      	uxtb	r0, r6
1001e70e:	280a      	cmp	r0, #10
1001e710:	d00c      	beq.n	1001e72c <_putc_r+0x4c>
1001e712:	6823      	ldr	r3, [r4, #0]
1001e714:	1c5a      	adds	r2, r3, #1
1001e716:	6022      	str	r2, [r4, #0]
1001e718:	4605      	mov	r5, r0
1001e71a:	701e      	strb	r6, [r3, #0]
1001e71c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1001e71e:	07da      	lsls	r2, r3, #31
1001e720:	d402      	bmi.n	1001e728 <_putc_r+0x48>
1001e722:	89a3      	ldrh	r3, [r4, #12]
1001e724:	059b      	lsls	r3, r3, #22
1001e726:	d50e      	bpl.n	1001e746 <_putc_r+0x66>
1001e728:	4628      	mov	r0, r5
1001e72a:	bd70      	pop	{r4, r5, r6, pc}
1001e72c:	4628      	mov	r0, r5
1001e72e:	4622      	mov	r2, r4
1001e730:	4631      	mov	r1, r6
1001e732:	f001 ffb7 	bl	100206a4 <__swbuf_r>
1001e736:	4605      	mov	r5, r0
1001e738:	e7f0      	b.n	1001e71c <_putc_r+0x3c>
1001e73a:	b2f0      	uxtb	r0, r6
1001e73c:	e7e9      	b.n	1001e712 <_putc_r+0x32>
1001e73e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001e740:	f7fb fa1a 	bl	10019b78 <__retarget_lock_acquire_recursive>
1001e744:	e7da      	b.n	1001e6fc <_putc_r+0x1c>
1001e746:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001e748:	f7fb fa18 	bl	10019b7c <__retarget_lock_release_recursive>
1001e74c:	4628      	mov	r0, r5
1001e74e:	bd70      	pop	{r4, r5, r6, pc}
1001e750:	f7fa f89e 	bl	10018890 <__sinit>
1001e754:	e7cc      	b.n	1001e6f0 <_putc_r+0x10>
1001e756:	bf00      	nop

1001e758 <_Balloc>:
1001e758:	6c43      	ldr	r3, [r0, #68]	@ 0x44
1001e75a:	b570      	push	{r4, r5, r6, lr}
1001e75c:	4605      	mov	r5, r0
1001e75e:	460c      	mov	r4, r1
1001e760:	b14b      	cbz	r3, 1001e776 <_Balloc+0x1e>
1001e762:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1001e766:	b180      	cbz	r0, 1001e78a <_Balloc+0x32>
1001e768:	6802      	ldr	r2, [r0, #0]
1001e76a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1001e76e:	2300      	movs	r3, #0
1001e770:	60c3      	str	r3, [r0, #12]
1001e772:	6103      	str	r3, [r0, #16]
1001e774:	bd70      	pop	{r4, r5, r6, pc}
1001e776:	2221      	movs	r2, #33	@ 0x21
1001e778:	2104      	movs	r1, #4
1001e77a:	f002 fc0f 	bl	10020f9c <_calloc_r>
1001e77e:	4603      	mov	r3, r0
1001e780:	6468      	str	r0, [r5, #68]	@ 0x44
1001e782:	2800      	cmp	r0, #0
1001e784:	d1ed      	bne.n	1001e762 <_Balloc+0xa>
1001e786:	2000      	movs	r0, #0
1001e788:	bd70      	pop	{r4, r5, r6, pc}
1001e78a:	2101      	movs	r1, #1
1001e78c:	fa01 f604 	lsl.w	r6, r1, r4
1001e790:	1d72      	adds	r2, r6, #5
1001e792:	0092      	lsls	r2, r2, #2
1001e794:	4628      	mov	r0, r5
1001e796:	f002 fc01 	bl	10020f9c <_calloc_r>
1001e79a:	2800      	cmp	r0, #0
1001e79c:	d0f3      	beq.n	1001e786 <_Balloc+0x2e>
1001e79e:	e9c0 4601 	strd	r4, r6, [r0, #4]
1001e7a2:	e7e4      	b.n	1001e76e <_Balloc+0x16>

1001e7a4 <_Bfree>:
1001e7a4:	b131      	cbz	r1, 1001e7b4 <_Bfree+0x10>
1001e7a6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
1001e7a8:	684a      	ldr	r2, [r1, #4]
1001e7aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1001e7ae:	6008      	str	r0, [r1, #0]
1001e7b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1001e7b4:	4770      	bx	lr
1001e7b6:	bf00      	nop

1001e7b8 <__multadd>:
1001e7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1001e7bc:	690d      	ldr	r5, [r1, #16]
1001e7be:	4607      	mov	r7, r0
1001e7c0:	460e      	mov	r6, r1
1001e7c2:	461c      	mov	r4, r3
1001e7c4:	f101 0e14 	add.w	lr, r1, #20
1001e7c8:	2000      	movs	r0, #0
1001e7ca:	f8de 1000 	ldr.w	r1, [lr]
1001e7ce:	b28b      	uxth	r3, r1
1001e7d0:	fb02 4303 	mla	r3, r2, r3, r4
1001e7d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1001e7d8:	0c09      	lsrs	r1, r1, #16
1001e7da:	fb02 cc01 	mla	ip, r2, r1, ip
1001e7de:	3001      	adds	r0, #1
1001e7e0:	b29b      	uxth	r3, r3
1001e7e2:	eb03 430c 	add.w	r3, r3, ip, lsl #16
1001e7e6:	4285      	cmp	r5, r0
1001e7e8:	f84e 3b04 	str.w	r3, [lr], #4
1001e7ec:	ea4f 441c 	mov.w	r4, ip, lsr #16
1001e7f0:	dceb      	bgt.n	1001e7ca <__multadd+0x12>
1001e7f2:	b13c      	cbz	r4, 1001e804 <__multadd+0x4c>
1001e7f4:	68b3      	ldr	r3, [r6, #8]
1001e7f6:	42ab      	cmp	r3, r5
1001e7f8:	dd07      	ble.n	1001e80a <__multadd+0x52>
1001e7fa:	eb06 0385 	add.w	r3, r6, r5, lsl #2
1001e7fe:	3501      	adds	r5, #1
1001e800:	615c      	str	r4, [r3, #20]
1001e802:	6135      	str	r5, [r6, #16]
1001e804:	4630      	mov	r0, r6
1001e806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001e80a:	6871      	ldr	r1, [r6, #4]
1001e80c:	4638      	mov	r0, r7
1001e80e:	3101      	adds	r1, #1
1001e810:	f7ff ffa2 	bl	1001e758 <_Balloc>
1001e814:	4680      	mov	r8, r0
1001e816:	b1a8      	cbz	r0, 1001e844 <__multadd+0x8c>
1001e818:	6932      	ldr	r2, [r6, #16]
1001e81a:	3202      	adds	r2, #2
1001e81c:	f106 010c 	add.w	r1, r6, #12
1001e820:	0092      	lsls	r2, r2, #2
1001e822:	300c      	adds	r0, #12
1001e824:	f7fb fa04 	bl	10019c30 <memcpy>
1001e828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001e82a:	6872      	ldr	r2, [r6, #4]
1001e82c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1001e830:	6031      	str	r1, [r6, #0]
1001e832:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
1001e836:	4646      	mov	r6, r8
1001e838:	eb06 0385 	add.w	r3, r6, r5, lsl #2
1001e83c:	3501      	adds	r5, #1
1001e83e:	615c      	str	r4, [r3, #20]
1001e840:	6135      	str	r5, [r6, #16]
1001e842:	e7df      	b.n	1001e804 <__multadd+0x4c>
1001e844:	4b02      	ldr	r3, [pc, #8]	@ (1001e850 <__multadd+0x98>)
1001e846:	4803      	ldr	r0, [pc, #12]	@ (1001e854 <__multadd+0x9c>)
1001e848:	4642      	mov	r2, r8
1001e84a:	21ba      	movs	r1, #186	@ 0xba
1001e84c:	f002 fac2 	bl	10020dd4 <__assert_func>
1001e850:	10025650 	.word	0x10025650
1001e854:	10025714 	.word	0x10025714

1001e858 <__s2b>:
1001e858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1001e85c:	4617      	mov	r7, r2
1001e85e:	4a27      	ldr	r2, [pc, #156]	@ (1001e8fc <__s2b+0xa4>)
1001e860:	461e      	mov	r6, r3
1001e862:	3308      	adds	r3, #8
1001e864:	460c      	mov	r4, r1
1001e866:	2e09      	cmp	r6, #9
1001e868:	fb82 1203 	smull	r1, r2, r2, r3
1001e86c:	ea4f 73e3 	mov.w	r3, r3, asr #31
1001e870:	4605      	mov	r5, r0
1001e872:	ebc3 0362 	rsb	r3, r3, r2, asr #1
1001e876:	dd39      	ble.n	1001e8ec <__s2b+0x94>
1001e878:	f04f 0c01 	mov.w	ip, #1
1001e87c:	2100      	movs	r1, #0
1001e87e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
1001e882:	4563      	cmp	r3, ip
1001e884:	f101 0101 	add.w	r1, r1, #1
1001e888:	dcf9      	bgt.n	1001e87e <__s2b+0x26>
1001e88a:	4628      	mov	r0, r5
1001e88c:	f7ff ff64 	bl	1001e758 <_Balloc>
1001e890:	4601      	mov	r1, r0
1001e892:	b368      	cbz	r0, 1001e8f0 <__s2b+0x98>
1001e894:	9b08      	ldr	r3, [sp, #32]
1001e896:	6143      	str	r3, [r0, #20]
1001e898:	2f09      	cmp	r7, #9
1001e89a:	f04f 0301 	mov.w	r3, #1
1001e89e:	6103      	str	r3, [r0, #16]
1001e8a0:	dc12      	bgt.n	1001e8c8 <__s2b+0x70>
1001e8a2:	340a      	adds	r4, #10
1001e8a4:	2709      	movs	r7, #9
1001e8a6:	42be      	cmp	r6, r7
1001e8a8:	dd0b      	ble.n	1001e8c2 <__s2b+0x6a>
1001e8aa:	1bf6      	subs	r6, r6, r7
1001e8ac:	4426      	add	r6, r4
1001e8ae:	f814 3b01 	ldrb.w	r3, [r4], #1
1001e8b2:	220a      	movs	r2, #10
1001e8b4:	3b30      	subs	r3, #48	@ 0x30
1001e8b6:	4628      	mov	r0, r5
1001e8b8:	f7ff ff7e 	bl	1001e7b8 <__multadd>
1001e8bc:	42a6      	cmp	r6, r4
1001e8be:	4601      	mov	r1, r0
1001e8c0:	d1f5      	bne.n	1001e8ae <__s2b+0x56>
1001e8c2:	4608      	mov	r0, r1
1001e8c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1001e8c8:	f104 0909 	add.w	r9, r4, #9
1001e8cc:	46c8      	mov	r8, r9
1001e8ce:	443c      	add	r4, r7
1001e8d0:	f818 3b01 	ldrb.w	r3, [r8], #1
1001e8d4:	220a      	movs	r2, #10
1001e8d6:	3b30      	subs	r3, #48	@ 0x30
1001e8d8:	4628      	mov	r0, r5
1001e8da:	f7ff ff6d 	bl	1001e7b8 <__multadd>
1001e8de:	45a0      	cmp	r8, r4
1001e8e0:	4601      	mov	r1, r0
1001e8e2:	d1f5      	bne.n	1001e8d0 <__s2b+0x78>
1001e8e4:	f1a7 0408 	sub.w	r4, r7, #8
1001e8e8:	444c      	add	r4, r9
1001e8ea:	e7dc      	b.n	1001e8a6 <__s2b+0x4e>
1001e8ec:	2100      	movs	r1, #0
1001e8ee:	e7cc      	b.n	1001e88a <__s2b+0x32>
1001e8f0:	460a      	mov	r2, r1
1001e8f2:	4b03      	ldr	r3, [pc, #12]	@ (1001e900 <__s2b+0xa8>)
1001e8f4:	4803      	ldr	r0, [pc, #12]	@ (1001e904 <__s2b+0xac>)
1001e8f6:	21d3      	movs	r1, #211	@ 0xd3
1001e8f8:	f002 fa6c 	bl	10020dd4 <__assert_func>
1001e8fc:	38e38e39 	.word	0x38e38e39
1001e900:	10025650 	.word	0x10025650
1001e904:	10025714 	.word	0x10025714

1001e908 <__hi0bits>:
1001e908:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
1001e90c:	4603      	mov	r3, r0
1001e90e:	bf36      	itet	cc
1001e910:	0403      	lslcc	r3, r0, #16
1001e912:	2000      	movcs	r0, #0
1001e914:	2010      	movcc	r0, #16
1001e916:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
1001e91a:	bf3c      	itt	cc
1001e91c:	021b      	lslcc	r3, r3, #8
1001e91e:	3008      	addcc	r0, #8
1001e920:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
1001e924:	bf3c      	itt	cc
1001e926:	011b      	lslcc	r3, r3, #4
1001e928:	3004      	addcc	r0, #4
1001e92a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
1001e92e:	d303      	bcc.n	1001e938 <__hi0bits+0x30>
1001e930:	2b00      	cmp	r3, #0
1001e932:	db06      	blt.n	1001e942 <__hi0bits+0x3a>
1001e934:	3001      	adds	r0, #1
1001e936:	4770      	bx	lr
1001e938:	009b      	lsls	r3, r3, #2
1001e93a:	d403      	bmi.n	1001e944 <__hi0bits+0x3c>
1001e93c:	005b      	lsls	r3, r3, #1
1001e93e:	d403      	bmi.n	1001e948 <__hi0bits+0x40>
1001e940:	2020      	movs	r0, #32
1001e942:	4770      	bx	lr
1001e944:	3002      	adds	r0, #2
1001e946:	4770      	bx	lr
1001e948:	3003      	adds	r0, #3
1001e94a:	4770      	bx	lr

1001e94c <__lo0bits>:
1001e94c:	6803      	ldr	r3, [r0, #0]
1001e94e:	f013 0207 	ands.w	r2, r3, #7
1001e952:	4601      	mov	r1, r0
1001e954:	d007      	beq.n	1001e966 <__lo0bits+0x1a>
1001e956:	07da      	lsls	r2, r3, #31
1001e958:	d41f      	bmi.n	1001e99a <__lo0bits+0x4e>
1001e95a:	0798      	lsls	r0, r3, #30
1001e95c:	d521      	bpl.n	1001e9a2 <__lo0bits+0x56>
1001e95e:	085b      	lsrs	r3, r3, #1
1001e960:	600b      	str	r3, [r1, #0]
1001e962:	2001      	movs	r0, #1
1001e964:	4770      	bx	lr
1001e966:	b298      	uxth	r0, r3
1001e968:	b1a0      	cbz	r0, 1001e994 <__lo0bits+0x48>
1001e96a:	4610      	mov	r0, r2
1001e96c:	b2da      	uxtb	r2, r3
1001e96e:	b90a      	cbnz	r2, 1001e974 <__lo0bits+0x28>
1001e970:	3008      	adds	r0, #8
1001e972:	0a1b      	lsrs	r3, r3, #8
1001e974:	071a      	lsls	r2, r3, #28
1001e976:	bf04      	itt	eq
1001e978:	091b      	lsreq	r3, r3, #4
1001e97a:	3004      	addeq	r0, #4
1001e97c:	079a      	lsls	r2, r3, #30
1001e97e:	bf04      	itt	eq
1001e980:	089b      	lsreq	r3, r3, #2
1001e982:	3002      	addeq	r0, #2
1001e984:	07da      	lsls	r2, r3, #31
1001e986:	d403      	bmi.n	1001e990 <__lo0bits+0x44>
1001e988:	085b      	lsrs	r3, r3, #1
1001e98a:	f100 0001 	add.w	r0, r0, #1
1001e98e:	d006      	beq.n	1001e99e <__lo0bits+0x52>
1001e990:	600b      	str	r3, [r1, #0]
1001e992:	4770      	bx	lr
1001e994:	0c1b      	lsrs	r3, r3, #16
1001e996:	2010      	movs	r0, #16
1001e998:	e7e8      	b.n	1001e96c <__lo0bits+0x20>
1001e99a:	2000      	movs	r0, #0
1001e99c:	4770      	bx	lr
1001e99e:	2020      	movs	r0, #32
1001e9a0:	4770      	bx	lr
1001e9a2:	089b      	lsrs	r3, r3, #2
1001e9a4:	600b      	str	r3, [r1, #0]
1001e9a6:	2002      	movs	r0, #2
1001e9a8:	4770      	bx	lr
1001e9aa:	bf00      	nop

1001e9ac <__i2b>:
1001e9ac:	b538      	push	{r3, r4, r5, lr}
1001e9ae:	6c43      	ldr	r3, [r0, #68]	@ 0x44
1001e9b0:	4604      	mov	r4, r0
1001e9b2:	460d      	mov	r5, r1
1001e9b4:	b14b      	cbz	r3, 1001e9ca <__i2b+0x1e>
1001e9b6:	6858      	ldr	r0, [r3, #4]
1001e9b8:	b1b0      	cbz	r0, 1001e9e8 <__i2b+0x3c>
1001e9ba:	6802      	ldr	r2, [r0, #0]
1001e9bc:	605a      	str	r2, [r3, #4]
1001e9be:	2200      	movs	r2, #0
1001e9c0:	2301      	movs	r3, #1
1001e9c2:	6145      	str	r5, [r0, #20]
1001e9c4:	60c2      	str	r2, [r0, #12]
1001e9c6:	6103      	str	r3, [r0, #16]
1001e9c8:	bd38      	pop	{r3, r4, r5, pc}
1001e9ca:	2221      	movs	r2, #33	@ 0x21
1001e9cc:	2104      	movs	r1, #4
1001e9ce:	f002 fae5 	bl	10020f9c <_calloc_r>
1001e9d2:	4603      	mov	r3, r0
1001e9d4:	6460      	str	r0, [r4, #68]	@ 0x44
1001e9d6:	2800      	cmp	r0, #0
1001e9d8:	d1ed      	bne.n	1001e9b6 <__i2b+0xa>
1001e9da:	4b09      	ldr	r3, [pc, #36]	@ (1001ea00 <__i2b+0x54>)
1001e9dc:	4809      	ldr	r0, [pc, #36]	@ (1001ea04 <__i2b+0x58>)
1001e9de:	2200      	movs	r2, #0
1001e9e0:	f240 1145 	movw	r1, #325	@ 0x145
1001e9e4:	f002 f9f6 	bl	10020dd4 <__assert_func>
1001e9e8:	221c      	movs	r2, #28
1001e9ea:	2101      	movs	r1, #1
1001e9ec:	4620      	mov	r0, r4
1001e9ee:	f002 fad5 	bl	10020f9c <_calloc_r>
1001e9f2:	2800      	cmp	r0, #0
1001e9f4:	d0f1      	beq.n	1001e9da <__i2b+0x2e>
1001e9f6:	2201      	movs	r2, #1
1001e9f8:	2302      	movs	r3, #2
1001e9fa:	6042      	str	r2, [r0, #4]
1001e9fc:	6083      	str	r3, [r0, #8]
1001e9fe:	e7de      	b.n	1001e9be <__i2b+0x12>
1001ea00:	10025650 	.word	0x10025650
1001ea04:	10025714 	.word	0x10025714

1001ea08 <__multiply>:
1001ea08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001ea0c:	f8d1 8010 	ldr.w	r8, [r1, #16]
1001ea10:	6915      	ldr	r5, [r2, #16]
1001ea12:	45a8      	cmp	r8, r5
1001ea14:	b085      	sub	sp, #20
1001ea16:	460e      	mov	r6, r1
1001ea18:	4692      	mov	sl, r2
1001ea1a:	db05      	blt.n	1001ea28 <__multiply+0x20>
1001ea1c:	462a      	mov	r2, r5
1001ea1e:	4653      	mov	r3, sl
1001ea20:	4645      	mov	r5, r8
1001ea22:	468a      	mov	sl, r1
1001ea24:	4690      	mov	r8, r2
1001ea26:	461e      	mov	r6, r3
1001ea28:	f8da 3008 	ldr.w	r3, [sl, #8]
1001ea2c:	f8da 1004 	ldr.w	r1, [sl, #4]
1001ea30:	eb05 0408 	add.w	r4, r5, r8
1001ea34:	42a3      	cmp	r3, r4
1001ea36:	bfb8      	it	lt
1001ea38:	3101      	addlt	r1, #1
1001ea3a:	f7ff fe8d 	bl	1001e758 <_Balloc>
1001ea3e:	4684      	mov	ip, r0
1001ea40:	2800      	cmp	r0, #0
1001ea42:	f000 808b 	beq.w	1001eb5c <__multiply+0x154>
1001ea46:	f100 0714 	add.w	r7, r0, #20
1001ea4a:	eb07 0e84 	add.w	lr, r7, r4, lsl #2
1001ea4e:	4577      	cmp	r7, lr
1001ea50:	d205      	bcs.n	1001ea5e <__multiply+0x56>
1001ea52:	463b      	mov	r3, r7
1001ea54:	2200      	movs	r2, #0
1001ea56:	f843 2b04 	str.w	r2, [r3], #4
1001ea5a:	459e      	cmp	lr, r3
1001ea5c:	d8fb      	bhi.n	1001ea56 <__multiply+0x4e>
1001ea5e:	3614      	adds	r6, #20
1001ea60:	eb06 0888 	add.w	r8, r6, r8, lsl #2
1001ea64:	f10a 0914 	add.w	r9, sl, #20
1001ea68:	4546      	cmp	r6, r8
1001ea6a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
1001ea6e:	d266      	bcs.n	1001eb3e <__multiply+0x136>
1001ea70:	eba5 030a 	sub.w	r3, r5, sl
1001ea74:	3b15      	subs	r3, #21
1001ea76:	f023 0303 	bic.w	r3, r3, #3
1001ea7a:	f10a 0a15 	add.w	sl, sl, #21
1001ea7e:	3304      	adds	r3, #4
1001ea80:	4555      	cmp	r5, sl
1001ea82:	bf2c      	ite	cs
1001ea84:	469b      	movcs	fp, r3
1001ea86:	f04f 0b04 	movcc.w	fp, #4
1001ea8a:	f8cd e008 	str.w	lr, [sp, #8]
1001ea8e:	9403      	str	r4, [sp, #12]
1001ea90:	46ae      	mov	lr, r5
1001ea92:	46e2      	mov	sl, ip
1001ea94:	e005      	b.n	1001eaa2 <__multiply+0x9a>
1001ea96:	0c09      	lsrs	r1, r1, #16
1001ea98:	d12a      	bne.n	1001eaf0 <__multiply+0xe8>
1001ea9a:	45b0      	cmp	r8, r6
1001ea9c:	f107 0704 	add.w	r7, r7, #4
1001eaa0:	d94a      	bls.n	1001eb38 <__multiply+0x130>
1001eaa2:	f856 1b04 	ldr.w	r1, [r6], #4
1001eaa6:	b28d      	uxth	r5, r1
1001eaa8:	2d00      	cmp	r5, #0
1001eaaa:	d0f4      	beq.n	1001ea96 <__multiply+0x8e>
1001eaac:	46cc      	mov	ip, r9
1001eaae:	463c      	mov	r4, r7
1001eab0:	2300      	movs	r3, #0
1001eab2:	9601      	str	r6, [sp, #4]
1001eab4:	f85c 0b04 	ldr.w	r0, [ip], #4
1001eab8:	6821      	ldr	r1, [r4, #0]
1001eaba:	b286      	uxth	r6, r0
1001eabc:	b28a      	uxth	r2, r1
1001eabe:	0c00      	lsrs	r0, r0, #16
1001eac0:	fb05 2206 	mla	r2, r5, r6, r2
1001eac4:	0c09      	lsrs	r1, r1, #16
1001eac6:	441a      	add	r2, r3
1001eac8:	fb05 1100 	mla	r1, r5, r0, r1
1001eacc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
1001ead0:	b292      	uxth	r2, r2
1001ead2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
1001ead6:	45e6      	cmp	lr, ip
1001ead8:	f844 2b04 	str.w	r2, [r4], #4
1001eadc:	ea4f 4311 	mov.w	r3, r1, lsr #16
1001eae0:	d8e8      	bhi.n	1001eab4 <__multiply+0xac>
1001eae2:	9e01      	ldr	r6, [sp, #4]
1001eae4:	f847 300b 	str.w	r3, [r7, fp]
1001eae8:	f856 1c04 	ldr.w	r1, [r6, #-4]
1001eaec:	0c09      	lsrs	r1, r1, #16
1001eaee:	d0d4      	beq.n	1001ea9a <__multiply+0x92>
1001eaf0:	683b      	ldr	r3, [r7, #0]
1001eaf2:	2200      	movs	r2, #0
1001eaf4:	4648      	mov	r0, r9
1001eaf6:	461d      	mov	r5, r3
1001eaf8:	463c      	mov	r4, r7
1001eafa:	4694      	mov	ip, r2
1001eafc:	8802      	ldrh	r2, [r0, #0]
1001eafe:	fb01 c202 	mla	r2, r1, r2, ip
1001eb02:	eb02 4215 	add.w	r2, r2, r5, lsr #16
1001eb06:	b29b      	uxth	r3, r3
1001eb08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1001eb0c:	f844 3b04 	str.w	r3, [r4], #4
1001eb10:	f850 3b04 	ldr.w	r3, [r0], #4
1001eb14:	6825      	ldr	r5, [r4, #0]
1001eb16:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1001eb1a:	b2ab      	uxth	r3, r5
1001eb1c:	fb01 330c 	mla	r3, r1, ip, r3
1001eb20:	eb03 4312 	add.w	r3, r3, r2, lsr #16
1001eb24:	4586      	cmp	lr, r0
1001eb26:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1001eb2a:	d8e7      	bhi.n	1001eafc <__multiply+0xf4>
1001eb2c:	45b0      	cmp	r8, r6
1001eb2e:	f847 300b 	str.w	r3, [r7, fp]
1001eb32:	f107 0704 	add.w	r7, r7, #4
1001eb36:	d8b4      	bhi.n	1001eaa2 <__multiply+0x9a>
1001eb38:	e9dd e402 	ldrd	lr, r4, [sp, #8]
1001eb3c:	46d4      	mov	ip, sl
1001eb3e:	2c00      	cmp	r4, #0
1001eb40:	dc02      	bgt.n	1001eb48 <__multiply+0x140>
1001eb42:	e005      	b.n	1001eb50 <__multiply+0x148>
1001eb44:	3c01      	subs	r4, #1
1001eb46:	d003      	beq.n	1001eb50 <__multiply+0x148>
1001eb48:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
1001eb4c:	2b00      	cmp	r3, #0
1001eb4e:	d0f9      	beq.n	1001eb44 <__multiply+0x13c>
1001eb50:	4660      	mov	r0, ip
1001eb52:	f8cc 4010 	str.w	r4, [ip, #16]
1001eb56:	b005      	add	sp, #20
1001eb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001eb5c:	4b03      	ldr	r3, [pc, #12]	@ (1001eb6c <__multiply+0x164>)
1001eb5e:	4804      	ldr	r0, [pc, #16]	@ (1001eb70 <__multiply+0x168>)
1001eb60:	4662      	mov	r2, ip
1001eb62:	f44f 71b1 	mov.w	r1, #354	@ 0x162
1001eb66:	f002 f935 	bl	10020dd4 <__assert_func>
1001eb6a:	bf00      	nop
1001eb6c:	10025650 	.word	0x10025650
1001eb70:	10025714 	.word	0x10025714

1001eb74 <__pow5mult>:
1001eb74:	f012 0303 	ands.w	r3, r2, #3
1001eb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1001eb7c:	4614      	mov	r4, r2
1001eb7e:	4607      	mov	r7, r0
1001eb80:	d12c      	bne.n	1001ebdc <__pow5mult+0x68>
1001eb82:	460d      	mov	r5, r1
1001eb84:	10a4      	asrs	r4, r4, #2
1001eb86:	d01c      	beq.n	1001ebc2 <__pow5mult+0x4e>
1001eb88:	6c3e      	ldr	r6, [r7, #64]	@ 0x40
1001eb8a:	b386      	cbz	r6, 1001ebee <__pow5mult+0x7a>
1001eb8c:	07e3      	lsls	r3, r4, #31
1001eb8e:	f04f 0800 	mov.w	r8, #0
1001eb92:	d406      	bmi.n	1001eba2 <__pow5mult+0x2e>
1001eb94:	1064      	asrs	r4, r4, #1
1001eb96:	d014      	beq.n	1001ebc2 <__pow5mult+0x4e>
1001eb98:	6830      	ldr	r0, [r6, #0]
1001eb9a:	b1a8      	cbz	r0, 1001ebc8 <__pow5mult+0x54>
1001eb9c:	4606      	mov	r6, r0
1001eb9e:	07e3      	lsls	r3, r4, #31
1001eba0:	d5f8      	bpl.n	1001eb94 <__pow5mult+0x20>
1001eba2:	4632      	mov	r2, r6
1001eba4:	4629      	mov	r1, r5
1001eba6:	4638      	mov	r0, r7
1001eba8:	f7ff ff2e 	bl	1001ea08 <__multiply>
1001ebac:	b135      	cbz	r5, 1001ebbc <__pow5mult+0x48>
1001ebae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1001ebb0:	6869      	ldr	r1, [r5, #4]
1001ebb2:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
1001ebb6:	602a      	str	r2, [r5, #0]
1001ebb8:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
1001ebbc:	1064      	asrs	r4, r4, #1
1001ebbe:	4605      	mov	r5, r0
1001ebc0:	d1ea      	bne.n	1001eb98 <__pow5mult+0x24>
1001ebc2:	4628      	mov	r0, r5
1001ebc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001ebc8:	4632      	mov	r2, r6
1001ebca:	4631      	mov	r1, r6
1001ebcc:	4638      	mov	r0, r7
1001ebce:	f7ff ff1b 	bl	1001ea08 <__multiply>
1001ebd2:	6030      	str	r0, [r6, #0]
1001ebd4:	f8c0 8000 	str.w	r8, [r0]
1001ebd8:	4606      	mov	r6, r0
1001ebda:	e7e0      	b.n	1001eb9e <__pow5mult+0x2a>
1001ebdc:	3b01      	subs	r3, #1
1001ebde:	4a0f      	ldr	r2, [pc, #60]	@ (1001ec1c <__pow5mult+0xa8>)
1001ebe0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1001ebe4:	2300      	movs	r3, #0
1001ebe6:	f7ff fde7 	bl	1001e7b8 <__multadd>
1001ebea:	4605      	mov	r5, r0
1001ebec:	e7ca      	b.n	1001eb84 <__pow5mult+0x10>
1001ebee:	2101      	movs	r1, #1
1001ebf0:	4638      	mov	r0, r7
1001ebf2:	f7ff fdb1 	bl	1001e758 <_Balloc>
1001ebf6:	4606      	mov	r6, r0
1001ebf8:	b140      	cbz	r0, 1001ec0c <__pow5mult+0x98>
1001ebfa:	2301      	movs	r3, #1
1001ebfc:	f240 2271 	movw	r2, #625	@ 0x271
1001ec00:	e9c0 3204 	strd	r3, r2, [r0, #16]
1001ec04:	2300      	movs	r3, #0
1001ec06:	6438      	str	r0, [r7, #64]	@ 0x40
1001ec08:	6003      	str	r3, [r0, #0]
1001ec0a:	e7bf      	b.n	1001eb8c <__pow5mult+0x18>
1001ec0c:	4b04      	ldr	r3, [pc, #16]	@ (1001ec20 <__pow5mult+0xac>)
1001ec0e:	4805      	ldr	r0, [pc, #20]	@ (1001ec24 <__pow5mult+0xb0>)
1001ec10:	4632      	mov	r2, r6
1001ec12:	f240 1145 	movw	r1, #325	@ 0x145
1001ec16:	f002 f8dd 	bl	10020dd4 <__assert_func>
1001ec1a:	bf00      	nop
1001ec1c:	10025778 	.word	0x10025778
1001ec20:	10025650 	.word	0x10025650
1001ec24:	10025714 	.word	0x10025714

1001ec28 <__lshift>:
1001ec28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1001ec2c:	460c      	mov	r4, r1
1001ec2e:	4690      	mov	r8, r2
1001ec30:	6927      	ldr	r7, [r4, #16]
1001ec32:	68a3      	ldr	r3, [r4, #8]
1001ec34:	6849      	ldr	r1, [r1, #4]
1001ec36:	eb07 1762 	add.w	r7, r7, r2, asr #5
1001ec3a:	1c7d      	adds	r5, r7, #1
1001ec3c:	429d      	cmp	r5, r3
1001ec3e:	4606      	mov	r6, r0
1001ec40:	ea4f 1962 	mov.w	r9, r2, asr #5
1001ec44:	dd04      	ble.n	1001ec50 <__lshift+0x28>
1001ec46:	005b      	lsls	r3, r3, #1
1001ec48:	429d      	cmp	r5, r3
1001ec4a:	f101 0101 	add.w	r1, r1, #1
1001ec4e:	dcfa      	bgt.n	1001ec46 <__lshift+0x1e>
1001ec50:	4630      	mov	r0, r6
1001ec52:	f7ff fd81 	bl	1001e758 <_Balloc>
1001ec56:	4684      	mov	ip, r0
1001ec58:	2800      	cmp	r0, #0
1001ec5a:	d051      	beq.n	1001ed00 <__lshift+0xd8>
1001ec5c:	f1b9 0f00 	cmp.w	r9, #0
1001ec60:	f100 0014 	add.w	r0, r0, #20
1001ec64:	dd0e      	ble.n	1001ec84 <__lshift+0x5c>
1001ec66:	f109 0205 	add.w	r2, r9, #5
1001ec6a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
1001ec6e:	4603      	mov	r3, r0
1001ec70:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
1001ec74:	2100      	movs	r1, #0
1001ec76:	f843 1b04 	str.w	r1, [r3], #4
1001ec7a:	4293      	cmp	r3, r2
1001ec7c:	d1fb      	bne.n	1001ec76 <__lshift+0x4e>
1001ec7e:	f1ae 0314 	sub.w	r3, lr, #20
1001ec82:	4418      	add	r0, r3
1001ec84:	6921      	ldr	r1, [r4, #16]
1001ec86:	f104 0314 	add.w	r3, r4, #20
1001ec8a:	f018 081f 	ands.w	r8, r8, #31
1001ec8e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
1001ec92:	d02d      	beq.n	1001ecf0 <__lshift+0xc8>
1001ec94:	f1c8 0920 	rsb	r9, r8, #32
1001ec98:	4686      	mov	lr, r0
1001ec9a:	f04f 0a00 	mov.w	sl, #0
1001ec9e:	681a      	ldr	r2, [r3, #0]
1001eca0:	fa02 f208 	lsl.w	r2, r2, r8
1001eca4:	ea42 020a 	orr.w	r2, r2, sl
1001eca8:	f84e 2b04 	str.w	r2, [lr], #4
1001ecac:	f853 2b04 	ldr.w	r2, [r3], #4
1001ecb0:	4299      	cmp	r1, r3
1001ecb2:	fa22 fa09 	lsr.w	sl, r2, r9
1001ecb6:	d8f2      	bhi.n	1001ec9e <__lshift+0x76>
1001ecb8:	1b0b      	subs	r3, r1, r4
1001ecba:	3b15      	subs	r3, #21
1001ecbc:	f023 0303 	bic.w	r3, r3, #3
1001ecc0:	3304      	adds	r3, #4
1001ecc2:	f104 0215 	add.w	r2, r4, #21
1001ecc6:	4291      	cmp	r1, r2
1001ecc8:	bf38      	it	cc
1001ecca:	2304      	movcc	r3, #4
1001eccc:	f840 a003 	str.w	sl, [r0, r3]
1001ecd0:	f1ba 0f00 	cmp.w	sl, #0
1001ecd4:	d100      	bne.n	1001ecd8 <__lshift+0xb0>
1001ecd6:	463d      	mov	r5, r7
1001ecd8:	6c73      	ldr	r3, [r6, #68]	@ 0x44
1001ecda:	6862      	ldr	r2, [r4, #4]
1001ecdc:	f8cc 5010 	str.w	r5, [ip, #16]
1001ece0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1001ece4:	6021      	str	r1, [r4, #0]
1001ece6:	4660      	mov	r0, ip
1001ece8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
1001ecec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1001ecf0:	3804      	subs	r0, #4
1001ecf2:	f853 2b04 	ldr.w	r2, [r3], #4
1001ecf6:	f840 2f04 	str.w	r2, [r0, #4]!
1001ecfa:	4299      	cmp	r1, r3
1001ecfc:	d8f9      	bhi.n	1001ecf2 <__lshift+0xca>
1001ecfe:	e7ea      	b.n	1001ecd6 <__lshift+0xae>
1001ed00:	4b03      	ldr	r3, [pc, #12]	@ (1001ed10 <__lshift+0xe8>)
1001ed02:	4804      	ldr	r0, [pc, #16]	@ (1001ed14 <__lshift+0xec>)
1001ed04:	4662      	mov	r2, ip
1001ed06:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
1001ed0a:	f002 f863 	bl	10020dd4 <__assert_func>
1001ed0e:	bf00      	nop
1001ed10:	10025650 	.word	0x10025650
1001ed14:	10025714 	.word	0x10025714

1001ed18 <__mcmp>:
1001ed18:	690b      	ldr	r3, [r1, #16]
1001ed1a:	4684      	mov	ip, r0
1001ed1c:	6900      	ldr	r0, [r0, #16]
1001ed1e:	1ac0      	subs	r0, r0, r3
1001ed20:	d115      	bne.n	1001ed4e <__mcmp+0x36>
1001ed22:	f10c 0c14 	add.w	ip, ip, #20
1001ed26:	3114      	adds	r1, #20
1001ed28:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
1001ed2c:	b410      	push	{r4}
1001ed2e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
1001ed32:	e001      	b.n	1001ed38 <__mcmp+0x20>
1001ed34:	4594      	cmp	ip, r2
1001ed36:	d208      	bcs.n	1001ed4a <__mcmp+0x32>
1001ed38:	f852 4d04 	ldr.w	r4, [r2, #-4]!
1001ed3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1001ed40:	428c      	cmp	r4, r1
1001ed42:	d0f7      	beq.n	1001ed34 <__mcmp+0x1c>
1001ed44:	d204      	bcs.n	1001ed50 <__mcmp+0x38>
1001ed46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001ed4a:	bc10      	pop	{r4}
1001ed4c:	4770      	bx	lr
1001ed4e:	4770      	bx	lr
1001ed50:	2001      	movs	r0, #1
1001ed52:	bc10      	pop	{r4}
1001ed54:	4770      	bx	lr
1001ed56:	bf00      	nop

1001ed58 <__mdiff>:
1001ed58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001ed5c:	6913      	ldr	r3, [r2, #16]
1001ed5e:	690f      	ldr	r7, [r1, #16]
1001ed60:	1aff      	subs	r7, r7, r3
1001ed62:	2f00      	cmp	r7, #0
1001ed64:	b083      	sub	sp, #12
1001ed66:	460d      	mov	r5, r1
1001ed68:	4690      	mov	r8, r2
1001ed6a:	d115      	bne.n	1001ed98 <__mdiff+0x40>
1001ed6c:	f101 0614 	add.w	r6, r1, #20
1001ed70:	3214      	adds	r2, #20
1001ed72:	eb02 0283 	add.w	r2, r2, r3, lsl #2
1001ed76:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1001ed7a:	e001      	b.n	1001ed80 <__mdiff+0x28>
1001ed7c:	429e      	cmp	r6, r3
1001ed7e:	d276      	bcs.n	1001ee6e <__mdiff+0x116>
1001ed80:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1001ed84:	f852 1d04 	ldr.w	r1, [r2, #-4]!
1001ed88:	428c      	cmp	r4, r1
1001ed8a:	d0f7      	beq.n	1001ed7c <__mdiff+0x24>
1001ed8c:	d206      	bcs.n	1001ed9c <__mdiff+0x44>
1001ed8e:	462b      	mov	r3, r5
1001ed90:	2701      	movs	r7, #1
1001ed92:	4645      	mov	r5, r8
1001ed94:	4698      	mov	r8, r3
1001ed96:	e001      	b.n	1001ed9c <__mdiff+0x44>
1001ed98:	dbf9      	blt.n	1001ed8e <__mdiff+0x36>
1001ed9a:	2700      	movs	r7, #0
1001ed9c:	6869      	ldr	r1, [r5, #4]
1001ed9e:	f7ff fcdb 	bl	1001e758 <_Balloc>
1001eda2:	4681      	mov	r9, r0
1001eda4:	2800      	cmp	r0, #0
1001eda6:	d076      	beq.n	1001ee96 <__mdiff+0x13e>
1001eda8:	692e      	ldr	r6, [r5, #16]
1001edaa:	60c7      	str	r7, [r0, #12]
1001edac:	f8d8 0010 	ldr.w	r0, [r8, #16]
1001edb0:	f105 0b14 	add.w	fp, r5, #20
1001edb4:	f108 0e14 	add.w	lr, r8, #20
1001edb8:	f109 0a14 	add.w	sl, r9, #20
1001edbc:	f105 0110 	add.w	r1, r5, #16
1001edc0:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
1001edc4:	eb0b 0286 	add.w	r2, fp, r6, lsl #2
1001edc8:	4657      	mov	r7, sl
1001edca:	f04f 0c00 	mov.w	ip, #0
1001edce:	f8cd b004 	str.w	fp, [sp, #4]
1001edd2:	f85e 4b04 	ldr.w	r4, [lr], #4
1001edd6:	f851 5f04 	ldr.w	r5, [r1, #4]!
1001edda:	fa1f fb84 	uxth.w	fp, r4
1001edde:	b2ab      	uxth	r3, r5
1001ede0:	eba3 030b 	sub.w	r3, r3, fp
1001ede4:	0c24      	lsrs	r4, r4, #16
1001ede6:	4463      	add	r3, ip
1001ede8:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
1001edec:	eb04 4423 	add.w	r4, r4, r3, asr #16
1001edf0:	b29b      	uxth	r3, r3
1001edf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
1001edf6:	4570      	cmp	r0, lr
1001edf8:	f847 3b04 	str.w	r3, [r7], #4
1001edfc:	ea4f 4c24 	mov.w	ip, r4, asr #16
1001ee00:	d8e7      	bhi.n	1001edd2 <__mdiff+0x7a>
1001ee02:	eba0 0108 	sub.w	r1, r0, r8
1001ee06:	3915      	subs	r1, #21
1001ee08:	0889      	lsrs	r1, r1, #2
1001ee0a:	1c4c      	adds	r4, r1, #1
1001ee0c:	f8dd b004 	ldr.w	fp, [sp, #4]
1001ee10:	f108 0815 	add.w	r8, r8, #21
1001ee14:	00a4      	lsls	r4, r4, #2
1001ee16:	4540      	cmp	r0, r8
1001ee18:	bf38      	it	cc
1001ee1a:	2404      	movcc	r4, #4
1001ee1c:	eb0b 0504 	add.w	r5, fp, r4
1001ee20:	42aa      	cmp	r2, r5
1001ee22:	4454      	add	r4, sl
1001ee24:	d930      	bls.n	1001ee88 <__mdiff+0x130>
1001ee26:	4627      	mov	r7, r4
1001ee28:	4628      	mov	r0, r5
1001ee2a:	f850 3b04 	ldr.w	r3, [r0], #4
1001ee2e:	fa1c fe83 	uxtah	lr, ip, r3
1001ee32:	0c19      	lsrs	r1, r3, #16
1001ee34:	4463      	add	r3, ip
1001ee36:	eb01 412e 	add.w	r1, r1, lr, asr #16
1001ee3a:	b29b      	uxth	r3, r3
1001ee3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1001ee40:	4282      	cmp	r2, r0
1001ee42:	f847 3b04 	str.w	r3, [r7], #4
1001ee46:	ea4f 4c21 	mov.w	ip, r1, asr #16
1001ee4a:	d8ee      	bhi.n	1001ee2a <__mdiff+0xd2>
1001ee4c:	3a01      	subs	r2, #1
1001ee4e:	1b52      	subs	r2, r2, r5
1001ee50:	f022 0203 	bic.w	r2, r2, #3
1001ee54:	4414      	add	r4, r2
1001ee56:	b923      	cbnz	r3, 1001ee62 <__mdiff+0x10a>
1001ee58:	f854 3d04 	ldr.w	r3, [r4, #-4]!
1001ee5c:	3e01      	subs	r6, #1
1001ee5e:	2b00      	cmp	r3, #0
1001ee60:	d0fa      	beq.n	1001ee58 <__mdiff+0x100>
1001ee62:	4648      	mov	r0, r9
1001ee64:	f8c9 6010 	str.w	r6, [r9, #16]
1001ee68:	b003      	add	sp, #12
1001ee6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001ee6e:	2100      	movs	r1, #0
1001ee70:	f7ff fc72 	bl	1001e758 <_Balloc>
1001ee74:	4681      	mov	r9, r0
1001ee76:	b1a8      	cbz	r0, 1001eea4 <__mdiff+0x14c>
1001ee78:	2201      	movs	r2, #1
1001ee7a:	2300      	movs	r3, #0
1001ee7c:	e9c0 2304 	strd	r2, r3, [r0, #16]
1001ee80:	4648      	mov	r0, r9
1001ee82:	b003      	add	sp, #12
1001ee84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001ee88:	0089      	lsls	r1, r1, #2
1001ee8a:	4540      	cmp	r0, r8
1001ee8c:	bf38      	it	cc
1001ee8e:	2100      	movcc	r1, #0
1001ee90:	eb0a 0401 	add.w	r4, sl, r1
1001ee94:	e7df      	b.n	1001ee56 <__mdiff+0xfe>
1001ee96:	4b07      	ldr	r3, [pc, #28]	@ (1001eeb4 <__mdiff+0x15c>)
1001ee98:	4807      	ldr	r0, [pc, #28]	@ (1001eeb8 <__mdiff+0x160>)
1001ee9a:	464a      	mov	r2, r9
1001ee9c:	f240 2145 	movw	r1, #581	@ 0x245
1001eea0:	f001 ff98 	bl	10020dd4 <__assert_func>
1001eea4:	4b03      	ldr	r3, [pc, #12]	@ (1001eeb4 <__mdiff+0x15c>)
1001eea6:	4804      	ldr	r0, [pc, #16]	@ (1001eeb8 <__mdiff+0x160>)
1001eea8:	464a      	mov	r2, r9
1001eeaa:	f240 2137 	movw	r1, #567	@ 0x237
1001eeae:	f001 ff91 	bl	10020dd4 <__assert_func>
1001eeb2:	bf00      	nop
1001eeb4:	10025650 	.word	0x10025650
1001eeb8:	10025714 	.word	0x10025714

1001eebc <__ulp>:
1001eebc:	4b11      	ldr	r3, [pc, #68]	@ (1001ef04 <__ulp+0x48>)
1001eebe:	400b      	ands	r3, r1
1001eec0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
1001eec4:	2b00      	cmp	r3, #0
1001eec6:	dd03      	ble.n	1001eed0 <__ulp+0x14>
1001eec8:	2200      	movs	r2, #0
1001eeca:	4619      	mov	r1, r3
1001eecc:	4610      	mov	r0, r2
1001eece:	4770      	bx	lr
1001eed0:	425b      	negs	r3, r3
1001eed2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
1001eed6:	ea4f 5223 	mov.w	r2, r3, asr #20
1001eeda:	da06      	bge.n	1001eeea <__ulp+0x2e>
1001eedc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
1001eee0:	4113      	asrs	r3, r2
1001eee2:	2200      	movs	r2, #0
1001eee4:	4619      	mov	r1, r3
1001eee6:	4610      	mov	r0, r2
1001eee8:	4770      	bx	lr
1001eeea:	f1a2 0314 	sub.w	r3, r2, #20
1001eeee:	2b1e      	cmp	r3, #30
1001eef0:	bfda      	itte	le
1001eef2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
1001eef6:	40da      	lsrle	r2, r3
1001eef8:	2201      	movgt	r2, #1
1001eefa:	2300      	movs	r3, #0
1001eefc:	4619      	mov	r1, r3
1001eefe:	4610      	mov	r0, r2
1001ef00:	4770      	bx	lr
1001ef02:	bf00      	nop
1001ef04:	7ff00000 	.word	0x7ff00000

1001ef08 <__b2d>:
1001ef08:	6902      	ldr	r2, [r0, #16]
1001ef0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1001ef0e:	f100 0714 	add.w	r7, r0, #20
1001ef12:	eb07 0282 	add.w	r2, r7, r2, lsl #2
1001ef16:	f1a2 0804 	sub.w	r8, r2, #4
1001ef1a:	f852 6c04 	ldr.w	r6, [r2, #-4]
1001ef1e:	4630      	mov	r0, r6
1001ef20:	f7ff fcf2 	bl	1001e908 <__hi0bits>
1001ef24:	f1c0 0320 	rsb	r3, r0, #32
1001ef28:	280a      	cmp	r0, #10
1001ef2a:	600b      	str	r3, [r1, #0]
1001ef2c:	dd33      	ble.n	1001ef96 <__b2d+0x8e>
1001ef2e:	4547      	cmp	r7, r8
1001ef30:	f1a0 010b 	sub.w	r1, r0, #11
1001ef34:	d219      	bcs.n	1001ef6a <__b2d+0x62>
1001ef36:	f852 3c08 	ldr.w	r3, [r2, #-8]
1001ef3a:	b321      	cbz	r1, 1001ef86 <__b2d+0x7e>
1001ef3c:	f1c1 0020 	rsb	r0, r1, #32
1001ef40:	408e      	lsls	r6, r1
1001ef42:	fa23 f400 	lsr.w	r4, r3, r0
1001ef46:	4326      	orrs	r6, r4
1001ef48:	408b      	lsls	r3, r1
1001ef4a:	f1a2 0108 	sub.w	r1, r2, #8
1001ef4e:	f046 557f 	orr.w	r5, r6, #1069547520	@ 0x3fc00000
1001ef52:	428f      	cmp	r7, r1
1001ef54:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
1001ef58:	d219      	bcs.n	1001ef8e <__b2d+0x86>
1001ef5a:	f852 2c0c 	ldr.w	r2, [r2, #-12]
1001ef5e:	40c2      	lsrs	r2, r0
1001ef60:	4313      	orrs	r3, r2
1001ef62:	4618      	mov	r0, r3
1001ef64:	4629      	mov	r1, r5
1001ef66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001ef6a:	280b      	cmp	r0, #11
1001ef6c:	d00a      	beq.n	1001ef84 <__b2d+0x7c>
1001ef6e:	fa06 f101 	lsl.w	r1, r6, r1
1001ef72:	f041 557f 	orr.w	r5, r1, #1069547520	@ 0x3fc00000
1001ef76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
1001ef7a:	2300      	movs	r3, #0
1001ef7c:	4618      	mov	r0, r3
1001ef7e:	4629      	mov	r1, r5
1001ef80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001ef84:	2300      	movs	r3, #0
1001ef86:	f046 557f 	orr.w	r5, r6, #1069547520	@ 0x3fc00000
1001ef8a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
1001ef8e:	4618      	mov	r0, r3
1001ef90:	4629      	mov	r1, r5
1001ef92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1001ef96:	4547      	cmp	r7, r8
1001ef98:	bf38      	it	cc
1001ef9a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
1001ef9e:	f1c0 030b 	rsb	r3, r0, #11
1001efa2:	fa26 f103 	lsr.w	r1, r6, r3
1001efa6:	bf38      	it	cc
1001efa8:	40da      	lsrcc	r2, r3
1001efaa:	f100 0315 	add.w	r3, r0, #21
1001efae:	f041 557f 	orr.w	r5, r1, #1069547520	@ 0x3fc00000
1001efb2:	bf28      	it	cs
1001efb4:	2200      	movcs	r2, #0
1001efb6:	fa06 f303 	lsl.w	r3, r6, r3
1001efba:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
1001efbe:	4313      	orrs	r3, r2
1001efc0:	4618      	mov	r0, r3
1001efc2:	4629      	mov	r1, r5
1001efc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1001efc8 <__d2b>:
1001efc8:	b5f0      	push	{r4, r5, r6, r7, lr}
1001efca:	2101      	movs	r1, #1
1001efcc:	b083      	sub	sp, #12
1001efce:	4616      	mov	r6, r2
1001efd0:	461f      	mov	r7, r3
1001efd2:	f7ff fbc1 	bl	1001e758 <_Balloc>
1001efd6:	4605      	mov	r5, r0
1001efd8:	2800      	cmp	r0, #0
1001efda:	d047      	beq.n	1001f06c <__d2b+0xa4>
1001efdc:	f3c7 540a 	ubfx	r4, r7, #20, #11
1001efe0:	f3c7 0313 	ubfx	r3, r7, #0, #20
1001efe4:	b10c      	cbz	r4, 1001efea <__d2b+0x22>
1001efe6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
1001efea:	2e00      	cmp	r6, #0
1001efec:	9301      	str	r3, [sp, #4]
1001efee:	d114      	bne.n	1001f01a <__d2b+0x52>
1001eff0:	a801      	add	r0, sp, #4
1001eff2:	f7ff fcab 	bl	1001e94c <__lo0bits>
1001eff6:	9b01      	ldr	r3, [sp, #4]
1001eff8:	616b      	str	r3, [r5, #20]
1001effa:	2201      	movs	r2, #1
1001effc:	3020      	adds	r0, #32
1001effe:	612a      	str	r2, [r5, #16]
1001f000:	b314      	cbz	r4, 1001f048 <__d2b+0x80>
1001f002:	9b08      	ldr	r3, [sp, #32]
1001f004:	f2a4 4433 	subw	r4, r4, #1075	@ 0x433
1001f008:	4404      	add	r4, r0
1001f00a:	601c      	str	r4, [r3, #0]
1001f00c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001f00e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
1001f012:	6018      	str	r0, [r3, #0]
1001f014:	4628      	mov	r0, r5
1001f016:	b003      	add	sp, #12
1001f018:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001f01a:	4668      	mov	r0, sp
1001f01c:	9600      	str	r6, [sp, #0]
1001f01e:	f7ff fc95 	bl	1001e94c <__lo0bits>
1001f022:	9b01      	ldr	r3, [sp, #4]
1001f024:	b300      	cbz	r0, 1001f068 <__d2b+0xa0>
1001f026:	9900      	ldr	r1, [sp, #0]
1001f028:	f1c0 0220 	rsb	r2, r0, #32
1001f02c:	fa03 f202 	lsl.w	r2, r3, r2
1001f030:	40c3      	lsrs	r3, r0
1001f032:	9301      	str	r3, [sp, #4]
1001f034:	430a      	orrs	r2, r1
1001f036:	2b00      	cmp	r3, #0
1001f038:	e9c5 2305 	strd	r2, r3, [r5, #20]
1001f03c:	bf0c      	ite	eq
1001f03e:	2201      	moveq	r2, #1
1001f040:	2202      	movne	r2, #2
1001f042:	612a      	str	r2, [r5, #16]
1001f044:	2c00      	cmp	r4, #0
1001f046:	d1dc      	bne.n	1001f002 <__d2b+0x3a>
1001f048:	eb05 0182 	add.w	r1, r5, r2, lsl #2
1001f04c:	f2a0 4332 	subw	r3, r0, #1074	@ 0x432
1001f050:	6908      	ldr	r0, [r1, #16]
1001f052:	9908      	ldr	r1, [sp, #32]
1001f054:	600b      	str	r3, [r1, #0]
1001f056:	f7ff fc57 	bl	1001e908 <__hi0bits>
1001f05a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001f05c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
1001f060:	6018      	str	r0, [r3, #0]
1001f062:	4628      	mov	r0, r5
1001f064:	b003      	add	sp, #12
1001f066:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001f068:	9a00      	ldr	r2, [sp, #0]
1001f06a:	e7e4      	b.n	1001f036 <__d2b+0x6e>
1001f06c:	4b03      	ldr	r3, [pc, #12]	@ (1001f07c <__d2b+0xb4>)
1001f06e:	4804      	ldr	r0, [pc, #16]	@ (1001f080 <__d2b+0xb8>)
1001f070:	462a      	mov	r2, r5
1001f072:	f240 310f 	movw	r1, #783	@ 0x30f
1001f076:	f001 fead 	bl	10020dd4 <__assert_func>
1001f07a:	bf00      	nop
1001f07c:	10025650 	.word	0x10025650
1001f080:	10025714 	.word	0x10025714

1001f084 <__ratio>:
1001f084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1001f088:	b083      	sub	sp, #12
1001f08a:	460e      	mov	r6, r1
1001f08c:	4669      	mov	r1, sp
1001f08e:	4607      	mov	r7, r0
1001f090:	f7ff ff3a 	bl	1001ef08 <__b2d>
1001f094:	4604      	mov	r4, r0
1001f096:	460d      	mov	r5, r1
1001f098:	4630      	mov	r0, r6
1001f09a:	a901      	add	r1, sp, #4
1001f09c:	f7ff ff34 	bl	1001ef08 <__b2d>
1001f0a0:	6933      	ldr	r3, [r6, #16]
1001f0a2:	693a      	ldr	r2, [r7, #16]
1001f0a4:	1ad2      	subs	r2, r2, r3
1001f0a6:	e9dd 3600 	ldrd	r3, r6, [sp]
1001f0aa:	1b9b      	subs	r3, r3, r6
1001f0ac:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1001f0b0:	2b00      	cmp	r3, #0
1001f0b2:	dd0b      	ble.n	1001f0cc <__ratio+0x48>
1001f0b4:	eb05 5903 	add.w	r9, r5, r3, lsl #20
1001f0b8:	464d      	mov	r5, r9
1001f0ba:	4602      	mov	r2, r0
1001f0bc:	460b      	mov	r3, r1
1001f0be:	4620      	mov	r0, r4
1001f0c0:	4629      	mov	r1, r5
1001f0c2:	f003 f8b1 	bl	10022228 <__aeabi_ddiv>
1001f0c6:	b003      	add	sp, #12
1001f0c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1001f0cc:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
1001f0d0:	eb01 5703 	add.w	r7, r1, r3, lsl #20
1001f0d4:	4639      	mov	r1, r7
1001f0d6:	e7f0      	b.n	1001f0ba <__ratio+0x36>

1001f0d8 <__copybits>:
1001f0d8:	3901      	subs	r1, #1
1001f0da:	1149      	asrs	r1, r1, #5
1001f0dc:	f101 0c01 	add.w	ip, r1, #1
1001f0e0:	6911      	ldr	r1, [r2, #16]
1001f0e2:	f102 0314 	add.w	r3, r2, #20
1001f0e6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
1001f0ea:	428b      	cmp	r3, r1
1001f0ec:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
1001f0f0:	d216      	bcs.n	1001f120 <__copybits+0x48>
1001f0f2:	b510      	push	{r4, lr}
1001f0f4:	f1a0 0e04 	sub.w	lr, r0, #4
1001f0f8:	f853 4b04 	ldr.w	r4, [r3], #4
1001f0fc:	f84e 4f04 	str.w	r4, [lr, #4]!
1001f100:	4299      	cmp	r1, r3
1001f102:	d8f9      	bhi.n	1001f0f8 <__copybits+0x20>
1001f104:	1a8b      	subs	r3, r1, r2
1001f106:	3b15      	subs	r3, #21
1001f108:	f023 0303 	bic.w	r3, r3, #3
1001f10c:	3304      	adds	r3, #4
1001f10e:	4418      	add	r0, r3
1001f110:	4584      	cmp	ip, r0
1001f112:	d904      	bls.n	1001f11e <__copybits+0x46>
1001f114:	2300      	movs	r3, #0
1001f116:	f840 3b04 	str.w	r3, [r0], #4
1001f11a:	4584      	cmp	ip, r0
1001f11c:	d8fb      	bhi.n	1001f116 <__copybits+0x3e>
1001f11e:	bd10      	pop	{r4, pc}
1001f120:	4584      	cmp	ip, r0
1001f122:	d905      	bls.n	1001f130 <__copybits+0x58>
1001f124:	2300      	movs	r3, #0
1001f126:	f840 3b04 	str.w	r3, [r0], #4
1001f12a:	4584      	cmp	ip, r0
1001f12c:	d8fb      	bhi.n	1001f126 <__copybits+0x4e>
1001f12e:	4770      	bx	lr
1001f130:	4770      	bx	lr
1001f132:	bf00      	nop

1001f134 <__any_on>:
1001f134:	6903      	ldr	r3, [r0, #16]
1001f136:	114a      	asrs	r2, r1, #5
1001f138:	4293      	cmp	r3, r2
1001f13a:	f100 0014 	add.w	r0, r0, #20
1001f13e:	da09      	bge.n	1001f154 <__any_on+0x20>
1001f140:	eb00 0383 	add.w	r3, r0, r3, lsl #2
1001f144:	e002      	b.n	1001f14c <__any_on+0x18>
1001f146:	f853 2d04 	ldr.w	r2, [r3, #-4]!
1001f14a:	b9a2      	cbnz	r2, 1001f176 <__any_on+0x42>
1001f14c:	4283      	cmp	r3, r0
1001f14e:	d8fa      	bhi.n	1001f146 <__any_on+0x12>
1001f150:	2000      	movs	r0, #0
1001f152:	4770      	bx	lr
1001f154:	eb00 0382 	add.w	r3, r0, r2, lsl #2
1001f158:	ddf8      	ble.n	1001f14c <__any_on+0x18>
1001f15a:	f011 011f 	ands.w	r1, r1, #31
1001f15e:	d0f5      	beq.n	1001f14c <__any_on+0x18>
1001f160:	b410      	push	{r4}
1001f162:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
1001f166:	fa24 f201 	lsr.w	r2, r4, r1
1001f16a:	408a      	lsls	r2, r1
1001f16c:	4294      	cmp	r4, r2
1001f16e:	d008      	beq.n	1001f182 <__any_on+0x4e>
1001f170:	2001      	movs	r0, #1
1001f172:	bc10      	pop	{r4}
1001f174:	4770      	bx	lr
1001f176:	2001      	movs	r0, #1
1001f178:	4770      	bx	lr
1001f17a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
1001f17e:	2a00      	cmp	r2, #0
1001f180:	d1f6      	bne.n	1001f170 <__any_on+0x3c>
1001f182:	4283      	cmp	r3, r0
1001f184:	d8f9      	bhi.n	1001f17a <__any_on+0x46>
1001f186:	2000      	movs	r0, #0
1001f188:	bc10      	pop	{r4}
1001f18a:	4770      	bx	lr

1001f18c <lflush>:
1001f18c:	898b      	ldrh	r3, [r1, #12]
1001f18e:	f003 0309 	and.w	r3, r3, #9
1001f192:	2b09      	cmp	r3, #9
1001f194:	d001      	beq.n	1001f19a <lflush+0xe>
1001f196:	2000      	movs	r0, #0
1001f198:	4770      	bx	lr
1001f19a:	4b02      	ldr	r3, [pc, #8]	@ (1001f1a4 <lflush+0x18>)
1001f19c:	6818      	ldr	r0, [r3, #0]
1001f19e:	f7f9 b99b 	b.w	100184d8 <_fflush_r>
1001f1a2:	bf00      	nop
1001f1a4:	20000598 	.word	0x20000598

1001f1a8 <__srefill_r>:
1001f1a8:	b570      	push	{r4, r5, r6, lr}
1001f1aa:	460c      	mov	r4, r1
1001f1ac:	4605      	mov	r5, r0
1001f1ae:	b110      	cbz	r0, 1001f1b6 <__srefill_r+0xe>
1001f1b0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
1001f1b2:	2b00      	cmp	r3, #0
1001f1b4:	d05f      	beq.n	1001f276 <__srefill_r+0xce>
1001f1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001f1ba:	049a      	lsls	r2, r3, #18
1001f1bc:	d406      	bmi.n	1001f1cc <__srefill_r+0x24>
1001f1be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1001f1c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
1001f1c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
1001f1c8:	81a3      	strh	r3, [r4, #12]
1001f1ca:	6662      	str	r2, [r4, #100]	@ 0x64
1001f1cc:	2200      	movs	r2, #0
1001f1ce:	069e      	lsls	r6, r3, #26
1001f1d0:	6062      	str	r2, [r4, #4]
1001f1d2:	d45d      	bmi.n	1001f290 <__srefill_r+0xe8>
1001f1d4:	0758      	lsls	r0, r3, #29
1001f1d6:	d419      	bmi.n	1001f20c <__srefill_r+0x64>
1001f1d8:	06d9      	lsls	r1, r3, #27
1001f1da:	d55c      	bpl.n	1001f296 <__srefill_r+0xee>
1001f1dc:	071a      	lsls	r2, r3, #28
1001f1de:	d439      	bmi.n	1001f254 <__srefill_r+0xac>
1001f1e0:	f043 0304 	orr.w	r3, r3, #4
1001f1e4:	81a3      	strh	r3, [r4, #12]
1001f1e6:	6923      	ldr	r3, [r4, #16]
1001f1e8:	2b00      	cmp	r3, #0
1001f1ea:	d03f      	beq.n	1001f26c <__srefill_r+0xc4>
1001f1ec:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
1001f1f0:	07b3      	lsls	r3, r6, #30
1001f1f2:	d11e      	bne.n	1001f232 <__srefill_r+0x8a>
1001f1f4:	6922      	ldr	r2, [r4, #16]
1001f1f6:	6a26      	ldr	r6, [r4, #32]
1001f1f8:	6963      	ldr	r3, [r4, #20]
1001f1fa:	69e1      	ldr	r1, [r4, #28]
1001f1fc:	6022      	str	r2, [r4, #0]
1001f1fe:	4628      	mov	r0, r5
1001f200:	47b0      	blx	r6
1001f202:	2800      	cmp	r0, #0
1001f204:	6060      	str	r0, [r4, #4]
1001f206:	dd39      	ble.n	1001f27c <__srefill_r+0xd4>
1001f208:	2000      	movs	r0, #0
1001f20a:	bd70      	pop	{r4, r5, r6, pc}
1001f20c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
1001f20e:	2900      	cmp	r1, #0
1001f210:	d0e9      	beq.n	1001f1e6 <__srefill_r+0x3e>
1001f212:	f104 0340 	add.w	r3, r4, #64	@ 0x40
1001f216:	4299      	cmp	r1, r3
1001f218:	d002      	beq.n	1001f220 <__srefill_r+0x78>
1001f21a:	4628      	mov	r0, r5
1001f21c:	f7fb fed0 	bl	1001afc0 <_free_r>
1001f220:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
1001f222:	6063      	str	r3, [r4, #4]
1001f224:	2200      	movs	r2, #0
1001f226:	6322      	str	r2, [r4, #48]	@ 0x30
1001f228:	2b00      	cmp	r3, #0
1001f22a:	d0dc      	beq.n	1001f1e6 <__srefill_r+0x3e>
1001f22c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
1001f22e:	6023      	str	r3, [r4, #0]
1001f230:	e7ea      	b.n	1001f208 <__srefill_r+0x60>
1001f232:	2301      	movs	r3, #1
1001f234:	81a3      	strh	r3, [r4, #12]
1001f236:	4a1b      	ldr	r2, [pc, #108]	@ (1001f2a4 <__srefill_r+0xfc>)
1001f238:	491b      	ldr	r1, [pc, #108]	@ (1001f2a8 <__srefill_r+0x100>)
1001f23a:	481c      	ldr	r0, [pc, #112]	@ (1001f2ac <__srefill_r+0x104>)
1001f23c:	f7f9 fe20 	bl	10018e80 <_fwalk_sglue>
1001f240:	f006 0309 	and.w	r3, r6, #9
1001f244:	2b09      	cmp	r3, #9
1001f246:	81a6      	strh	r6, [r4, #12]
1001f248:	d1d4      	bne.n	1001f1f4 <__srefill_r+0x4c>
1001f24a:	4621      	mov	r1, r4
1001f24c:	4628      	mov	r0, r5
1001f24e:	f7f9 f8af 	bl	100183b0 <__sflush_r>
1001f252:	e7cf      	b.n	1001f1f4 <__srefill_r+0x4c>
1001f254:	4621      	mov	r1, r4
1001f256:	4628      	mov	r0, r5
1001f258:	f7f9 f93e 	bl	100184d8 <_fflush_r>
1001f25c:	b9c0      	cbnz	r0, 1001f290 <__srefill_r+0xe8>
1001f25e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001f262:	60a0      	str	r0, [r4, #8]
1001f264:	f023 0308 	bic.w	r3, r3, #8
1001f268:	61a0      	str	r0, [r4, #24]
1001f26a:	e7b9      	b.n	1001f1e0 <__srefill_r+0x38>
1001f26c:	4621      	mov	r1, r4
1001f26e:	4628      	mov	r0, r5
1001f270:	f7fd fd86 	bl	1001cd80 <__smakebuf_r>
1001f274:	e7ba      	b.n	1001f1ec <__srefill_r+0x44>
1001f276:	f7f9 fb0b 	bl	10018890 <__sinit>
1001f27a:	e79c      	b.n	1001f1b6 <__srefill_r+0xe>
1001f27c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001f280:	bf17      	itett	ne
1001f282:	2200      	movne	r2, #0
1001f284:	f043 0320 	orreq.w	r3, r3, #32
1001f288:	f043 0340 	orrne.w	r3, r3, #64	@ 0x40
1001f28c:	6062      	strne	r2, [r4, #4]
1001f28e:	81a3      	strh	r3, [r4, #12]
1001f290:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001f294:	bd70      	pop	{r4, r5, r6, pc}
1001f296:	2209      	movs	r2, #9
1001f298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1001f29c:	602a      	str	r2, [r5, #0]
1001f29e:	81a3      	strh	r3, [r4, #12]
1001f2a0:	e7f6      	b.n	1001f290 <__srefill_r+0xe8>
1001f2a2:	bf00      	nop
1001f2a4:	20000420 	.word	0x20000420
1001f2a8:	1001f18d 	.word	0x1001f18d
1001f2ac:	200005a0 	.word	0x200005a0

1001f2b0 <__srget_r>:
1001f2b0:	b538      	push	{r3, r4, r5, lr}
1001f2b2:	460c      	mov	r4, r1
1001f2b4:	4605      	mov	r5, r0
1001f2b6:	b108      	cbz	r0, 1001f2bc <__srget_r+0xc>
1001f2b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
1001f2ba:	b163      	cbz	r3, 1001f2d6 <__srget_r+0x26>
1001f2bc:	4621      	mov	r1, r4
1001f2be:	4628      	mov	r0, r5
1001f2c0:	f7ff ff72 	bl	1001f1a8 <__srefill_r>
1001f2c4:	b950      	cbnz	r0, 1001f2dc <__srget_r+0x2c>
1001f2c6:	e9d4 2300 	ldrd	r2, r3, [r4]
1001f2ca:	1c51      	adds	r1, r2, #1
1001f2cc:	3b01      	subs	r3, #1
1001f2ce:	e9c4 1300 	strd	r1, r3, [r4]
1001f2d2:	7810      	ldrb	r0, [r2, #0]
1001f2d4:	bd38      	pop	{r3, r4, r5, pc}
1001f2d6:	f7f9 fadb 	bl	10018890 <__sinit>
1001f2da:	e7ef      	b.n	1001f2bc <__srget_r+0xc>
1001f2dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1001f2e0:	bd38      	pop	{r3, r4, r5, pc}
1001f2e2:	bf00      	nop

1001f2e4 <__sccl>:
1001f2e4:	b570      	push	{r4, r5, r6, lr}
1001f2e6:	780c      	ldrb	r4, [r1, #0]
1001f2e8:	2c5e      	cmp	r4, #94	@ 0x5e
1001f2ea:	4686      	mov	lr, r0
1001f2ec:	d026      	beq.n	1001f33c <__sccl+0x58>
1001f2ee:	2300      	movs	r3, #0
1001f2f0:	1c48      	adds	r0, r1, #1
1001f2f2:	469c      	mov	ip, r3
1001f2f4:	2200      	movs	r2, #0
1001f2f6:	f363 0207 	bfi	r2, r3, #0, #8
1001f2fa:	f363 220f 	bfi	r2, r3, #8, #8
1001f2fe:	f363 4217 	bfi	r2, r3, #16, #8
1001f302:	f363 621f 	bfi	r2, r3, #24, #8
1001f306:	f50e 7180 	add.w	r1, lr, #256	@ 0x100
1001f30a:	4673      	mov	r3, lr
1001f30c:	f843 2b04 	str.w	r2, [r3], #4
1001f310:	428b      	cmp	r3, r1
1001f312:	d1fb      	bne.n	1001f30c <__sccl+0x28>
1001f314:	b184      	cbz	r4, 1001f338 <__sccl+0x54>
1001f316:	f08c 0101 	eor.w	r1, ip, #1
1001f31a:	f80e 1004 	strb.w	r1, [lr, r4]
1001f31e:	1c45      	adds	r5, r0, #1
1001f320:	f815 3c01 	ldrb.w	r3, [r5, #-1]
1001f324:	2b2d      	cmp	r3, #45	@ 0x2d
1001f326:	d00e      	beq.n	1001f346 <__sccl+0x62>
1001f328:	2b5d      	cmp	r3, #93	@ 0x5d
1001f32a:	d003      	beq.n	1001f334 <__sccl+0x50>
1001f32c:	b11b      	cbz	r3, 1001f336 <__sccl+0x52>
1001f32e:	461c      	mov	r4, r3
1001f330:	4628      	mov	r0, r5
1001f332:	e7f2      	b.n	1001f31a <__sccl+0x36>
1001f334:	4628      	mov	r0, r5
1001f336:	bd70      	pop	{r4, r5, r6, pc}
1001f338:	3801      	subs	r0, #1
1001f33a:	bd70      	pop	{r4, r5, r6, pc}
1001f33c:	2301      	movs	r3, #1
1001f33e:	784c      	ldrb	r4, [r1, #1]
1001f340:	1c88      	adds	r0, r1, #2
1001f342:	469c      	mov	ip, r3
1001f344:	e7d6      	b.n	1001f2f4 <__sccl+0x10>
1001f346:	f890 c001 	ldrb.w	ip, [r0, #1]
1001f34a:	f1bc 0f5d 	cmp.w	ip, #93	@ 0x5d
1001f34e:	d0ee      	beq.n	1001f32e <__sccl+0x4a>
1001f350:	4564      	cmp	r4, ip
1001f352:	dcec      	bgt.n	1001f32e <__sccl+0x4a>
1001f354:	1c66      	adds	r6, r4, #1
1001f356:	3002      	adds	r0, #2
1001f358:	eb0e 0206 	add.w	r2, lr, r6
1001f35c:	f802 1b01 	strb.w	r1, [r2], #1
1001f360:	eba2 030e 	sub.w	r3, r2, lr
1001f364:	3b01      	subs	r3, #1
1001f366:	459c      	cmp	ip, r3
1001f368:	dcf8      	bgt.n	1001f35c <__sccl+0x78>
1001f36a:	ebac 0304 	sub.w	r3, ip, r4
1001f36e:	3b01      	subs	r3, #1
1001f370:	4564      	cmp	r4, ip
1001f372:	bfa8      	it	ge
1001f374:	2300      	movge	r3, #0
1001f376:	3502      	adds	r5, #2
1001f378:	18f4      	adds	r4, r6, r3
1001f37a:	e7d1      	b.n	1001f320 <__sccl+0x3c>
1001f37c:	0000      	movs	r0, r0
	...

1001f380 <_strtod_l>:
1001f380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1001f384:	b09f      	sub	sp, #124	@ 0x7c
1001f386:	460e      	mov	r6, r1
1001f388:	2100      	movs	r1, #0
1001f38a:	9207      	str	r2, [sp, #28]
1001f38c:	911a      	str	r1, [sp, #104]	@ 0x68
1001f38e:	2200      	movs	r2, #0
1001f390:	2100      	movs	r1, #0
1001f392:	e9cd 1204 	strd	r1, r2, [sp, #16]
1001f396:	4683      	mov	fp, r0
1001f398:	4631      	mov	r1, r6
1001f39a:	9119      	str	r1, [sp, #100]	@ 0x64
1001f39c:	4688      	mov	r8, r1
1001f39e:	f811 2b01 	ldrb.w	r2, [r1], #1
1001f3a2:	2a2d      	cmp	r2, #45	@ 0x2d
1001f3a4:	d85e      	bhi.n	1001f464 <_strtod_l+0xe4>
1001f3a6:	a001      	add	r0, pc, #4	@ (adr r0, 1001f3ac <_strtod_l+0x2c>)
1001f3a8:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
1001f3ac:	1001f57d 	.word	0x1001f57d
1001f3b0:	1001f465 	.word	0x1001f465
1001f3b4:	1001f465 	.word	0x1001f465
1001f3b8:	1001f465 	.word	0x1001f465
1001f3bc:	1001f465 	.word	0x1001f465
1001f3c0:	1001f465 	.word	0x1001f465
1001f3c4:	1001f465 	.word	0x1001f465
1001f3c8:	1001f465 	.word	0x1001f465
1001f3cc:	1001f465 	.word	0x1001f465
1001f3d0:	1001f39b 	.word	0x1001f39b
1001f3d4:	1001f39b 	.word	0x1001f39b
1001f3d8:	1001f39b 	.word	0x1001f39b
1001f3dc:	1001f39b 	.word	0x1001f39b
1001f3e0:	1001f39b 	.word	0x1001f39b
1001f3e4:	1001f465 	.word	0x1001f465
1001f3e8:	1001f465 	.word	0x1001f465
1001f3ec:	1001f465 	.word	0x1001f465
1001f3f0:	1001f465 	.word	0x1001f465
1001f3f4:	1001f465 	.word	0x1001f465
1001f3f8:	1001f465 	.word	0x1001f465
1001f3fc:	1001f465 	.word	0x1001f465
1001f400:	1001f465 	.word	0x1001f465
1001f404:	1001f465 	.word	0x1001f465
1001f408:	1001f465 	.word	0x1001f465
1001f40c:	1001f465 	.word	0x1001f465
1001f410:	1001f465 	.word	0x1001f465
1001f414:	1001f465 	.word	0x1001f465
1001f418:	1001f465 	.word	0x1001f465
1001f41c:	1001f465 	.word	0x1001f465
1001f420:	1001f465 	.word	0x1001f465
1001f424:	1001f465 	.word	0x1001f465
1001f428:	1001f465 	.word	0x1001f465
1001f42c:	1001f39b 	.word	0x1001f39b
1001f430:	1001f465 	.word	0x1001f465
1001f434:	1001f465 	.word	0x1001f465
1001f438:	1001f465 	.word	0x1001f465
1001f43c:	1001f465 	.word	0x1001f465
1001f440:	1001f465 	.word	0x1001f465
1001f444:	1001f465 	.word	0x1001f465
1001f448:	1001f465 	.word	0x1001f465
1001f44c:	1001f465 	.word	0x1001f465
1001f450:	1001f465 	.word	0x1001f465
1001f454:	1001f465 	.word	0x1001f465
1001f458:	1001fb7b 	.word	0x1001fb7b
1001f45c:	1001f465 	.word	0x1001f465
1001f460:	1001fb93 	.word	0x1001fb93
1001f464:	2100      	movs	r1, #0
1001f466:	9108      	str	r1, [sp, #32]
1001f468:	2a30      	cmp	r2, #48	@ 0x30
1001f46a:	f000 8093 	beq.w	1001f594 <_strtod_l+0x214>
1001f46e:	2300      	movs	r3, #0
1001f470:	9309      	str	r3, [sp, #36]	@ 0x24
1001f472:	2a2f      	cmp	r2, #47	@ 0x2f
1001f474:	4617      	mov	r7, r2
1001f476:	f240 84ee 	bls.w	1001fe56 <_strtod_l+0xad6>
1001f47a:	f04f 0900 	mov.w	r9, #0
1001f47e:	4640      	mov	r0, r8
1001f480:	464d      	mov	r5, r9
1001f482:	464c      	mov	r4, r9
1001f484:	e013      	b.n	1001f4ae <_strtod_l+0x12e>
1001f486:	3001      	adds	r0, #1
1001f488:	2c08      	cmp	r4, #8
1001f48a:	9019      	str	r0, [sp, #100]	@ 0x64
1001f48c:	bfc8      	it	gt
1001f48e:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
1001f492:	7807      	ldrb	r7, [r0, #0]
1001f494:	bfc6      	itte	gt
1001f496:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
1001f49a:	f1a2 0930 	subgt.w	r9, r2, #48	@ 0x30
1001f49e:	f1a3 0530 	suble.w	r5, r3, #48	@ 0x30
1001f4a2:	2f2f      	cmp	r7, #47	@ 0x2f
1001f4a4:	f104 0401 	add.w	r4, r4, #1
1001f4a8:	463a      	mov	r2, r7
1001f4aa:	f340 80b7 	ble.w	1001f61c <_strtod_l+0x29c>
1001f4ae:	eb05 0385 	add.w	r3, r5, r5, lsl #2
1001f4b2:	2f39      	cmp	r7, #57	@ 0x39
1001f4b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
1001f4b8:	dde5      	ble.n	1001f486 <_strtod_l+0x106>
1001f4ba:	4974      	ldr	r1, [pc, #464]	@ (1001f68c <_strtod_l+0x30c>)
1001f4bc:	2201      	movs	r2, #1
1001f4be:	f001 f947 	bl	10020750 <strncmp>
1001f4c2:	2800      	cmp	r0, #0
1001f4c4:	d17b      	bne.n	1001f5be <_strtod_l+0x23e>
1001f4c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
1001f4c8:	4613      	mov	r3, r2
1001f4ca:	3201      	adds	r2, #1
1001f4cc:	9219      	str	r2, [sp, #100]	@ 0x64
1001f4ce:	785f      	ldrb	r7, [r3, #1]
1001f4d0:	2c00      	cmp	r4, #0
1001f4d2:	f040 8587 	bne.w	1001ffe4 <_strtod_l+0xc64>
1001f4d6:	2f30      	cmp	r7, #48	@ 0x30
1001f4d8:	f040 851f 	bne.w	1001ff1a <_strtod_l+0xb9a>
1001f4dc:	4613      	mov	r3, r2
1001f4de:	4618      	mov	r0, r3
1001f4e0:	3301      	adds	r3, #1
1001f4e2:	9319      	str	r3, [sp, #100]	@ 0x64
1001f4e4:	781f      	ldrb	r7, [r3, #0]
1001f4e6:	2f30      	cmp	r7, #48	@ 0x30
1001f4e8:	d0f9      	beq.n	1001f4de <_strtod_l+0x15e>
1001f4ea:	f1c2 0201 	rsb	r2, r2, #1
1001f4ee:	4410      	add	r0, r2
1001f4f0:	f1a7 0331 	sub.w	r3, r7, #49	@ 0x31
1001f4f4:	2b08      	cmp	r3, #8
1001f4f6:	d834      	bhi.n	1001f562 <_strtod_l+0x1e2>
1001f4f8:	f8dd 8064 	ldr.w	r8, [sp, #100]	@ 0x64
1001f4fc:	1c43      	adds	r3, r0, #1
1001f4fe:	f1a7 0e30 	sub.w	lr, r7, #48	@ 0x30
1001f502:	930e      	str	r3, [sp, #56]	@ 0x38
1001f504:	2401      	movs	r4, #1
1001f506:	4647      	mov	r7, r8
1001f508:	f04f 0a00 	mov.w	sl, #0
1001f50c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
1001f510:	eb0e 0545 	add.w	r5, lr, r5, lsl #1
1001f514:	2000      	movs	r0, #0
1001f516:	1c7b      	adds	r3, r7, #1
1001f518:	9319      	str	r3, [sp, #100]	@ 0x64
1001f51a:	787f      	ldrb	r7, [r7, #1]
1001f51c:	f1a7 0230 	sub.w	r2, r7, #48	@ 0x30
1001f520:	2a09      	cmp	r2, #9
1001f522:	f200 8322 	bhi.w	1001fb6a <_strtod_l+0x7ea>
1001f526:	9f19      	ldr	r7, [sp, #100]	@ 0x64
1001f528:	3001      	adds	r0, #1
1001f52a:	4696      	mov	lr, r2
1001f52c:	2a00      	cmp	r2, #0
1001f52e:	d0f2      	beq.n	1001f516 <_strtod_l+0x196>
1001f530:	2801      	cmp	r0, #1
1001f532:	f000 86e5 	beq.w	10020300 <_strtod_l+0xf80>
1001f536:	eb00 0c04 	add.w	ip, r0, r4
1001f53a:	f10c 31ff 	add.w	r1, ip, #4294967295	@ 0xffffffff
1001f53e:	e003      	b.n	1001f548 <_strtod_l+0x1c8>
1001f540:	005d      	lsls	r5, r3, #1
1001f542:	428c      	cmp	r4, r1
1001f544:	f000 8477 	beq.w	1001fe36 <_strtod_l+0xab6>
1001f548:	2c08      	cmp	r4, #8
1001f54a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
1001f54e:	f104 0401 	add.w	r4, r4, #1
1001f552:	d9f5      	bls.n	1001f540 <_strtod_l+0x1c0>
1001f554:	2c10      	cmp	r4, #16
1001f556:	bfdc      	itt	le
1001f558:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
1001f55c:	ea4f 0949 	movle.w	r9, r9, lsl #1
1001f560:	e7ef      	b.n	1001f542 <_strtod_l+0x1c2>
1001f562:	2f65      	cmp	r7, #101	@ 0x65
1001f564:	f040 8318 	bne.w	1001fb98 <_strtod_l+0x818>
1001f568:	f04f 0a00 	mov.w	sl, #0
1001f56c:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
1001f570:	f04f 0c01 	mov.w	ip, #1
1001f574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001f576:	4303      	orrs	r3, r0
1001f578:	f040 82fd 	bne.w	1001fb76 <_strtod_l+0x7f6>
1001f57c:	9b07      	ldr	r3, [sp, #28]
1001f57e:	f04f 0800 	mov.w	r8, #0
1001f582:	f04f 0900 	mov.w	r9, #0
1001f586:	b103      	cbz	r3, 1001f58a <_strtod_l+0x20a>
1001f588:	601e      	str	r6, [r3, #0]
1001f58a:	4640      	mov	r0, r8
1001f58c:	4649      	mov	r1, r9
1001f58e:	b01f      	add	sp, #124	@ 0x7c
1001f590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001f594:	f898 2001 	ldrb.w	r2, [r8, #1]
1001f598:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
1001f59c:	2a58      	cmp	r2, #88	@ 0x58
1001f59e:	bf18      	it	ne
1001f5a0:	4643      	movne	r3, r8
1001f5a2:	f000 83fc 	beq.w	1001fd9e <_strtod_l+0xa1e>
1001f5a6:	3301      	adds	r3, #1
1001f5a8:	9319      	str	r3, [sp, #100]	@ 0x64
1001f5aa:	781a      	ldrb	r2, [r3, #0]
1001f5ac:	2a30      	cmp	r2, #48	@ 0x30
1001f5ae:	d0fa      	beq.n	1001f5a6 <_strtod_l+0x226>
1001f5b0:	4698      	mov	r8, r3
1001f5b2:	2a00      	cmp	r2, #0
1001f5b4:	f000 82bb 	beq.w	1001fb2e <_strtod_l+0x7ae>
1001f5b8:	2301      	movs	r3, #1
1001f5ba:	9309      	str	r3, [sp, #36]	@ 0x24
1001f5bc:	e759      	b.n	1001f472 <_strtod_l+0xf2>
1001f5be:	2000      	movs	r0, #0
1001f5c0:	46a2      	mov	sl, r4
1001f5c2:	900e      	str	r0, [sp, #56]	@ 0x38
1001f5c4:	4684      	mov	ip, r0
1001f5c6:	2f65      	cmp	r7, #101	@ 0x65
1001f5c8:	d035      	beq.n	1001f636 <_strtod_l+0x2b6>
1001f5ca:	2f45      	cmp	r7, #69	@ 0x45
1001f5cc:	d033      	beq.n	1001f636 <_strtod_l+0x2b6>
1001f5ce:	2300      	movs	r3, #0
1001f5d0:	930f      	str	r3, [sp, #60]	@ 0x3c
1001f5d2:	2c00      	cmp	r4, #0
1001f5d4:	f040 8081 	bne.w	1001f6da <_strtod_l+0x35a>
1001f5d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1001f5da:	4303      	orrs	r3, r0
1001f5dc:	f040 82a7 	bne.w	1001fb2e <_strtod_l+0x7ae>
1001f5e0:	f1bc 0f00 	cmp.w	ip, #0
1001f5e4:	d1ca      	bne.n	1001f57c <_strtod_l+0x1fc>
1001f5e6:	2f69      	cmp	r7, #105	@ 0x69
1001f5e8:	f000 847e 	beq.w	1001fee8 <_strtod_l+0xb68>
1001f5ec:	f300 83a3 	bgt.w	1001fd36 <_strtod_l+0x9b6>
1001f5f0:	2f49      	cmp	r7, #73	@ 0x49
1001f5f2:	f000 8479 	beq.w	1001fee8 <_strtod_l+0xb68>
1001f5f6:	2f4e      	cmp	r7, #78	@ 0x4e
1001f5f8:	d1c0      	bne.n	1001f57c <_strtod_l+0x1fc>
1001f5fa:	4925      	ldr	r1, [pc, #148]	@ (1001f690 <_strtod_l+0x310>)
1001f5fc:	a819      	add	r0, sp, #100	@ 0x64
1001f5fe:	f002 f843 	bl	10021688 <__match>
1001f602:	2800      	cmp	r0, #0
1001f604:	d0ba      	beq.n	1001f57c <_strtod_l+0x1fc>
1001f606:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1001f608:	781b      	ldrb	r3, [r3, #0]
1001f60a:	2b28      	cmp	r3, #40	@ 0x28
1001f60c:	f000 85a2 	beq.w	10020154 <_strtod_l+0xdd4>
1001f610:	4820      	ldr	r0, [pc, #128]	@ (1001f694 <_strtod_l+0x314>)
1001f612:	f001 fbd5 	bl	10020dc0 <nan>
1001f616:	4680      	mov	r8, r0
1001f618:	4689      	mov	r9, r1
1001f61a:	e28c      	b.n	1001fb36 <_strtod_l+0x7b6>
1001f61c:	491b      	ldr	r1, [pc, #108]	@ (1001f68c <_strtod_l+0x30c>)
1001f61e:	2201      	movs	r2, #1
1001f620:	f001 f896 	bl	10020750 <strncmp>
1001f624:	2800      	cmp	r0, #0
1001f626:	d1ca      	bne.n	1001f5be <_strtod_l+0x23e>
1001f628:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1001f62a:	900e      	str	r0, [sp, #56]	@ 0x38
1001f62c:	1c5a      	adds	r2, r3, #1
1001f62e:	9219      	str	r2, [sp, #100]	@ 0x64
1001f630:	785f      	ldrb	r7, [r3, #1]
1001f632:	46a2      	mov	sl, r4
1001f634:	e772      	b.n	1001f51c <_strtod_l+0x19c>
1001f636:	2c00      	cmp	r4, #0
1001f638:	d09c      	beq.n	1001f574 <_strtod_l+0x1f4>
1001f63a:	9e19      	ldr	r6, [sp, #100]	@ 0x64
1001f63c:	1c73      	adds	r3, r6, #1
1001f63e:	9319      	str	r3, [sp, #100]	@ 0x64
1001f640:	7877      	ldrb	r7, [r6, #1]
1001f642:	2f2b      	cmp	r7, #43	@ 0x2b
1001f644:	f000 8294 	beq.w	1001fb70 <_strtod_l+0x7f0>
1001f648:	2f2d      	cmp	r7, #45	@ 0x2d
1001f64a:	f000 8284 	beq.w	1001fb56 <_strtod_l+0x7d6>
1001f64e:	2300      	movs	r3, #0
1001f650:	930a      	str	r3, [sp, #40]	@ 0x28
1001f652:	f1a7 0130 	sub.w	r1, r7, #48	@ 0x30
1001f656:	2909      	cmp	r1, #9
1001f658:	f200 8283 	bhi.w	1001fb62 <_strtod_l+0x7e2>
1001f65c:	2f30      	cmp	r7, #48	@ 0x30
1001f65e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1001f660:	d10a      	bne.n	1001f678 <_strtod_l+0x2f8>
1001f662:	3301      	adds	r3, #1
1001f664:	9319      	str	r3, [sp, #100]	@ 0x64
1001f666:	781f      	ldrb	r7, [r3, #0]
1001f668:	2f30      	cmp	r7, #48	@ 0x30
1001f66a:	d0fa      	beq.n	1001f662 <_strtod_l+0x2e2>
1001f66c:	f1a7 0231 	sub.w	r2, r7, #49	@ 0x31
1001f670:	2a08      	cmp	r2, #8
1001f672:	d8ac      	bhi.n	1001f5ce <_strtod_l+0x24e>
1001f674:	f1a7 0130 	sub.w	r1, r7, #48	@ 0x30
1001f678:	1c5a      	adds	r2, r3, #1
1001f67a:	9219      	str	r2, [sp, #100]	@ 0x64
1001f67c:	785f      	ldrb	r7, [r3, #1]
1001f67e:	2f2f      	cmp	r7, #47	@ 0x2f
1001f680:	f340 83fc 	ble.w	1001fe7c <_strtod_l+0xafc>
1001f684:	4696      	mov	lr, r2
1001f686:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
1001f68a:	e00e      	b.n	1001f6aa <_strtod_l+0x32a>
1001f68c:	10022ea0 	.word	0x10022ea0
1001f690:	10025884 	.word	0x10025884
1001f694:	10022c94 	.word	0x10022c94
1001f698:	3201      	adds	r2, #1
1001f69a:	9219      	str	r2, [sp, #100]	@ 0x64
1001f69c:	f89e 7001 	ldrb.w	r7, [lr, #1]
1001f6a0:	2f2f      	cmp	r7, #47	@ 0x2f
1001f6a2:	f1a8 0130 	sub.w	r1, r8, #48	@ 0x30
1001f6a6:	dd06      	ble.n	1001f6b6 <_strtod_l+0x336>
1001f6a8:	4696      	mov	lr, r2
1001f6aa:	eb01 0881 	add.w	r8, r1, r1, lsl #2
1001f6ae:	2f39      	cmp	r7, #57	@ 0x39
1001f6b0:	eb07 0848 	add.w	r8, r7, r8, lsl #1
1001f6b4:	ddf0      	ble.n	1001f698 <_strtod_l+0x318>
1001f6b6:	1ad2      	subs	r2, r2, r3
1001f6b8:	2a08      	cmp	r2, #8
1001f6ba:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
1001f6be:	f340 83dd 	ble.w	1001fe7c <_strtod_l+0xafc>
1001f6c2:	f644 631f 	movw	r3, #19999	@ 0x4e1f
1001f6c6:	930f      	str	r3, [sp, #60]	@ 0x3c
1001f6c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001f6ca:	2b00      	cmp	r3, #0
1001f6cc:	d081      	beq.n	1001f5d2 <_strtod_l+0x252>
1001f6ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001f6d0:	425b      	negs	r3, r3
1001f6d2:	930f      	str	r3, [sp, #60]	@ 0x3c
1001f6d4:	2c00      	cmp	r4, #0
1001f6d6:	f43f af7f 	beq.w	1001f5d8 <_strtod_l+0x258>
1001f6da:	4628      	mov	r0, r5
1001f6dc:	f002 fc00 	bl	10021ee0 <__aeabi_ui2d>
1001f6e0:	4602      	mov	r2, r0
1001f6e2:	460b      	mov	r3, r1
1001f6e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
1001f6e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
1001f6ec:	f1ba 0f00 	cmp.w	sl, #0
1001f6f0:	bf08      	it	eq
1001f6f2:	46a2      	moveq	sl, r4
1001f6f4:	2c10      	cmp	r4, #16
1001f6f6:	eba3 0302 	sub.w	r3, r3, r2
1001f6fa:	4626      	mov	r6, r4
1001f6fc:	bfa8      	it	ge
1001f6fe:	2610      	movge	r6, #16
1001f700:	2c09      	cmp	r4, #9
1001f702:	930b      	str	r3, [sp, #44]	@ 0x2c
1001f704:	dd16      	ble.n	1001f734 <_strtod_l+0x3b4>
1001f706:	4b4f      	ldr	r3, [pc, #316]	@ (1001f844 <_strtod_l+0x4c4>)
1001f708:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
1001f70c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
1001f710:	f002 fc60 	bl	10021fd4 <__aeabi_dmul>
1001f714:	e9cd 0104 	strd	r0, r1, [sp, #16]
1001f718:	4648      	mov	r0, r9
1001f71a:	f002 fbe1 	bl	10021ee0 <__aeabi_ui2d>
1001f71e:	4602      	mov	r2, r0
1001f720:	460b      	mov	r3, r1
1001f722:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1001f726:	f002 fa9f 	bl	10021c68 <__adddf3>
1001f72a:	2c0f      	cmp	r4, #15
1001f72c:	e9cd 0104 	strd	r0, r1, [sp, #16]
1001f730:	f300 81a7 	bgt.w	1001fa82 <_strtod_l+0x702>
1001f734:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001f736:	2b00      	cmp	r3, #0
1001f738:	f000 8301 	beq.w	1001fd3e <_strtod_l+0x9be>
1001f73c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001f73e:	f340 8231 	ble.w	1001fba4 <_strtod_l+0x824>
1001f742:	2b16      	cmp	r3, #22
1001f744:	f340 83a1 	ble.w	1001fe8a <_strtod_l+0xb0a>
1001f748:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1001f74a:	f1c4 0325 	rsb	r3, r4, #37	@ 0x25
1001f74e:	4293      	cmp	r3, r2
1001f750:	f280 8432 	bge.w	1001ffb8 <_strtod_l+0xc38>
1001f754:	1ba6      	subs	r6, r4, r6
1001f756:	4416      	add	r6, r2
1001f758:	f016 000f 	ands.w	r0, r6, #15
1001f75c:	d00a      	beq.n	1001f774 <_strtod_l+0x3f4>
1001f75e:	4939      	ldr	r1, [pc, #228]	@ (1001f844 <_strtod_l+0x4c4>)
1001f760:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
1001f764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1001f768:	e9d1 0100 	ldrd	r0, r1, [r1]
1001f76c:	f002 fc32 	bl	10021fd4 <__aeabi_dmul>
1001f770:	e9cd 0104 	strd	r0, r1, [sp, #16]
1001f774:	f036 030f 	bics.w	r3, r6, #15
1001f778:	d046      	beq.n	1001f808 <_strtod_l+0x488>
1001f77a:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
1001f77e:	f300 834e 	bgt.w	1001fe1e <_strtod_l+0xa9e>
1001f782:	2b10      	cmp	r3, #16
1001f784:	4a30      	ldr	r2, [pc, #192]	@ (1001f848 <_strtod_l+0x4c8>)
1001f786:	ea4f 1623 	mov.w	r6, r3, asr #4
1001f78a:	f340 8539 	ble.w	10020200 <_strtod_l+0xe80>
1001f78e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1001f792:	2300      	movs	r3, #0
1001f794:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
1001f798:	4617      	mov	r7, r2
1001f79a:	4699      	mov	r9, r3
1001f79c:	4690      	mov	r8, r2
1001f79e:	f016 0f01 	tst.w	r6, #1
1001f7a2:	f109 0901 	add.w	r9, r9, #1
1001f7a6:	ea4f 0666 	mov.w	r6, r6, asr #1
1001f7aa:	d004      	beq.n	1001f7b6 <_strtod_l+0x436>
1001f7ac:	e9d7 2300 	ldrd	r2, r3, [r7]
1001f7b0:	f002 fc10 	bl	10021fd4 <__aeabi_dmul>
1001f7b4:	2301      	movs	r3, #1
1001f7b6:	2e01      	cmp	r6, #1
1001f7b8:	f107 0708 	add.w	r7, r7, #8
1001f7bc:	d1ef      	bne.n	1001f79e <_strtod_l+0x41e>
1001f7be:	4642      	mov	r2, r8
1001f7c0:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
1001f7c4:	b10b      	cbz	r3, 1001f7ca <_strtod_l+0x44a>
1001f7c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
1001f7ca:	9b05      	ldr	r3, [sp, #20]
1001f7cc:	f1a3 7354 	sub.w	r3, r3, #55574528	@ 0x3500000
1001f7d0:	eb02 01c9 	add.w	r1, r2, r9, lsl #3
1001f7d4:	9305      	str	r3, [sp, #20]
1001f7d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1001f7da:	e9d1 0100 	ldrd	r0, r1, [r1]
1001f7de:	f002 fbf9 	bl	10021fd4 <__aeabi_dmul>
1001f7e2:	4b1a      	ldr	r3, [pc, #104]	@ (1001f84c <_strtod_l+0x4cc>)
1001f7e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
1001f7e8:	400b      	ands	r3, r1
1001f7ea:	460a      	mov	r2, r1
1001f7ec:	4918      	ldr	r1, [pc, #96]	@ (1001f850 <_strtod_l+0x4d0>)
1001f7ee:	428b      	cmp	r3, r1
1001f7f0:	f200 8315 	bhi.w	1001fe1e <_strtod_l+0xa9e>
1001f7f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
1001f7f8:	428b      	cmp	r3, r1
1001f7fa:	f240 8454 	bls.w	100200a6 <_strtod_l+0xd26>
1001f7fe:	4b15      	ldr	r3, [pc, #84]	@ (1001f854 <_strtod_l+0x4d4>)
1001f800:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1001f804:	e9cd 2304 	strd	r2, r3, [sp, #16]
1001f808:	2300      	movs	r3, #0
1001f80a:	930a      	str	r3, [sp, #40]	@ 0x28
1001f80c:	9500      	str	r5, [sp, #0]
1001f80e:	4623      	mov	r3, r4
1001f810:	4652      	mov	r2, sl
1001f812:	4641      	mov	r1, r8
1001f814:	4658      	mov	r0, fp
1001f816:	f7ff f81f 	bl	1001e858 <__s2b>
1001f81a:	9014      	str	r0, [sp, #80]	@ 0x50
1001f81c:	2800      	cmp	r0, #0
1001f81e:	f000 82fe 	beq.w	1001fe1e <_strtod_l+0xa9e>
1001f822:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
1001f826:	1a9b      	subs	r3, r3, r2
1001f828:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1001f82a:	2a00      	cmp	r2, #0
1001f82c:	bfa8      	it	ge
1001f82e:	2300      	movge	r3, #0
1001f830:	930e      	str	r3, [sp, #56]	@ 0x38
1001f832:	f04f 0a00 	mov.w	sl, #0
1001f836:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1001f83a:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
1001f83e:	9315      	str	r3, [sp, #84]	@ 0x54
1001f840:	e0df      	b.n	1001fa02 <_strtod_l+0x682>
1001f842:	bf00      	nop
1001f844:	100257b0 	.word	0x100257b0
1001f848:	10025788 	.word	0x10025788
1001f84c:	7ff00000 	.word	0x7ff00000
1001f850:	7ca00000 	.word	0x7ca00000
1001f854:	7fefffff 	.word	0x7fefffff
1001f858:	1ad2      	subs	r2, r2, r3
1001f85a:	2a1f      	cmp	r2, #31
1001f85c:	eba4 0402 	sub.w	r4, r4, r2
1001f860:	f300 822e 	bgt.w	1001fcc0 <_strtod_l+0x940>
1001f864:	2301      	movs	r3, #1
1001f866:	4093      	lsls	r3, r2
1001f868:	4698      	mov	r8, r3
1001f86a:	2500      	movs	r5, #0
1001f86c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001f86e:	4426      	add	r6, r4
1001f870:	443c      	add	r4, r7
1001f872:	42a7      	cmp	r7, r4
1001f874:	441e      	add	r6, r3
1001f876:	463b      	mov	r3, r7
1001f878:	bfa8      	it	ge
1001f87a:	4623      	movge	r3, r4
1001f87c:	42b3      	cmp	r3, r6
1001f87e:	bfa8      	it	ge
1001f880:	4633      	movge	r3, r6
1001f882:	2b00      	cmp	r3, #0
1001f884:	dd02      	ble.n	1001f88c <_strtod_l+0x50c>
1001f886:	1ae4      	subs	r4, r4, r3
1001f888:	1af6      	subs	r6, r6, r3
1001f88a:	1aff      	subs	r7, r7, r3
1001f88c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001f88e:	2b00      	cmp	r3, #0
1001f890:	f300 81bc 	bgt.w	1001fc0c <_strtod_l+0x88c>
1001f894:	2c00      	cmp	r4, #0
1001f896:	f300 81d2 	bgt.w	1001fc3e <_strtod_l+0x8be>
1001f89a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001f89c:	2b00      	cmp	r3, #0
1001f89e:	f300 8205 	bgt.w	1001fcac <_strtod_l+0x92c>
1001f8a2:	2e00      	cmp	r6, #0
1001f8a4:	f300 81f6 	bgt.w	1001fc94 <_strtod_l+0x914>
1001f8a8:	2f00      	cmp	r7, #0
1001f8aa:	dd08      	ble.n	1001f8be <_strtod_l+0x53e>
1001f8ac:	4651      	mov	r1, sl
1001f8ae:	463a      	mov	r2, r7
1001f8b0:	4658      	mov	r0, fp
1001f8b2:	f7ff f9b9 	bl	1001ec28 <__lshift>
1001f8b6:	4682      	mov	sl, r0
1001f8b8:	2800      	cmp	r0, #0
1001f8ba:	f000 81f4 	beq.w	1001fca6 <_strtod_l+0x926>
1001f8be:	991a      	ldr	r1, [sp, #104]	@ 0x68
1001f8c0:	464a      	mov	r2, r9
1001f8c2:	4658      	mov	r0, fp
1001f8c4:	f7ff fa48 	bl	1001ed58 <__mdiff>
1001f8c8:	9009      	str	r0, [sp, #36]	@ 0x24
1001f8ca:	2800      	cmp	r0, #0
1001f8cc:	f000 81eb 	beq.w	1001fca6 <_strtod_l+0x926>
1001f8d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1001f8d2:	2300      	movs	r3, #0
1001f8d4:	68d1      	ldr	r1, [r2, #12]
1001f8d6:	910f      	str	r1, [sp, #60]	@ 0x3c
1001f8d8:	60d3      	str	r3, [r2, #12]
1001f8da:	4651      	mov	r1, sl
1001f8dc:	f7ff fa1c 	bl	1001ed18 <__mcmp>
1001f8e0:	2800      	cmp	r0, #0
1001f8e2:	f2c0 8402 	blt.w	100200ea <_strtod_l+0xd6a>
1001f8e6:	9f05      	ldr	r7, [sp, #20]
1001f8e8:	f000 8389 	beq.w	1001fffe <_strtod_l+0xc7e>
1001f8ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
1001f8ee:	4651      	mov	r1, sl
1001f8f0:	f7ff fbc8 	bl	1001f084 <__ratio>
1001f8f4:	2200      	movs	r2, #0
1001f8f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
1001f8fa:	4604      	mov	r4, r0
1001f8fc:	460d      	mov	r5, r1
1001f8fe:	f002 fde5 	bl	100224cc <__aeabi_dcmple>
1001f902:	2800      	cmp	r0, #0
1001f904:	f000 8172 	beq.w	1001fbec <_strtod_l+0x86c>
1001f908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001f90a:	2b00      	cmp	r3, #0
1001f90c:	f040 81e4 	bne.w	1001fcd8 <_strtod_l+0x958>
1001f910:	9b04      	ldr	r3, [sp, #16]
1001f912:	2b00      	cmp	r3, #0
1001f914:	f040 8273 	bne.w	1001fdfe <_strtod_l+0xa7e>
1001f918:	f3c7 0313 	ubfx	r3, r7, #0, #20
1001f91c:	2b00      	cmp	r3, #0
1001f91e:	f040 8211 	bne.w	1001fd44 <_strtod_l+0x9c4>
1001f922:	4bab      	ldr	r3, [pc, #684]	@ (1001fbd0 <_strtod_l+0x850>)
1001f924:	2200      	movs	r2, #0
1001f926:	4620      	mov	r0, r4
1001f928:	4629      	mov	r1, r5
1001f92a:	f002 fdc5 	bl	100224b8 <__aeabi_dcmplt>
1001f92e:	2800      	cmp	r0, #0
1001f930:	f040 835c 	bne.w	1001ffec <_strtod_l+0xc6c>
1001f934:	4ba7      	ldr	r3, [pc, #668]	@ (1001fbd4 <_strtod_l+0x854>)
1001f936:	4620      	mov	r0, r4
1001f938:	4629      	mov	r1, r5
1001f93a:	2200      	movs	r2, #0
1001f93c:	f002 fb4a 	bl	10021fd4 <__aeabi_dmul>
1001f940:	4603      	mov	r3, r0
1001f942:	460c      	mov	r4, r1
1001f944:	e9cd 3412 	strd	r3, r4, [sp, #72]	@ 0x48
1001f948:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
1001f94c:	900c      	str	r0, [sp, #48]	@ 0x30
1001f94e:	930d      	str	r3, [sp, #52]	@ 0x34
1001f950:	4ea1      	ldr	r6, [pc, #644]	@ (1001fbd8 <_strtod_l+0x858>)
1001f952:	4ba2      	ldr	r3, [pc, #648]	@ (1001fbdc <_strtod_l+0x85c>)
1001f954:	403e      	ands	r6, r7
1001f956:	429e      	cmp	r6, r3
1001f958:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	@ 0x30
1001f95c:	f000 81c3 	beq.w	1001fce6 <_strtod_l+0x966>
1001f960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001f962:	b323      	cbz	r3, 1001f9ae <_strtod_l+0x62e>
1001f964:	f1b6 6fd4 	cmp.w	r6, #111149056	@ 0x6a00000
1001f968:	d821      	bhi.n	1001f9ae <_strtod_l+0x62e>
1001f96a:	e9dd 7812 	ldrd	r7, r8, [sp, #72]	@ 0x48
1001f96e:	a396      	add	r3, pc, #600	@ (adr r3, 1001fbc8 <_strtod_l+0x848>)
1001f970:	e9d3 2300 	ldrd	r2, r3, [r3]
1001f974:	4638      	mov	r0, r7
1001f976:	4641      	mov	r1, r8
1001f978:	f002 fda8 	bl	100224cc <__aeabi_dcmple>
1001f97c:	b1a0      	cbz	r0, 1001f9a8 <_strtod_l+0x628>
1001f97e:	4641      	mov	r1, r8
1001f980:	4638      	mov	r0, r7
1001f982:	f002 fdff 	bl	10022584 <__aeabi_d2uiz>
1001f986:	2801      	cmp	r0, #1
1001f988:	bf38      	it	cc
1001f98a:	2001      	movcc	r0, #1
1001f98c:	f002 faa8 	bl	10021ee0 <__aeabi_ui2d>
1001f990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001f992:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
1001f996:	2b00      	cmp	r3, #0
1001f998:	f040 82ba 	bne.w	1001ff10 <_strtod_l+0xb90>
1001f99c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
1001f9a0:	9016      	str	r0, [sp, #88]	@ 0x58
1001f9a2:	9317      	str	r3, [sp, #92]	@ 0x5c
1001f9a4:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	@ 0x58
1001f9a8:	f105 63d6 	add.w	r3, r5, #112197632	@ 0x6b00000
1001f9ac:	1b9d      	subs	r5, r3, r6
1001f9ae:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	@ 0x40
1001f9b2:	4638      	mov	r0, r7
1001f9b4:	4641      	mov	r1, r8
1001f9b6:	f7ff fa81 	bl	1001eebc <__ulp>
1001f9ba:	4602      	mov	r2, r0
1001f9bc:	460b      	mov	r3, r1
1001f9be:	4620      	mov	r0, r4
1001f9c0:	4629      	mov	r1, r5
1001f9c2:	f002 fb07 	bl	10021fd4 <__aeabi_dmul>
1001f9c6:	463a      	mov	r2, r7
1001f9c8:	4643      	mov	r3, r8
1001f9ca:	f002 f94d 	bl	10021c68 <__adddf3>
1001f9ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
1001f9d2:	460c      	mov	r4, r1
1001f9d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001f9d6:	b923      	cbnz	r3, 1001f9e2 <_strtod_l+0x662>
1001f9d8:	4b7f      	ldr	r3, [pc, #508]	@ (1001fbd8 <_strtod_l+0x858>)
1001f9da:	4023      	ands	r3, r4
1001f9dc:	429e      	cmp	r6, r3
1001f9de:	f000 81ba 	beq.w	1001fd56 <_strtod_l+0x9d6>
1001f9e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
1001f9e4:	4658      	mov	r0, fp
1001f9e6:	f7fe fedd 	bl	1001e7a4 <_Bfree>
1001f9ea:	4649      	mov	r1, r9
1001f9ec:	4658      	mov	r0, fp
1001f9ee:	f7fe fed9 	bl	1001e7a4 <_Bfree>
1001f9f2:	4651      	mov	r1, sl
1001f9f4:	4658      	mov	r0, fp
1001f9f6:	f7fe fed5 	bl	1001e7a4 <_Bfree>
1001f9fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001f9fc:	4658      	mov	r0, fp
1001f9fe:	f7fe fed1 	bl	1001e7a4 <_Bfree>
1001fa02:	9c14      	ldr	r4, [sp, #80]	@ 0x50
1001fa04:	4658      	mov	r0, fp
1001fa06:	6861      	ldr	r1, [r4, #4]
1001fa08:	f7fe fea6 	bl	1001e758 <_Balloc>
1001fa0c:	4681      	mov	r9, r0
1001fa0e:	2800      	cmp	r0, #0
1001fa10:	f000 8149 	beq.w	1001fca6 <_strtod_l+0x926>
1001fa14:	6922      	ldr	r2, [r4, #16]
1001fa16:	3202      	adds	r2, #2
1001fa18:	f104 010c 	add.w	r1, r4, #12
1001fa1c:	0092      	lsls	r2, r2, #2
1001fa1e:	300c      	adds	r0, #12
1001fa20:	f7fa f906 	bl	10019c30 <memcpy>
1001fa24:	ab1c      	add	r3, sp, #112	@ 0x70
1001fa26:	9301      	str	r3, [sp, #4]
1001fa28:	ab1b      	add	r3, sp, #108	@ 0x6c
1001fa2a:	9300      	str	r3, [sp, #0]
1001fa2c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
1001fa30:	4658      	mov	r0, fp
1001fa32:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
1001fa36:	461a      	mov	r2, r3
1001fa38:	4623      	mov	r3, r4
1001fa3a:	f7ff fac5 	bl	1001efc8 <__d2b>
1001fa3e:	901a      	str	r0, [sp, #104]	@ 0x68
1001fa40:	2800      	cmp	r0, #0
1001fa42:	f000 8105 	beq.w	1001fc50 <_strtod_l+0x8d0>
1001fa46:	2101      	movs	r1, #1
1001fa48:	4658      	mov	r0, fp
1001fa4a:	f7fe ffaf 	bl	1001e9ac <__i2b>
1001fa4e:	4682      	mov	sl, r0
1001fa50:	2800      	cmp	r0, #0
1001fa52:	f000 8128 	beq.w	1001fca6 <_strtod_l+0x926>
1001fa56:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
1001fa58:	2b00      	cmp	r3, #0
1001fa5a:	f2c0 8117 	blt.w	1001fc8c <_strtod_l+0x90c>
1001fa5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1001fa60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
1001fa62:	189f      	adds	r7, r3, r2
1001fa64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1001fa66:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
1001fa68:	1a9b      	subs	r3, r3, r2
1001fa6a:	4423      	add	r3, r4
1001fa6c:	4a5c      	ldr	r2, [pc, #368]	@ (1001fbe0 <_strtod_l+0x860>)
1001fa6e:	3b01      	subs	r3, #1
1001fa70:	4293      	cmp	r3, r2
1001fa72:	f1c4 0436 	rsb	r4, r4, #54	@ 0x36
1001fa76:	f6ff aeef 	blt.w	1001f858 <_strtod_l+0x4d8>
1001fa7a:	2301      	movs	r3, #1
1001fa7c:	2500      	movs	r5, #0
1001fa7e:	4698      	mov	r8, r3
1001fa80:	e6f4      	b.n	1001f86c <_strtod_l+0x4ec>
1001fa82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001fa84:	1ba6      	subs	r6, r4, r6
1001fa86:	441e      	add	r6, r3
1001fa88:	2e00      	cmp	r6, #0
1001fa8a:	f73f ae65 	bgt.w	1001f758 <_strtod_l+0x3d8>
1001fa8e:	f43f aebb 	beq.w	1001f808 <_strtod_l+0x488>
1001fa92:	4276      	negs	r6, r6
1001fa94:	f016 020f 	ands.w	r2, r6, #15
1001fa98:	d00a      	beq.n	1001fab0 <_strtod_l+0x730>
1001fa9a:	4b52      	ldr	r3, [pc, #328]	@ (1001fbe4 <_strtod_l+0x864>)
1001fa9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1001faa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1001faa4:	e9d3 2300 	ldrd	r2, r3, [r3]
1001faa8:	f002 fbbe 	bl	10022228 <__aeabi_ddiv>
1001faac:	e9cd 0104 	strd	r0, r1, [sp, #16]
1001fab0:	1136      	asrs	r6, r6, #4
1001fab2:	f43f aea9 	beq.w	1001f808 <_strtod_l+0x488>
1001fab6:	2e1f      	cmp	r6, #31
1001fab8:	dc36      	bgt.n	1001fb28 <_strtod_l+0x7a8>
1001faba:	f016 0310 	ands.w	r3, r6, #16
1001fabe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1001fac2:	bf18      	it	ne
1001fac4:	236a      	movne	r3, #106	@ 0x6a
1001fac6:	4f48      	ldr	r7, [pc, #288]	@ (1001fbe8 <_strtod_l+0x868>)
1001fac8:	930a      	str	r3, [sp, #40]	@ 0x28
1001faca:	2300      	movs	r3, #0
1001facc:	07f2      	lsls	r2, r6, #31
1001face:	d504      	bpl.n	1001fada <_strtod_l+0x75a>
1001fad0:	e9d7 2300 	ldrd	r2, r3, [r7]
1001fad4:	f002 fa7e 	bl	10021fd4 <__aeabi_dmul>
1001fad8:	2301      	movs	r3, #1
1001fada:	1076      	asrs	r6, r6, #1
1001fadc:	f107 0708 	add.w	r7, r7, #8
1001fae0:	d1f4      	bne.n	1001facc <_strtod_l+0x74c>
1001fae2:	b10b      	cbz	r3, 1001fae8 <_strtod_l+0x768>
1001fae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
1001fae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1001faea:	b1a3      	cbz	r3, 1001fb16 <_strtod_l+0x796>
1001faec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1001faf0:	f3c1 520a 	ubfx	r2, r1, #20, #11
1001faf4:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
1001faf8:	2b00      	cmp	r3, #0
1001fafa:	dd0a      	ble.n	1001fb12 <_strtod_l+0x792>
1001fafc:	2b1f      	cmp	r3, #31
1001fafe:	f340 8398 	ble.w	10020232 <_strtod_l+0xeb2>
1001fb02:	2000      	movs	r0, #0
1001fb04:	2b34      	cmp	r3, #52	@ 0x34
1001fb06:	9004      	str	r0, [sp, #16]
1001fb08:	f340 83ca 	ble.w	100202a0 <_strtod_l+0xf20>
1001fb0c:	f04f 735c 	mov.w	r3, #57671680	@ 0x3700000
1001fb10:	9305      	str	r3, [sp, #20]
1001fb12:	236a      	movs	r3, #106	@ 0x6a
1001fb14:	930a      	str	r3, [sp, #40]	@ 0x28
1001fb16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1001fb1a:	2200      	movs	r2, #0
1001fb1c:	2300      	movs	r3, #0
1001fb1e:	f002 fcc1 	bl	100224a4 <__aeabi_dcmpeq>
1001fb22:	2800      	cmp	r0, #0
1001fb24:	f43f ae72 	beq.w	1001f80c <_strtod_l+0x48c>
1001fb28:	2322      	movs	r3, #34	@ 0x22
1001fb2a:	f8cb 3000 	str.w	r3, [fp]
1001fb2e:	f04f 0800 	mov.w	r8, #0
1001fb32:	f04f 0900 	mov.w	r9, #0
1001fb36:	9a07      	ldr	r2, [sp, #28]
1001fb38:	b10a      	cbz	r2, 1001fb3e <_strtod_l+0x7be>
1001fb3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1001fb3c:	6013      	str	r3, [r2, #0]
1001fb3e:	9b08      	ldr	r3, [sp, #32]
1001fb40:	2b00      	cmp	r3, #0
1001fb42:	f43f ad22 	beq.w	1001f58a <_strtod_l+0x20a>
1001fb46:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
1001fb4a:	4699      	mov	r9, r3
1001fb4c:	4640      	mov	r0, r8
1001fb4e:	4649      	mov	r1, r9
1001fb50:	b01f      	add	sp, #124	@ 0x7c
1001fb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001fb56:	2301      	movs	r3, #1
1001fb58:	930a      	str	r3, [sp, #40]	@ 0x28
1001fb5a:	1cb3      	adds	r3, r6, #2
1001fb5c:	9319      	str	r3, [sp, #100]	@ 0x64
1001fb5e:	78b7      	ldrb	r7, [r6, #2]
1001fb60:	e577      	b.n	1001f652 <_strtod_l+0x2d2>
1001fb62:	2300      	movs	r3, #0
1001fb64:	9619      	str	r6, [sp, #100]	@ 0x64
1001fb66:	930f      	str	r3, [sp, #60]	@ 0x3c
1001fb68:	e533      	b.n	1001f5d2 <_strtod_l+0x252>
1001fb6a:	f04f 0c01 	mov.w	ip, #1
1001fb6e:	e52a      	b.n	1001f5c6 <_strtod_l+0x246>
1001fb70:	2300      	movs	r3, #0
1001fb72:	930a      	str	r3, [sp, #40]	@ 0x28
1001fb74:	e7f1      	b.n	1001fb5a <_strtod_l+0x7da>
1001fb76:	2400      	movs	r4, #0
1001fb78:	e55f      	b.n	1001f63a <_strtod_l+0x2ba>
1001fb7a:	2200      	movs	r2, #0
1001fb7c:	9208      	str	r2, [sp, #32]
1001fb7e:	f108 0101 	add.w	r1, r8, #1
1001fb82:	9119      	str	r1, [sp, #100]	@ 0x64
1001fb84:	f898 2001 	ldrb.w	r2, [r8, #1]
1001fb88:	2a00      	cmp	r2, #0
1001fb8a:	f43f acf7 	beq.w	1001f57c <_strtod_l+0x1fc>
1001fb8e:	4688      	mov	r8, r1
1001fb90:	e46a      	b.n	1001f468 <_strtod_l+0xe8>
1001fb92:	2201      	movs	r2, #1
1001fb94:	9208      	str	r2, [sp, #32]
1001fb96:	e7f2      	b.n	1001fb7e <_strtod_l+0x7fe>
1001fb98:	2f45      	cmp	r7, #69	@ 0x45
1001fb9a:	f43f ace5 	beq.w	1001f568 <_strtod_l+0x1e8>
1001fb9e:	f04f 0c01 	mov.w	ip, #1
1001fba2:	e519      	b.n	1001f5d8 <_strtod_l+0x258>
1001fba4:	3316      	adds	r3, #22
1001fba6:	f6ff af6c 	blt.w	1001fa82 <_strtod_l+0x702>
1001fbaa:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
1001fbae:	1a9a      	subs	r2, r3, r2
1001fbb0:	4b0c      	ldr	r3, [pc, #48]	@ (1001fbe4 <_strtod_l+0x864>)
1001fbb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1001fbb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1001fbba:	e9d3 2300 	ldrd	r2, r3, [r3]
1001fbbe:	f002 fb33 	bl	10022228 <__aeabi_ddiv>
1001fbc2:	4680      	mov	r8, r0
1001fbc4:	4689      	mov	r9, r1
1001fbc6:	e7b6      	b.n	1001fb36 <_strtod_l+0x7b6>
1001fbc8:	ffc00000 	.word	0xffc00000
1001fbcc:	41dfffff 	.word	0x41dfffff
1001fbd0:	3ff00000 	.word	0x3ff00000
1001fbd4:	3fe00000 	.word	0x3fe00000
1001fbd8:	7ff00000 	.word	0x7ff00000
1001fbdc:	7fe00000 	.word	0x7fe00000
1001fbe0:	fffffc02 	.word	0xfffffc02
1001fbe4:	100257b0 	.word	0x100257b0
1001fbe8:	100258b0 	.word	0x100258b0
1001fbec:	4bb4      	ldr	r3, [pc, #720]	@ (1001fec0 <_strtod_l+0xb40>)
1001fbee:	4620      	mov	r0, r4
1001fbf0:	4629      	mov	r1, r5
1001fbf2:	2200      	movs	r2, #0
1001fbf4:	f002 f9ee 	bl	10021fd4 <__aeabi_dmul>
1001fbf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001fbfa:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
1001fbfe:	2b00      	cmp	r3, #0
1001fc00:	d165      	bne.n	1001fcce <_strtod_l+0x94e>
1001fc02:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
1001fc06:	900c      	str	r0, [sp, #48]	@ 0x30
1001fc08:	930d      	str	r3, [sp, #52]	@ 0x34
1001fc0a:	e6a1      	b.n	1001f950 <_strtod_l+0x5d0>
1001fc0c:	4651      	mov	r1, sl
1001fc0e:	461a      	mov	r2, r3
1001fc10:	4658      	mov	r0, fp
1001fc12:	f7fe ffaf 	bl	1001eb74 <__pow5mult>
1001fc16:	4682      	mov	sl, r0
1001fc18:	2800      	cmp	r0, #0
1001fc1a:	d044      	beq.n	1001fca6 <_strtod_l+0x926>
1001fc1c:	4601      	mov	r1, r0
1001fc1e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
1001fc20:	4658      	mov	r0, fp
1001fc22:	f7fe fef1 	bl	1001ea08 <__multiply>
1001fc26:	2800      	cmp	r0, #0
1001fc28:	d03d      	beq.n	1001fca6 <_strtod_l+0x926>
1001fc2a:	900f      	str	r0, [sp, #60]	@ 0x3c
1001fc2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
1001fc2e:	4658      	mov	r0, fp
1001fc30:	f7fe fdb8 	bl	1001e7a4 <_Bfree>
1001fc34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001fc36:	931a      	str	r3, [sp, #104]	@ 0x68
1001fc38:	2c00      	cmp	r4, #0
1001fc3a:	f77f ae2e 	ble.w	1001f89a <_strtod_l+0x51a>
1001fc3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
1001fc40:	4622      	mov	r2, r4
1001fc42:	4658      	mov	r0, fp
1001fc44:	f7fe fff0 	bl	1001ec28 <__lshift>
1001fc48:	901a      	str	r0, [sp, #104]	@ 0x68
1001fc4a:	2800      	cmp	r0, #0
1001fc4c:	f47f ae25 	bne.w	1001f89a <_strtod_l+0x51a>
1001fc50:	464f      	mov	r7, r9
1001fc52:	4605      	mov	r5, r0
1001fc54:	2322      	movs	r3, #34	@ 0x22
1001fc56:	f8df 926c 	ldr.w	r9, [pc, #620]	@ 1001fec4 <_strtod_l+0xb44>
1001fc5a:	f8cb 3000 	str.w	r3, [fp]
1001fc5e:	f04f 0800 	mov.w	r8, #0
1001fc62:	4629      	mov	r1, r5
1001fc64:	4658      	mov	r0, fp
1001fc66:	f7fe fd9d 	bl	1001e7a4 <_Bfree>
1001fc6a:	4639      	mov	r1, r7
1001fc6c:	4658      	mov	r0, fp
1001fc6e:	f7fe fd99 	bl	1001e7a4 <_Bfree>
1001fc72:	4651      	mov	r1, sl
1001fc74:	4658      	mov	r0, fp
1001fc76:	f7fe fd95 	bl	1001e7a4 <_Bfree>
1001fc7a:	9914      	ldr	r1, [sp, #80]	@ 0x50
1001fc7c:	4658      	mov	r0, fp
1001fc7e:	f7fe fd91 	bl	1001e7a4 <_Bfree>
1001fc82:	9909      	ldr	r1, [sp, #36]	@ 0x24
1001fc84:	4658      	mov	r0, fp
1001fc86:	f7fe fd8d 	bl	1001e7a4 <_Bfree>
1001fc8a:	e754      	b.n	1001fb36 <_strtod_l+0x7b6>
1001fc8c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1001fc8e:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
1001fc90:	1ad6      	subs	r6, r2, r3
1001fc92:	e6e7      	b.n	1001fa64 <_strtod_l+0x6e4>
1001fc94:	4649      	mov	r1, r9
1001fc96:	4632      	mov	r2, r6
1001fc98:	4658      	mov	r0, fp
1001fc9a:	f7fe ffc5 	bl	1001ec28 <__lshift>
1001fc9e:	4681      	mov	r9, r0
1001fca0:	2800      	cmp	r0, #0
1001fca2:	f47f ae01 	bne.w	1001f8a8 <_strtod_l+0x528>
1001fca6:	464f      	mov	r7, r9
1001fca8:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
1001fcaa:	e7d3      	b.n	1001fc54 <_strtod_l+0x8d4>
1001fcac:	4649      	mov	r1, r9
1001fcae:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1001fcb0:	4658      	mov	r0, fp
1001fcb2:	f7fe ff5f 	bl	1001eb74 <__pow5mult>
1001fcb6:	4681      	mov	r9, r0
1001fcb8:	2800      	cmp	r0, #0
1001fcba:	f47f adf2 	bne.w	1001f8a2 <_strtod_l+0x522>
1001fcbe:	e7f2      	b.n	1001fca6 <_strtod_l+0x926>
1001fcc0:	4a81      	ldr	r2, [pc, #516]	@ (1001fec8 <_strtod_l+0xb48>)
1001fcc2:	1ad3      	subs	r3, r2, r3
1001fcc4:	2201      	movs	r2, #1
1001fcc6:	fa02 f503 	lsl.w	r5, r2, r3
1001fcca:	4690      	mov	r8, r2
1001fccc:	e5ce      	b.n	1001f86c <_strtod_l+0x4ec>
1001fcce:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	@ 0x48
1001fcd2:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30
1001fcd6:	e63b      	b.n	1001f950 <_strtod_l+0x5d0>
1001fcd8:	4c7c      	ldr	r4, [pc, #496]	@ (1001fecc <_strtod_l+0xb4c>)
1001fcda:	2300      	movs	r3, #0
1001fcdc:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30
1001fce0:	e9cd 3412 	strd	r3, r4, [sp, #72]	@ 0x48
1001fce4:	e634      	b.n	1001f950 <_strtod_l+0x5d0>
1001fce6:	f1a7 7354 	sub.w	r3, r7, #55574528	@ 0x3500000
1001fcea:	9305      	str	r3, [sp, #20]
1001fcec:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
1001fcf0:	4620      	mov	r0, r4
1001fcf2:	4629      	mov	r1, r5
1001fcf4:	f7ff f8e2 	bl	1001eebc <__ulp>
1001fcf8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
1001fcfc:	f002 f96a 	bl	10021fd4 <__aeabi_dmul>
1001fd00:	462b      	mov	r3, r5
1001fd02:	4622      	mov	r2, r4
1001fd04:	f001 ffb0 	bl	10021c68 <__adddf3>
1001fd08:	4f6e      	ldr	r7, [pc, #440]	@ (1001fec4 <_strtod_l+0xb44>)
1001fd0a:	4b71      	ldr	r3, [pc, #452]	@ (1001fed0 <_strtod_l+0xb50>)
1001fd0c:	400f      	ands	r7, r1
1001fd0e:	429f      	cmp	r7, r3
1001fd10:	e9cd 0104 	strd	r0, r1, [sp, #16]
1001fd14:	f240 808b 	bls.w	1001fe2e <_strtod_l+0xaae>
1001fd18:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
1001fd1c:	f103 7354 	add.w	r3, r3, #55574528	@ 0x3500000
1001fd20:	4299      	cmp	r1, r3
1001fd22:	d102      	bne.n	1001fd2a <_strtod_l+0x9aa>
1001fd24:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
1001fd28:	d0bd      	beq.n	1001fca6 <_strtod_l+0x926>
1001fd2a:	4c6a      	ldr	r4, [pc, #424]	@ (1001fed4 <_strtod_l+0xb54>)
1001fd2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1001fd30:	e9cd 3404 	strd	r3, r4, [sp, #16]
1001fd34:	e655      	b.n	1001f9e2 <_strtod_l+0x662>
1001fd36:	2f6e      	cmp	r7, #110	@ 0x6e
1001fd38:	f43f ac5f 	beq.w	1001f5fa <_strtod_l+0x27a>
1001fd3c:	e41e      	b.n	1001f57c <_strtod_l+0x1fc>
1001fd3e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
1001fd42:	e6f8      	b.n	1001fb36 <_strtod_l+0x7b6>
1001fd44:	4c64      	ldr	r4, [pc, #400]	@ (1001fed8 <_strtod_l+0xb58>)
1001fd46:	2300      	movs	r3, #0
1001fd48:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30
1001fd4c:	4c5f      	ldr	r4, [pc, #380]	@ (1001fecc <_strtod_l+0xb4c>)
1001fd4e:	2300      	movs	r3, #0
1001fd50:	e9cd 3412 	strd	r3, r4, [sp, #72]	@ 0x48
1001fd54:	e5fc      	b.n	1001f950 <_strtod_l+0x5d0>
1001fd56:	e9dd 5612 	ldrd	r5, r6, [sp, #72]	@ 0x48
1001fd5a:	4628      	mov	r0, r5
1001fd5c:	4631      	mov	r1, r6
1001fd5e:	f002 fc99 	bl	10022694 <__aeabi_d2lz>
1001fd62:	f002 f909 	bl	10021f78 <__aeabi_l2d>
1001fd66:	460b      	mov	r3, r1
1001fd68:	4602      	mov	r2, r0
1001fd6a:	4631      	mov	r1, r6
1001fd6c:	4628      	mov	r0, r5
1001fd6e:	f001 ff79 	bl	10021c64 <__aeabi_dsub>
1001fd72:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1001fd74:	9b04      	ldr	r3, [sp, #16]
1001fd76:	f3c4 0413 	ubfx	r4, r4, #0, #20
1001fd7a:	431d      	orrs	r5, r3
1001fd7c:	432c      	orrs	r4, r5
1001fd7e:	4606      	mov	r6, r0
1001fd80:	460f      	mov	r7, r1
1001fd82:	d12a      	bne.n	1001fdda <_strtod_l+0xa5a>
1001fd84:	a348      	add	r3, pc, #288	@ (adr r3, 1001fea8 <_strtod_l+0xb28>)
1001fd86:	e9d3 2300 	ldrd	r2, r3, [r3]
1001fd8a:	f002 fb95 	bl	100224b8 <__aeabi_dcmplt>
1001fd8e:	2800      	cmp	r0, #0
1001fd90:	f43f ae27 	beq.w	1001f9e2 <_strtod_l+0x662>
1001fd94:	464f      	mov	r7, r9
1001fd96:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
1001fd9a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
1001fd9c:	e761      	b.n	1001fc62 <_strtod_l+0x8e2>
1001fd9e:	9302      	str	r3, [sp, #8]
1001fda0:	9b08      	ldr	r3, [sp, #32]
1001fda2:	9301      	str	r3, [sp, #4]
1001fda4:	ab1a      	add	r3, sp, #104	@ 0x68
1001fda6:	9300      	str	r3, [sp, #0]
1001fda8:	4a4c      	ldr	r2, [pc, #304]	@ (1001fedc <_strtod_l+0xb5c>)
1001fdaa:	ab1b      	add	r3, sp, #108	@ 0x6c
1001fdac:	a919      	add	r1, sp, #100	@ 0x64
1001fdae:	4658      	mov	r0, fp
1001fdb0:	f001 f9b0 	bl	10021114 <__gethex>
1001fdb4:	f010 050f 	ands.w	r5, r0, #15
1001fdb8:	4604      	mov	r4, r0
1001fdba:	f43f aeb8 	beq.w	1001fb2e <_strtod_l+0x7ae>
1001fdbe:	2d06      	cmp	r5, #6
1001fdc0:	f040 80ae 	bne.w	1001ff20 <_strtod_l+0xba0>
1001fdc4:	9a07      	ldr	r2, [sp, #28]
1001fdc6:	b112      	cbz	r2, 1001fdce <_strtod_l+0xa4e>
1001fdc8:	f108 0301 	add.w	r3, r8, #1
1001fdcc:	6013      	str	r3, [r2, #0]
1001fdce:	f04f 0800 	mov.w	r8, #0
1001fdd2:	f04f 0900 	mov.w	r9, #0
1001fdd6:	f7ff bbd8 	b.w	1001f58a <_strtod_l+0x20a>
1001fdda:	a335      	add	r3, pc, #212	@ (adr r3, 1001feb0 <_strtod_l+0xb30>)
1001fddc:	e9d3 2300 	ldrd	r2, r3, [r3]
1001fde0:	f002 fb6a 	bl	100224b8 <__aeabi_dcmplt>
1001fde4:	2800      	cmp	r0, #0
1001fde6:	d1d5      	bne.n	1001fd94 <_strtod_l+0xa14>
1001fde8:	a333      	add	r3, pc, #204	@ (adr r3, 1001feb8 <_strtod_l+0xb38>)
1001fdea:	e9d3 2300 	ldrd	r2, r3, [r3]
1001fdee:	4630      	mov	r0, r6
1001fdf0:	4639      	mov	r1, r7
1001fdf2:	f002 fb7f 	bl	100224f4 <__aeabi_dcmpgt>
1001fdf6:	2800      	cmp	r0, #0
1001fdf8:	f43f adf3 	beq.w	1001f9e2 <_strtod_l+0x662>
1001fdfc:	e7ca      	b.n	1001fd94 <_strtod_l+0xa14>
1001fdfe:	9b04      	ldr	r3, [sp, #16]
1001fe00:	2b01      	cmp	r3, #1
1001fe02:	d19f      	bne.n	1001fd44 <_strtod_l+0x9c4>
1001fe04:	2f00      	cmp	r7, #0
1001fe06:	d19d      	bne.n	1001fd44 <_strtod_l+0x9c4>
1001fe08:	464f      	mov	r7, r9
1001fe0a:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
1001fe0c:	2322      	movs	r3, #34	@ 0x22
1001fe0e:	4625      	mov	r5, r4
1001fe10:	f8cb 3000 	str.w	r3, [fp]
1001fe14:	f04f 0800 	mov.w	r8, #0
1001fe18:	f04f 0900 	mov.w	r9, #0
1001fe1c:	e721      	b.n	1001fc62 <_strtod_l+0x8e2>
1001fe1e:	2322      	movs	r3, #34	@ 0x22
1001fe20:	f8cb 3000 	str.w	r3, [fp]
1001fe24:	f8df 909c 	ldr.w	r9, [pc, #156]	@ 1001fec4 <_strtod_l+0xb44>
1001fe28:	f04f 0800 	mov.w	r8, #0
1001fe2c:	e683      	b.n	1001fb36 <_strtod_l+0x7b6>
1001fe2e:	f101 7454 	add.w	r4, r1, #55574528	@ 0x3500000
1001fe32:	9405      	str	r4, [sp, #20]
1001fe34:	e5ce      	b.n	1001f9d4 <_strtod_l+0x654>
1001fe36:	4664      	mov	r4, ip
1001fe38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1001fe3a:	2908      	cmp	r1, #8
1001fe3c:	4403      	add	r3, r0
1001fe3e:	930e      	str	r3, [sp, #56]	@ 0x38
1001fe40:	f77f ab64 	ble.w	1001f50c <_strtod_l+0x18c>
1001fe44:	2c10      	cmp	r4, #16
1001fe46:	bfdc      	itt	le
1001fe48:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
1001fe4c:	eb02 0949 	addle.w	r9, r2, r9, lsl #1
1001fe50:	2000      	movs	r0, #0
1001fe52:	f7ff bb60 	b.w	1001f516 <_strtod_l+0x196>
1001fe56:	4922      	ldr	r1, [pc, #136]	@ (1001fee0 <_strtod_l+0xb60>)
1001fe58:	2201      	movs	r2, #1
1001fe5a:	4640      	mov	r0, r8
1001fe5c:	f000 fc78 	bl	10020750 <strncmp>
1001fe60:	2800      	cmp	r0, #0
1001fe62:	f000 80a0 	beq.w	1001ffa6 <_strtod_l+0xc26>
1001fe66:	f04f 0a00 	mov.w	sl, #0
1001fe6a:	46d1      	mov	r9, sl
1001fe6c:	4655      	mov	r5, sl
1001fe6e:	4650      	mov	r0, sl
1001fe70:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
1001fe74:	4654      	mov	r4, sl
1001fe76:	46d4      	mov	ip, sl
1001fe78:	f7ff bba7 	b.w	1001f5ca <_strtod_l+0x24a>
1001fe7c:	f644 631f 	movw	r3, #19999	@ 0x4e1f
1001fe80:	4299      	cmp	r1, r3
1001fe82:	bfa8      	it	ge
1001fe84:	4619      	movge	r1, r3
1001fe86:	910f      	str	r1, [sp, #60]	@ 0x3c
1001fe88:	e41e      	b.n	1001f6c8 <_strtod_l+0x348>
1001fe8a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1001fe8c:	4915      	ldr	r1, [pc, #84]	@ (1001fee4 <_strtod_l+0xb64>)
1001fe8e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
1001fe92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1001fe96:	e9d1 0100 	ldrd	r0, r1, [r1]
1001fe9a:	f002 f89b 	bl	10021fd4 <__aeabi_dmul>
1001fe9e:	4680      	mov	r8, r0
1001fea0:	4689      	mov	r9, r1
1001fea2:	e648      	b.n	1001fb36 <_strtod_l+0x7b6>
1001fea4:	f3af 8000 	nop.w
1001fea8:	94a03595 	.word	0x94a03595
1001feac:	3fcfffff 	.word	0x3fcfffff
1001feb0:	94a03595 	.word	0x94a03595
1001feb4:	3fdfffff 	.word	0x3fdfffff
1001feb8:	35afe535 	.word	0x35afe535
1001febc:	3fe00000 	.word	0x3fe00000
1001fec0:	3fe00000 	.word	0x3fe00000
1001fec4:	7ff00000 	.word	0x7ff00000
1001fec8:	fffffbe2 	.word	0xfffffbe2
1001fecc:	3ff00000 	.word	0x3ff00000
1001fed0:	7c9fffff 	.word	0x7c9fffff
1001fed4:	7fefffff 	.word	0x7fefffff
1001fed8:	bff00000 	.word	0xbff00000
1001fedc:	1002589c 	.word	0x1002589c
1001fee0:	10022ea0 	.word	0x10022ea0
1001fee4:	100257b0 	.word	0x100257b0
1001fee8:	49a4      	ldr	r1, [pc, #656]	@ (1002017c <_strtod_l+0xdfc>)
1001feea:	a819      	add	r0, sp, #100	@ 0x64
1001feec:	f001 fbcc 	bl	10021688 <__match>
1001fef0:	2800      	cmp	r0, #0
1001fef2:	f43f ab43 	beq.w	1001f57c <_strtod_l+0x1fc>
1001fef6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1001fef8:	49a1      	ldr	r1, [pc, #644]	@ (10020180 <_strtod_l+0xe00>)
1001fefa:	3b01      	subs	r3, #1
1001fefc:	a819      	add	r0, sp, #100	@ 0x64
1001fefe:	9319      	str	r3, [sp, #100]	@ 0x64
1001ff00:	f001 fbc2 	bl	10021688 <__match>
1001ff04:	2800      	cmp	r0, #0
1001ff06:	d18d      	bne.n	1001fe24 <_strtod_l+0xaa4>
1001ff08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1001ff0a:	3301      	adds	r3, #1
1001ff0c:	9319      	str	r3, [sp, #100]	@ 0x64
1001ff0e:	e789      	b.n	1001fe24 <_strtod_l+0xaa4>
1001ff10:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	@ 0x48
1001ff14:	e9cd 3416 	strd	r3, r4, [sp, #88]	@ 0x58
1001ff18:	e544      	b.n	1001f9a4 <_strtod_l+0x624>
1001ff1a:	2000      	movs	r0, #0
1001ff1c:	f7ff bae8 	b.w	1001f4f0 <_strtod_l+0x170>
1001ff20:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
1001ff22:	b13a      	cbz	r2, 1001ff34 <_strtod_l+0xbb4>
1001ff24:	2135      	movs	r1, #53	@ 0x35
1001ff26:	a81c      	add	r0, sp, #112	@ 0x70
1001ff28:	f7ff f8d6 	bl	1001f0d8 <__copybits>
1001ff2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
1001ff2e:	4658      	mov	r0, fp
1001ff30:	f7fe fc38 	bl	1001e7a4 <_Bfree>
1001ff34:	3d01      	subs	r5, #1
1001ff36:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
1001ff38:	2d04      	cmp	r5, #4
1001ff3a:	f200 81fc 	bhi.w	10020336 <_strtod_l+0xfb6>
1001ff3e:	e8df f005 	tbb	[pc, r5]
1001ff42:	2c03      	.short	0x2c03
1001ff44:	1e29      	.short	0x1e29
1001ff46:	03          	.byte	0x03
1001ff47:	00          	.byte	0x00
1001ff48:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
1001ff4a:	9204      	str	r2, [sp, #16]
1001ff4c:	f203 4233 	addw	r2, r3, #1075	@ 0x433
1001ff50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1001ff52:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
1001ff56:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
1001ff5a:	9305      	str	r3, [sp, #20]
1001ff5c:	05e1      	lsls	r1, r4, #23
1001ff5e:	d502      	bpl.n	1001ff66 <_strtod_l+0xbe6>
1001ff60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
1001ff64:	9305      	str	r3, [sp, #20]
1001ff66:	4a87      	ldr	r2, [pc, #540]	@ (10020184 <_strtod_l+0xe04>)
1001ff68:	401a      	ands	r2, r3
1001ff6a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
1001ff6e:	2a00      	cmp	r2, #0
1001ff70:	f47f ade1 	bne.w	1001fb36 <_strtod_l+0x7b6>
1001ff74:	f7f9 fc44 	bl	10019800 <__errno>
1001ff78:	2322      	movs	r3, #34	@ 0x22
1001ff7a:	6003      	str	r3, [r0, #0]
1001ff7c:	e5db      	b.n	1001fb36 <_strtod_l+0x7b6>
1001ff7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1001ff82:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
1001ff86:	e9cd 2304 	strd	r2, r3, [sp, #16]
1001ff8a:	05e3      	lsls	r3, r4, #23
1001ff8c:	f57f aed7 	bpl.w	1001fd3e <_strtod_l+0x9be>
1001ff90:	9b05      	ldr	r3, [sp, #20]
1001ff92:	e7e5      	b.n	1001ff60 <_strtod_l+0xbe0>
1001ff94:	4b7b      	ldr	r3, [pc, #492]	@ (10020184 <_strtod_l+0xe04>)
1001ff96:	9305      	str	r3, [sp, #20]
1001ff98:	e7f7      	b.n	1001ff8a <_strtod_l+0xc0a>
1001ff9a:	e9dd 121c 	ldrd	r1, r2, [sp, #112]	@ 0x70
1001ff9e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1001ffa0:	e9cd 1204 	strd	r1, r2, [sp, #16]
1001ffa4:	e7da      	b.n	1001ff5c <_strtod_l+0xbdc>
1001ffa6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
1001ffa8:	4613      	mov	r3, r2
1001ffaa:	3201      	adds	r2, #1
1001ffac:	9219      	str	r2, [sp, #100]	@ 0x64
1001ffae:	785f      	ldrb	r7, [r3, #1]
1001ffb0:	4605      	mov	r5, r0
1001ffb2:	4681      	mov	r9, r0
1001ffb4:	f7ff ba8f 	b.w	1001f4d6 <_strtod_l+0x156>
1001ffb8:	4d73      	ldr	r5, [pc, #460]	@ (10020188 <_strtod_l+0xe08>)
1001ffba:	f1c4 040f 	rsb	r4, r4, #15
1001ffbe:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
1001ffc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1001ffc6:	e9d1 0100 	ldrd	r0, r1, [r1]
1001ffca:	f002 f803 	bl	10021fd4 <__aeabi_dmul>
1001ffce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1001ffd0:	1b1c      	subs	r4, r3, r4
1001ffd2:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
1001ffd6:	e9d5 2300 	ldrd	r2, r3, [r5]
1001ffda:	f001 fffb 	bl	10021fd4 <__aeabi_dmul>
1001ffde:	4680      	mov	r8, r0
1001ffe0:	4689      	mov	r9, r1
1001ffe2:	e5a8      	b.n	1001fb36 <_strtod_l+0x7b6>
1001ffe4:	46a2      	mov	sl, r4
1001ffe6:	900e      	str	r0, [sp, #56]	@ 0x38
1001ffe8:	f7ff ba98 	b.w	1001f51c <_strtod_l+0x19c>
1001ffec:	4c67      	ldr	r4, [pc, #412]	@ (1002018c <_strtod_l+0xe0c>)
1001ffee:	2300      	movs	r3, #0
1001fff0:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30
1001fff4:	4c66      	ldr	r4, [pc, #408]	@ (10020190 <_strtod_l+0xe10>)
1001fff6:	2300      	movs	r3, #0
1001fff8:	e9cd 3412 	strd	r3, r4, [sp, #72]	@ 0x48
1001fffc:	e4a8      	b.n	1001f950 <_strtod_l+0x5d0>
1001fffe:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10020000:	4964      	ldr	r1, [pc, #400]	@ (10020194 <_strtod_l+0xe14>)
10020002:	463b      	mov	r3, r7
10020004:	46c4      	mov	ip, r8
10020006:	464f      	mov	r7, r9
10020008:	46ae      	mov	lr, r5
1002000a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	@ 0x40
1002000e:	f3c3 0213 	ubfx	r2, r3, #0, #20
10020012:	2800      	cmp	r0, #0
10020014:	d04c      	beq.n	100200b0 <_strtod_l+0xd30>
10020016:	428a      	cmp	r2, r1
10020018:	f000 80fc 	beq.w	10020214 <_strtod_l+0xe94>
1002001c:	2d00      	cmp	r5, #0
1002001e:	f000 80f3 	beq.w	10020208 <_strtod_l+0xe88>
10020022:	421d      	tst	r5, r3
10020024:	d03b      	beq.n	1002009e <_strtod_l+0xd1e>
10020026:	4640      	mov	r0, r8
10020028:	4649      	mov	r1, r9
1002002a:	9304      	str	r3, [sp, #16]
1002002c:	f7fe ff46 	bl	1001eebc <__ulp>
10020030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10020032:	4604      	mov	r4, r0
10020034:	460d      	mov	r5, r1
10020036:	2b00      	cmp	r3, #0
10020038:	f000 8128 	beq.w	1002028c <_strtod_l+0xf0c>
1002003c:	9b04      	ldr	r3, [sp, #16]
1002003e:	f3c3 530a 	ubfx	r3, r3, #20, #11
10020042:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
10020046:	2b00      	cmp	r3, #0
10020048:	f340 8151 	ble.w	100202ee <_strtod_l+0xf6e>
1002004c:	051c      	lsls	r4, r3, #20
1002004e:	f104 537f 	add.w	r3, r4, #1069547520	@ 0x3fc00000
10020052:	2200      	movs	r2, #0
10020054:	f503 1340 	add.w	r3, r3, #3145728	@ 0x300000
10020058:	f001 ffbc 	bl	10021fd4 <__aeabi_dmul>
1002005c:	4602      	mov	r2, r0
1002005e:	460b      	mov	r3, r1
10020060:	4640      	mov	r0, r8
10020062:	4649      	mov	r1, r9
10020064:	f001 fe00 	bl	10021c68 <__adddf3>
10020068:	4680      	mov	r8, r0
1002006a:	4689      	mov	r9, r1
1002006c:	4b4a      	ldr	r3, [pc, #296]	@ (10020198 <_strtod_l+0xe18>)
1002006e:	4640      	mov	r0, r8
10020070:	4649      	mov	r1, r9
10020072:	2200      	movs	r2, #0
10020074:	f001 ffae 	bl	10021fd4 <__aeabi_dmul>
10020078:	4b42      	ldr	r3, [pc, #264]	@ (10020184 <_strtod_l+0xe04>)
1002007a:	400b      	ands	r3, r1
1002007c:	4680      	mov	r8, r0
1002007e:	4689      	mov	r9, r1
10020080:	2b00      	cmp	r3, #0
10020082:	f47f ae8a 	bne.w	1001fd9a <_strtod_l+0xa1a>
10020086:	2322      	movs	r3, #34	@ 0x22
10020088:	f8cb 3000 	str.w	r3, [fp]
1002008c:	e685      	b.n	1001fd9a <_strtod_l+0xa1a>
1002008e:	f1be 0f00 	cmp.w	lr, #0
10020092:	f000 8089 	beq.w	100201a8 <_strtod_l+0xe28>
10020096:	ea1e 0f03 	tst.w	lr, r3
1002009a:	f040 8089 	bne.w	100201b0 <_strtod_l+0xe30>
1002009e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100200a0:	2b00      	cmp	r3, #0
100200a2:	d1e3      	bne.n	1002006c <_strtod_l+0xcec>
100200a4:	e679      	b.n	1001fd9a <_strtod_l+0xa1a>
100200a6:	f102 7354 	add.w	r3, r2, #55574528	@ 0x3500000
100200aa:	9305      	str	r3, [sp, #20]
100200ac:	f7ff bbac 	b.w	1001f808 <_strtod_l+0x488>
100200b0:	2a00      	cmp	r2, #0
100200b2:	d175      	bne.n	100201a0 <_strtod_l+0xe20>
100200b4:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
100200b8:	4622      	mov	r2, r4
100200ba:	2c00      	cmp	r4, #0
100200bc:	d1e7      	bne.n	1002008e <_strtod_l+0xd0e>
100200be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100200c0:	2a00      	cmp	r2, #0
100200c2:	f040 80be 	bne.w	10020242 <_strtod_l+0xec2>
100200c6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
100200ca:	0d24      	lsrs	r4, r4, #20
100200cc:	0524      	lsls	r4, r4, #20
100200ce:	f5a4 1480 	sub.w	r4, r4, #1048576	@ 0x100000
100200d2:	ea6f 5314 	mvn.w	r3, r4, lsr #20
100200d6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
100200da:	9305      	str	r3, [sp, #20]
100200dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100200e0:	9304      	str	r3, [sp, #16]
100200e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
100200e6:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
100200e8:	e5bb      	b.n	1001fc62 <_strtod_l+0x8e2>
100200ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
100200ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
100200f0:	4303      	orrs	r3, r0
100200f2:	464f      	mov	r7, r9
100200f4:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	@ 0x40
100200f8:	d1d1      	bne.n	1002009e <_strtod_l+0xd1e>
100200fa:	f3c1 0313 	ubfx	r3, r1, #0, #20
100200fe:	2b00      	cmp	r3, #0
10020100:	d1cd      	bne.n	1002009e <_strtod_l+0xd1e>
10020102:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
10020106:	0d24      	lsrs	r4, r4, #20
10020108:	0524      	lsls	r4, r4, #20
1002010a:	f1b4 6fd6 	cmp.w	r4, #112197632	@ 0x6b00000
1002010e:	4625      	mov	r5, r4
10020110:	d9c5      	bls.n	1002009e <_strtod_l+0xd1e>
10020112:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10020114:	6953      	ldr	r3, [r2, #20]
10020116:	b913      	cbnz	r3, 1002011e <_strtod_l+0xd9e>
10020118:	6913      	ldr	r3, [r2, #16]
1002011a:	2b01      	cmp	r3, #1
1002011c:	ddbf      	ble.n	1002009e <_strtod_l+0xd1e>
1002011e:	9909      	ldr	r1, [sp, #36]	@ 0x24
10020120:	2201      	movs	r2, #1
10020122:	4658      	mov	r0, fp
10020124:	f7fe fd80 	bl	1001ec28 <__lshift>
10020128:	4651      	mov	r1, sl
1002012a:	9009      	str	r0, [sp, #36]	@ 0x24
1002012c:	f7fe fdf4 	bl	1001ed18 <__mcmp>
10020130:	2800      	cmp	r0, #0
10020132:	ddb4      	ble.n	1002009e <_strtod_l+0xd1e>
10020134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10020136:	2b00      	cmp	r3, #0
10020138:	d0c9      	beq.n	100200ce <_strtod_l+0xd4e>
1002013a:	f5a5 1380 	sub.w	r3, r5, #1048576	@ 0x100000
1002013e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
10020142:	ea6f 5303 	mvn.w	r3, r3, lsl #20
10020146:	9305      	str	r3, [sp, #20]
10020148:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1002014c:	9304      	str	r3, [sp, #16]
1002014e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
10020152:	e78b      	b.n	1002006c <_strtod_l+0xcec>
10020154:	4911      	ldr	r1, [pc, #68]	@ (1002019c <_strtod_l+0xe1c>)
10020156:	a819      	add	r0, sp, #100	@ 0x64
10020158:	aa1c      	add	r2, sp, #112	@ 0x70
1002015a:	f001 faaf 	bl	100216bc <__hexnan>
1002015e:	2805      	cmp	r0, #5
10020160:	f47f aa56 	bne.w	1001f610 <_strtod_l+0x290>
10020164:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
10020166:	f043 43ff 	orr.w	r3, r3, #2139095040	@ 0x7f800000
1002016a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
1002016e:	9305      	str	r3, [sp, #20]
10020170:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
10020172:	9304      	str	r3, [sp, #16]
10020174:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
10020178:	e4dd      	b.n	1001fb36 <_strtod_l+0x7b6>
1002017a:	bf00      	nop
1002017c:	10025878 	.word	0x10025878
10020180:	1002587c 	.word	0x1002587c
10020184:	7ff00000 	.word	0x7ff00000
10020188:	100257b0 	.word	0x100257b0
1002018c:	bfe00000 	.word	0xbfe00000
10020190:	3fe00000 	.word	0x3fe00000
10020194:	000fffff 	.word	0x000fffff
10020198:	39500000 	.word	0x39500000
1002019c:	10025888 	.word	0x10025888
100201a0:	2d00      	cmp	r5, #0
100201a2:	f47f af78 	bne.w	10020096 <_strtod_l+0xd16>
100201a6:	9a04      	ldr	r2, [sp, #16]
100201a8:	ea1c 0f02 	tst.w	ip, r2
100201ac:	f43f af77 	beq.w	1002009e <_strtod_l+0xd1e>
100201b0:	4640      	mov	r0, r8
100201b2:	4649      	mov	r1, r9
100201b4:	9304      	str	r3, [sp, #16]
100201b6:	f7fe fe81 	bl	1001eebc <__ulp>
100201ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100201bc:	2b00      	cmp	r3, #0
100201be:	d053      	beq.n	10020268 <_strtod_l+0xee8>
100201c0:	9b04      	ldr	r3, [sp, #16]
100201c2:	f3c3 530a 	ubfx	r3, r3, #20, #11
100201c6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
100201ca:	2b00      	cmp	r3, #0
100201cc:	f340 809b 	ble.w	10020306 <_strtod_l+0xf86>
100201d0:	051c      	lsls	r4, r3, #20
100201d2:	f104 537f 	add.w	r3, r4, #1069547520	@ 0x3fc00000
100201d6:	2200      	movs	r2, #0
100201d8:	f503 1340 	add.w	r3, r3, #3145728	@ 0x300000
100201dc:	f001 fefa 	bl	10021fd4 <__aeabi_dmul>
100201e0:	4602      	mov	r2, r0
100201e2:	460b      	mov	r3, r1
100201e4:	4640      	mov	r0, r8
100201e6:	4649      	mov	r1, r9
100201e8:	f001 fd3c 	bl	10021c64 <__aeabi_dsub>
100201ec:	2200      	movs	r2, #0
100201ee:	2300      	movs	r3, #0
100201f0:	4680      	mov	r8, r0
100201f2:	4689      	mov	r9, r1
100201f4:	f002 f956 	bl	100224a4 <__aeabi_dcmpeq>
100201f8:	2800      	cmp	r0, #0
100201fa:	f43f af37 	beq.w	1002006c <_strtod_l+0xcec>
100201fe:	e604      	b.n	1001fe0a <_strtod_l+0xa8a>
10020200:	f04f 0900 	mov.w	r9, #0
10020204:	f7ff bae1 	b.w	1001f7ca <_strtod_l+0x44a>
10020208:	9a04      	ldr	r2, [sp, #16]
1002020a:	ea1c 0f02 	tst.w	ip, r2
1002020e:	f43f af46 	beq.w	1002009e <_strtod_l+0xd1e>
10020212:	e708      	b.n	10020026 <_strtod_l+0xca6>
10020214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
10020218:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1002021a:	4604      	mov	r4, r0
1002021c:	2a00      	cmp	r2, #0
1002021e:	d147      	bne.n	100202b0 <_strtod_l+0xf30>
10020220:	4602      	mov	r2, r0
10020222:	3201      	adds	r2, #1
10020224:	d077      	beq.n	10020316 <_strtod_l+0xf96>
10020226:	2d00      	cmp	r5, #0
10020228:	d070      	beq.n	1002030c <_strtod_l+0xf8c>
1002022a:	421d      	tst	r5, r3
1002022c:	f43f adb5 	beq.w	1001fd9a <_strtod_l+0xa1a>
10020230:	e6f9      	b.n	10020026 <_strtod_l+0xca6>
10020232:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10020236:	fa02 f303 	lsl.w	r3, r2, r3
1002023a:	9a04      	ldr	r2, [sp, #16]
1002023c:	401a      	ands	r2, r3
1002023e:	9204      	str	r2, [sp, #16]
10020240:	e467      	b.n	1001fb12 <_strtod_l+0x792>
10020242:	4d3e      	ldr	r5, [pc, #248]	@ (1002033c <_strtod_l+0xfbc>)
10020244:	401d      	ands	r5, r3
10020246:	f1b5 6fd6 	cmp.w	r5, #112197632	@ 0x6b00000
1002024a:	f63f af76 	bhi.w	1002013a <_strtod_l+0xdba>
1002024e:	f1b5 7f5c 	cmp.w	r5, #57671680	@ 0x3700000
10020252:	f63f af0b 	bhi.w	1002006c <_strtod_l+0xcec>
10020256:	2322      	movs	r3, #34	@ 0x22
10020258:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
1002025a:	f8cb 3000 	str.w	r3, [fp]
1002025e:	f04f 0800 	mov.w	r8, #0
10020262:	f04f 0900 	mov.w	r9, #0
10020266:	e4fc      	b.n	1001fc62 <_strtod_l+0x8e2>
10020268:	4602      	mov	r2, r0
1002026a:	460b      	mov	r3, r1
1002026c:	4640      	mov	r0, r8
1002026e:	4649      	mov	r1, r9
10020270:	f001 fcf8 	bl	10021c64 <__aeabi_dsub>
10020274:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
10020276:	2200      	movs	r2, #0
10020278:	2300      	movs	r3, #0
1002027a:	4680      	mov	r8, r0
1002027c:	4689      	mov	r9, r1
1002027e:	4625      	mov	r5, r4
10020280:	f002 f910 	bl	100224a4 <__aeabi_dcmpeq>
10020284:	2800      	cmp	r0, #0
10020286:	f43f acec 	beq.w	1001fc62 <_strtod_l+0x8e2>
1002028a:	e5bf      	b.n	1001fe0c <_strtod_l+0xa8c>
1002028c:	4640      	mov	r0, r8
1002028e:	4649      	mov	r1, r9
10020290:	462b      	mov	r3, r5
10020292:	4622      	mov	r2, r4
10020294:	f001 fce8 	bl	10021c68 <__adddf3>
10020298:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
1002029a:	4680      	mov	r8, r0
1002029c:	4689      	mov	r9, r1
1002029e:	e4e0      	b.n	1001fc62 <_strtod_l+0x8e2>
100202a0:	f1c2 024b 	rsb	r2, r2, #75	@ 0x4b
100202a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100202a8:	4093      	lsls	r3, r2
100202aa:	400b      	ands	r3, r1
100202ac:	9305      	str	r3, [sp, #20]
100202ae:	e430      	b.n	1001fb12 <_strtod_l+0x792>
100202b0:	4a22      	ldr	r2, [pc, #136]	@ (1002033c <_strtod_l+0xfbc>)
100202b2:	401a      	ands	r2, r3
100202b4:	f1b2 6fd4 	cmp.w	r2, #111149056	@ 0x6a00000
100202b8:	d909      	bls.n	100202ce <_strtod_l+0xf4e>
100202ba:	1c61      	adds	r1, r4, #1
100202bc:	d032      	beq.n	10020324 <_strtod_l+0xfa4>
100202be:	f1be 0f00 	cmp.w	lr, #0
100202c2:	d033      	beq.n	1002032c <_strtod_l+0xfac>
100202c4:	ea1e 0f03 	tst.w	lr, r3
100202c8:	f43f aed0 	beq.w	1002006c <_strtod_l+0xcec>
100202cc:	e6ab      	b.n	10020026 <_strtod_l+0xca6>
100202ce:	0d10      	lsrs	r0, r2, #20
100202d0:	f1c0 006b 	rsb	r0, r0, #107	@ 0x6b
100202d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
100202d8:	4081      	lsls	r1, r0
100202da:	428c      	cmp	r4, r1
100202dc:	d1ef      	bne.n	100202be <_strtod_l+0xf3e>
100202de:	f502 1380 	add.w	r3, r2, #1048576	@ 0x100000
100202e2:	9305      	str	r3, [sp, #20]
100202e4:	2300      	movs	r3, #0
100202e6:	9304      	str	r3, [sp, #16]
100202e8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
100202ec:	e6d7      	b.n	1002009e <_strtod_l+0xd1e>
100202ee:	4640      	mov	r0, r8
100202f0:	4649      	mov	r1, r9
100202f2:	4622      	mov	r2, r4
100202f4:	462b      	mov	r3, r5
100202f6:	f001 fcb7 	bl	10021c68 <__adddf3>
100202fa:	4680      	mov	r8, r0
100202fc:	4689      	mov	r9, r1
100202fe:	e6b5      	b.n	1002006c <_strtod_l+0xcec>
10020300:	4621      	mov	r1, r4
10020302:	3401      	adds	r4, #1
10020304:	e598      	b.n	1001fe38 <_strtod_l+0xab8>
10020306:	4602      	mov	r2, r0
10020308:	460b      	mov	r3, r1
1002030a:	e76b      	b.n	100201e4 <_strtod_l+0xe64>
1002030c:	ea10 0f0c 	tst.w	r0, ip
10020310:	f43f ad43 	beq.w	1001fd9a <_strtod_l+0xa1a>
10020314:	e687      	b.n	10020026 <_strtod_l+0xca6>
10020316:	4a0a      	ldr	r2, [pc, #40]	@ (10020340 <_strtod_l+0xfc0>)
10020318:	4293      	cmp	r3, r2
1002031a:	f43f acc5 	beq.w	1001fca8 <_strtod_l+0x928>
1002031e:	3201      	adds	r2, #1
10020320:	401a      	ands	r2, r3
10020322:	e7dc      	b.n	100202de <_strtod_l+0xf5e>
10020324:	4906      	ldr	r1, [pc, #24]	@ (10020340 <_strtod_l+0xfc0>)
10020326:	428b      	cmp	r3, r1
10020328:	d1d9      	bne.n	100202de <_strtod_l+0xf5e>
1002032a:	e4bd      	b.n	1001fca8 <_strtod_l+0x928>
1002032c:	ea14 0f0c 	tst.w	r4, ip
10020330:	f43f ae9c 	beq.w	1002006c <_strtod_l+0xcec>
10020334:	e677      	b.n	10020026 <_strtod_l+0xca6>
10020336:	2300      	movs	r3, #0
10020338:	e610      	b.n	1001ff5c <_strtod_l+0xbdc>
1002033a:	bf00      	nop
1002033c:	7ff00000 	.word	0x7ff00000
10020340:	7fefffff 	.word	0x7fefffff

10020344 <_strtod_r>:
10020344:	4b01      	ldr	r3, [pc, #4]	@ (1002034c <_strtod_r+0x8>)
10020346:	f7ff b81b 	b.w	1001f380 <_strtod_l>
1002034a:	bf00      	nop
1002034c:	2000042c 	.word	0x2000042c

10020350 <_strtol_l.constprop.0>:
10020350:	2b24      	cmp	r3, #36	@ 0x24
10020352:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10020356:	d843      	bhi.n	100203e0 <_strtol_l.constprop.0+0x90>
10020358:	2b01      	cmp	r3, #1
1002035a:	d041      	beq.n	100203e0 <_strtol_l.constprop.0+0x90>
1002035c:	4680      	mov	r8, r0
1002035e:	4849      	ldr	r0, [pc, #292]	@ (10020484 <_strtol_l.constprop.0+0x134>)
10020360:	461f      	mov	r7, r3
10020362:	468e      	mov	lr, r1
10020364:	4675      	mov	r5, lr
10020366:	f81e bb01 	ldrb.w	fp, [lr], #1
1002036a:	f810 400b 	ldrb.w	r4, [r0, fp]
1002036e:	f014 0408 	ands.w	r4, r4, #8
10020372:	d1f7      	bne.n	10020364 <_strtol_l.constprop.0+0x14>
10020374:	f1bb 0f2d 	cmp.w	fp, #45	@ 0x2d
10020378:	d06f      	beq.n	1002045a <_strtol_l.constprop.0+0x10a>
1002037a:	f1bb 0f2b 	cmp.w	fp, #43	@ 0x2b
1002037e:	bf08      	it	eq
10020380:	f89e b000 	ldrbeq.w	fp, [lr]
10020384:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
10020388:	bf08      	it	eq
1002038a:	f105 0e02 	addeq.w	lr, r5, #2
1002038e:	bb73      	cbnz	r3, 100203ee <_strtol_l.constprop.0+0x9e>
10020390:	f1bb 0f30 	cmp.w	fp, #48	@ 0x30
10020394:	d04b      	beq.n	1002042e <_strtol_l.constprop.0+0xde>
10020396:	270a      	movs	r7, #10
10020398:	463b      	mov	r3, r7
1002039a:	2500      	movs	r5, #0
1002039c:	fbb9 f6f7 	udiv	r6, r9, r7
100203a0:	4628      	mov	r0, r5
100203a2:	fb07 9a16 	mls	sl, r7, r6, r9
100203a6:	e005      	b.n	100203b4 <_strtol_l.constprop.0+0x64>
100203a8:	d03a      	beq.n	10020420 <_strtol_l.constprop.0+0xd0>
100203aa:	fb07 c000 	mla	r0, r7, r0, ip
100203ae:	2501      	movs	r5, #1
100203b0:	f81e bb01 	ldrb.w	fp, [lr], #1
100203b4:	f1ab 0c30 	sub.w	ip, fp, #48	@ 0x30
100203b8:	f1bc 0f09 	cmp.w	ip, #9
100203bc:	d906      	bls.n	100203cc <_strtol_l.constprop.0+0x7c>
100203be:	f1ab 0c41 	sub.w	ip, fp, #65	@ 0x41
100203c2:	f1bc 0f19 	cmp.w	ip, #25
100203c6:	d819      	bhi.n	100203fc <_strtol_l.constprop.0+0xac>
100203c8:	f1ab 0c37 	sub.w	ip, fp, #55	@ 0x37
100203cc:	4563      	cmp	r3, ip
100203ce:	dd1e      	ble.n	1002040e <_strtol_l.constprop.0+0xbe>
100203d0:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
100203d4:	d0ec      	beq.n	100203b0 <_strtol_l.constprop.0+0x60>
100203d6:	4286      	cmp	r6, r0
100203d8:	d2e6      	bcs.n	100203a8 <_strtol_l.constprop.0+0x58>
100203da:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
100203de:	e7e7      	b.n	100203b0 <_strtol_l.constprop.0+0x60>
100203e0:	f7f9 fa0e 	bl	10019800 <__errno>
100203e4:	2316      	movs	r3, #22
100203e6:	6003      	str	r3, [r0, #0]
100203e8:	2000      	movs	r0, #0
100203ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
100203ee:	2b10      	cmp	r3, #16
100203f0:	d1d3      	bne.n	1002039a <_strtol_l.constprop.0+0x4a>
100203f2:	f1bb 0f30 	cmp.w	fp, #48	@ 0x30
100203f6:	d023      	beq.n	10020440 <_strtol_l.constprop.0+0xf0>
100203f8:	461f      	mov	r7, r3
100203fa:	e7ce      	b.n	1002039a <_strtol_l.constprop.0+0x4a>
100203fc:	f1ab 0c61 	sub.w	ip, fp, #97	@ 0x61
10020400:	f1bc 0f19 	cmp.w	ip, #25
10020404:	d803      	bhi.n	1002040e <_strtol_l.constprop.0+0xbe>
10020406:	f1ab 0c57 	sub.w	ip, fp, #87	@ 0x57
1002040a:	4563      	cmp	r3, ip
1002040c:	dce0      	bgt.n	100203d0 <_strtol_l.constprop.0+0x80>
1002040e:	1c6b      	adds	r3, r5, #1
10020410:	d02b      	beq.n	1002046a <_strtol_l.constprop.0+0x11a>
10020412:	b954      	cbnz	r4, 1002042a <_strtol_l.constprop.0+0xda>
10020414:	2a00      	cmp	r2, #0
10020416:	d0e8      	beq.n	100203ea <_strtol_l.constprop.0+0x9a>
10020418:	bb85      	cbnz	r5, 1002047c <_strtol_l.constprop.0+0x12c>
1002041a:	6011      	str	r1, [r2, #0]
1002041c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
10020420:	45e2      	cmp	sl, ip
10020422:	dac2      	bge.n	100203aa <_strtol_l.constprop.0+0x5a>
10020424:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
10020428:	e7c2      	b.n	100203b0 <_strtol_l.constprop.0+0x60>
1002042a:	4240      	negs	r0, r0
1002042c:	e7f2      	b.n	10020414 <_strtol_l.constprop.0+0xc4>
1002042e:	f89e 3000 	ldrb.w	r3, [lr]
10020432:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
10020436:	2b58      	cmp	r3, #88	@ 0x58
10020438:	d008      	beq.n	1002044c <_strtol_l.constprop.0+0xfc>
1002043a:	2708      	movs	r7, #8
1002043c:	463b      	mov	r3, r7
1002043e:	e7ac      	b.n	1002039a <_strtol_l.constprop.0+0x4a>
10020440:	f89e 0000 	ldrb.w	r0, [lr]
10020444:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
10020448:	2858      	cmp	r0, #88	@ 0x58
1002044a:	d1d5      	bne.n	100203f8 <_strtol_l.constprop.0+0xa8>
1002044c:	2710      	movs	r7, #16
1002044e:	f89e b001 	ldrb.w	fp, [lr, #1]
10020452:	463b      	mov	r3, r7
10020454:	f10e 0e02 	add.w	lr, lr, #2
10020458:	e79f      	b.n	1002039a <_strtol_l.constprop.0+0x4a>
1002045a:	f89e b000 	ldrb.w	fp, [lr]
1002045e:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
10020462:	f105 0e02 	add.w	lr, r5, #2
10020466:	2401      	movs	r4, #1
10020468:	e791      	b.n	1002038e <_strtol_l.constprop.0+0x3e>
1002046a:	2322      	movs	r3, #34	@ 0x22
1002046c:	f8c8 3000 	str.w	r3, [r8]
10020470:	b132      	cbz	r2, 10020480 <_strtol_l.constprop.0+0x130>
10020472:	f10e 31ff 	add.w	r1, lr, #4294967295	@ 0xffffffff
10020476:	4648      	mov	r0, r9
10020478:	6011      	str	r1, [r2, #0]
1002047a:	e7cf      	b.n	1002041c <_strtol_l.constprop.0+0xcc>
1002047c:	4681      	mov	r9, r0
1002047e:	e7f8      	b.n	10020472 <_strtol_l.constprop.0+0x122>
10020480:	4648      	mov	r0, r9
10020482:	e7b2      	b.n	100203ea <_strtol_l.constprop.0+0x9a>
10020484:	1002553d 	.word	0x1002553d

10020488 <_strtol_r>:
10020488:	f7ff bf62 	b.w	10020350 <_strtol_l.constprop.0>

1002048c <_strtoul_l.constprop.0>:
1002048c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10020490:	4607      	mov	r7, r0
10020492:	4849      	ldr	r0, [pc, #292]	@ (100205b8 <_strtoul_l.constprop.0+0x12c>)
10020494:	460e      	mov	r6, r1
10020496:	4635      	mov	r5, r6
10020498:	f816 eb01 	ldrb.w	lr, [r6], #1
1002049c:	f810 c00e 	ldrb.w	ip, [r0, lr]
100204a0:	f01c 0c08 	ands.w	ip, ip, #8
100204a4:	d1f7      	bne.n	10020496 <_strtoul_l.constprop.0+0xa>
100204a6:	f1be 0f2d 	cmp.w	lr, #45	@ 0x2d
100204aa:	d05a      	beq.n	10020562 <_strtoul_l.constprop.0+0xd6>
100204ac:	f1be 0f2b 	cmp.w	lr, #43	@ 0x2b
100204b0:	bf03      	ittte	eq
100204b2:	f896 e000 	ldrbeq.w	lr, [r6]
100204b6:	4664      	moveq	r4, ip
100204b8:	1cae      	addeq	r6, r5, #2
100204ba:	4664      	movne	r4, ip
100204bc:	b94b      	cbnz	r3, 100204d2 <_strtoul_l.constprop.0+0x46>
100204be:	f1be 0f30 	cmp.w	lr, #48	@ 0x30
100204c2:	d05c      	beq.n	1002057e <_strtoul_l.constprop.0+0xf2>
100204c4:	230a      	movs	r3, #10
100204c6:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 100205bc <_strtoul_l.constprop.0+0x130>
100204ca:	f04f 0a05 	mov.w	sl, #5
100204ce:	4699      	mov	r9, r3
100204d0:	e00a      	b.n	100204e8 <_strtoul_l.constprop.0+0x5c>
100204d2:	2b10      	cmp	r3, #16
100204d4:	d04a      	beq.n	1002056c <_strtoul_l.constprop.0+0xe0>
100204d6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
100204da:	fbb8 f8f3 	udiv	r8, r8, r3
100204de:	fb03 fa08 	mul.w	sl, r3, r8
100204e2:	ea6f 0a0a 	mvn.w	sl, sl
100204e6:	4699      	mov	r9, r3
100204e8:	2500      	movs	r5, #0
100204ea:	4628      	mov	r0, r5
100204ec:	e005      	b.n	100204fa <_strtoul_l.constprop.0+0x6e>
100204ee:	d02c      	beq.n	1002054a <_strtoul_l.constprop.0+0xbe>
100204f0:	fb09 c000 	mla	r0, r9, r0, ip
100204f4:	2501      	movs	r5, #1
100204f6:	f816 eb01 	ldrb.w	lr, [r6], #1
100204fa:	f1ae 0c30 	sub.w	ip, lr, #48	@ 0x30
100204fe:	f1bc 0f09 	cmp.w	ip, #9
10020502:	d906      	bls.n	10020512 <_strtoul_l.constprop.0+0x86>
10020504:	f1ae 0c41 	sub.w	ip, lr, #65	@ 0x41
10020508:	f1bc 0f19 	cmp.w	ip, #25
1002050c:	d80b      	bhi.n	10020526 <_strtoul_l.constprop.0+0x9a>
1002050e:	f1ae 0c37 	sub.w	ip, lr, #55	@ 0x37
10020512:	4563      	cmp	r3, ip
10020514:	dd10      	ble.n	10020538 <_strtoul_l.constprop.0+0xac>
10020516:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
1002051a:	d0ec      	beq.n	100204f6 <_strtoul_l.constprop.0+0x6a>
1002051c:	4540      	cmp	r0, r8
1002051e:	d9e6      	bls.n	100204ee <_strtoul_l.constprop.0+0x62>
10020520:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
10020524:	e7e7      	b.n	100204f6 <_strtoul_l.constprop.0+0x6a>
10020526:	f1ae 0c61 	sub.w	ip, lr, #97	@ 0x61
1002052a:	f1bc 0f19 	cmp.w	ip, #25
1002052e:	d803      	bhi.n	10020538 <_strtoul_l.constprop.0+0xac>
10020530:	f1ae 0c57 	sub.w	ip, lr, #87	@ 0x57
10020534:	4563      	cmp	r3, ip
10020536:	dcee      	bgt.n	10020516 <_strtoul_l.constprop.0+0x8a>
10020538:	1c6b      	adds	r3, r5, #1
1002053a:	d00b      	beq.n	10020554 <_strtoul_l.constprop.0+0xc8>
1002053c:	b104      	cbz	r4, 10020540 <_strtoul_l.constprop.0+0xb4>
1002053e:	4240      	negs	r0, r0
10020540:	b10a      	cbz	r2, 10020546 <_strtoul_l.constprop.0+0xba>
10020542:	b965      	cbnz	r5, 1002055e <_strtoul_l.constprop.0+0xd2>
10020544:	6011      	str	r1, [r2, #0]
10020546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1002054a:	45d4      	cmp	ip, sl
1002054c:	ddd0      	ble.n	100204f0 <_strtoul_l.constprop.0+0x64>
1002054e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
10020552:	e7d0      	b.n	100204f6 <_strtoul_l.constprop.0+0x6a>
10020554:	2322      	movs	r3, #34	@ 0x22
10020556:	603b      	str	r3, [r7, #0]
10020558:	4628      	mov	r0, r5
1002055a:	2a00      	cmp	r2, #0
1002055c:	d0f3      	beq.n	10020546 <_strtoul_l.constprop.0+0xba>
1002055e:	1e71      	subs	r1, r6, #1
10020560:	e7f0      	b.n	10020544 <_strtoul_l.constprop.0+0xb8>
10020562:	f896 e000 	ldrb.w	lr, [r6]
10020566:	2401      	movs	r4, #1
10020568:	1cae      	adds	r6, r5, #2
1002056a:	e7a7      	b.n	100204bc <_strtoul_l.constprop.0+0x30>
1002056c:	f1be 0f30 	cmp.w	lr, #48	@ 0x30
10020570:	d011      	beq.n	10020596 <_strtoul_l.constprop.0+0x10a>
10020572:	f04f 0a0f 	mov.w	sl, #15
10020576:	f06f 4870 	mvn.w	r8, #4026531840	@ 0xf0000000
1002057a:	4699      	mov	r9, r3
1002057c:	e7b4      	b.n	100204e8 <_strtoul_l.constprop.0+0x5c>
1002057e:	7833      	ldrb	r3, [r6, #0]
10020580:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
10020584:	2b58      	cmp	r3, #88	@ 0x58
10020586:	d00b      	beq.n	100205a0 <_strtoul_l.constprop.0+0x114>
10020588:	2308      	movs	r3, #8
1002058a:	f04f 0a07 	mov.w	sl, #7
1002058e:	f06f 4860 	mvn.w	r8, #3758096384	@ 0xe0000000
10020592:	4699      	mov	r9, r3
10020594:	e7a8      	b.n	100204e8 <_strtoul_l.constprop.0+0x5c>
10020596:	7830      	ldrb	r0, [r6, #0]
10020598:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
1002059c:	2858      	cmp	r0, #88	@ 0x58
1002059e:	d1e8      	bne.n	10020572 <_strtoul_l.constprop.0+0xe6>
100205a0:	f04f 0910 	mov.w	r9, #16
100205a4:	f896 e001 	ldrb.w	lr, [r6, #1]
100205a8:	f04f 0a0f 	mov.w	sl, #15
100205ac:	3602      	adds	r6, #2
100205ae:	f06f 4870 	mvn.w	r8, #4026531840	@ 0xf0000000
100205b2:	464b      	mov	r3, r9
100205b4:	e798      	b.n	100204e8 <_strtoul_l.constprop.0+0x5c>
100205b6:	bf00      	nop
100205b8:	1002553d 	.word	0x1002553d
100205bc:	19999999 	.word	0x19999999

100205c0 <_strtoul_r>:
100205c0:	f7ff bf64 	b.w	1002048c <_strtoul_l.constprop.0>

100205c4 <sprintf>:
100205c4:	b40e      	push	{r1, r2, r3}
100205c6:	b510      	push	{r4, lr}
100205c8:	b09d      	sub	sp, #116	@ 0x74
100205ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
100205ce:	ab1f      	add	r3, sp, #124	@ 0x7c
100205d0:	9104      	str	r1, [sp, #16]
100205d2:	9107      	str	r1, [sp, #28]
100205d4:	4909      	ldr	r1, [pc, #36]	@ (100205fc <sprintf+0x38>)
100205d6:	f853 2b04 	ldr.w	r2, [r3], #4
100205da:	9002      	str	r0, [sp, #8]
100205dc:	9006      	str	r0, [sp, #24]
100205de:	4c08      	ldr	r4, [pc, #32]	@ (10020600 <sprintf+0x3c>)
100205e0:	6808      	ldr	r0, [r1, #0]
100205e2:	9301      	str	r3, [sp, #4]
100205e4:	a902      	add	r1, sp, #8
100205e6:	9405      	str	r4, [sp, #20]
100205e8:	f7fa fdfe 	bl	1001b1e8 <_svfprintf_r>
100205ec:	9b02      	ldr	r3, [sp, #8]
100205ee:	2200      	movs	r2, #0
100205f0:	701a      	strb	r2, [r3, #0]
100205f2:	b01d      	add	sp, #116	@ 0x74
100205f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100205f8:	b003      	add	sp, #12
100205fa:	4770      	bx	lr
100205fc:	20000598 	.word	0x20000598
10020600:	ffff0208 	.word	0xffff0208

10020604 <__sflags>:
10020604:	b500      	push	{lr}
10020606:	780b      	ldrb	r3, [r1, #0]
10020608:	2b72      	cmp	r3, #114	@ 0x72
1002060a:	d038      	beq.n	1002067e <__sflags+0x7a>
1002060c:	2b77      	cmp	r3, #119	@ 0x77
1002060e:	d006      	beq.n	1002061e <__sflags+0x1a>
10020610:	2b61      	cmp	r3, #97	@ 0x61
10020612:	d02d      	beq.n	10020670 <__sflags+0x6c>
10020614:	2316      	movs	r3, #22
10020616:	6003      	str	r3, [r0, #0]
10020618:	2000      	movs	r0, #0
1002061a:	f85d fb04 	ldr.w	pc, [sp], #4
1002061e:	f44f 6ec0 	mov.w	lr, #1536	@ 0x600
10020622:	f04f 0c01 	mov.w	ip, #1
10020626:	2008      	movs	r0, #8
10020628:	784b      	ldrb	r3, [r1, #1]
1002062a:	3101      	adds	r1, #1
1002062c:	b92b      	cbnz	r3, 1002063a <__sflags+0x36>
1002062e:	e00e      	b.n	1002064e <__sflags+0x4a>
10020630:	2b2b      	cmp	r3, #43	@ 0x2b
10020632:	d014      	beq.n	1002065e <__sflags+0x5a>
10020634:	f811 3f01 	ldrb.w	r3, [r1, #1]!
10020638:	b14b      	cbz	r3, 1002064e <__sflags+0x4a>
1002063a:	2b62      	cmp	r3, #98	@ 0x62
1002063c:	d00c      	beq.n	10020658 <__sflags+0x54>
1002063e:	2b78      	cmp	r3, #120	@ 0x78
10020640:	d1f6      	bne.n	10020630 <__sflags+0x2c>
10020642:	f811 3f01 	ldrb.w	r3, [r1, #1]!
10020646:	f44c 6c00 	orr.w	ip, ip, #2048	@ 0x800
1002064a:	2b00      	cmp	r3, #0
1002064c:	d1f5      	bne.n	1002063a <__sflags+0x36>
1002064e:	ea4e 030c 	orr.w	r3, lr, ip
10020652:	6013      	str	r3, [r2, #0]
10020654:	f85d fb04 	ldr.w	pc, [sp], #4
10020658:	f44c 3c80 	orr.w	ip, ip, #65536	@ 0x10000
1002065c:	e7ea      	b.n	10020634 <__sflags+0x30>
1002065e:	f020 001c 	bic.w	r0, r0, #28
10020662:	f02c 0c03 	bic.w	ip, ip, #3
10020666:	f040 0010 	orr.w	r0, r0, #16
1002066a:	f04c 0c02 	orr.w	ip, ip, #2
1002066e:	e7e1      	b.n	10020634 <__sflags+0x30>
10020670:	f44f 7e02 	mov.w	lr, #520	@ 0x208
10020674:	f04f 0c01 	mov.w	ip, #1
10020678:	f44f 7084 	mov.w	r0, #264	@ 0x108
1002067c:	e7d4      	b.n	10020628 <__sflags+0x24>
1002067e:	f04f 0e00 	mov.w	lr, #0
10020682:	46f4      	mov	ip, lr
10020684:	2004      	movs	r0, #4
10020686:	e7cf      	b.n	10020628 <__sflags+0x24>

10020688 <__ascii_wctomb>:
10020688:	b149      	cbz	r1, 1002069e <__ascii_wctomb+0x16>
1002068a:	2aff      	cmp	r2, #255	@ 0xff
1002068c:	d802      	bhi.n	10020694 <__ascii_wctomb+0xc>
1002068e:	700a      	strb	r2, [r1, #0]
10020690:	2001      	movs	r0, #1
10020692:	4770      	bx	lr
10020694:	238a      	movs	r3, #138	@ 0x8a
10020696:	6003      	str	r3, [r0, #0]
10020698:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1002069c:	4770      	bx	lr
1002069e:	4608      	mov	r0, r1
100206a0:	4770      	bx	lr
100206a2:	bf00      	nop

100206a4 <__swbuf_r>:
100206a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100206a6:	460d      	mov	r5, r1
100206a8:	4614      	mov	r4, r2
100206aa:	4606      	mov	r6, r0
100206ac:	b110      	cbz	r0, 100206b4 <__swbuf_r+0x10>
100206ae:	6b43      	ldr	r3, [r0, #52]	@ 0x34
100206b0:	2b00      	cmp	r3, #0
100206b2:	d04a      	beq.n	1002074a <__swbuf_r+0xa6>
100206b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
100206b8:	69a3      	ldr	r3, [r4, #24]
100206ba:	60a3      	str	r3, [r4, #8]
100206bc:	0710      	lsls	r0, r2, #28
100206be:	d51b      	bpl.n	100206f8 <__swbuf_r+0x54>
100206c0:	6923      	ldr	r3, [r4, #16]
100206c2:	b1cb      	cbz	r3, 100206f8 <__swbuf_r+0x54>
100206c4:	b2ed      	uxtb	r5, r5
100206c6:	0491      	lsls	r1, r2, #18
100206c8:	462f      	mov	r7, r5
100206ca:	d521      	bpl.n	10020710 <__swbuf_r+0x6c>
100206cc:	6822      	ldr	r2, [r4, #0]
100206ce:	6961      	ldr	r1, [r4, #20]
100206d0:	1ad3      	subs	r3, r2, r3
100206d2:	4299      	cmp	r1, r3
100206d4:	dd28      	ble.n	10020728 <__swbuf_r+0x84>
100206d6:	3301      	adds	r3, #1
100206d8:	68a1      	ldr	r1, [r4, #8]
100206da:	3901      	subs	r1, #1
100206dc:	60a1      	str	r1, [r4, #8]
100206de:	1c51      	adds	r1, r2, #1
100206e0:	6021      	str	r1, [r4, #0]
100206e2:	7015      	strb	r5, [r2, #0]
100206e4:	6962      	ldr	r2, [r4, #20]
100206e6:	429a      	cmp	r2, r3
100206e8:	d026      	beq.n	10020738 <__swbuf_r+0x94>
100206ea:	89a3      	ldrh	r3, [r4, #12]
100206ec:	07db      	lsls	r3, r3, #31
100206ee:	d501      	bpl.n	100206f4 <__swbuf_r+0x50>
100206f0:	2d0a      	cmp	r5, #10
100206f2:	d021      	beq.n	10020738 <__swbuf_r+0x94>
100206f4:	4638      	mov	r0, r7
100206f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100206f8:	4621      	mov	r1, r4
100206fa:	4630      	mov	r0, r6
100206fc:	f7f8 fc44 	bl	10018f88 <__swsetup_r>
10020700:	bb00      	cbnz	r0, 10020744 <__swbuf_r+0xa0>
10020702:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
10020706:	6923      	ldr	r3, [r4, #16]
10020708:	b2ed      	uxtb	r5, r5
1002070a:	0491      	lsls	r1, r2, #18
1002070c:	462f      	mov	r7, r5
1002070e:	d4dd      	bmi.n	100206cc <__swbuf_r+0x28>
10020710:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
10020714:	81a2      	strh	r2, [r4, #12]
10020716:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10020718:	6961      	ldr	r1, [r4, #20]
1002071a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
1002071e:	6662      	str	r2, [r4, #100]	@ 0x64
10020720:	6822      	ldr	r2, [r4, #0]
10020722:	1ad3      	subs	r3, r2, r3
10020724:	4299      	cmp	r1, r3
10020726:	dcd6      	bgt.n	100206d6 <__swbuf_r+0x32>
10020728:	4621      	mov	r1, r4
1002072a:	4630      	mov	r0, r6
1002072c:	f7f7 fed4 	bl	100184d8 <_fflush_r>
10020730:	b940      	cbnz	r0, 10020744 <__swbuf_r+0xa0>
10020732:	6822      	ldr	r2, [r4, #0]
10020734:	2301      	movs	r3, #1
10020736:	e7cf      	b.n	100206d8 <__swbuf_r+0x34>
10020738:	4621      	mov	r1, r4
1002073a:	4630      	mov	r0, r6
1002073c:	f7f7 fecc 	bl	100184d8 <_fflush_r>
10020740:	2800      	cmp	r0, #0
10020742:	d0d7      	beq.n	100206f4 <__swbuf_r+0x50>
10020744:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
10020748:	e7d4      	b.n	100206f4 <__swbuf_r+0x50>
1002074a:	f7f8 f8a1 	bl	10018890 <__sinit>
1002074e:	e7b1      	b.n	100206b4 <__swbuf_r+0x10>

10020750 <strncmp>:
10020750:	b3b2      	cbz	r2, 100207c0 <strncmp+0x70>
10020752:	ea40 0301 	orr.w	r3, r0, r1
10020756:	079b      	lsls	r3, r3, #30
10020758:	b530      	push	{r4, r5, lr}
1002075a:	4684      	mov	ip, r0
1002075c:	d118      	bne.n	10020790 <strncmp+0x40>
1002075e:	2a03      	cmp	r2, #3
10020760:	d916      	bls.n	10020790 <strncmp+0x40>
10020762:	4604      	mov	r4, r0
10020764:	460b      	mov	r3, r1
10020766:	e006      	b.n	10020776 <strncmp+0x26>
10020768:	3a04      	subs	r2, #4
1002076a:	d02b      	beq.n	100207c4 <strncmp+0x74>
1002076c:	f01e 3f80 	tst.w	lr, #2155905152	@ 0x80808080
10020770:	d128      	bne.n	100207c4 <strncmp+0x74>
10020772:	2a03      	cmp	r2, #3
10020774:	d92a      	bls.n	100207cc <strncmp+0x7c>
10020776:	6820      	ldr	r0, [r4, #0]
10020778:	4619      	mov	r1, r3
1002077a:	f853 5b04 	ldr.w	r5, [r3], #4
1002077e:	f1a0 3e01 	sub.w	lr, r0, #16843009	@ 0x1010101
10020782:	42a8      	cmp	r0, r5
10020784:	46a4      	mov	ip, r4
10020786:	ea2e 0e00 	bic.w	lr, lr, r0
1002078a:	f104 0404 	add.w	r4, r4, #4
1002078e:	d0eb      	beq.n	10020768 <strncmp+0x18>
10020790:	f89c 0000 	ldrb.w	r0, [ip]
10020794:	780c      	ldrb	r4, [r1, #0]
10020796:	4284      	cmp	r4, r0
10020798:	d116      	bne.n	100207c8 <strncmp+0x78>
1002079a:	2a01      	cmp	r2, #1
1002079c:	d012      	beq.n	100207c4 <strncmp+0x74>
1002079e:	46e6      	mov	lr, ip
100207a0:	b168      	cbz	r0, 100207be <strncmp+0x6e>
100207a2:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
100207a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
100207aa:	eba2 030e 	sub.w	r3, r2, lr
100207ae:	42a0      	cmp	r0, r4
100207b0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
100207b4:	d108      	bne.n	100207c8 <strncmp+0x78>
100207b6:	eb1c 0303 	adds.w	r3, ip, r3
100207ba:	d1f1      	bne.n	100207a0 <strncmp+0x50>
100207bc:	4618      	mov	r0, r3
100207be:	bd30      	pop	{r4, r5, pc}
100207c0:	4610      	mov	r0, r2
100207c2:	4770      	bx	lr
100207c4:	2000      	movs	r0, #0
100207c6:	bd30      	pop	{r4, r5, pc}
100207c8:	1b00      	subs	r0, r0, r4
100207ca:	bd30      	pop	{r4, r5, pc}
100207cc:	46a4      	mov	ip, r4
100207ce:	4619      	mov	r1, r3
100207d0:	e7de      	b.n	10020790 <strncmp+0x40>
100207d2:	bf00      	nop

100207d4 <stpncpy>:
100207d4:	ea41 0300 	orr.w	r3, r1, r0
100207d8:	079b      	lsls	r3, r3, #30
100207da:	b410      	push	{r4}
100207dc:	d101      	bne.n	100207e2 <stpncpy+0xe>
100207de:	2a03      	cmp	r2, #3
100207e0:	d81a      	bhi.n	10020818 <stpncpy+0x44>
100207e2:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
100207e6:	e007      	b.n	100207f8 <stpncpy+0x24>
100207e8:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
100207ec:	f803 1b01 	strb.w	r1, [r3], #1
100207f0:	1e54      	subs	r4, r2, #1
100207f2:	b131      	cbz	r1, 10020802 <stpncpy+0x2e>
100207f4:	4622      	mov	r2, r4
100207f6:	4618      	mov	r0, r3
100207f8:	4603      	mov	r3, r0
100207fa:	2a00      	cmp	r2, #0
100207fc:	d1f4      	bne.n	100207e8 <stpncpy+0x14>
100207fe:	bc10      	pop	{r4}
10020800:	4770      	bx	lr
10020802:	4402      	add	r2, r0
10020804:	b1f4      	cbz	r4, 10020844 <stpncpy+0x70>
10020806:	f803 1b01 	strb.w	r1, [r3], #1
1002080a:	4293      	cmp	r3, r2
1002080c:	d1fb      	bne.n	10020806 <stpncpy+0x32>
1002080e:	2800      	cmp	r0, #0
10020810:	bf08      	it	eq
10020812:	4610      	moveq	r0, r2
10020814:	bc10      	pop	{r4}
10020816:	4770      	bx	lr
10020818:	468c      	mov	ip, r1
1002081a:	e004      	b.n	10020826 <stpncpy+0x52>
1002081c:	3a04      	subs	r2, #4
1002081e:	2a03      	cmp	r2, #3
10020820:	f840 4b04 	str.w	r4, [r0], #4
10020824:	d90c      	bls.n	10020840 <stpncpy+0x6c>
10020826:	f8dc 4000 	ldr.w	r4, [ip]
1002082a:	f1a4 3301 	sub.w	r3, r4, #16843009	@ 0x1010101
1002082e:	ea23 0304 	bic.w	r3, r3, r4
10020832:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
10020836:	4661      	mov	r1, ip
10020838:	f10c 0c04 	add.w	ip, ip, #4
1002083c:	d0ee      	beq.n	1002081c <stpncpy+0x48>
1002083e:	e7d0      	b.n	100207e2 <stpncpy+0xe>
10020840:	4661      	mov	r1, ip
10020842:	e7ce      	b.n	100207e2 <stpncpy+0xe>
10020844:	461a      	mov	r2, r3
10020846:	e7e2      	b.n	1002080e <stpncpy+0x3a>

10020848 <_isatty_r>:
10020848:	b538      	push	{r3, r4, r5, lr}
1002084a:	4d07      	ldr	r5, [pc, #28]	@ (10020868 <_isatty_r+0x20>)
1002084c:	2200      	movs	r2, #0
1002084e:	4604      	mov	r4, r0
10020850:	4608      	mov	r0, r1
10020852:	602a      	str	r2, [r5, #0]
10020854:	f7f2 f940 	bl	10012ad8 <_isatty>
10020858:	1c43      	adds	r3, r0, #1
1002085a:	d000      	beq.n	1002085e <_isatty_r+0x16>
1002085c:	bd38      	pop	{r3, r4, r5, pc}
1002085e:	682b      	ldr	r3, [r5, #0]
10020860:	2b00      	cmp	r3, #0
10020862:	d0fb      	beq.n	1002085c <_isatty_r+0x14>
10020864:	6023      	str	r3, [r4, #0]
10020866:	bd38      	pop	{r3, r4, r5, pc}
10020868:	200015c4 	.word	0x200015c4

1002086c <_strtoll_l.constprop.0>:
1002086c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10020870:	b085      	sub	sp, #20
10020872:	4692      	mov	sl, r2
10020874:	4a5b      	ldr	r2, [pc, #364]	@ (100209e4 <_strtoll_l.constprop.0+0x178>)
10020876:	9003      	str	r0, [sp, #12]
10020878:	4689      	mov	r9, r1
1002087a:	461e      	mov	r6, r3
1002087c:	460d      	mov	r5, r1
1002087e:	4629      	mov	r1, r5
10020880:	f815 4b01 	ldrb.w	r4, [r5], #1
10020884:	5d13      	ldrb	r3, [r2, r4]
10020886:	f013 0308 	ands.w	r3, r3, #8
1002088a:	d1f8      	bne.n	1002087e <_strtoll_l.constprop.0+0x12>
1002088c:	2c2d      	cmp	r4, #45	@ 0x2d
1002088e:	d07d      	beq.n	1002098c <_strtoll_l.constprop.0+0x120>
10020890:	2c2b      	cmp	r4, #43	@ 0x2b
10020892:	d041      	beq.n	10020918 <_strtoll_l.constprop.0+0xac>
10020894:	9302      	str	r3, [sp, #8]
10020896:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1002089a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
1002089e:	e9cd 2300 	strd	r2, r3, [sp]
100208a2:	2e00      	cmp	r6, #0
100208a4:	d143      	bne.n	1002092e <_strtoll_l.constprop.0+0xc2>
100208a6:	2c30      	cmp	r4, #48	@ 0x30
100208a8:	d079      	beq.n	1002099e <_strtoll_l.constprop.0+0x132>
100208aa:	270a      	movs	r7, #10
100208ac:	46b0      	mov	r8, r6
100208ae:	463e      	mov	r6, r7
100208b0:	e9dd 0100 	ldrd	r0, r1, [sp]
100208b4:	463a      	mov	r2, r7
100208b6:	4643      	mov	r3, r8
100208b8:	f001 fed4 	bl	10022664 <__aeabi_uldivmod>
100208bc:	2300      	movs	r3, #0
100208be:	468e      	mov	lr, r1
100208c0:	4683      	mov	fp, r0
100208c2:	4619      	mov	r1, r3
100208c4:	4618      	mov	r0, r3
100208c6:	46a4      	mov	ip, r4
100208c8:	e010      	b.n	100208ec <_strtoll_l.constprop.0+0x80>
100208ca:	458e      	cmp	lr, r1
100208cc:	bf08      	it	eq
100208ce:	4583      	cmpeq	fp, r0
100208d0:	d04c      	beq.n	1002096c <_strtoll_l.constprop.0+0x100>
100208d2:	fb00 f308 	mul.w	r3, r0, r8
100208d6:	fb07 3301 	mla	r3, r7, r1, r3
100208da:	fba0 0107 	umull	r0, r1, r0, r7
100208de:	440b      	add	r3, r1
100208e0:	1820      	adds	r0, r4, r0
100208e2:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
100208e6:	2301      	movs	r3, #1
100208e8:	f815 cb01 	ldrb.w	ip, [r5], #1
100208ec:	f1ac 0430 	sub.w	r4, ip, #48	@ 0x30
100208f0:	2c09      	cmp	r4, #9
100208f2:	d905      	bls.n	10020900 <_strtoll_l.constprop.0+0x94>
100208f4:	f1ac 0441 	sub.w	r4, ip, #65	@ 0x41
100208f8:	2c19      	cmp	r4, #25
100208fa:	d81e      	bhi.n	1002093a <_strtoll_l.constprop.0+0xce>
100208fc:	f1ac 0437 	sub.w	r4, ip, #55	@ 0x37
10020900:	42a6      	cmp	r6, r4
10020902:	dd22      	ble.n	1002094a <_strtoll_l.constprop.0+0xde>
10020904:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
10020908:	d0ee      	beq.n	100208e8 <_strtoll_l.constprop.0+0x7c>
1002090a:	4583      	cmp	fp, r0
1002090c:	eb7e 0301 	sbcs.w	r3, lr, r1
10020910:	d2db      	bcs.n	100208ca <_strtoll_l.constprop.0+0x5e>
10020912:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10020916:	e7e7      	b.n	100208e8 <_strtoll_l.constprop.0+0x7c>
10020918:	782c      	ldrb	r4, [r5, #0]
1002091a:	9302      	str	r3, [sp, #8]
1002091c:	1c8d      	adds	r5, r1, #2
1002091e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
10020922:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
10020926:	e9cd 1300 	strd	r1, r3, [sp]
1002092a:	2e00      	cmp	r6, #0
1002092c:	d0bb      	beq.n	100208a6 <_strtoll_l.constprop.0+0x3a>
1002092e:	2e10      	cmp	r6, #16
10020930:	d03e      	beq.n	100209b0 <_strtoll_l.constprop.0+0x144>
10020932:	4637      	mov	r7, r6
10020934:	ea4f 78e6 	mov.w	r8, r6, asr #31
10020938:	e7ba      	b.n	100208b0 <_strtoll_l.constprop.0+0x44>
1002093a:	f1ac 0461 	sub.w	r4, ip, #97	@ 0x61
1002093e:	2c19      	cmp	r4, #25
10020940:	d803      	bhi.n	1002094a <_strtoll_l.constprop.0+0xde>
10020942:	f1ac 0457 	sub.w	r4, ip, #87	@ 0x57
10020946:	42a6      	cmp	r6, r4
10020948:	dcdc      	bgt.n	10020904 <_strtoll_l.constprop.0+0x98>
1002094a:	1c5a      	adds	r2, r3, #1
1002094c:	d013      	beq.n	10020976 <_strtoll_l.constprop.0+0x10a>
1002094e:	9a02      	ldr	r2, [sp, #8]
10020950:	b112      	cbz	r2, 10020958 <_strtoll_l.constprop.0+0xec>
10020952:	4240      	negs	r0, r0
10020954:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10020958:	f1ba 0f00 	cmp.w	sl, #0
1002095c:	d003      	beq.n	10020966 <_strtoll_l.constprop.0+0xfa>
1002095e:	2b00      	cmp	r3, #0
10020960:	d13d      	bne.n	100209de <_strtoll_l.constprop.0+0x172>
10020962:	f8ca 9000 	str.w	r9, [sl]
10020966:	b005      	add	sp, #20
10020968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1002096c:	42a2      	cmp	r2, r4
1002096e:	dab0      	bge.n	100208d2 <_strtoll_l.constprop.0+0x66>
10020970:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10020974:	e7b8      	b.n	100208e8 <_strtoll_l.constprop.0+0x7c>
10020976:	9a03      	ldr	r2, [sp, #12]
10020978:	2322      	movs	r3, #34	@ 0x22
1002097a:	6013      	str	r3, [r2, #0]
1002097c:	f1ba 0f00 	cmp.w	sl, #0
10020980:	d028      	beq.n	100209d4 <_strtoll_l.constprop.0+0x168>
10020982:	e9dd 0100 	ldrd	r0, r1, [sp]
10020986:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
1002098a:	e7ea      	b.n	10020962 <_strtoll_l.constprop.0+0xf6>
1002098c:	9300      	str	r3, [sp, #0]
1002098e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
10020992:	2301      	movs	r3, #1
10020994:	782c      	ldrb	r4, [r5, #0]
10020996:	e9cd 0301 	strd	r0, r3, [sp, #4]
1002099a:	1c8d      	adds	r5, r1, #2
1002099c:	e781      	b.n	100208a2 <_strtoll_l.constprop.0+0x36>
1002099e:	782b      	ldrb	r3, [r5, #0]
100209a0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
100209a4:	2b58      	cmp	r3, #88	@ 0x58
100209a6:	d00e      	beq.n	100209c6 <_strtoll_l.constprop.0+0x15a>
100209a8:	2708      	movs	r7, #8
100209aa:	46b0      	mov	r8, r6
100209ac:	463e      	mov	r6, r7
100209ae:	e77f      	b.n	100208b0 <_strtoll_l.constprop.0+0x44>
100209b0:	2c30      	cmp	r4, #48	@ 0x30
100209b2:	d003      	beq.n	100209bc <_strtoll_l.constprop.0+0x150>
100209b4:	4637      	mov	r7, r6
100209b6:	f04f 0800 	mov.w	r8, #0
100209ba:	e779      	b.n	100208b0 <_strtoll_l.constprop.0+0x44>
100209bc:	782b      	ldrb	r3, [r5, #0]
100209be:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
100209c2:	2b58      	cmp	r3, #88	@ 0x58
100209c4:	d1f6      	bne.n	100209b4 <_strtoll_l.constprop.0+0x148>
100209c6:	2710      	movs	r7, #16
100209c8:	786c      	ldrb	r4, [r5, #1]
100209ca:	f04f 0800 	mov.w	r8, #0
100209ce:	3502      	adds	r5, #2
100209d0:	463e      	mov	r6, r7
100209d2:	e76d      	b.n	100208b0 <_strtoll_l.constprop.0+0x44>
100209d4:	e9dd 0100 	ldrd	r0, r1, [sp]
100209d8:	b005      	add	sp, #20
100209da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100209de:	e9cd 0100 	strd	r0, r1, [sp]
100209e2:	e7ce      	b.n	10020982 <_strtoll_l.constprop.0+0x116>
100209e4:	1002553d 	.word	0x1002553d

100209e8 <_strtoll_r>:
100209e8:	f7ff bf40 	b.w	1002086c <_strtoll_l.constprop.0>

100209ec <__libc_fini_array>:
100209ec:	b538      	push	{r3, r4, r5, lr}
100209ee:	4d07      	ldr	r5, [pc, #28]	@ (10020a0c <__libc_fini_array+0x20>)
100209f0:	4c07      	ldr	r4, [pc, #28]	@ (10020a10 <__libc_fini_array+0x24>)
100209f2:	1b2c      	subs	r4, r5, r4
100209f4:	10a4      	asrs	r4, r4, #2
100209f6:	d005      	beq.n	10020a04 <__libc_fini_array+0x18>
100209f8:	3c01      	subs	r4, #1
100209fa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
100209fe:	4798      	blx	r3
10020a00:	2c00      	cmp	r4, #0
10020a02:	d1f9      	bne.n	100209f8 <__libc_fini_array+0xc>
10020a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10020a08:	f00b bda2 	b.w	1002c550 <_fini>
10020a0c:	20000bcc 	.word	0x20000bcc
10020a10:	20000bc8 	.word	0x20000bc8

10020a14 <_strtoull_l.constprop.0>:
10020a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10020a18:	b085      	sub	sp, #20
10020a1a:	468b      	mov	fp, r1
10020a1c:	9201      	str	r2, [sp, #4]
10020a1e:	4a60      	ldr	r2, [pc, #384]	@ (10020ba0 <_strtoull_l.constprop.0+0x18c>)
10020a20:	9003      	str	r0, [sp, #12]
10020a22:	461e      	mov	r6, r3
10020a24:	460d      	mov	r5, r1
10020a26:	4629      	mov	r1, r5
10020a28:	f815 4b01 	ldrb.w	r4, [r5], #1
10020a2c:	5d13      	ldrb	r3, [r2, r4]
10020a2e:	f013 0308 	ands.w	r3, r3, #8
10020a32:	d1f8      	bne.n	10020a26 <_strtoull_l.constprop.0+0x12>
10020a34:	2c2d      	cmp	r4, #45	@ 0x2d
10020a36:	d07e      	beq.n	10020b36 <_strtoull_l.constprop.0+0x122>
10020a38:	2c2b      	cmp	r4, #43	@ 0x2b
10020a3a:	bf03      	ittte	eq
10020a3c:	782c      	ldrbeq	r4, [r5, #0]
10020a3e:	9302      	streq	r3, [sp, #8]
10020a40:	1c8d      	addeq	r5, r1, #2
10020a42:	9302      	strne	r3, [sp, #8]
10020a44:	b96e      	cbnz	r6, 10020a62 <_strtoull_l.constprop.0+0x4e>
10020a46:	2c30      	cmp	r4, #48	@ 0x30
10020a48:	f000 8086 	beq.w	10020b58 <_strtoull_l.constprop.0+0x144>
10020a4c:	f04f 090a 	mov.w	r9, #10
10020a50:	46b2      	mov	sl, r6
10020a52:	f8df 8150 	ldr.w	r8, [pc, #336]	@ 10020ba4 <_strtoull_l.constprop.0+0x190>
10020a56:	f04f 0c05 	mov.w	ip, #5
10020a5a:	f04f 3799 	mov.w	r7, #2576980377	@ 0x99999999
10020a5e:	464e      	mov	r6, r9
10020a60:	e017      	b.n	10020a92 <_strtoull_l.constprop.0+0x7e>
10020a62:	2e10      	cmp	r6, #16
10020a64:	d06c      	beq.n	10020b40 <_strtoull_l.constprop.0+0x12c>
10020a66:	ea4f 7ae6 	mov.w	sl, r6, asr #31
10020a6a:	4632      	mov	r2, r6
10020a6c:	4653      	mov	r3, sl
10020a6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10020a72:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
10020a76:	f001 fdf5 	bl	10022664 <__aeabi_uldivmod>
10020a7a:	4632      	mov	r2, r6
10020a7c:	4607      	mov	r7, r0
10020a7e:	4688      	mov	r8, r1
10020a80:	4653      	mov	r3, sl
10020a82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10020a86:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
10020a8a:	f001 fdeb 	bl	10022664 <__aeabi_uldivmod>
10020a8e:	46b1      	mov	r9, r6
10020a90:	4694      	mov	ip, r2
10020a92:	2200      	movs	r2, #0
10020a94:	4610      	mov	r0, r2
10020a96:	4611      	mov	r1, r2
10020a98:	e010      	b.n	10020abc <_strtoull_l.constprop.0+0xa8>
10020a9a:	4541      	cmp	r1, r8
10020a9c:	bf08      	it	eq
10020a9e:	42b8      	cmpeq	r0, r7
10020aa0:	d039      	beq.n	10020b16 <_strtoull_l.constprop.0+0x102>
10020aa2:	fb00 f20a 	mul.w	r2, r0, sl
10020aa6:	fb09 2101 	mla	r1, r9, r1, r2
10020aaa:	fba0 0209 	umull	r0, r2, r0, r9
10020aae:	4411      	add	r1, r2
10020ab0:	1818      	adds	r0, r3, r0
10020ab2:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
10020ab6:	2201      	movs	r2, #1
10020ab8:	f815 4b01 	ldrb.w	r4, [r5], #1
10020abc:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
10020ac0:	2b09      	cmp	r3, #9
10020ac2:	d905      	bls.n	10020ad0 <_strtoull_l.constprop.0+0xbc>
10020ac4:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
10020ac8:	2b19      	cmp	r3, #25
10020aca:	d80c      	bhi.n	10020ae6 <_strtoull_l.constprop.0+0xd2>
10020acc:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
10020ad0:	429e      	cmp	r6, r3
10020ad2:	dd10      	ble.n	10020af6 <_strtoull_l.constprop.0+0xe2>
10020ad4:	1c54      	adds	r4, r2, #1
10020ad6:	d0ef      	beq.n	10020ab8 <_strtoull_l.constprop.0+0xa4>
10020ad8:	4287      	cmp	r7, r0
10020ada:	eb78 0201 	sbcs.w	r2, r8, r1
10020ade:	d2dc      	bcs.n	10020a9a <_strtoull_l.constprop.0+0x86>
10020ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10020ae4:	e7e8      	b.n	10020ab8 <_strtoull_l.constprop.0+0xa4>
10020ae6:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
10020aea:	2b19      	cmp	r3, #25
10020aec:	d803      	bhi.n	10020af6 <_strtoull_l.constprop.0+0xe2>
10020aee:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
10020af2:	429e      	cmp	r6, r3
10020af4:	dcee      	bgt.n	10020ad4 <_strtoull_l.constprop.0+0xc0>
10020af6:	1c53      	adds	r3, r2, #1
10020af8:	d012      	beq.n	10020b20 <_strtoull_l.constprop.0+0x10c>
10020afa:	9b02      	ldr	r3, [sp, #8]
10020afc:	b113      	cbz	r3, 10020b04 <_strtoull_l.constprop.0+0xf0>
10020afe:	4240      	negs	r0, r0
10020b00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10020b04:	9b01      	ldr	r3, [sp, #4]
10020b06:	b11b      	cbz	r3, 10020b10 <_strtoull_l.constprop.0+0xfc>
10020b08:	b992      	cbnz	r2, 10020b30 <_strtoull_l.constprop.0+0x11c>
10020b0a:	9b01      	ldr	r3, [sp, #4]
10020b0c:	f8c3 b000 	str.w	fp, [r3]
10020b10:	b005      	add	sp, #20
10020b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10020b16:	4563      	cmp	r3, ip
10020b18:	ddc3      	ble.n	10020aa2 <_strtoull_l.constprop.0+0x8e>
10020b1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10020b1e:	e7cb      	b.n	10020ab8 <_strtoull_l.constprop.0+0xa4>
10020b20:	9903      	ldr	r1, [sp, #12]
10020b22:	2322      	movs	r3, #34	@ 0x22
10020b24:	600b      	str	r3, [r1, #0]
10020b26:	9b01      	ldr	r3, [sp, #4]
10020b28:	4610      	mov	r0, r2
10020b2a:	4611      	mov	r1, r2
10020b2c:	2b00      	cmp	r3, #0
10020b2e:	d0ef      	beq.n	10020b10 <_strtoull_l.constprop.0+0xfc>
10020b30:	f105 3bff 	add.w	fp, r5, #4294967295	@ 0xffffffff
10020b34:	e7e9      	b.n	10020b0a <_strtoull_l.constprop.0+0xf6>
10020b36:	2301      	movs	r3, #1
10020b38:	782c      	ldrb	r4, [r5, #0]
10020b3a:	9302      	str	r3, [sp, #8]
10020b3c:	1c8d      	adds	r5, r1, #2
10020b3e:	e781      	b.n	10020a44 <_strtoull_l.constprop.0+0x30>
10020b40:	2c30      	cmp	r4, #48	@ 0x30
10020b42:	d019      	beq.n	10020b78 <_strtoull_l.constprop.0+0x164>
10020b44:	f04f 0c0f 	mov.w	ip, #15
10020b48:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
10020b4c:	f06f 4870 	mvn.w	r8, #4026531840	@ 0xf0000000
10020b50:	46b1      	mov	r9, r6
10020b52:	f04f 0a00 	mov.w	sl, #0
10020b56:	e79c      	b.n	10020a92 <_strtoull_l.constprop.0+0x7e>
10020b58:	782b      	ldrb	r3, [r5, #0]
10020b5a:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
10020b5e:	2b58      	cmp	r3, #88	@ 0x58
10020b60:	d00f      	beq.n	10020b82 <_strtoull_l.constprop.0+0x16e>
10020b62:	f04f 0908 	mov.w	r9, #8
10020b66:	46b2      	mov	sl, r6
10020b68:	f04f 0c07 	mov.w	ip, #7
10020b6c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
10020b70:	f06f 4860 	mvn.w	r8, #3758096384	@ 0xe0000000
10020b74:	464e      	mov	r6, r9
10020b76:	e78c      	b.n	10020a92 <_strtoull_l.constprop.0+0x7e>
10020b78:	782b      	ldrb	r3, [r5, #0]
10020b7a:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
10020b7e:	2b58      	cmp	r3, #88	@ 0x58
10020b80:	d1e0      	bne.n	10020b44 <_strtoull_l.constprop.0+0x130>
10020b82:	f04f 0910 	mov.w	r9, #16
10020b86:	786c      	ldrb	r4, [r5, #1]
10020b88:	f04f 0c0f 	mov.w	ip, #15
10020b8c:	3502      	adds	r5, #2
10020b8e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
10020b92:	f06f 4870 	mvn.w	r8, #4026531840	@ 0xf0000000
10020b96:	f04f 0a00 	mov.w	sl, #0
10020b9a:	464e      	mov	r6, r9
10020b9c:	e779      	b.n	10020a92 <_strtoull_l.constprop.0+0x7e>
10020b9e:	bf00      	nop
10020ba0:	1002553d 	.word	0x1002553d
10020ba4:	19999999 	.word	0x19999999

10020ba8 <_strtoull_r>:
10020ba8:	f7ff bf34 	b.w	10020a14 <_strtoull_l.constprop.0>

10020bac <_mbrtowc_r>:
10020bac:	b570      	push	{r4, r5, r6, lr}
10020bae:	b082      	sub	sp, #8
10020bb0:	4604      	mov	r4, r0
10020bb2:	9d06      	ldr	r5, [sp, #24]
10020bb4:	b155      	cbz	r5, 10020bcc <_mbrtowc_r+0x20>
10020bb6:	4810      	ldr	r0, [pc, #64]	@ (10020bf8 <_mbrtowc_r+0x4c>)
10020bb8:	f8d0 60e4 	ldr.w	r6, [r0, #228]	@ 0xe4
10020bbc:	9500      	str	r5, [sp, #0]
10020bbe:	b16a      	cbz	r2, 10020bdc <_mbrtowc_r+0x30>
10020bc0:	4620      	mov	r0, r4
10020bc2:	47b0      	blx	r6
10020bc4:	1c43      	adds	r3, r0, #1
10020bc6:	d010      	beq.n	10020bea <_mbrtowc_r+0x3e>
10020bc8:	b002      	add	sp, #8
10020bca:	bd70      	pop	{r4, r5, r6, pc}
10020bcc:	f100 05f4 	add.w	r5, r0, #244	@ 0xf4
10020bd0:	4809      	ldr	r0, [pc, #36]	@ (10020bf8 <_mbrtowc_r+0x4c>)
10020bd2:	f8d0 60e4 	ldr.w	r6, [r0, #228]	@ 0xe4
10020bd6:	9500      	str	r5, [sp, #0]
10020bd8:	2a00      	cmp	r2, #0
10020bda:	d1f1      	bne.n	10020bc0 <_mbrtowc_r+0x14>
10020bdc:	2301      	movs	r3, #1
10020bde:	4611      	mov	r1, r2
10020be0:	4620      	mov	r0, r4
10020be2:	4a06      	ldr	r2, [pc, #24]	@ (10020bfc <_mbrtowc_r+0x50>)
10020be4:	47b0      	blx	r6
10020be6:	1c43      	adds	r3, r0, #1
10020be8:	d1ee      	bne.n	10020bc8 <_mbrtowc_r+0x1c>
10020bea:	2200      	movs	r2, #0
10020bec:	238a      	movs	r3, #138	@ 0x8a
10020bee:	602a      	str	r2, [r5, #0]
10020bf0:	6023      	str	r3, [r4, #0]
10020bf2:	b002      	add	sp, #8
10020bf4:	bd70      	pop	{r4, r5, r6, pc}
10020bf6:	bf00      	nop
10020bf8:	2000042c 	.word	0x2000042c
10020bfc:	10022c94 	.word	0x10022c94

10020c00 <_wcsnrtombs_l>:
10020c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10020c04:	b089      	sub	sp, #36	@ 0x24
10020c06:	e9dd 7a13 	ldrd	r7, sl, [sp, #76]	@ 0x4c
10020c0a:	4686      	mov	lr, r0
10020c0c:	461e      	mov	r6, r3
10020c0e:	2f00      	cmp	r7, #0
10020c10:	d053      	beq.n	10020cba <_wcsnrtombs_l+0xba>
10020c12:	6815      	ldr	r5, [r2, #0]
10020c14:	2900      	cmp	r1, #0
10020c16:	d055      	beq.n	10020cc4 <_wcsnrtombs_l+0xc4>
10020c18:	9b12      	ldr	r3, [sp, #72]	@ 0x48
10020c1a:	2b00      	cmp	r3, #0
10020c1c:	d062      	beq.n	10020ce4 <_wcsnrtombs_l+0xe4>
10020c1e:	1e74      	subs	r4, r6, #1
10020c20:	b32e      	cbz	r6, 10020c6e <_wcsnrtombs_l+0x6e>
10020c22:	e9cd e100 	strd	lr, r1, [sp]
10020c26:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
10020c2a:	9102      	str	r1, [sp, #8]
10020c2c:	3d04      	subs	r5, #4
10020c2e:	2600      	movs	r6, #0
10020c30:	9203      	str	r2, [sp, #12]
10020c32:	e00a      	b.n	10020c4a <_wcsnrtombs_l+0x4a>
10020c34:	9b01      	ldr	r3, [sp, #4]
10020c36:	b9f3      	cbnz	r3, 10020c76 <_wcsnrtombs_l+0x76>
10020c38:	6828      	ldr	r0, [r5, #0]
10020c3a:	2800      	cmp	r0, #0
10020c3c:	d031      	beq.n	10020ca2 <_wcsnrtombs_l+0xa2>
10020c3e:	45dc      	cmp	ip, fp
10020c40:	d252      	bcs.n	10020ce8 <_wcsnrtombs_l+0xe8>
10020c42:	3c01      	subs	r4, #1
10020c44:	1c63      	adds	r3, r4, #1
10020c46:	4666      	mov	r6, ip
10020c48:	d011      	beq.n	10020c6e <_wcsnrtombs_l+0x6e>
10020c4a:	f855 2f04 	ldr.w	r2, [r5, #4]!
10020c4e:	9800      	ldr	r0, [sp, #0]
10020c50:	f8da c0e0 	ldr.w	ip, [sl, #224]	@ 0xe0
10020c54:	463b      	mov	r3, r7
10020c56:	a905      	add	r1, sp, #20
10020c58:	e9d7 9800 	ldrd	r9, r8, [r7]
10020c5c:	47e0      	blx	ip
10020c5e:	1c42      	adds	r2, r0, #1
10020c60:	d034      	beq.n	10020ccc <_wcsnrtombs_l+0xcc>
10020c62:	eb00 0c06 	add.w	ip, r0, r6
10020c66:	45dc      	cmp	ip, fp
10020c68:	d9e4      	bls.n	10020c34 <_wcsnrtombs_l+0x34>
10020c6a:	e9c7 9800 	strd	r9, r8, [r7]
10020c6e:	4630      	mov	r0, r6
10020c70:	b009      	add	sp, #36	@ 0x24
10020c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10020c76:	2800      	cmp	r0, #0
10020c78:	dd0c      	ble.n	10020c94 <_wcsnrtombs_l+0x94>
10020c7a:	9b02      	ldr	r3, [sp, #8]
10020c7c:	4418      	add	r0, r3
10020c7e:	1e5a      	subs	r2, r3, #1
10020c80:	a905      	add	r1, sp, #20
10020c82:	f100 3eff 	add.w	lr, r0, #4294967295	@ 0xffffffff
10020c86:	f811 3b01 	ldrb.w	r3, [r1], #1
10020c8a:	f802 3f01 	strb.w	r3, [r2, #1]!
10020c8e:	4596      	cmp	lr, r2
10020c90:	d1f9      	bne.n	10020c86 <_wcsnrtombs_l+0x86>
10020c92:	9002      	str	r0, [sp, #8]
10020c94:	9b03      	ldr	r3, [sp, #12]
10020c96:	6828      	ldr	r0, [r5, #0]
10020c98:	681a      	ldr	r2, [r3, #0]
10020c9a:	3204      	adds	r2, #4
10020c9c:	601a      	str	r2, [r3, #0]
10020c9e:	2800      	cmp	r0, #0
10020ca0:	d1cd      	bne.n	10020c3e <_wcsnrtombs_l+0x3e>
10020ca2:	9901      	ldr	r1, [sp, #4]
10020ca4:	9a03      	ldr	r2, [sp, #12]
10020ca6:	b101      	cbz	r1, 10020caa <_wcsnrtombs_l+0xaa>
10020ca8:	6010      	str	r0, [r2, #0]
10020caa:	f10c 36ff 	add.w	r6, ip, #4294967295	@ 0xffffffff
10020cae:	2200      	movs	r2, #0
10020cb0:	4630      	mov	r0, r6
10020cb2:	603a      	str	r2, [r7, #0]
10020cb4:	b009      	add	sp, #36	@ 0x24
10020cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10020cba:	6815      	ldr	r5, [r2, #0]
10020cbc:	f500 7786 	add.w	r7, r0, #268	@ 0x10c
10020cc0:	2900      	cmp	r1, #0
10020cc2:	d1a9      	bne.n	10020c18 <_wcsnrtombs_l+0x18>
10020cc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10020cc8:	9312      	str	r3, [sp, #72]	@ 0x48
10020cca:	e7a8      	b.n	10020c1e <_wcsnrtombs_l+0x1e>
10020ccc:	f8dd e000 	ldr.w	lr, [sp]
10020cd0:	4606      	mov	r6, r0
10020cd2:	218a      	movs	r1, #138	@ 0x8a
10020cd4:	2200      	movs	r2, #0
10020cd6:	4630      	mov	r0, r6
10020cd8:	f8ce 1000 	str.w	r1, [lr]
10020cdc:	603a      	str	r2, [r7, #0]
10020cde:	b009      	add	sp, #36	@ 0x24
10020ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10020ce4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10020ce6:	e7c2      	b.n	10020c6e <_wcsnrtombs_l+0x6e>
10020ce8:	4666      	mov	r6, ip
10020cea:	e7c0      	b.n	10020c6e <_wcsnrtombs_l+0x6e>

10020cec <_wcsnrtombs_r>:
10020cec:	b510      	push	{r4, lr}
10020cee:	b084      	sub	sp, #16
10020cf0:	4c05      	ldr	r4, [pc, #20]	@ (10020d08 <_wcsnrtombs_r+0x1c>)
10020cf2:	9806      	ldr	r0, [sp, #24]
10020cf4:	9000      	str	r0, [sp, #0]
10020cf6:	9807      	ldr	r0, [sp, #28]
10020cf8:	9001      	str	r0, [sp, #4]
10020cfa:	4804      	ldr	r0, [pc, #16]	@ (10020d0c <_wcsnrtombs_r+0x20>)
10020cfc:	6800      	ldr	r0, [r0, #0]
10020cfe:	9402      	str	r4, [sp, #8]
10020d00:	f7ff ff7e 	bl	10020c00 <_wcsnrtombs_l>
10020d04:	b004      	add	sp, #16
10020d06:	bd10      	pop	{r4, pc}
10020d08:	2000042c 	.word	0x2000042c
10020d0c:	20000598 	.word	0x20000598

10020d10 <iswspace>:
10020d10:	2100      	movs	r1, #0
10020d12:	f000 b801 	b.w	10020d18 <iswspace_l>
10020d16:	bf00      	nop

10020d18 <iswspace_l>:
10020d18:	b510      	push	{r4, lr}
10020d1a:	f000 f90d 	bl	10020f38 <_jp2uc_l>
10020d1e:	4604      	mov	r4, r0
10020d20:	f000 f972 	bl	10021008 <category>
10020d24:	f1a0 031a 	sub.w	r3, r0, #26
10020d28:	b2db      	uxtb	r3, r3
10020d2a:	2b02      	cmp	r3, #2
10020d2c:	d906      	bls.n	10020d3c <iswspace_l+0x24>
10020d2e:	f1a4 0009 	sub.w	r0, r4, #9
10020d32:	2804      	cmp	r0, #4
10020d34:	bf8c      	ite	hi
10020d36:	2000      	movhi	r0, #0
10020d38:	2001      	movls	r0, #1
10020d3a:	bd10      	pop	{r4, pc}
10020d3c:	2001      	movs	r0, #1
10020d3e:	bd10      	pop	{r4, pc}

10020d40 <__register_exitproc>:
10020d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10020d44:	4d1b      	ldr	r5, [pc, #108]	@ (10020db4 <__register_exitproc+0x74>)
10020d46:	4606      	mov	r6, r0
10020d48:	6828      	ldr	r0, [r5, #0]
10020d4a:	4698      	mov	r8, r3
10020d4c:	460f      	mov	r7, r1
10020d4e:	4691      	mov	r9, r2
10020d50:	f7f8 ff12 	bl	10019b78 <__retarget_lock_acquire_recursive>
10020d54:	4b18      	ldr	r3, [pc, #96]	@ (10020db8 <__register_exitproc+0x78>)
10020d56:	681c      	ldr	r4, [r3, #0]
10020d58:	b31c      	cbz	r4, 10020da2 <__register_exitproc+0x62>
10020d5a:	6828      	ldr	r0, [r5, #0]
10020d5c:	6865      	ldr	r5, [r4, #4]
10020d5e:	2d1f      	cmp	r5, #31
10020d60:	dc22      	bgt.n	10020da8 <__register_exitproc+0x68>
10020d62:	b94e      	cbnz	r6, 10020d78 <__register_exitproc+0x38>
10020d64:	1c6b      	adds	r3, r5, #1
10020d66:	3502      	adds	r5, #2
10020d68:	6063      	str	r3, [r4, #4]
10020d6a:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
10020d6e:	f7f8 ff05 	bl	10019b7c <__retarget_lock_release_recursive>
10020d72:	2000      	movs	r0, #0
10020d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10020d78:	eb04 0185 	add.w	r1, r4, r5, lsl #2
10020d7c:	2301      	movs	r3, #1
10020d7e:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
10020d82:	f8d4 2188 	ldr.w	r2, [r4, #392]	@ 0x188
10020d86:	40ab      	lsls	r3, r5
10020d88:	431a      	orrs	r2, r3
10020d8a:	2e02      	cmp	r6, #2
10020d8c:	f8c4 2188 	str.w	r2, [r4, #392]	@ 0x188
10020d90:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
10020d94:	d1e6      	bne.n	10020d64 <__register_exitproc+0x24>
10020d96:	f8d4 218c 	ldr.w	r2, [r4, #396]	@ 0x18c
10020d9a:	431a      	orrs	r2, r3
10020d9c:	f8c4 218c 	str.w	r2, [r4, #396]	@ 0x18c
10020da0:	e7e0      	b.n	10020d64 <__register_exitproc+0x24>
10020da2:	4c06      	ldr	r4, [pc, #24]	@ (10020dbc <__register_exitproc+0x7c>)
10020da4:	601c      	str	r4, [r3, #0]
10020da6:	e7d8      	b.n	10020d5a <__register_exitproc+0x1a>
10020da8:	f7f8 fee8 	bl	10019b7c <__retarget_lock_release_recursive>
10020dac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10020db0:	e7e0      	b.n	10020d74 <__register_exitproc+0x34>
10020db2:	bf00      	nop
10020db4:	200006c0 	.word	0x200006c0
10020db8:	200015d4 	.word	0x200015d4
10020dbc:	200015d8 	.word	0x200015d8

10020dc0 <nan>:
10020dc0:	4901      	ldr	r1, [pc, #4]	@ (10020dc8 <nan+0x8>)
10020dc2:	2000      	movs	r0, #0
10020dc4:	4770      	bx	lr
10020dc6:	bf00      	nop
10020dc8:	7ff80000 	.word	0x7ff80000

10020dcc <nanf>:
10020dcc:	4800      	ldr	r0, [pc, #0]	@ (10020dd0 <nanf+0x4>)
10020dce:	4770      	bx	lr
10020dd0:	7fc00000 	.word	0x7fc00000

10020dd4 <__assert_func>:
10020dd4:	b500      	push	{lr}
10020dd6:	4c0b      	ldr	r4, [pc, #44]	@ (10020e04 <__assert_func+0x30>)
10020dd8:	6825      	ldr	r5, [r4, #0]
10020dda:	4614      	mov	r4, r2
10020ddc:	68ee      	ldr	r6, [r5, #12]
10020dde:	461a      	mov	r2, r3
10020de0:	b085      	sub	sp, #20
10020de2:	4603      	mov	r3, r0
10020de4:	460d      	mov	r5, r1
10020de6:	b14c      	cbz	r4, 10020dfc <__assert_func+0x28>
10020de8:	4907      	ldr	r1, [pc, #28]	@ (10020e08 <__assert_func+0x34>)
10020dea:	9500      	str	r5, [sp, #0]
10020dec:	e9cd 1401 	strd	r1, r4, [sp, #4]
10020df0:	4630      	mov	r0, r6
10020df2:	4906      	ldr	r1, [pc, #24]	@ (10020e0c <__assert_func+0x38>)
10020df4:	f000 fd48 	bl	10021888 <fiprintf>
10020df8:	f000 fed2 	bl	10021ba0 <abort>
10020dfc:	4904      	ldr	r1, [pc, #16]	@ (10020e10 <__assert_func+0x3c>)
10020dfe:	460c      	mov	r4, r1
10020e00:	e7f3      	b.n	10020dea <__assert_func+0x16>
10020e02:	bf00      	nop
10020e04:	20000598 	.word	0x20000598
10020e08:	100258d8 	.word	0x100258d8
10020e0c:	100258e8 	.word	0x100258e8
10020e10:	10022c94 	.word	0x10022c94

10020e14 <__jp2uc>:
10020e14:	2902      	cmp	r1, #2
10020e16:	f3c0 2207 	ubfx	r2, r0, #8, #8
10020e1a:	b2c3      	uxtb	r3, r0
10020e1c:	d025      	beq.n	10020e6a <__jp2uc+0x56>
10020e1e:	2903      	cmp	r1, #3
10020e20:	d11e      	bne.n	10020e60 <__jp2uc+0x4c>
10020e22:	f102 0150 	add.w	r1, r2, #80	@ 0x50
10020e26:	b2c9      	uxtb	r1, r1
10020e28:	291f      	cmp	r1, #31
10020e2a:	d90b      	bls.n	10020e44 <__jp2uc+0x30>
10020e2c:	f102 0130 	add.w	r1, r2, #48	@ 0x30
10020e30:	b2c9      	uxtb	r1, r1
10020e32:	2924      	cmp	r1, #36	@ 0x24
10020e34:	d834      	bhi.n	10020ea0 <__jp2uc+0x8c>
10020e36:	f24f 41a6 	movw	r1, #62630	@ 0xf4a6
10020e3a:	4288      	cmp	r0, r1
10020e3c:	d926      	bls.n	10020e8c <__jp2uc+0x78>
10020e3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10020e42:	4770      	bx	lr
10020e44:	f64c 71d3 	movw	r1, #53203	@ 0xcfd3
10020e48:	4288      	cmp	r0, r1
10020e4a:	d8f8      	bhi.n	10020e3e <__jp2uc+0x2a>
10020e4c:	3ab0      	subs	r2, #176	@ 0xb0
10020e4e:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7
10020e52:	3ba1      	subs	r3, #161	@ 0xa1
10020e54:	4930      	ldr	r1, [pc, #192]	@ (10020f18 <__jp2uc+0x104>)
10020e56:	eb03 0342 	add.w	r3, r3, r2, lsl #1
10020e5a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
10020e5e:	4770      	bx	lr
10020e60:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
10020e64:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
10020e68:	e7db      	b.n	10020e22 <__jp2uc+0xe>
10020e6a:	2b9e      	cmp	r3, #158	@ 0x9e
10020e6c:	d90a      	bls.n	10020e84 <__jp2uc+0x70>
10020e6e:	3323      	adds	r3, #35	@ 0x23
10020e70:	b2db      	uxtb	r3, r3
10020e72:	2180      	movs	r1, #128	@ 0x80
10020e74:	2a9f      	cmp	r2, #159	@ 0x9f
10020e76:	bf94      	ite	ls
10020e78:	3a70      	subls	r2, #112	@ 0x70
10020e7a:	3250      	addhi	r2, #80	@ 0x50
10020e7c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
10020e80:	b2ca      	uxtb	r2, r1
10020e82:	e7ce      	b.n	10020e22 <__jp2uc+0xe>
10020e84:	3b7e      	subs	r3, #126	@ 0x7e
10020e86:	b2db      	uxtb	r3, r3
10020e88:	217f      	movs	r1, #127	@ 0x7f
10020e8a:	e7f3      	b.n	10020e74 <__jp2uc+0x60>
10020e8c:	3ad0      	subs	r2, #208	@ 0xd0
10020e8e:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7
10020e92:	3ba1      	subs	r3, #161	@ 0xa1
10020e94:	4921      	ldr	r1, [pc, #132]	@ (10020f1c <__jp2uc+0x108>)
10020e96:	eb03 0342 	add.w	r3, r3, r2, lsl #1
10020e9a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
10020e9e:	4770      	bx	lr
10020ea0:	3aa1      	subs	r2, #161	@ 0xa1
10020ea2:	2a07      	cmp	r2, #7
10020ea4:	d8cb      	bhi.n	10020e3e <__jp2uc+0x2a>
10020ea6:	e8df f002 	tbb	[pc, r2]
10020eaa:	2831      	.short	0x2831
10020eac:	0f13181e 	.word	0x0f13181e
10020eb0:	040b      	.short	0x040b
10020eb2:	2bc0      	cmp	r3, #192	@ 0xc0
10020eb4:	d8c3      	bhi.n	10020e3e <__jp2uc+0x2a>
10020eb6:	4a1a      	ldr	r2, [pc, #104]	@ (10020f20 <__jp2uc+0x10c>)
10020eb8:	3ba1      	subs	r3, #161	@ 0xa1
10020eba:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
10020ebe:	4770      	bx	lr
10020ec0:	2bf1      	cmp	r3, #241	@ 0xf1
10020ec2:	d8bc      	bhi.n	10020e3e <__jp2uc+0x2a>
10020ec4:	4a17      	ldr	r2, [pc, #92]	@ (10020f24 <__jp2uc+0x110>)
10020ec6:	e019      	b.n	10020efc <__jp2uc+0xe8>
10020ec8:	2bd8      	cmp	r3, #216	@ 0xd8
10020eca:	d8b8      	bhi.n	10020e3e <__jp2uc+0x2a>
10020ecc:	4a16      	ldr	r2, [pc, #88]	@ (10020f28 <__jp2uc+0x114>)
10020ece:	e015      	b.n	10020efc <__jp2uc+0xe8>
10020ed0:	2bf6      	cmp	r3, #246	@ 0xf6
10020ed2:	d8b4      	bhi.n	10020e3e <__jp2uc+0x2a>
10020ed4:	f503 5040 	add.w	r0, r3, #12288	@ 0x3000
10020ed8:	4770      	bx	lr
10020eda:	2bf3      	cmp	r3, #243	@ 0xf3
10020edc:	d8af      	bhi.n	10020e3e <__jp2uc+0x2a>
10020ede:	f503 503e 	add.w	r0, r3, #12160	@ 0x2f80
10020ee2:	3020      	adds	r0, #32
10020ee4:	4770      	bx	lr
10020ee6:	4a11      	ldr	r2, [pc, #68]	@ (10020f2c <__jp2uc+0x118>)
10020ee8:	441a      	add	r2, r3
10020eea:	f812 2ca1 	ldrb.w	r2, [r2, #-161]
10020eee:	2a00      	cmp	r2, #0
10020ef0:	d0a5      	beq.n	10020e3e <__jp2uc+0x2a>
10020ef2:	f503 407e 	add.w	r0, r3, #65024	@ 0xfe00
10020ef6:	3060      	adds	r0, #96	@ 0x60
10020ef8:	4770      	bx	lr
10020efa:	4a0d      	ldr	r2, [pc, #52]	@ (10020f30 <__jp2uc+0x11c>)
10020efc:	3ba1      	subs	r3, #161	@ 0xa1
10020efe:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
10020f02:	2800      	cmp	r0, #0
10020f04:	bf08      	it	eq
10020f06:	f04f 30ff 	moveq.w	r0, #4294967295	@ 0xffffffff
10020f0a:	4770      	bx	lr
10020f0c:	4a09      	ldr	r2, [pc, #36]	@ (10020f34 <__jp2uc+0x120>)
10020f0e:	3ba1      	subs	r3, #161	@ 0xa1
10020f10:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
10020f14:	4770      	bx	lr
10020f16:	bf00      	nop
10020f18:	100273a8 	.word	0x100273a8
10020f1c:	1002592c 	.word	0x1002592c
10020f20:	10028ad4 	.word	0x10028ad4
10020f24:	10028b14 	.word	0x10028b14
10020f28:	10028bb8 	.word	0x10028bb8
10020f2c:	10028c28 	.word	0x10028c28
10020f30:	10028c84 	.word	0x10028c84
10020f34:	10028d40 	.word	0x10028d40

10020f38 <_jp2uc_l>:
10020f38:	b538      	push	{r3, r4, r5, lr}
10020f3a:	4605      	mov	r5, r0
10020f3c:	b1b9      	cbz	r1, 10020f6e <_jp2uc_l+0x36>
10020f3e:	f501 7495 	add.w	r4, r1, #298	@ 0x12a
10020f42:	4912      	ldr	r1, [pc, #72]	@ (10020f8c <_jp2uc_l+0x54>)
10020f44:	4620      	mov	r0, r4
10020f46:	f7f8 fc7b 	bl	10019840 <strcmp>
10020f4a:	b928      	cbnz	r0, 10020f58 <_jp2uc_l+0x20>
10020f4c:	4628      	mov	r0, r5
10020f4e:	2101      	movs	r1, #1
10020f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10020f54:	f7ff bf5e 	b.w	10020e14 <__jp2uc>
10020f58:	490d      	ldr	r1, [pc, #52]	@ (10020f90 <_jp2uc_l+0x58>)
10020f5a:	4620      	mov	r0, r4
10020f5c:	f7f8 fc70 	bl	10019840 <strcmp>
10020f60:	b938      	cbnz	r0, 10020f72 <_jp2uc_l+0x3a>
10020f62:	4628      	mov	r0, r5
10020f64:	2102      	movs	r1, #2
10020f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10020f6a:	f7ff bf53 	b.w	10020e14 <__jp2uc>
10020f6e:	4c09      	ldr	r4, [pc, #36]	@ (10020f94 <_jp2uc_l+0x5c>)
10020f70:	e7e7      	b.n	10020f42 <_jp2uc_l+0xa>
10020f72:	4909      	ldr	r1, [pc, #36]	@ (10020f98 <_jp2uc_l+0x60>)
10020f74:	4620      	mov	r0, r4
10020f76:	f7f8 fc63 	bl	10019840 <strcmp>
10020f7a:	b928      	cbnz	r0, 10020f88 <_jp2uc_l+0x50>
10020f7c:	4628      	mov	r0, r5
10020f7e:	2103      	movs	r1, #3
10020f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10020f84:	f7ff bf46 	b.w	10020e14 <__jp2uc>
10020f88:	4628      	mov	r0, r5
10020f8a:	bd38      	pop	{r3, r4, r5, pc}
10020f8c:	10025918 	.word	0x10025918
10020f90:	1002591c 	.word	0x1002591c
10020f94:	20000556 	.word	0x20000556
10020f98:	10025924 	.word	0x10025924

10020f9c <_calloc_r>:
10020f9c:	b538      	push	{r3, r4, r5, lr}
10020f9e:	fba1 1402 	umull	r1, r4, r1, r2
10020fa2:	bb54      	cbnz	r4, 10020ffa <_calloc_r+0x5e>
10020fa4:	f7f3 fdf8 	bl	10014b98 <_malloc_r>
10020fa8:	4605      	mov	r5, r0
10020faa:	b350      	cbz	r0, 10021002 <_calloc_r+0x66>
10020fac:	f850 2c04 	ldr.w	r2, [r0, #-4]
10020fb0:	f022 0203 	bic.w	r2, r2, #3
10020fb4:	3a04      	subs	r2, #4
10020fb6:	2a24      	cmp	r2, #36	@ 0x24
10020fb8:	d810      	bhi.n	10020fdc <_calloc_r+0x40>
10020fba:	2a13      	cmp	r2, #19
10020fbc:	d913      	bls.n	10020fe6 <_calloc_r+0x4a>
10020fbe:	2a1b      	cmp	r2, #27
10020fc0:	6004      	str	r4, [r0, #0]
10020fc2:	6044      	str	r4, [r0, #4]
10020fc4:	d916      	bls.n	10020ff4 <_calloc_r+0x58>
10020fc6:	2a24      	cmp	r2, #36	@ 0x24
10020fc8:	6084      	str	r4, [r0, #8]
10020fca:	60c4      	str	r4, [r0, #12]
10020fcc:	bf11      	iteee	ne
10020fce:	f100 0210 	addne.w	r2, r0, #16
10020fd2:	f100 0218 	addeq.w	r2, r0, #24
10020fd6:	6104      	streq	r4, [r0, #16]
10020fd8:	6144      	streq	r4, [r0, #20]
10020fda:	e005      	b.n	10020fe8 <_calloc_r+0x4c>
10020fdc:	4621      	mov	r1, r4
10020fde:	f7f8 faed 	bl	100195bc <memset>
10020fe2:	4628      	mov	r0, r5
10020fe4:	bd38      	pop	{r3, r4, r5, pc}
10020fe6:	4602      	mov	r2, r0
10020fe8:	2300      	movs	r3, #0
10020fea:	6013      	str	r3, [r2, #0]
10020fec:	6053      	str	r3, [r2, #4]
10020fee:	6093      	str	r3, [r2, #8]
10020ff0:	4628      	mov	r0, r5
10020ff2:	bd38      	pop	{r3, r4, r5, pc}
10020ff4:	f100 0208 	add.w	r2, r0, #8
10020ff8:	e7f6      	b.n	10020fe8 <_calloc_r+0x4c>
10020ffa:	f7f8 fc01 	bl	10019800 <__errno>
10020ffe:	230c      	movs	r3, #12
10021000:	6003      	str	r3, [r0, #0]
10021002:	2500      	movs	r5, #0
10021004:	4628      	mov	r0, r5
10021006:	bd38      	pop	{r3, r4, r5, pc}

10021008 <category>:
10021008:	4b17      	ldr	r3, [pc, #92]	@ (10021068 <category+0x60>)
1002100a:	4298      	cmp	r0, r3
1002100c:	d827      	bhi.n	1002105e <category+0x56>
1002100e:	b570      	push	{r4, r5, r6, lr}
10021010:	4d16      	ldr	r5, [pc, #88]	@ (1002106c <category+0x64>)
10021012:	f04f 0e00 	mov.w	lr, #0
10021016:	f640 04f9 	movw	r4, #2297	@ 0x8f9
1002101a:	e003      	b.n	10021024 <category+0x1c>
1002101c:	f102 0e01 	add.w	lr, r2, #1
10021020:	4574      	cmp	r4, lr
10021022:	db1a      	blt.n	1002105a <category+0x52>
10021024:	eb0e 0204 	add.w	r2, lr, r4
10021028:	f022 0301 	bic.w	r3, r2, #1
1002102c:	eb03 0362 	add.w	r3, r3, r2, asr #1
10021030:	eb05 0c43 	add.w	ip, r5, r3, lsl #1
10021034:	1052      	asrs	r2, r2, #1
10021036:	f89c 1001 	ldrb.w	r1, [ip, #1]
1002103a:	f8bc 6002 	ldrh.w	r6, [ip, #2]
1002103e:	f8bc c004 	ldrh.w	ip, [ip, #4]
10021042:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
10021046:	448c      	add	ip, r1
10021048:	4560      	cmp	r0, ip
1002104a:	ea4f 0343 	mov.w	r3, r3, lsl #1
1002104e:	d8e5      	bhi.n	1002101c <category+0x14>
10021050:	4288      	cmp	r0, r1
10021052:	d206      	bcs.n	10021062 <category+0x5a>
10021054:	1e54      	subs	r4, r2, #1
10021056:	4574      	cmp	r4, lr
10021058:	dae4      	bge.n	10021024 <category+0x1c>
1002105a:	20ff      	movs	r0, #255	@ 0xff
1002105c:	bd70      	pop	{r4, r5, r6, pc}
1002105e:	20ff      	movs	r0, #255	@ 0xff
10021060:	4770      	bx	lr
10021062:	5ce8      	ldrb	r0, [r5, r3]
10021064:	bd70      	pop	{r4, r5, r6, pc}
10021066:	bf00      	nop
10021068:	000e01ef 	.word	0x000e01ef
1002106c:	10028dfc 	.word	0x10028dfc

10021070 <rshift>:
10021070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10021074:	6904      	ldr	r4, [r0, #16]
10021076:	ebb4 1f61 	cmp.w	r4, r1, asr #5
1002107a:	dc05      	bgt.n	10021088 <rshift+0x18>
1002107c:	2300      	movs	r3, #0
1002107e:	6103      	str	r3, [r0, #16]
10021080:	2300      	movs	r3, #0
10021082:	6143      	str	r3, [r0, #20]
10021084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10021088:	f100 0514 	add.w	r5, r0, #20
1002108c:	114e      	asrs	r6, r1, #5
1002108e:	f011 0c1f 	ands.w	ip, r1, #31
10021092:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
10021096:	eb05 0386 	add.w	r3, r5, r6, lsl #2
1002109a:	d021      	beq.n	100210e0 <rshift+0x70>
1002109c:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
100210a0:	3304      	adds	r3, #4
100210a2:	459e      	cmp	lr, r3
100210a4:	fa21 f10c 	lsr.w	r1, r1, ip
100210a8:	f1cc 0820 	rsb	r8, ip, #32
100210ac:	d92d      	bls.n	1002110a <rshift+0x9a>
100210ae:	462f      	mov	r7, r5
100210b0:	681a      	ldr	r2, [r3, #0]
100210b2:	fa02 f208 	lsl.w	r2, r2, r8
100210b6:	430a      	orrs	r2, r1
100210b8:	f847 2b04 	str.w	r2, [r7], #4
100210bc:	f853 1b04 	ldr.w	r1, [r3], #4
100210c0:	459e      	cmp	lr, r3
100210c2:	fa21 f10c 	lsr.w	r1, r1, ip
100210c6:	d8f3      	bhi.n	100210b0 <rshift+0x40>
100210c8:	1ba3      	subs	r3, r4, r6
100210ca:	009b      	lsls	r3, r3, #2
100210cc:	3b05      	subs	r3, #5
100210ce:	089b      	lsrs	r3, r3, #2
100210d0:	3301      	adds	r3, #1
100210d2:	eb05 0483 	add.w	r4, r5, r3, lsl #2
100210d6:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
100210da:	b179      	cbz	r1, 100210fc <rshift+0x8c>
100210dc:	3404      	adds	r4, #4
100210de:	e00d      	b.n	100210fc <rshift+0x8c>
100210e0:	459e      	cmp	lr, r3
100210e2:	bf88      	it	hi
100210e4:	f100 0210 	addhi.w	r2, r0, #16
100210e8:	d9c8      	bls.n	1002107c <rshift+0xc>
100210ea:	f853 1b04 	ldr.w	r1, [r3], #4
100210ee:	f842 1f04 	str.w	r1, [r2, #4]!
100210f2:	459e      	cmp	lr, r3
100210f4:	d8f9      	bhi.n	100210ea <rshift+0x7a>
100210f6:	1ba4      	subs	r4, r4, r6
100210f8:	eb05 0484 	add.w	r4, r5, r4, lsl #2
100210fc:	1b63      	subs	r3, r4, r5
100210fe:	109b      	asrs	r3, r3, #2
10021100:	42ac      	cmp	r4, r5
10021102:	6103      	str	r3, [r0, #16]
10021104:	d0bc      	beq.n	10021080 <rshift+0x10>
10021106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1002110a:	6141      	str	r1, [r0, #20]
1002110c:	2900      	cmp	r1, #0
1002110e:	d0b5      	beq.n	1002107c <rshift+0xc>
10021110:	462c      	mov	r4, r5
10021112:	e7e3      	b.n	100210dc <rshift+0x6c>

10021114 <__gethex>:
10021114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10021118:	680f      	ldr	r7, [r1, #0]
1002111a:	b085      	sub	sp, #20
1002111c:	e9cd 2000 	strd	r2, r0, [sp]
10021120:	78ba      	ldrb	r2, [r7, #2]
10021122:	9303      	str	r3, [sp, #12]
10021124:	2a30      	cmp	r2, #48	@ 0x30
10021126:	4689      	mov	r9, r1
10021128:	f040 81ca 	bne.w	100214c0 <__gethex+0x3ac>
1002112c:	1cfb      	adds	r3, r7, #3
1002112e:	781a      	ldrb	r2, [r3, #0]
10021130:	2a30      	cmp	r2, #48	@ 0x30
10021132:	461c      	mov	r4, r3
10021134:	f103 0301 	add.w	r3, r3, #1
10021138:	d0f9      	beq.n	1002112e <__gethex+0x1a>
1002113a:	1be7      	subs	r7, r4, r7
1002113c:	3f02      	subs	r7, #2
1002113e:	f8df 82d8 	ldr.w	r8, [pc, #728]	@ 10021418 <__gethex+0x304>
10021142:	f818 3002 	ldrb.w	r3, [r8, r2]
10021146:	2b00      	cmp	r3, #0
10021148:	f000 80df 	beq.w	1002130a <__gethex+0x1f6>
1002114c:	7823      	ldrb	r3, [r4, #0]
1002114e:	f818 3003 	ldrb.w	r3, [r8, r3]
10021152:	f04f 0a00 	mov.w	sl, #0
10021156:	4655      	mov	r5, sl
10021158:	2b00      	cmp	r3, #0
1002115a:	f000 8150 	beq.w	100213fe <__gethex+0x2ea>
1002115e:	4626      	mov	r6, r4
10021160:	f816 3f01 	ldrb.w	r3, [r6, #1]!
10021164:	f818 3003 	ldrb.w	r3, [r8, r3]
10021168:	2b00      	cmp	r3, #0
1002116a:	d1f9      	bne.n	10021160 <__gethex+0x4c>
1002116c:	49ab      	ldr	r1, [pc, #684]	@ (1002141c <__gethex+0x308>)
1002116e:	2201      	movs	r2, #1
10021170:	4630      	mov	r0, r6
10021172:	f7ff faed 	bl	10020750 <strncmp>
10021176:	4683      	mov	fp, r0
10021178:	2800      	cmp	r0, #0
1002117a:	d04c      	beq.n	10021216 <__gethex+0x102>
1002117c:	7832      	ldrb	r2, [r6, #0]
1002117e:	2d00      	cmp	r5, #0
10021180:	f000 8180 	beq.w	10021484 <__gethex+0x370>
10021184:	1bab      	subs	r3, r5, r6
10021186:	ea4f 0b83 	mov.w	fp, r3, lsl #2
1002118a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
1002118e:	2a50      	cmp	r2, #80	@ 0x50
10021190:	4635      	mov	r5, r6
10021192:	d04c      	beq.n	1002122e <__gethex+0x11a>
10021194:	f8c9 6000 	str.w	r6, [r9]
10021198:	f1ba 0f00 	cmp.w	sl, #0
1002119c:	d165      	bne.n	1002126a <__gethex+0x156>
1002119e:	1b2a      	subs	r2, r5, r4
100211a0:	3a01      	subs	r2, #1
100211a2:	2a07      	cmp	r2, #7
100211a4:	4651      	mov	r1, sl
100211a6:	dd04      	ble.n	100211b2 <__gethex+0x9e>
100211a8:	1052      	asrs	r2, r2, #1
100211aa:	2a07      	cmp	r2, #7
100211ac:	f101 0101 	add.w	r1, r1, #1
100211b0:	dcfa      	bgt.n	100211a8 <__gethex+0x94>
100211b2:	9801      	ldr	r0, [sp, #4]
100211b4:	f7fd fad0 	bl	1001e758 <_Balloc>
100211b8:	4682      	mov	sl, r0
100211ba:	2800      	cmp	r0, #0
100211bc:	f000 8250 	beq.w	10021660 <__gethex+0x54c>
100211c0:	f100 0614 	add.w	r6, r0, #20
100211c4:	42a5      	cmp	r5, r4
100211c6:	9602      	str	r6, [sp, #8]
100211c8:	d957      	bls.n	1002127a <__gethex+0x166>
100211ca:	2700      	movs	r7, #0
100211cc:	46b9      	mov	r9, r7
100211ce:	e00d      	b.n	100211ec <__gethex+0xd8>
100211d0:	2f20      	cmp	r7, #32
100211d2:	d01a      	beq.n	1002120a <__gethex+0xf6>
100211d4:	463a      	mov	r2, r7
100211d6:	3704      	adds	r7, #4
100211d8:	782b      	ldrb	r3, [r5, #0]
100211da:	f818 3003 	ldrb.w	r3, [r8, r3]
100211de:	f003 030f 	and.w	r3, r3, #15
100211e2:	4093      	lsls	r3, r2
100211e4:	ea49 0903 	orr.w	r9, r9, r3
100211e8:	42a5      	cmp	r5, r4
100211ea:	d049      	beq.n	10021280 <__gethex+0x16c>
100211ec:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
100211f0:	2b2e      	cmp	r3, #46	@ 0x2e
100211f2:	d1ed      	bne.n	100211d0 <__gethex+0xbc>
100211f4:	42a5      	cmp	r5, r4
100211f6:	d3eb      	bcc.n	100211d0 <__gethex+0xbc>
100211f8:	4988      	ldr	r1, [pc, #544]	@ (1002141c <__gethex+0x308>)
100211fa:	2201      	movs	r2, #1
100211fc:	4628      	mov	r0, r5
100211fe:	f7ff faa7 	bl	10020750 <strncmp>
10021202:	2800      	cmp	r0, #0
10021204:	d0f0      	beq.n	100211e8 <__gethex+0xd4>
10021206:	2f20      	cmp	r7, #32
10021208:	d1e4      	bne.n	100211d4 <__gethex+0xc0>
1002120a:	2200      	movs	r2, #0
1002120c:	f846 9b04 	str.w	r9, [r6], #4
10021210:	2704      	movs	r7, #4
10021212:	4691      	mov	r9, r2
10021214:	e7e0      	b.n	100211d8 <__gethex+0xc4>
10021216:	2d00      	cmp	r5, #0
10021218:	f000 8143 	beq.w	100214a2 <__gethex+0x38e>
1002121c:	7832      	ldrb	r2, [r6, #0]
1002121e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
10021222:	1bab      	subs	r3, r5, r6
10021224:	2a50      	cmp	r2, #80	@ 0x50
10021226:	ea4f 0b83 	mov.w	fp, r3, lsl #2
1002122a:	4635      	mov	r5, r6
1002122c:	d1b2      	bne.n	10021194 <__gethex+0x80>
1002122e:	786a      	ldrb	r2, [r5, #1]
10021230:	2a2b      	cmp	r2, #43	@ 0x2b
10021232:	f000 8125 	beq.w	10021480 <__gethex+0x36c>
10021236:	2a2d      	cmp	r2, #45	@ 0x2d
10021238:	f000 80a1 	beq.w	1002137e <__gethex+0x26a>
1002123c:	1c6e      	adds	r6, r5, #1
1002123e:	2000      	movs	r0, #0
10021240:	f818 1002 	ldrb.w	r1, [r8, r2]
10021244:	1e4a      	subs	r2, r1, #1
10021246:	2a18      	cmp	r2, #24
10021248:	f200 8097 	bhi.w	1002137a <__gethex+0x266>
1002124c:	7872      	ldrb	r2, [r6, #1]
1002124e:	f818 2002 	ldrb.w	r2, [r8, r2]
10021252:	3910      	subs	r1, #16
10021254:	3601      	adds	r6, #1
10021256:	2a00      	cmp	r2, #0
10021258:	d154      	bne.n	10021304 <__gethex+0x1f0>
1002125a:	b100      	cbz	r0, 1002125e <__gethex+0x14a>
1002125c:	4249      	negs	r1, r1
1002125e:	448b      	add	fp, r1
10021260:	f8c9 6000 	str.w	r6, [r9]
10021264:	f1ba 0f00 	cmp.w	sl, #0
10021268:	d099      	beq.n	1002119e <__gethex+0x8a>
1002126a:	2f00      	cmp	r7, #0
1002126c:	bf0c      	ite	eq
1002126e:	2506      	moveq	r5, #6
10021270:	2500      	movne	r5, #0
10021272:	4628      	mov	r0, r5
10021274:	b005      	add	sp, #20
10021276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1002127a:	9e02      	ldr	r6, [sp, #8]
1002127c:	f04f 0900 	mov.w	r9, #0
10021280:	f846 9b04 	str.w	r9, [r6], #4
10021284:	9b02      	ldr	r3, [sp, #8]
10021286:	1af6      	subs	r6, r6, r3
10021288:	10b6      	asrs	r6, r6, #2
1002128a:	f8ca 6010 	str.w	r6, [sl, #16]
1002128e:	4648      	mov	r0, r9
10021290:	f7fd fb3a 	bl	1001e908 <__hi0bits>
10021294:	9b00      	ldr	r3, [sp, #0]
10021296:	0176      	lsls	r6, r6, #5
10021298:	681c      	ldr	r4, [r3, #0]
1002129a:	1a36      	subs	r6, r6, r0
1002129c:	42a6      	cmp	r6, r4
1002129e:	dc72      	bgt.n	10021386 <__gethex+0x272>
100212a0:	f2c0 80f2 	blt.w	10021488 <__gethex+0x374>
100212a4:	2700      	movs	r7, #0
100212a6:	9b00      	ldr	r3, [sp, #0]
100212a8:	689a      	ldr	r2, [r3, #8]
100212aa:	455a      	cmp	r2, fp
100212ac:	f2c0 8129 	blt.w	10021502 <__gethex+0x3ee>
100212b0:	9b00      	ldr	r3, [sp, #0]
100212b2:	685a      	ldr	r2, [r3, #4]
100212b4:	455a      	cmp	r2, fp
100212b6:	dd49      	ble.n	1002134c <__gethex+0x238>
100212b8:	eba2 0b0b 	sub.w	fp, r2, fp
100212bc:	455c      	cmp	r4, fp
100212be:	dc7f      	bgt.n	100213c0 <__gethex+0x2ac>
100212c0:	68db      	ldr	r3, [r3, #12]
100212c2:	2b02      	cmp	r3, #2
100212c4:	f000 815b 	beq.w	1002157e <__gethex+0x46a>
100212c8:	2b03      	cmp	r3, #3
100212ca:	f000 8153 	beq.w	10021574 <__gethex+0x460>
100212ce:	2b01      	cmp	r3, #1
100212d0:	f000 8136 	beq.w	10021540 <__gethex+0x42c>
100212d4:	9801      	ldr	r0, [sp, #4]
100212d6:	4651      	mov	r1, sl
100212d8:	f7fd fa64 	bl	1001e7a4 <_Bfree>
100212dc:	2550      	movs	r5, #80	@ 0x50
100212de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
100212e0:	2300      	movs	r3, #0
100212e2:	4628      	mov	r0, r5
100212e4:	6013      	str	r3, [r2, #0]
100212e6:	b005      	add	sp, #20
100212e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100212ec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
100212f0:	f816 3f01 	ldrb.w	r3, [r6, #1]!
100212f4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
100212f8:	f1a2 0110 	sub.w	r1, r2, #16
100212fc:	f818 2003 	ldrb.w	r2, [r8, r3]
10021300:	2a00      	cmp	r2, #0
10021302:	d0aa      	beq.n	1002125a <__gethex+0x146>
10021304:	2a19      	cmp	r2, #25
10021306:	ddf1      	ble.n	100212ec <__gethex+0x1d8>
10021308:	e7a7      	b.n	1002125a <__gethex+0x146>
1002130a:	4944      	ldr	r1, [pc, #272]	@ (1002141c <__gethex+0x308>)
1002130c:	2201      	movs	r2, #1
1002130e:	4620      	mov	r0, r4
10021310:	f7ff fa1e 	bl	10020750 <strncmp>
10021314:	4682      	mov	sl, r0
10021316:	2800      	cmp	r0, #0
10021318:	d173      	bne.n	10021402 <__gethex+0x2ee>
1002131a:	7863      	ldrb	r3, [r4, #1]
1002131c:	f818 2003 	ldrb.w	r2, [r8, r3]
10021320:	1c65      	adds	r5, r4, #1
10021322:	2a00      	cmp	r2, #0
10021324:	d06f      	beq.n	10021406 <__gethex+0x2f2>
10021326:	2b30      	cmp	r3, #48	@ 0x30
10021328:	462c      	mov	r4, r5
1002132a:	f040 8134 	bne.w	10021596 <__gethex+0x482>
1002132e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
10021332:	2b30      	cmp	r3, #48	@ 0x30
10021334:	d0fb      	beq.n	1002132e <__gethex+0x21a>
10021336:	f818 3003 	ldrb.w	r3, [r8, r3]
1002133a:	fab3 fa83 	clz	sl, r3
1002133e:	2701      	movs	r7, #1
10021340:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
10021344:	2b00      	cmp	r3, #0
10021346:	f47f af0a 	bne.w	1002115e <__gethex+0x4a>
1002134a:	e058      	b.n	100213fe <__gethex+0x2ea>
1002134c:	2501      	movs	r5, #1
1002134e:	b157      	cbz	r7, 10021366 <__gethex+0x252>
10021350:	9b00      	ldr	r3, [sp, #0]
10021352:	68da      	ldr	r2, [r3, #12]
10021354:	2a02      	cmp	r2, #2
10021356:	d063      	beq.n	10021420 <__gethex+0x30c>
10021358:	2a03      	cmp	r2, #3
1002135a:	d065      	beq.n	10021428 <__gethex+0x314>
1002135c:	2a01      	cmp	r2, #1
1002135e:	f000 8086 	beq.w	1002146e <__gethex+0x35a>
10021362:	f045 0510 	orr.w	r5, r5, #16
10021366:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10021368:	f8c3 a000 	str.w	sl, [r3]
1002136c:	9b03      	ldr	r3, [sp, #12]
1002136e:	4628      	mov	r0, r5
10021370:	f8c3 b000 	str.w	fp, [r3]
10021374:	b005      	add	sp, #20
10021376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1002137a:	462e      	mov	r6, r5
1002137c:	e70a      	b.n	10021194 <__gethex+0x80>
1002137e:	2001      	movs	r0, #1
10021380:	78aa      	ldrb	r2, [r5, #2]
10021382:	1cae      	adds	r6, r5, #2
10021384:	e75c      	b.n	10021240 <__gethex+0x12c>
10021386:	1b36      	subs	r6, r6, r4
10021388:	4631      	mov	r1, r6
1002138a:	4650      	mov	r0, sl
1002138c:	f7fd fed2 	bl	1001f134 <__any_on>
10021390:	4607      	mov	r7, r0
10021392:	b178      	cbz	r0, 100213b4 <__gethex+0x2a0>
10021394:	1e71      	subs	r1, r6, #1
10021396:	114a      	asrs	r2, r1, #5
10021398:	9b02      	ldr	r3, [sp, #8]
1002139a:	2701      	movs	r7, #1
1002139c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
100213a0:	f001 021f 	and.w	r2, r1, #31
100213a4:	fa07 f202 	lsl.w	r2, r7, r2
100213a8:	4202      	tst	r2, r0
100213aa:	d003      	beq.n	100213b4 <__gethex+0x2a0>
100213ac:	42b9      	cmp	r1, r7
100213ae:	f300 80b9 	bgt.w	10021524 <__gethex+0x410>
100213b2:	2702      	movs	r7, #2
100213b4:	4631      	mov	r1, r6
100213b6:	4650      	mov	r0, sl
100213b8:	44b3      	add	fp, r6
100213ba:	f7ff fe59 	bl	10021070 <rshift>
100213be:	e772      	b.n	100212a6 <__gethex+0x192>
100213c0:	f10b 36ff 	add.w	r6, fp, #4294967295	@ 0xffffffff
100213c4:	2f00      	cmp	r7, #0
100213c6:	f040 80a5 	bne.w	10021514 <__gethex+0x400>
100213ca:	2e00      	cmp	r6, #0
100213cc:	f040 80a4 	bne.w	10021518 <__gethex+0x404>
100213d0:	1173      	asrs	r3, r6, #5
100213d2:	9a02      	ldr	r2, [sp, #8]
100213d4:	f006 061f 	and.w	r6, r6, #31
100213d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
100213dc:	2301      	movs	r3, #1
100213de:	40b3      	lsls	r3, r6
100213e0:	4213      	tst	r3, r2
100213e2:	4659      	mov	r1, fp
100213e4:	4650      	mov	r0, sl
100213e6:	bf18      	it	ne
100213e8:	f047 0702 	orrne.w	r7, r7, #2
100213ec:	f7ff fe40 	bl	10021070 <rshift>
100213f0:	9b00      	ldr	r3, [sp, #0]
100213f2:	eba4 040b 	sub.w	r4, r4, fp
100213f6:	2502      	movs	r5, #2
100213f8:	f8d3 b004 	ldr.w	fp, [r3, #4]
100213fc:	e7a7      	b.n	1002134e <__gethex+0x23a>
100213fe:	4626      	mov	r6, r4
10021400:	e6b4      	b.n	1002116c <__gethex+0x58>
10021402:	7823      	ldrb	r3, [r4, #0]
10021404:	4625      	mov	r5, r4
10021406:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
1002140a:	2b50      	cmp	r3, #80	@ 0x50
1002140c:	f000 8093 	beq.w	10021536 <__gethex+0x422>
10021410:	f8c9 5000 	str.w	r5, [r9]
10021414:	e729      	b.n	1002126a <__gethex+0x156>
10021416:	bf00      	nop
10021418:	1002c444 	.word	0x1002c444
1002141c:	10022ea0 	.word	0x10022ea0
10021420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10021422:	f1c3 0301 	rsb	r3, r3, #1
10021426:	930f      	str	r3, [sp, #60]	@ 0x3c
10021428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1002142a:	2b00      	cmp	r3, #0
1002142c:	d099      	beq.n	10021362 <__gethex+0x24e>
1002142e:	f8dd 8008 	ldr.w	r8, [sp, #8]
10021432:	f8da 7010 	ldr.w	r7, [sl, #16]
10021436:	4642      	mov	r2, r8
10021438:	ea4f 0987 	mov.w	r9, r7, lsl #2
1002143c:	eb08 0687 	add.w	r6, r8, r7, lsl #2
10021440:	2000      	movs	r0, #0
10021442:	e003      	b.n	1002144c <__gethex+0x338>
10021444:	4296      	cmp	r6, r2
10021446:	f842 0c04 	str.w	r0, [r2, #-4]
1002144a:	d93c      	bls.n	100214c6 <__gethex+0x3b2>
1002144c:	4694      	mov	ip, r2
1002144e:	f852 1b04 	ldr.w	r1, [r2], #4
10021452:	1c4b      	adds	r3, r1, #1
10021454:	d0f6      	beq.n	10021444 <__gethex+0x330>
10021456:	3101      	adds	r1, #1
10021458:	2d02      	cmp	r5, #2
1002145a:	f8cc 1000 	str.w	r1, [ip]
1002145e:	f000 8093 	beq.w	10021588 <__gethex+0x474>
10021462:	f014 041f 	ands.w	r4, r4, #31
10021466:	f040 80b3 	bne.w	100215d0 <__gethex+0x4bc>
1002146a:	2521      	movs	r5, #33	@ 0x21
1002146c:	e77b      	b.n	10021366 <__gethex+0x252>
1002146e:	07b9      	lsls	r1, r7, #30
10021470:	f57f af77 	bpl.w	10021362 <__gethex+0x24e>
10021474:	9b02      	ldr	r3, [sp, #8]
10021476:	681a      	ldr	r2, [r3, #0]
10021478:	4317      	orrs	r7, r2
1002147a:	07fa      	lsls	r2, r7, #31
1002147c:	d4d7      	bmi.n	1002142e <__gethex+0x31a>
1002147e:	e770      	b.n	10021362 <__gethex+0x24e>
10021480:	2000      	movs	r0, #0
10021482:	e77d      	b.n	10021380 <__gethex+0x26c>
10021484:	46ab      	mov	fp, r5
10021486:	e680      	b.n	1002118a <__gethex+0x76>
10021488:	1ba2      	subs	r2, r4, r6
1002148a:	4651      	mov	r1, sl
1002148c:	9801      	ldr	r0, [sp, #4]
1002148e:	ebab 0b02 	sub.w	fp, fp, r2
10021492:	f7fd fbc9 	bl	1001ec28 <__lshift>
10021496:	f100 0314 	add.w	r3, r0, #20
1002149a:	4682      	mov	sl, r0
1002149c:	9302      	str	r3, [sp, #8]
1002149e:	2700      	movs	r7, #0
100214a0:	e701      	b.n	100212a6 <__gethex+0x192>
100214a2:	7872      	ldrb	r2, [r6, #1]
100214a4:	f818 1002 	ldrb.w	r1, [r8, r2]
100214a8:	1c75      	adds	r5, r6, #1
100214aa:	462e      	mov	r6, r5
100214ac:	2900      	cmp	r1, #0
100214ae:	f43f ae6c 	beq.w	1002118a <__gethex+0x76>
100214b2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
100214b6:	f818 3002 	ldrb.w	r3, [r8, r2]
100214ba:	2b00      	cmp	r3, #0
100214bc:	d1f9      	bne.n	100214b2 <__gethex+0x39e>
100214be:	e661      	b.n	10021184 <__gethex+0x70>
100214c0:	1cbc      	adds	r4, r7, #2
100214c2:	2700      	movs	r7, #0
100214c4:	e63b      	b.n	1002113e <__gethex+0x2a>
100214c6:	f8da 2008 	ldr.w	r2, [sl, #8]
100214ca:	4297      	cmp	r7, r2
100214cc:	da65      	bge.n	1002159a <__gethex+0x486>
100214ce:	463a      	mov	r2, r7
100214d0:	eb0a 0182 	add.w	r1, sl, r2, lsl #2
100214d4:	2001      	movs	r0, #1
100214d6:	3201      	adds	r2, #1
100214d8:	2d02      	cmp	r5, #2
100214da:	f8ca 2010 	str.w	r2, [sl, #16]
100214de:	6148      	str	r0, [r1, #20]
100214e0:	d052      	beq.n	10021588 <__gethex+0x474>
100214e2:	4297      	cmp	r7, r2
100214e4:	dabd      	bge.n	10021462 <__gethex+0x34e>
100214e6:	2a00      	cmp	r2, #0
100214e8:	dc7f      	bgt.n	100215ea <__gethex+0x4d6>
100214ea:	2200      	movs	r2, #0
100214ec:	f8ca 2010 	str.w	r2, [sl, #16]
100214f0:	2200      	movs	r2, #0
100214f2:	f8ca 2014 	str.w	r2, [sl, #20]
100214f6:	9b00      	ldr	r3, [sp, #0]
100214f8:	689a      	ldr	r2, [r3, #8]
100214fa:	f10b 0b01 	add.w	fp, fp, #1
100214fe:	455a      	cmp	r2, fp
10021500:	dab3      	bge.n	1002146a <__gethex+0x356>
10021502:	9801      	ldr	r0, [sp, #4]
10021504:	4651      	mov	r1, sl
10021506:	f7fd f94d 	bl	1001e7a4 <_Bfree>
1002150a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1002150c:	2300      	movs	r3, #0
1002150e:	6013      	str	r3, [r2, #0]
10021510:	25a3      	movs	r5, #163	@ 0xa3
10021512:	e6ae      	b.n	10021272 <__gethex+0x15e>
10021514:	2701      	movs	r7, #1
10021516:	e75b      	b.n	100213d0 <__gethex+0x2bc>
10021518:	4631      	mov	r1, r6
1002151a:	4650      	mov	r0, sl
1002151c:	f7fd fe0a 	bl	1001f134 <__any_on>
10021520:	4607      	mov	r7, r0
10021522:	e755      	b.n	100213d0 <__gethex+0x2bc>
10021524:	1eb1      	subs	r1, r6, #2
10021526:	4650      	mov	r0, sl
10021528:	f7fd fe04 	bl	1001f134 <__any_on>
1002152c:	2800      	cmp	r0, #0
1002152e:	f43f af40 	beq.w	100213b2 <__gethex+0x29e>
10021532:	2703      	movs	r7, #3
10021534:	e73e      	b.n	100213b4 <__gethex+0x2a0>
10021536:	f04f 0b00 	mov.w	fp, #0
1002153a:	f04f 0a01 	mov.w	sl, #1
1002153e:	e676      	b.n	1002122e <__gethex+0x11a>
10021540:	455c      	cmp	r4, fp
10021542:	f47f aec7 	bne.w	100212d4 <__gethex+0x1c0>
10021546:	2c01      	cmp	r4, #1
10021548:	d008      	beq.n	1002155c <__gethex+0x448>
1002154a:	1e61      	subs	r1, r4, #1
1002154c:	4650      	mov	r0, sl
1002154e:	f7fd fdf1 	bl	1001f134 <__any_on>
10021552:	2800      	cmp	r0, #0
10021554:	f43f aebe 	beq.w	100212d4 <__gethex+0x1c0>
10021558:	9b00      	ldr	r3, [sp, #0]
1002155a:	685a      	ldr	r2, [r3, #4]
1002155c:	9903      	ldr	r1, [sp, #12]
1002155e:	600a      	str	r2, [r1, #0]
10021560:	9a02      	ldr	r2, [sp, #8]
10021562:	2301      	movs	r3, #1
10021564:	f8ca 3010 	str.w	r3, [sl, #16]
10021568:	6013      	str	r3, [r2, #0]
1002156a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1002156c:	2562      	movs	r5, #98	@ 0x62
1002156e:	f8c3 a000 	str.w	sl, [r3]
10021572:	e67e      	b.n	10021272 <__gethex+0x15e>
10021574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10021576:	2b00      	cmp	r3, #0
10021578:	f43f aeac 	beq.w	100212d4 <__gethex+0x1c0>
1002157c:	e7ee      	b.n	1002155c <__gethex+0x448>
1002157e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10021580:	2b00      	cmp	r3, #0
10021582:	f47f aea7 	bne.w	100212d4 <__gethex+0x1c0>
10021586:	e7e9      	b.n	1002155c <__gethex+0x448>
10021588:	9b00      	ldr	r3, [sp, #0]
1002158a:	681a      	ldr	r2, [r3, #0]
1002158c:	3a01      	subs	r2, #1
1002158e:	42a2      	cmp	r2, r4
10021590:	d054      	beq.n	1002163c <__gethex+0x528>
10021592:	2522      	movs	r5, #34	@ 0x22
10021594:	e6e7      	b.n	10021366 <__gethex+0x252>
10021596:	2701      	movs	r7, #1
10021598:	e5e1      	b.n	1002115e <__gethex+0x4a>
1002159a:	f8da 1004 	ldr.w	r1, [sl, #4]
1002159e:	9801      	ldr	r0, [sp, #4]
100215a0:	3101      	adds	r1, #1
100215a2:	f7fd f8d9 	bl	1001e758 <_Balloc>
100215a6:	4606      	mov	r6, r0
100215a8:	2800      	cmp	r0, #0
100215aa:	d05f      	beq.n	1002166c <__gethex+0x558>
100215ac:	f8da 2010 	ldr.w	r2, [sl, #16]
100215b0:	3202      	adds	r2, #2
100215b2:	0092      	lsls	r2, r2, #2
100215b4:	f10a 010c 	add.w	r1, sl, #12
100215b8:	300c      	adds	r0, #12
100215ba:	f7f8 fb39 	bl	10019c30 <memcpy>
100215be:	4651      	mov	r1, sl
100215c0:	9801      	ldr	r0, [sp, #4]
100215c2:	f7fd f8ef 	bl	1001e7a4 <_Bfree>
100215c6:	f106 0814 	add.w	r8, r6, #20
100215ca:	6932      	ldr	r2, [r6, #16]
100215cc:	46b2      	mov	sl, r6
100215ce:	e77f      	b.n	100214d0 <__gethex+0x3bc>
100215d0:	44c1      	add	r9, r8
100215d2:	f1c4 0420 	rsb	r4, r4, #32
100215d6:	f859 0c04 	ldr.w	r0, [r9, #-4]
100215da:	f7fd f995 	bl	1001e908 <__hi0bits>
100215de:	42a0      	cmp	r0, r4
100215e0:	f6bf af43 	bge.w	1002146a <__gethex+0x356>
100215e4:	f8da 2010 	ldr.w	r2, [sl, #16]
100215e8:	e77d      	b.n	100214e6 <__gethex+0x3d2>
100215ea:	f8da 0014 	ldr.w	r0, [sl, #20]
100215ee:	eb08 0282 	add.w	r2, r8, r2, lsl #2
100215f2:	f10a 0418 	add.w	r4, sl, #24
100215f6:	42a2      	cmp	r2, r4
100215f8:	ea4f 0050 	mov.w	r0, r0, lsr #1
100215fc:	d92a      	bls.n	10021654 <__gethex+0x540>
100215fe:	4645      	mov	r5, r8
10021600:	6823      	ldr	r3, [r4, #0]
10021602:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
10021606:	f845 0b04 	str.w	r0, [r5], #4
1002160a:	f854 0b04 	ldr.w	r0, [r4], #4
1002160e:	42a2      	cmp	r2, r4
10021610:	ea4f 0050 	mov.w	r0, r0, lsr #1
10021614:	d8f4      	bhi.n	10021600 <__gethex+0x4ec>
10021616:	eba2 020a 	sub.w	r2, r2, sl
1002161a:	3a19      	subs	r2, #25
1002161c:	0892      	lsrs	r2, r2, #2
1002161e:	3201      	adds	r2, #1
10021620:	f848 0022 	str.w	r0, [r8, r2, lsl #2]
10021624:	eb08 0282 	add.w	r2, r8, r2, lsl #2
10021628:	b9c0      	cbnz	r0, 1002165c <__gethex+0x548>
1002162a:	eba2 0108 	sub.w	r1, r2, r8
1002162e:	1089      	asrs	r1, r1, #2
10021630:	4590      	cmp	r8, r2
10021632:	f8ca 1010 	str.w	r1, [sl, #16]
10021636:	f47f af5e 	bne.w	100214f6 <__gethex+0x3e2>
1002163a:	e759      	b.n	100214f0 <__gethex+0x3dc>
1002163c:	1162      	asrs	r2, r4, #5
1002163e:	f004 041f 	and.w	r4, r4, #31
10021642:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
10021646:	2201      	movs	r2, #1
10021648:	40a2      	lsls	r2, r4
1002164a:	420a      	tst	r2, r1
1002164c:	bf14      	ite	ne
1002164e:	2521      	movne	r5, #33	@ 0x21
10021650:	2522      	moveq	r5, #34	@ 0x22
10021652:	e688      	b.n	10021366 <__gethex+0x252>
10021654:	f8c8 0000 	str.w	r0, [r8]
10021658:	4642      	mov	r2, r8
1002165a:	b168      	cbz	r0, 10021678 <__gethex+0x564>
1002165c:	3204      	adds	r2, #4
1002165e:	e7e4      	b.n	1002162a <__gethex+0x516>
10021660:	4b07      	ldr	r3, [pc, #28]	@ (10021680 <__gethex+0x56c>)
10021662:	4808      	ldr	r0, [pc, #32]	@ (10021684 <__gethex+0x570>)
10021664:	4652      	mov	r2, sl
10021666:	21e4      	movs	r1, #228	@ 0xe4
10021668:	f7ff fbb4 	bl	10020dd4 <__assert_func>
1002166c:	4b04      	ldr	r3, [pc, #16]	@ (10021680 <__gethex+0x56c>)
1002166e:	4805      	ldr	r0, [pc, #20]	@ (10021684 <__gethex+0x570>)
10021670:	4632      	mov	r2, r6
10021672:	2184      	movs	r1, #132	@ 0x84
10021674:	f7ff fbae 	bl	10020dd4 <__assert_func>
10021678:	f8ca 0010 	str.w	r0, [sl, #16]
1002167c:	e738      	b.n	100214f0 <__gethex+0x3dc>
1002167e:	bf00      	nop
10021680:	10025650 	.word	0x10025650
10021684:	1002c3d8 	.word	0x1002c3d8

10021688 <__match>:
10021688:	b410      	push	{r4}
1002168a:	6804      	ldr	r4, [r0, #0]
1002168c:	3401      	adds	r4, #1
1002168e:	e009      	b.n	100216a4 <__match+0x1c>
10021690:	f814 3b01 	ldrb.w	r3, [r4], #1
10021694:	f1a3 0c41 	sub.w	ip, r3, #65	@ 0x41
10021698:	f1bc 0f19 	cmp.w	ip, #25
1002169c:	bf98      	it	ls
1002169e:	3320      	addls	r3, #32
100216a0:	4293      	cmp	r3, r2
100216a2:	d107      	bne.n	100216b4 <__match+0x2c>
100216a4:	f811 2b01 	ldrb.w	r2, [r1], #1
100216a8:	2a00      	cmp	r2, #0
100216aa:	d1f1      	bne.n	10021690 <__match+0x8>
100216ac:	6004      	str	r4, [r0, #0]
100216ae:	2001      	movs	r0, #1
100216b0:	bc10      	pop	{r4}
100216b2:	4770      	bx	lr
100216b4:	2000      	movs	r0, #0
100216b6:	bc10      	pop	{r4}
100216b8:	4770      	bx	lr
100216ba:	bf00      	nop

100216bc <__hexnan>:
100216bc:	6809      	ldr	r1, [r1, #0]
100216be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100216c2:	114b      	asrs	r3, r1, #5
100216c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
100216c8:	f011 0b1f 	ands.w	fp, r1, #31
100216cc:	4607      	mov	r7, r0
100216ce:	bf0c      	ite	eq
100216d0:	4618      	moveq	r0, r3
100216d2:	1d18      	addne	r0, r3, #4
100216d4:	683c      	ldr	r4, [r7, #0]
100216d6:	bf0c      	ite	eq
100216d8:	1f1d      	subeq	r5, r3, #4
100216da:	461d      	movne	r5, r3
100216dc:	2300      	movs	r3, #0
100216de:	f840 3c04 	str.w	r3, [r0, #-4]
100216e2:	7861      	ldrb	r1, [r4, #1]
100216e4:	b085      	sub	sp, #20
100216e6:	3401      	adds	r4, #1
100216e8:	2900      	cmp	r1, #0
100216ea:	f000 80a8 	beq.w	1002183e <__hexnan+0x182>
100216ee:	469e      	mov	lr, r3
100216f0:	469a      	mov	sl, r3
100216f2:	461e      	mov	r6, r3
100216f4:	460b      	mov	r3, r1
100216f6:	4601      	mov	r1, r0
100216f8:	4610      	mov	r0, r2
100216fa:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 10021884 <__hexnan+0x1c8>
100216fe:	9701      	str	r7, [sp, #4]
10021700:	465a      	mov	r2, fp
10021702:	46a8      	mov	r8, r5
10021704:	46ac      	mov	ip, r5
10021706:	4683      	mov	fp, r0
10021708:	e010      	b.n	1002172c <__hexnan+0x70>
1002170a:	2b20      	cmp	r3, #32
1002170c:	f200 808f 	bhi.w	1002182e <__hexnan+0x172>
10021710:	4556      	cmp	r6, sl
10021712:	dd08      	ble.n	10021726 <__hexnan+0x6a>
10021714:	45c4      	cmp	ip, r8
10021716:	d202      	bcs.n	1002171e <__hexnan+0x62>
10021718:	f1be 0f07 	cmp.w	lr, #7
1002171c:	dd5f      	ble.n	100217de <__hexnan+0x122>
1002171e:	45e3      	cmp	fp, ip
10021720:	d354      	bcc.n	100217cc <__hexnan+0x110>
10021722:	f04f 0e08 	mov.w	lr, #8
10021726:	f814 3f01 	ldrb.w	r3, [r4, #1]!
1002172a:	b1b3      	cbz	r3, 1002175a <__hexnan+0x9e>
1002172c:	f819 7003 	ldrb.w	r7, [r9, r3]
10021730:	2f00      	cmp	r7, #0
10021732:	d0ea      	beq.n	1002170a <__hexnan+0x4e>
10021734:	f10e 0e01 	add.w	lr, lr, #1
10021738:	f1be 0f08 	cmp.w	lr, #8
1002173c:	f106 0601 	add.w	r6, r6, #1
10021740:	dc3a      	bgt.n	100217b8 <__hexnan+0xfc>
10021742:	f8dc 3000 	ldr.w	r3, [ip]
10021746:	011b      	lsls	r3, r3, #4
10021748:	f007 070f 	and.w	r7, r7, #15
1002174c:	431f      	orrs	r7, r3
1002174e:	f8cc 7000 	str.w	r7, [ip]
10021752:	f814 3f01 	ldrb.w	r3, [r4, #1]!
10021756:	2b00      	cmp	r3, #0
10021758:	d1e8      	bne.n	1002172c <__hexnan+0x70>
1002175a:	465b      	mov	r3, fp
1002175c:	4608      	mov	r0, r1
1002175e:	4693      	mov	fp, r2
10021760:	461a      	mov	r2, r3
10021762:	2e00      	cmp	r6, #0
10021764:	d06b      	beq.n	1002183e <__hexnan+0x182>
10021766:	45e0      	cmp	r8, ip
10021768:	d902      	bls.n	10021770 <__hexnan+0xb4>
1002176a:	f1be 0f07 	cmp.w	lr, #7
1002176e:	dd73      	ble.n	10021858 <__hexnan+0x19c>
10021770:	4562      	cmp	r2, ip
10021772:	d24d      	bcs.n	10021810 <__hexnan+0x154>
10021774:	1f11      	subs	r1, r2, #4
10021776:	4663      	mov	r3, ip
10021778:	f853 4b04 	ldr.w	r4, [r3], #4
1002177c:	f841 4f04 	str.w	r4, [r1, #4]!
10021780:	42ab      	cmp	r3, r5
10021782:	d9f9      	bls.n	10021778 <__hexnan+0xbc>
10021784:	eba5 030c 	sub.w	r3, r5, ip
10021788:	f023 0303 	bic.w	r3, r3, #3
1002178c:	1c69      	adds	r1, r5, #1
1002178e:	3304      	adds	r3, #4
10021790:	f10c 0c01 	add.w	ip, ip, #1
10021794:	4561      	cmp	r1, ip
10021796:	bf38      	it	cc
10021798:	2304      	movcc	r3, #4
1002179a:	4413      	add	r3, r2
1002179c:	2100      	movs	r1, #0
1002179e:	f843 1b04 	str.w	r1, [r3], #4
100217a2:	42ab      	cmp	r3, r5
100217a4:	d9fb      	bls.n	1002179e <__hexnan+0xe2>
100217a6:	f850 3c04 	ldr.w	r3, [r0, #-4]
100217aa:	2b00      	cmp	r3, #0
100217ac:	d14d      	bne.n	1002184a <__hexnan+0x18e>
100217ae:	42aa      	cmp	r2, r5
100217b0:	d049      	beq.n	10021846 <__hexnan+0x18a>
100217b2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
100217b6:	e7f8      	b.n	100217aa <__hexnan+0xee>
100217b8:	45e3      	cmp	fp, ip
100217ba:	d2b4      	bcs.n	10021726 <__hexnan+0x6a>
100217bc:	2300      	movs	r3, #0
100217be:	f84c 3c04 	str.w	r3, [ip, #-4]
100217c2:	f04f 0e01 	mov.w	lr, #1
100217c6:	f1ac 0c04 	sub.w	ip, ip, #4
100217ca:	e7bd      	b.n	10021748 <__hexnan+0x8c>
100217cc:	2300      	movs	r3, #0
100217ce:	f1ac 0804 	sub.w	r8, ip, #4
100217d2:	f84c 3c04 	str.w	r3, [ip, #-4]
100217d6:	46b2      	mov	sl, r6
100217d8:	46c4      	mov	ip, r8
100217da:	469e      	mov	lr, r3
100217dc:	e7a3      	b.n	10021726 <__hexnan+0x6a>
100217de:	f1ce 0008 	rsb	r0, lr, #8
100217e2:	0080      	lsls	r0, r0, #2
100217e4:	e9cd 2c02 	strd	r2, ip, [sp, #8]
100217e8:	f8dc 3000 	ldr.w	r3, [ip]
100217ec:	4667      	mov	r7, ip
100217ee:	f1c0 0e20 	rsb	lr, r0, #32
100217f2:	4684      	mov	ip, r0
100217f4:	6878      	ldr	r0, [r7, #4]
100217f6:	fa00 f20e 	lsl.w	r2, r0, lr
100217fa:	431a      	orrs	r2, r3
100217fc:	fa20 f30c 	lsr.w	r3, r0, ip
10021800:	603a      	str	r2, [r7, #0]
10021802:	f847 3f04 	str.w	r3, [r7, #4]!
10021806:	4547      	cmp	r7, r8
10021808:	d3f4      	bcc.n	100217f4 <__hexnan+0x138>
1002180a:	e9dd 2c02 	ldrd	r2, ip, [sp, #8]
1002180e:	e786      	b.n	1002171e <__hexnan+0x62>
10021810:	f850 3c04 	ldr.w	r3, [r0, #-4]
10021814:	f1bb 0f00 	cmp.w	fp, #0
10021818:	d0c7      	beq.n	100217aa <__hexnan+0xee>
1002181a:	f1cb 0b20 	rsb	fp, fp, #32
1002181e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
10021822:	fa21 f10b 	lsr.w	r1, r1, fp
10021826:	400b      	ands	r3, r1
10021828:	f840 3c04 	str.w	r3, [r0, #-4]
1002182c:	e7bd      	b.n	100217aa <__hexnan+0xee>
1002182e:	4608      	mov	r0, r1
10021830:	4619      	mov	r1, r3
10021832:	2929      	cmp	r1, #41	@ 0x29
10021834:	465b      	mov	r3, fp
10021836:	9f01      	ldr	r7, [sp, #4]
10021838:	4693      	mov	fp, r2
1002183a:	461a      	mov	r2, r3
1002183c:	d009      	beq.n	10021852 <__hexnan+0x196>
1002183e:	2004      	movs	r0, #4
10021840:	b005      	add	sp, #20
10021842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10021846:	2301      	movs	r3, #1
10021848:	602b      	str	r3, [r5, #0]
1002184a:	2005      	movs	r0, #5
1002184c:	b005      	add	sp, #20
1002184e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10021852:	3401      	adds	r4, #1
10021854:	603c      	str	r4, [r7, #0]
10021856:	e784      	b.n	10021762 <__hexnan+0xa6>
10021858:	f1ce 0308 	rsb	r3, lr, #8
1002185c:	f8dc 1000 	ldr.w	r1, [ip]
10021860:	009b      	lsls	r3, r3, #2
10021862:	f1c3 0e20 	rsb	lr, r3, #32
10021866:	4666      	mov	r6, ip
10021868:	460c      	mov	r4, r1
1002186a:	6877      	ldr	r7, [r6, #4]
1002186c:	fa07 f10e 	lsl.w	r1, r7, lr
10021870:	4321      	orrs	r1, r4
10021872:	fa27 f403 	lsr.w	r4, r7, r3
10021876:	6031      	str	r1, [r6, #0]
10021878:	f846 4f04 	str.w	r4, [r6, #4]!
1002187c:	45b0      	cmp	r8, r6
1002187e:	d8f4      	bhi.n	1002186a <__hexnan+0x1ae>
10021880:	e776      	b.n	10021770 <__hexnan+0xb4>
10021882:	bf00      	nop
10021884:	1002c444 	.word	0x1002c444

10021888 <fiprintf>:
10021888:	b40e      	push	{r1, r2, r3}
1002188a:	b510      	push	{r4, lr}
1002188c:	b083      	sub	sp, #12
1002188e:	ab05      	add	r3, sp, #20
10021890:	4c06      	ldr	r4, [pc, #24]	@ (100218ac <fiprintf+0x24>)
10021892:	f853 2b04 	ldr.w	r2, [r3], #4
10021896:	9301      	str	r3, [sp, #4]
10021898:	4601      	mov	r1, r0
1002189a:	6820      	ldr	r0, [r4, #0]
1002189c:	f7f5 faf4 	bl	10016e88 <_vfiprintf_r>
100218a0:	b003      	add	sp, #12
100218a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100218a6:	b003      	add	sp, #12
100218a8:	4770      	bx	lr
100218aa:	bf00      	nop
100218ac:	20000598 	.word	0x20000598

100218b0 <__ssprint_r>:
100218b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100218b4:	6893      	ldr	r3, [r2, #8]
100218b6:	6817      	ldr	r7, [r2, #0]
100218b8:	b083      	sub	sp, #12
100218ba:	4692      	mov	sl, r2
100218bc:	2b00      	cmp	r3, #0
100218be:	d074      	beq.n	100219aa <__ssprint_r+0xfa>
100218c0:	f04f 0b00 	mov.w	fp, #0
100218c4:	688b      	ldr	r3, [r1, #8]
100218c6:	680a      	ldr	r2, [r1, #0]
100218c8:	4681      	mov	r9, r0
100218ca:	460c      	mov	r4, r1
100218cc:	465d      	mov	r5, fp
100218ce:	e045      	b.n	1002195c <__ssprint_r+0xac>
100218d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100218d4:	f413 6f90 	tst.w	r3, #1152	@ 0x480
100218d8:	d02c      	beq.n	10021934 <__ssprint_r+0x84>
100218da:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
100218de:	1a16      	subs	r6, r2, r0
100218e0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
100218e4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
100218e8:	1c71      	adds	r1, r6, #1
100218ea:	1052      	asrs	r2, r2, #1
100218ec:	4429      	add	r1, r5
100218ee:	4291      	cmp	r1, r2
100218f0:	bf92      	itee	ls
100218f2:	4690      	movls	r8, r2
100218f4:	4688      	movhi	r8, r1
100218f6:	460a      	movhi	r2, r1
100218f8:	055b      	lsls	r3, r3, #21
100218fa:	d539      	bpl.n	10021970 <__ssprint_r+0xc0>
100218fc:	4611      	mov	r1, r2
100218fe:	4648      	mov	r0, r9
10021900:	f7f3 f94a 	bl	10014b98 <_malloc_r>
10021904:	9001      	str	r0, [sp, #4]
10021906:	2800      	cmp	r0, #0
10021908:	d03d      	beq.n	10021986 <__ssprint_r+0xd6>
1002190a:	4632      	mov	r2, r6
1002190c:	6921      	ldr	r1, [r4, #16]
1002190e:	f7f8 f98f 	bl	10019c30 <memcpy>
10021912:	89a2      	ldrh	r2, [r4, #12]
10021914:	9b01      	ldr	r3, [sp, #4]
10021916:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
1002191a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
1002191e:	81a2      	strh	r2, [r4, #12]
10021920:	1998      	adds	r0, r3, r6
10021922:	eba8 0606 	sub.w	r6, r8, r6
10021926:	60a6      	str	r6, [r4, #8]
10021928:	f8c4 8014 	str.w	r8, [r4, #20]
1002192c:	6123      	str	r3, [r4, #16]
1002192e:	6020      	str	r0, [r4, #0]
10021930:	46a8      	mov	r8, r5
10021932:	462e      	mov	r6, r5
10021934:	4632      	mov	r2, r6
10021936:	4659      	mov	r1, fp
10021938:	f7f7 fdc0 	bl	100194bc <memmove>
1002193c:	f8da 1008 	ldr.w	r1, [sl, #8]
10021940:	68a3      	ldr	r3, [r4, #8]
10021942:	6822      	ldr	r2, [r4, #0]
10021944:	eba3 0308 	sub.w	r3, r3, r8
10021948:	4432      	add	r2, r6
1002194a:	1b49      	subs	r1, r1, r5
1002194c:	60a3      	str	r3, [r4, #8]
1002194e:	6022      	str	r2, [r4, #0]
10021950:	f8ca 1008 	str.w	r1, [sl, #8]
10021954:	b349      	cbz	r1, 100219aa <__ssprint_r+0xfa>
10021956:	e9d7 b500 	ldrd	fp, r5, [r7]
1002195a:	3708      	adds	r7, #8
1002195c:	4698      	mov	r8, r3
1002195e:	4610      	mov	r0, r2
10021960:	2d00      	cmp	r5, #0
10021962:	d0f8      	beq.n	10021956 <__ssprint_r+0xa6>
10021964:	429d      	cmp	r5, r3
10021966:	461e      	mov	r6, r3
10021968:	d2b2      	bcs.n	100218d0 <__ssprint_r+0x20>
1002196a:	46a8      	mov	r8, r5
1002196c:	462e      	mov	r6, r5
1002196e:	e7e1      	b.n	10021934 <__ssprint_r+0x84>
10021970:	4601      	mov	r1, r0
10021972:	4648      	mov	r0, r9
10021974:	f7f6 fb7a 	bl	1001806c <_realloc_r>
10021978:	4603      	mov	r3, r0
1002197a:	2800      	cmp	r0, #0
1002197c:	d1d0      	bne.n	10021920 <__ssprint_r+0x70>
1002197e:	6921      	ldr	r1, [r4, #16]
10021980:	4648      	mov	r0, r9
10021982:	f7f9 fb1d 	bl	1001afc0 <_free_r>
10021986:	89a3      	ldrh	r3, [r4, #12]
10021988:	220c      	movs	r2, #12
1002198a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1002198e:	f8c9 2000 	str.w	r2, [r9]
10021992:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10021996:	81a3      	strh	r3, [r4, #12]
10021998:	2200      	movs	r2, #0
1002199a:	2300      	movs	r3, #0
1002199c:	f8ca 2008 	str.w	r2, [sl, #8]
100219a0:	f8ca 3004 	str.w	r3, [sl, #4]
100219a4:	b003      	add	sp, #12
100219a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100219aa:	2000      	movs	r0, #0
100219ac:	2300      	movs	r3, #0
100219ae:	f8ca 3004 	str.w	r3, [sl, #4]
100219b2:	b003      	add	sp, #12
100219b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

100219b8 <_sungetc_r>:
100219b8:	b538      	push	{r3, r4, r5, lr}
100219ba:	1c4b      	adds	r3, r1, #1
100219bc:	d01a      	beq.n	100219f4 <_sungetc_r+0x3c>
100219be:	4614      	mov	r4, r2
100219c0:	8992      	ldrh	r2, [r2, #12]
100219c2:	6863      	ldr	r3, [r4, #4]
100219c4:	f022 0220 	bic.w	r2, r2, #32
100219c8:	81a2      	strh	r2, [r4, #12]
100219ca:	6b22      	ldr	r2, [r4, #48]	@ 0x30
100219cc:	b2cd      	uxtb	r5, r1
100219ce:	b1a2      	cbz	r2, 100219fa <_sungetc_r+0x42>
100219d0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
100219d2:	429a      	cmp	r2, r3
100219d4:	dd09      	ble.n	100219ea <_sungetc_r+0x32>
100219d6:	6823      	ldr	r3, [r4, #0]
100219d8:	1e5a      	subs	r2, r3, #1
100219da:	6022      	str	r2, [r4, #0]
100219dc:	f803 5c01 	strb.w	r5, [r3, #-1]
100219e0:	6863      	ldr	r3, [r4, #4]
100219e2:	3301      	adds	r3, #1
100219e4:	6063      	str	r3, [r4, #4]
100219e6:	4628      	mov	r0, r5
100219e8:	bd38      	pop	{r3, r4, r5, pc}
100219ea:	4621      	mov	r1, r4
100219ec:	f000 f89e 	bl	10021b2c <__submore>
100219f0:	2800      	cmp	r0, #0
100219f2:	d0f0      	beq.n	100219d6 <_sungetc_r+0x1e>
100219f4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
100219f8:	e7f5      	b.n	100219e6 <_sungetc_r+0x2e>
100219fa:	6922      	ldr	r2, [r4, #16]
100219fc:	6821      	ldr	r1, [r4, #0]
100219fe:	b12a      	cbz	r2, 10021a0c <_sungetc_r+0x54>
10021a00:	428a      	cmp	r2, r1
10021a02:	d203      	bcs.n	10021a0c <_sungetc_r+0x54>
10021a04:	f811 2c01 	ldrb.w	r2, [r1, #-1]
10021a08:	42aa      	cmp	r2, r5
10021a0a:	d00c      	beq.n	10021a26 <_sungetc_r+0x6e>
10021a0c:	4622      	mov	r2, r4
10021a0e:	e9c4 130e 	strd	r1, r3, [r4, #56]	@ 0x38
10021a12:	f104 0040 	add.w	r0, r4, #64	@ 0x40
10021a16:	2303      	movs	r3, #3
10021a18:	6363      	str	r3, [r4, #52]	@ 0x34
10021a1a:	6320      	str	r0, [r4, #48]	@ 0x30
10021a1c:	f802 5f42 	strb.w	r5, [r2, #66]!
10021a20:	2301      	movs	r3, #1
10021a22:	6022      	str	r2, [r4, #0]
10021a24:	e7de      	b.n	100219e4 <_sungetc_r+0x2c>
10021a26:	3901      	subs	r1, #1
10021a28:	6021      	str	r1, [r4, #0]
10021a2a:	3301      	adds	r3, #1
10021a2c:	e7da      	b.n	100219e4 <_sungetc_r+0x2c>
10021a2e:	bf00      	nop

10021a30 <__ssrefill_r>:
10021a30:	b510      	push	{r4, lr}
10021a32:	460c      	mov	r4, r1
10021a34:	6b09      	ldr	r1, [r1, #48]	@ 0x30
10021a36:	b169      	cbz	r1, 10021a54 <__ssrefill_r+0x24>
10021a38:	f104 0340 	add.w	r3, r4, #64	@ 0x40
10021a3c:	4299      	cmp	r1, r3
10021a3e:	d001      	beq.n	10021a44 <__ssrefill_r+0x14>
10021a40:	f7f9 fabe 	bl	1001afc0 <_free_r>
10021a44:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
10021a46:	6063      	str	r3, [r4, #4]
10021a48:	2000      	movs	r0, #0
10021a4a:	6320      	str	r0, [r4, #48]	@ 0x30
10021a4c:	b113      	cbz	r3, 10021a54 <__ssrefill_r+0x24>
10021a4e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
10021a50:	6023      	str	r3, [r4, #0]
10021a52:	bd10      	pop	{r4, pc}
10021a54:	89a2      	ldrh	r2, [r4, #12]
10021a56:	6923      	ldr	r3, [r4, #16]
10021a58:	2100      	movs	r1, #0
10021a5a:	f042 0220 	orr.w	r2, r2, #32
10021a5e:	6061      	str	r1, [r4, #4]
10021a60:	81a2      	strh	r2, [r4, #12]
10021a62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10021a66:	e7f3      	b.n	10021a50 <__ssrefill_r+0x20>

10021a68 <_sfread_r>:
10021a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10021a6c:	b085      	sub	sp, #20
10021a6e:	469c      	mov	ip, r3
10021a70:	fb02 f303 	mul.w	r3, r2, r3
10021a74:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
10021a76:	9301      	str	r3, [sp, #4]
10021a78:	2b00      	cmp	r3, #0
10021a7a:	d03c      	beq.n	10021af6 <_sfread_r+0x8e>
10021a7c:	460f      	mov	r7, r1
10021a7e:	e9d4 1500 	ldrd	r1, r5, [r4]
10021a82:	9b01      	ldr	r3, [sp, #4]
10021a84:	42ab      	cmp	r3, r5
10021a86:	d94e      	bls.n	10021b26 <_sfread_r+0xbe>
10021a88:	9e01      	ldr	r6, [sp, #4]
10021a8a:	e9cd c202 	strd	ip, r2, [sp, #8]
10021a8e:	462b      	mov	r3, r5
10021a90:	4683      	mov	fp, r0
10021a92:	4635      	mov	r5, r6
10021a94:	f04f 0800 	mov.w	r8, #0
10021a98:	f104 0940 	add.w	r9, r4, #64	@ 0x40
10021a9c:	461e      	mov	r6, r3
10021a9e:	4632      	mov	r2, r6
10021aa0:	4638      	mov	r0, r7
10021aa2:	f7f8 f8c5 	bl	10019c30 <memcpy>
10021aa6:	6821      	ldr	r1, [r4, #0]
10021aa8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
10021aaa:	198a      	adds	r2, r1, r6
10021aac:	46aa      	mov	sl, r5
10021aae:	e9c4 2800 	strd	r2, r8, [r4]
10021ab2:	4619      	mov	r1, r3
10021ab4:	4658      	mov	r0, fp
10021ab6:	4437      	add	r7, r6
10021ab8:	1bad      	subs	r5, r5, r6
10021aba:	b303      	cbz	r3, 10021afe <_sfread_r+0x96>
10021abc:	454b      	cmp	r3, r9
10021abe:	d001      	beq.n	10021ac4 <_sfread_r+0x5c>
10021ac0:	f7f9 fa7e 	bl	1001afc0 <_free_r>
10021ac4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
10021ac6:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
10021aca:	6060      	str	r0, [r4, #4]
10021acc:	b1b8      	cbz	r0, 10021afe <_sfread_r+0x96>
10021ace:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
10021ad0:	6021      	str	r1, [r4, #0]
10021ad2:	42a8      	cmp	r0, r5
10021ad4:	4606      	mov	r6, r0
10021ad6:	d3e2      	bcc.n	10021a9e <_sfread_r+0x36>
10021ad8:	f8dd c008 	ldr.w	ip, [sp, #8]
10021adc:	462e      	mov	r6, r5
10021ade:	4632      	mov	r2, r6
10021ae0:	4638      	mov	r0, r7
10021ae2:	f8cd c004 	str.w	ip, [sp, #4]
10021ae6:	f7f8 f8a3 	bl	10019c30 <memcpy>
10021aea:	e9d4 3200 	ldrd	r3, r2, [r4]
10021aee:	1b92      	subs	r2, r2, r6
10021af0:	4433      	add	r3, r6
10021af2:	e9c4 3200 	strd	r3, r2, [r4]
10021af6:	9801      	ldr	r0, [sp, #4]
10021af8:	b005      	add	sp, #20
10021afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10021afe:	9b01      	ldr	r3, [sp, #4]
10021b00:	9a03      	ldr	r2, [sp, #12]
10021b02:	4433      	add	r3, r6
10021b04:	eba3 050a 	sub.w	r5, r3, sl
10021b08:	fbb5 f3f2 	udiv	r3, r5, r2
10021b0c:	9301      	str	r3, [sp, #4]
10021b0e:	89a3      	ldrh	r3, [r4, #12]
10021b10:	6922      	ldr	r2, [r4, #16]
10021b12:	9801      	ldr	r0, [sp, #4]
10021b14:	f043 0320 	orr.w	r3, r3, #32
10021b18:	81a3      	strh	r3, [r4, #12]
10021b1a:	2300      	movs	r3, #0
10021b1c:	e9c4 2300 	strd	r2, r3, [r4]
10021b20:	b005      	add	sp, #20
10021b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10021b26:	461e      	mov	r6, r3
10021b28:	e7d9      	b.n	10021ade <_sfread_r+0x76>
10021b2a:	bf00      	nop

10021b2c <__submore>:
10021b2c:	f101 0340 	add.w	r3, r1, #64	@ 0x40
10021b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10021b34:	460c      	mov	r4, r1
10021b36:	6b09      	ldr	r1, [r1, #48]	@ 0x30
10021b38:	4299      	cmp	r1, r3
10021b3a:	d014      	beq.n	10021b66 <__submore+0x3a>
10021b3c:	6b66      	ldr	r6, [r4, #52]	@ 0x34
10021b3e:	0077      	lsls	r7, r6, #1
10021b40:	463a      	mov	r2, r7
10021b42:	f7f6 fa93 	bl	1001806c <_realloc_r>
10021b46:	4605      	mov	r5, r0
10021b48:	b330      	cbz	r0, 10021b98 <__submore+0x6c>
10021b4a:	eb00 0806 	add.w	r8, r0, r6
10021b4e:	4601      	mov	r1, r0
10021b50:	4632      	mov	r2, r6
10021b52:	4640      	mov	r0, r8
10021b54:	f7f8 f86c 	bl	10019c30 <memcpy>
10021b58:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
10021b5c:	f8c4 8000 	str.w	r8, [r4]
10021b60:	2000      	movs	r0, #0
10021b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10021b66:	f44f 6180 	mov.w	r1, #1024	@ 0x400
10021b6a:	f7f3 f815 	bl	10014b98 <_malloc_r>
10021b6e:	b198      	cbz	r0, 10021b98 <__submore+0x6c>
10021b70:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
10021b74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
10021b78:	e9c4 020c 	strd	r0, r2, [r4, #48]	@ 0x30
10021b7c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
10021b80:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
10021b84:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
10021b88:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
10021b8c:	f880 23fd 	strb.w	r2, [r0, #1021]	@ 0x3fd
10021b90:	f200 33fd 	addw	r3, r0, #1021	@ 0x3fd
10021b94:	6023      	str	r3, [r4, #0]
10021b96:	e7e3      	b.n	10021b60 <__submore+0x34>
10021b98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10021b9c:	e7e1      	b.n	10021b62 <__submore+0x36>
10021b9e:	bf00      	nop

10021ba0 <abort>:
10021ba0:	b508      	push	{r3, lr}
10021ba2:	2006      	movs	r0, #6
10021ba4:	f000 f804 	bl	10021bb0 <raise>
10021ba8:	2001      	movs	r0, #1
10021baa:	f000 f855 	bl	10021c58 <_exit>
10021bae:	bf00      	nop

10021bb0 <raise>:
10021bb0:	b538      	push	{r3, r4, r5, lr}
10021bb2:	4b14      	ldr	r3, [pc, #80]	@ (10021c04 <raise+0x54>)
10021bb4:	281f      	cmp	r0, #31
10021bb6:	681d      	ldr	r5, [r3, #0]
10021bb8:	d81e      	bhi.n	10021bf8 <raise+0x48>
10021bba:	f8d5 2118 	ldr.w	r2, [r5, #280]	@ 0x118
10021bbe:	4604      	mov	r4, r0
10021bc0:	b162      	cbz	r2, 10021bdc <raise+0x2c>
10021bc2:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
10021bc6:	b14b      	cbz	r3, 10021bdc <raise+0x2c>
10021bc8:	2b01      	cmp	r3, #1
10021bca:	d005      	beq.n	10021bd8 <raise+0x28>
10021bcc:	1c59      	adds	r1, r3, #1
10021bce:	d00f      	beq.n	10021bf0 <raise+0x40>
10021bd0:	2100      	movs	r1, #0
10021bd2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
10021bd6:	4798      	blx	r3
10021bd8:	2000      	movs	r0, #0
10021bda:	bd38      	pop	{r3, r4, r5, pc}
10021bdc:	4628      	mov	r0, r5
10021bde:	f000 f829 	bl	10021c34 <_getpid_r>
10021be2:	4622      	mov	r2, r4
10021be4:	4601      	mov	r1, r0
10021be6:	4628      	mov	r0, r5
10021be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10021bec:	f000 b80c 	b.w	10021c08 <_kill_r>
10021bf0:	2316      	movs	r3, #22
10021bf2:	602b      	str	r3, [r5, #0]
10021bf4:	2001      	movs	r0, #1
10021bf6:	bd38      	pop	{r3, r4, r5, pc}
10021bf8:	2316      	movs	r3, #22
10021bfa:	602b      	str	r3, [r5, #0]
10021bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10021c00:	bd38      	pop	{r3, r4, r5, pc}
10021c02:	bf00      	nop
10021c04:	20000598 	.word	0x20000598

10021c08 <_kill_r>:
10021c08:	b570      	push	{r4, r5, r6, lr}
10021c0a:	460c      	mov	r4, r1
10021c0c:	4d08      	ldr	r5, [pc, #32]	@ (10021c30 <_kill_r+0x28>)
10021c0e:	4603      	mov	r3, r0
10021c10:	2600      	movs	r6, #0
10021c12:	4620      	mov	r0, r4
10021c14:	4611      	mov	r1, r2
10021c16:	461c      	mov	r4, r3
10021c18:	602e      	str	r6, [r5, #0]
10021c1a:	f000 f815 	bl	10021c48 <_kill>
10021c1e:	1c43      	adds	r3, r0, #1
10021c20:	d000      	beq.n	10021c24 <_kill_r+0x1c>
10021c22:	bd70      	pop	{r4, r5, r6, pc}
10021c24:	682b      	ldr	r3, [r5, #0]
10021c26:	2b00      	cmp	r3, #0
10021c28:	d0fb      	beq.n	10021c22 <_kill_r+0x1a>
10021c2a:	6023      	str	r3, [r4, #0]
10021c2c:	bd70      	pop	{r4, r5, r6, pc}
10021c2e:	bf00      	nop
10021c30:	200015c4 	.word	0x200015c4

10021c34 <_getpid_r>:
10021c34:	f000 b800 	b.w	10021c38 <_getpid>

10021c38 <_getpid>:
10021c38:	4b02      	ldr	r3, [pc, #8]	@ (10021c44 <_getpid+0xc>)
10021c3a:	2258      	movs	r2, #88	@ 0x58
10021c3c:	601a      	str	r2, [r3, #0]
10021c3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10021c42:	4770      	bx	lr
10021c44:	200015c4 	.word	0x200015c4

10021c48 <_kill>:
10021c48:	4b02      	ldr	r3, [pc, #8]	@ (10021c54 <_kill+0xc>)
10021c4a:	2258      	movs	r2, #88	@ 0x58
10021c4c:	601a      	str	r2, [r3, #0]
10021c4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10021c52:	4770      	bx	lr
10021c54:	200015c4 	.word	0x200015c4

10021c58 <_exit>:
10021c58:	e7fe      	b.n	10021c58 <_exit>
10021c5a:	bf00      	nop

10021c5c <__aeabi_drsub>:
10021c5c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
10021c60:	e002      	b.n	10021c68 <__adddf3>
10021c62:	bf00      	nop

10021c64 <__aeabi_dsub>:
10021c64:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

10021c68 <__adddf3>:
10021c68:	b530      	push	{r4, r5, lr}
10021c6a:	ea4f 0441 	mov.w	r4, r1, lsl #1
10021c6e:	ea4f 0543 	mov.w	r5, r3, lsl #1
10021c72:	ea94 0f05 	teq	r4, r5
10021c76:	bf08      	it	eq
10021c78:	ea90 0f02 	teqeq	r0, r2
10021c7c:	bf1f      	itttt	ne
10021c7e:	ea54 0c00 	orrsne.w	ip, r4, r0
10021c82:	ea55 0c02 	orrsne.w	ip, r5, r2
10021c86:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
10021c8a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
10021c8e:	f000 80e2 	beq.w	10021e56 <__adddf3+0x1ee>
10021c92:	ea4f 5454 	mov.w	r4, r4, lsr #21
10021c96:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
10021c9a:	bfb8      	it	lt
10021c9c:	426d      	neglt	r5, r5
10021c9e:	dd0c      	ble.n	10021cba <__adddf3+0x52>
10021ca0:	442c      	add	r4, r5
10021ca2:	ea80 0202 	eor.w	r2, r0, r2
10021ca6:	ea81 0303 	eor.w	r3, r1, r3
10021caa:	ea82 0000 	eor.w	r0, r2, r0
10021cae:	ea83 0101 	eor.w	r1, r3, r1
10021cb2:	ea80 0202 	eor.w	r2, r0, r2
10021cb6:	ea81 0303 	eor.w	r3, r1, r3
10021cba:	2d36      	cmp	r5, #54	@ 0x36
10021cbc:	bf88      	it	hi
10021cbe:	bd30      	pophi	{r4, r5, pc}
10021cc0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
10021cc4:	ea4f 3101 	mov.w	r1, r1, lsl #12
10021cc8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
10021ccc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
10021cd0:	d002      	beq.n	10021cd8 <__adddf3+0x70>
10021cd2:	4240      	negs	r0, r0
10021cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10021cd8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
10021cdc:	ea4f 3303 	mov.w	r3, r3, lsl #12
10021ce0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
10021ce4:	d002      	beq.n	10021cec <__adddf3+0x84>
10021ce6:	4252      	negs	r2, r2
10021ce8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
10021cec:	ea94 0f05 	teq	r4, r5
10021cf0:	f000 80a7 	beq.w	10021e42 <__adddf3+0x1da>
10021cf4:	f1a4 0401 	sub.w	r4, r4, #1
10021cf8:	f1d5 0e20 	rsbs	lr, r5, #32
10021cfc:	db0d      	blt.n	10021d1a <__adddf3+0xb2>
10021cfe:	fa02 fc0e 	lsl.w	ip, r2, lr
10021d02:	fa22 f205 	lsr.w	r2, r2, r5
10021d06:	1880      	adds	r0, r0, r2
10021d08:	f141 0100 	adc.w	r1, r1, #0
10021d0c:	fa03 f20e 	lsl.w	r2, r3, lr
10021d10:	1880      	adds	r0, r0, r2
10021d12:	fa43 f305 	asr.w	r3, r3, r5
10021d16:	4159      	adcs	r1, r3
10021d18:	e00e      	b.n	10021d38 <__adddf3+0xd0>
10021d1a:	f1a5 0520 	sub.w	r5, r5, #32
10021d1e:	f10e 0e20 	add.w	lr, lr, #32
10021d22:	2a01      	cmp	r2, #1
10021d24:	fa03 fc0e 	lsl.w	ip, r3, lr
10021d28:	bf28      	it	cs
10021d2a:	f04c 0c02 	orrcs.w	ip, ip, #2
10021d2e:	fa43 f305 	asr.w	r3, r3, r5
10021d32:	18c0      	adds	r0, r0, r3
10021d34:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
10021d38:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
10021d3c:	d507      	bpl.n	10021d4e <__adddf3+0xe6>
10021d3e:	f04f 0e00 	mov.w	lr, #0
10021d42:	f1dc 0c00 	rsbs	ip, ip, #0
10021d46:	eb7e 0000 	sbcs.w	r0, lr, r0
10021d4a:	eb6e 0101 	sbc.w	r1, lr, r1
10021d4e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
10021d52:	d31b      	bcc.n	10021d8c <__adddf3+0x124>
10021d54:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
10021d58:	d30c      	bcc.n	10021d74 <__adddf3+0x10c>
10021d5a:	0849      	lsrs	r1, r1, #1
10021d5c:	ea5f 0030 	movs.w	r0, r0, rrx
10021d60:	ea4f 0c3c 	mov.w	ip, ip, rrx
10021d64:	f104 0401 	add.w	r4, r4, #1
10021d68:	ea4f 5244 	mov.w	r2, r4, lsl #21
10021d6c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
10021d70:	f080 809a 	bcs.w	10021ea8 <__adddf3+0x240>
10021d74:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
10021d78:	bf08      	it	eq
10021d7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10021d7e:	f150 0000 	adcs.w	r0, r0, #0
10021d82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
10021d86:	ea41 0105 	orr.w	r1, r1, r5
10021d8a:	bd30      	pop	{r4, r5, pc}
10021d8c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
10021d90:	4140      	adcs	r0, r0
10021d92:	eb41 0101 	adc.w	r1, r1, r1
10021d96:	3c01      	subs	r4, #1
10021d98:	bf28      	it	cs
10021d9a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
10021d9e:	d2e9      	bcs.n	10021d74 <__adddf3+0x10c>
10021da0:	f091 0f00 	teq	r1, #0
10021da4:	bf04      	itt	eq
10021da6:	4601      	moveq	r1, r0
10021da8:	2000      	moveq	r0, #0
10021daa:	fab1 f381 	clz	r3, r1
10021dae:	bf08      	it	eq
10021db0:	3320      	addeq	r3, #32
10021db2:	f1a3 030b 	sub.w	r3, r3, #11
10021db6:	f1b3 0220 	subs.w	r2, r3, #32
10021dba:	da0c      	bge.n	10021dd6 <__adddf3+0x16e>
10021dbc:	320c      	adds	r2, #12
10021dbe:	dd08      	ble.n	10021dd2 <__adddf3+0x16a>
10021dc0:	f102 0c14 	add.w	ip, r2, #20
10021dc4:	f1c2 020c 	rsb	r2, r2, #12
10021dc8:	fa01 f00c 	lsl.w	r0, r1, ip
10021dcc:	fa21 f102 	lsr.w	r1, r1, r2
10021dd0:	e00c      	b.n	10021dec <__adddf3+0x184>
10021dd2:	f102 0214 	add.w	r2, r2, #20
10021dd6:	bfd8      	it	le
10021dd8:	f1c2 0c20 	rsble	ip, r2, #32
10021ddc:	fa01 f102 	lsl.w	r1, r1, r2
10021de0:	fa20 fc0c 	lsr.w	ip, r0, ip
10021de4:	bfdc      	itt	le
10021de6:	ea41 010c 	orrle.w	r1, r1, ip
10021dea:	4090      	lslle	r0, r2
10021dec:	1ae4      	subs	r4, r4, r3
10021dee:	bfa2      	ittt	ge
10021df0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
10021df4:	4329      	orrge	r1, r5
10021df6:	bd30      	popge	{r4, r5, pc}
10021df8:	ea6f 0404 	mvn.w	r4, r4
10021dfc:	3c1f      	subs	r4, #31
10021dfe:	da1c      	bge.n	10021e3a <__adddf3+0x1d2>
10021e00:	340c      	adds	r4, #12
10021e02:	dc0e      	bgt.n	10021e22 <__adddf3+0x1ba>
10021e04:	f104 0414 	add.w	r4, r4, #20
10021e08:	f1c4 0220 	rsb	r2, r4, #32
10021e0c:	fa20 f004 	lsr.w	r0, r0, r4
10021e10:	fa01 f302 	lsl.w	r3, r1, r2
10021e14:	ea40 0003 	orr.w	r0, r0, r3
10021e18:	fa21 f304 	lsr.w	r3, r1, r4
10021e1c:	ea45 0103 	orr.w	r1, r5, r3
10021e20:	bd30      	pop	{r4, r5, pc}
10021e22:	f1c4 040c 	rsb	r4, r4, #12
10021e26:	f1c4 0220 	rsb	r2, r4, #32
10021e2a:	fa20 f002 	lsr.w	r0, r0, r2
10021e2e:	fa01 f304 	lsl.w	r3, r1, r4
10021e32:	ea40 0003 	orr.w	r0, r0, r3
10021e36:	4629      	mov	r1, r5
10021e38:	bd30      	pop	{r4, r5, pc}
10021e3a:	fa21 f004 	lsr.w	r0, r1, r4
10021e3e:	4629      	mov	r1, r5
10021e40:	bd30      	pop	{r4, r5, pc}
10021e42:	f094 0f00 	teq	r4, #0
10021e46:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
10021e4a:	bf06      	itte	eq
10021e4c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
10021e50:	3401      	addeq	r4, #1
10021e52:	3d01      	subne	r5, #1
10021e54:	e74e      	b.n	10021cf4 <__adddf3+0x8c>
10021e56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
10021e5a:	bf18      	it	ne
10021e5c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
10021e60:	d029      	beq.n	10021eb6 <__adddf3+0x24e>
10021e62:	ea94 0f05 	teq	r4, r5
10021e66:	bf08      	it	eq
10021e68:	ea90 0f02 	teqeq	r0, r2
10021e6c:	d005      	beq.n	10021e7a <__adddf3+0x212>
10021e6e:	ea54 0c00 	orrs.w	ip, r4, r0
10021e72:	bf04      	itt	eq
10021e74:	4619      	moveq	r1, r3
10021e76:	4610      	moveq	r0, r2
10021e78:	bd30      	pop	{r4, r5, pc}
10021e7a:	ea91 0f03 	teq	r1, r3
10021e7e:	bf1e      	ittt	ne
10021e80:	2100      	movne	r1, #0
10021e82:	2000      	movne	r0, #0
10021e84:	bd30      	popne	{r4, r5, pc}
10021e86:	ea5f 5c54 	movs.w	ip, r4, lsr #21
10021e8a:	d105      	bne.n	10021e98 <__adddf3+0x230>
10021e8c:	0040      	lsls	r0, r0, #1
10021e8e:	4149      	adcs	r1, r1
10021e90:	bf28      	it	cs
10021e92:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
10021e96:	bd30      	pop	{r4, r5, pc}
10021e98:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
10021e9c:	bf3c      	itt	cc
10021e9e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
10021ea2:	bd30      	popcc	{r4, r5, pc}
10021ea4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
10021ea8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
10021eac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
10021eb0:	f04f 0000 	mov.w	r0, #0
10021eb4:	bd30      	pop	{r4, r5, pc}
10021eb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
10021eba:	bf1a      	itte	ne
10021ebc:	4619      	movne	r1, r3
10021ebe:	4610      	movne	r0, r2
10021ec0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
10021ec4:	bf1c      	itt	ne
10021ec6:	460b      	movne	r3, r1
10021ec8:	4602      	movne	r2, r0
10021eca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
10021ece:	bf06      	itte	eq
10021ed0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
10021ed4:	ea91 0f03 	teqeq	r1, r3
10021ed8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
10021edc:	bd30      	pop	{r4, r5, pc}
10021ede:	bf00      	nop

10021ee0 <__aeabi_ui2d>:
10021ee0:	f090 0f00 	teq	r0, #0
10021ee4:	bf04      	itt	eq
10021ee6:	2100      	moveq	r1, #0
10021ee8:	4770      	bxeq	lr
10021eea:	b530      	push	{r4, r5, lr}
10021eec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
10021ef0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
10021ef4:	f04f 0500 	mov.w	r5, #0
10021ef8:	f04f 0100 	mov.w	r1, #0
10021efc:	e750      	b.n	10021da0 <__adddf3+0x138>
10021efe:	bf00      	nop

10021f00 <__aeabi_i2d>:
10021f00:	f090 0f00 	teq	r0, #0
10021f04:	bf04      	itt	eq
10021f06:	2100      	moveq	r1, #0
10021f08:	4770      	bxeq	lr
10021f0a:	b530      	push	{r4, r5, lr}
10021f0c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
10021f10:	f104 0432 	add.w	r4, r4, #50	@ 0x32
10021f14:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
10021f18:	bf48      	it	mi
10021f1a:	4240      	negmi	r0, r0
10021f1c:	f04f 0100 	mov.w	r1, #0
10021f20:	e73e      	b.n	10021da0 <__adddf3+0x138>
10021f22:	bf00      	nop

10021f24 <__aeabi_f2d>:
10021f24:	0042      	lsls	r2, r0, #1
10021f26:	ea4f 01e2 	mov.w	r1, r2, asr #3
10021f2a:	ea4f 0131 	mov.w	r1, r1, rrx
10021f2e:	ea4f 7002 	mov.w	r0, r2, lsl #28
10021f32:	bf1f      	itttt	ne
10021f34:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
10021f38:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
10021f3c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
10021f40:	4770      	bxne	lr
10021f42:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
10021f46:	bf08      	it	eq
10021f48:	4770      	bxeq	lr
10021f4a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
10021f4e:	bf04      	itt	eq
10021f50:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
10021f54:	4770      	bxeq	lr
10021f56:	b530      	push	{r4, r5, lr}
10021f58:	f44f 7460 	mov.w	r4, #896	@ 0x380
10021f5c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
10021f60:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
10021f64:	e71c      	b.n	10021da0 <__adddf3+0x138>
10021f66:	bf00      	nop

10021f68 <__aeabi_ul2d>:
10021f68:	ea50 0201 	orrs.w	r2, r0, r1
10021f6c:	bf08      	it	eq
10021f6e:	4770      	bxeq	lr
10021f70:	b530      	push	{r4, r5, lr}
10021f72:	f04f 0500 	mov.w	r5, #0
10021f76:	e00a      	b.n	10021f8e <__aeabi_l2d+0x16>

10021f78 <__aeabi_l2d>:
10021f78:	ea50 0201 	orrs.w	r2, r0, r1
10021f7c:	bf08      	it	eq
10021f7e:	4770      	bxeq	lr
10021f80:	b530      	push	{r4, r5, lr}
10021f82:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
10021f86:	d502      	bpl.n	10021f8e <__aeabi_l2d+0x16>
10021f88:	4240      	negs	r0, r0
10021f8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10021f8e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
10021f92:	f104 0432 	add.w	r4, r4, #50	@ 0x32
10021f96:	ea5f 5c91 	movs.w	ip, r1, lsr #22
10021f9a:	f43f aed8 	beq.w	10021d4e <__adddf3+0xe6>
10021f9e:	f04f 0203 	mov.w	r2, #3
10021fa2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
10021fa6:	bf18      	it	ne
10021fa8:	3203      	addne	r2, #3
10021faa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
10021fae:	bf18      	it	ne
10021fb0:	3203      	addne	r2, #3
10021fb2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
10021fb6:	f1c2 0320 	rsb	r3, r2, #32
10021fba:	fa00 fc03 	lsl.w	ip, r0, r3
10021fbe:	fa20 f002 	lsr.w	r0, r0, r2
10021fc2:	fa01 fe03 	lsl.w	lr, r1, r3
10021fc6:	ea40 000e 	orr.w	r0, r0, lr
10021fca:	fa21 f102 	lsr.w	r1, r1, r2
10021fce:	4414      	add	r4, r2
10021fd0:	e6bd      	b.n	10021d4e <__adddf3+0xe6>
10021fd2:	bf00      	nop

10021fd4 <__aeabi_dmul>:
10021fd4:	b570      	push	{r4, r5, r6, lr}
10021fd6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
10021fda:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
10021fde:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
10021fe2:	bf1d      	ittte	ne
10021fe4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
10021fe8:	ea94 0f0c 	teqne	r4, ip
10021fec:	ea95 0f0c 	teqne	r5, ip
10021ff0:	f000 f8de 	bleq	100221b0 <__aeabi_dmul+0x1dc>
10021ff4:	442c      	add	r4, r5
10021ff6:	ea81 0603 	eor.w	r6, r1, r3
10021ffa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
10021ffe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
10022002:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
10022006:	bf18      	it	ne
10022008:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1002200c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
10022010:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
10022014:	d038      	beq.n	10022088 <__aeabi_dmul+0xb4>
10022016:	fba0 ce02 	umull	ip, lr, r0, r2
1002201a:	f04f 0500 	mov.w	r5, #0
1002201e:	fbe1 e502 	umlal	lr, r5, r1, r2
10022022:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
10022026:	fbe0 e503 	umlal	lr, r5, r0, r3
1002202a:	f04f 0600 	mov.w	r6, #0
1002202e:	fbe1 5603 	umlal	r5, r6, r1, r3
10022032:	f09c 0f00 	teq	ip, #0
10022036:	bf18      	it	ne
10022038:	f04e 0e01 	orrne.w	lr, lr, #1
1002203c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
10022040:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
10022044:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
10022048:	d204      	bcs.n	10022054 <__aeabi_dmul+0x80>
1002204a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1002204e:	416d      	adcs	r5, r5
10022050:	eb46 0606 	adc.w	r6, r6, r6
10022054:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
10022058:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1002205c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
10022060:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
10022064:	ea4f 2ece 	mov.w	lr, lr, lsl #11
10022068:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
1002206c:	bf88      	it	hi
1002206e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
10022072:	d81e      	bhi.n	100220b2 <__aeabi_dmul+0xde>
10022074:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
10022078:	bf08      	it	eq
1002207a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1002207e:	f150 0000 	adcs.w	r0, r0, #0
10022082:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
10022086:	bd70      	pop	{r4, r5, r6, pc}
10022088:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
1002208c:	ea46 0101 	orr.w	r1, r6, r1
10022090:	ea40 0002 	orr.w	r0, r0, r2
10022094:	ea81 0103 	eor.w	r1, r1, r3
10022098:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1002209c:	bfc2      	ittt	gt
1002209e:	ebd4 050c 	rsbsgt	r5, r4, ip
100220a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
100220a6:	bd70      	popgt	{r4, r5, r6, pc}
100220a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
100220ac:	f04f 0e00 	mov.w	lr, #0
100220b0:	3c01      	subs	r4, #1
100220b2:	f300 80ab 	bgt.w	1002220c <__aeabi_dmul+0x238>
100220b6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
100220ba:	bfde      	ittt	le
100220bc:	2000      	movle	r0, #0
100220be:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
100220c2:	bd70      	pople	{r4, r5, r6, pc}
100220c4:	f1c4 0400 	rsb	r4, r4, #0
100220c8:	3c20      	subs	r4, #32
100220ca:	da35      	bge.n	10022138 <__aeabi_dmul+0x164>
100220cc:	340c      	adds	r4, #12
100220ce:	dc1b      	bgt.n	10022108 <__aeabi_dmul+0x134>
100220d0:	f104 0414 	add.w	r4, r4, #20
100220d4:	f1c4 0520 	rsb	r5, r4, #32
100220d8:	fa00 f305 	lsl.w	r3, r0, r5
100220dc:	fa20 f004 	lsr.w	r0, r0, r4
100220e0:	fa01 f205 	lsl.w	r2, r1, r5
100220e4:	ea40 0002 	orr.w	r0, r0, r2
100220e8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
100220ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
100220f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
100220f4:	fa21 f604 	lsr.w	r6, r1, r4
100220f8:	eb42 0106 	adc.w	r1, r2, r6
100220fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
10022100:	bf08      	it	eq
10022102:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
10022106:	bd70      	pop	{r4, r5, r6, pc}
10022108:	f1c4 040c 	rsb	r4, r4, #12
1002210c:	f1c4 0520 	rsb	r5, r4, #32
10022110:	fa00 f304 	lsl.w	r3, r0, r4
10022114:	fa20 f005 	lsr.w	r0, r0, r5
10022118:	fa01 f204 	lsl.w	r2, r1, r4
1002211c:	ea40 0002 	orr.w	r0, r0, r2
10022120:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
10022124:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
10022128:	f141 0100 	adc.w	r1, r1, #0
1002212c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
10022130:	bf08      	it	eq
10022132:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
10022136:	bd70      	pop	{r4, r5, r6, pc}
10022138:	f1c4 0520 	rsb	r5, r4, #32
1002213c:	fa00 f205 	lsl.w	r2, r0, r5
10022140:	ea4e 0e02 	orr.w	lr, lr, r2
10022144:	fa20 f304 	lsr.w	r3, r0, r4
10022148:	fa01 f205 	lsl.w	r2, r1, r5
1002214c:	ea43 0302 	orr.w	r3, r3, r2
10022150:	fa21 f004 	lsr.w	r0, r1, r4
10022154:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
10022158:	fa21 f204 	lsr.w	r2, r1, r4
1002215c:	ea20 0002 	bic.w	r0, r0, r2
10022160:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
10022164:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
10022168:	bf08      	it	eq
1002216a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1002216e:	bd70      	pop	{r4, r5, r6, pc}
10022170:	f094 0f00 	teq	r4, #0
10022174:	d10f      	bne.n	10022196 <__aeabi_dmul+0x1c2>
10022176:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
1002217a:	0040      	lsls	r0, r0, #1
1002217c:	eb41 0101 	adc.w	r1, r1, r1
10022180:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
10022184:	bf08      	it	eq
10022186:	3c01      	subeq	r4, #1
10022188:	d0f7      	beq.n	1002217a <__aeabi_dmul+0x1a6>
1002218a:	ea41 0106 	orr.w	r1, r1, r6
1002218e:	f095 0f00 	teq	r5, #0
10022192:	bf18      	it	ne
10022194:	4770      	bxne	lr
10022196:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
1002219a:	0052      	lsls	r2, r2, #1
1002219c:	eb43 0303 	adc.w	r3, r3, r3
100221a0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
100221a4:	bf08      	it	eq
100221a6:	3d01      	subeq	r5, #1
100221a8:	d0f7      	beq.n	1002219a <__aeabi_dmul+0x1c6>
100221aa:	ea43 0306 	orr.w	r3, r3, r6
100221ae:	4770      	bx	lr
100221b0:	ea94 0f0c 	teq	r4, ip
100221b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
100221b8:	bf18      	it	ne
100221ba:	ea95 0f0c 	teqne	r5, ip
100221be:	d00c      	beq.n	100221da <__aeabi_dmul+0x206>
100221c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
100221c4:	bf18      	it	ne
100221c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
100221ca:	d1d1      	bne.n	10022170 <__aeabi_dmul+0x19c>
100221cc:	ea81 0103 	eor.w	r1, r1, r3
100221d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
100221d4:	f04f 0000 	mov.w	r0, #0
100221d8:	bd70      	pop	{r4, r5, r6, pc}
100221da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
100221de:	bf06      	itte	eq
100221e0:	4610      	moveq	r0, r2
100221e2:	4619      	moveq	r1, r3
100221e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
100221e8:	d019      	beq.n	1002221e <__aeabi_dmul+0x24a>
100221ea:	ea94 0f0c 	teq	r4, ip
100221ee:	d102      	bne.n	100221f6 <__aeabi_dmul+0x222>
100221f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
100221f4:	d113      	bne.n	1002221e <__aeabi_dmul+0x24a>
100221f6:	ea95 0f0c 	teq	r5, ip
100221fa:	d105      	bne.n	10022208 <__aeabi_dmul+0x234>
100221fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
10022200:	bf1c      	itt	ne
10022202:	4610      	movne	r0, r2
10022204:	4619      	movne	r1, r3
10022206:	d10a      	bne.n	1002221e <__aeabi_dmul+0x24a>
10022208:	ea81 0103 	eor.w	r1, r1, r3
1002220c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
10022210:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
10022214:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
10022218:	f04f 0000 	mov.w	r0, #0
1002221c:	bd70      	pop	{r4, r5, r6, pc}
1002221e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
10022222:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
10022226:	bd70      	pop	{r4, r5, r6, pc}

10022228 <__aeabi_ddiv>:
10022228:	b570      	push	{r4, r5, r6, lr}
1002222a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
1002222e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
10022232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
10022236:	bf1d      	ittte	ne
10022238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1002223c:	ea94 0f0c 	teqne	r4, ip
10022240:	ea95 0f0c 	teqne	r5, ip
10022244:	f000 f8a7 	bleq	10022396 <__aeabi_ddiv+0x16e>
10022248:	eba4 0405 	sub.w	r4, r4, r5
1002224c:	ea81 0e03 	eor.w	lr, r1, r3
10022250:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
10022254:	ea4f 3101 	mov.w	r1, r1, lsl #12
10022258:	f000 8088 	beq.w	1002236c <__aeabi_ddiv+0x144>
1002225c:	ea4f 3303 	mov.w	r3, r3, lsl #12
10022260:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
10022264:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
10022268:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1002226c:	ea4f 2202 	mov.w	r2, r2, lsl #8
10022270:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
10022274:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
10022278:	ea4f 2600 	mov.w	r6, r0, lsl #8
1002227c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
10022280:	429d      	cmp	r5, r3
10022282:	bf08      	it	eq
10022284:	4296      	cmpeq	r6, r2
10022286:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
1002228a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
1002228e:	d202      	bcs.n	10022296 <__aeabi_ddiv+0x6e>
10022290:	085b      	lsrs	r3, r3, #1
10022292:	ea4f 0232 	mov.w	r2, r2, rrx
10022296:	1ab6      	subs	r6, r6, r2
10022298:	eb65 0503 	sbc.w	r5, r5, r3
1002229c:	085b      	lsrs	r3, r3, #1
1002229e:	ea4f 0232 	mov.w	r2, r2, rrx
100222a2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
100222a6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
100222aa:	ebb6 0e02 	subs.w	lr, r6, r2
100222ae:	eb75 0e03 	sbcs.w	lr, r5, r3
100222b2:	bf22      	ittt	cs
100222b4:	1ab6      	subcs	r6, r6, r2
100222b6:	4675      	movcs	r5, lr
100222b8:	ea40 000c 	orrcs.w	r0, r0, ip
100222bc:	085b      	lsrs	r3, r3, #1
100222be:	ea4f 0232 	mov.w	r2, r2, rrx
100222c2:	ebb6 0e02 	subs.w	lr, r6, r2
100222c6:	eb75 0e03 	sbcs.w	lr, r5, r3
100222ca:	bf22      	ittt	cs
100222cc:	1ab6      	subcs	r6, r6, r2
100222ce:	4675      	movcs	r5, lr
100222d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
100222d4:	085b      	lsrs	r3, r3, #1
100222d6:	ea4f 0232 	mov.w	r2, r2, rrx
100222da:	ebb6 0e02 	subs.w	lr, r6, r2
100222de:	eb75 0e03 	sbcs.w	lr, r5, r3
100222e2:	bf22      	ittt	cs
100222e4:	1ab6      	subcs	r6, r6, r2
100222e6:	4675      	movcs	r5, lr
100222e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
100222ec:	085b      	lsrs	r3, r3, #1
100222ee:	ea4f 0232 	mov.w	r2, r2, rrx
100222f2:	ebb6 0e02 	subs.w	lr, r6, r2
100222f6:	eb75 0e03 	sbcs.w	lr, r5, r3
100222fa:	bf22      	ittt	cs
100222fc:	1ab6      	subcs	r6, r6, r2
100222fe:	4675      	movcs	r5, lr
10022300:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
10022304:	ea55 0e06 	orrs.w	lr, r5, r6
10022308:	d018      	beq.n	1002233c <__aeabi_ddiv+0x114>
1002230a:	ea4f 1505 	mov.w	r5, r5, lsl #4
1002230e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
10022312:	ea4f 1606 	mov.w	r6, r6, lsl #4
10022316:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1002231a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1002231e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
10022322:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
10022326:	d1c0      	bne.n	100222aa <__aeabi_ddiv+0x82>
10022328:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
1002232c:	d10b      	bne.n	10022346 <__aeabi_ddiv+0x11e>
1002232e:	ea41 0100 	orr.w	r1, r1, r0
10022332:	f04f 0000 	mov.w	r0, #0
10022336:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
1002233a:	e7b6      	b.n	100222aa <__aeabi_ddiv+0x82>
1002233c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
10022340:	bf04      	itt	eq
10022342:	4301      	orreq	r1, r0
10022344:	2000      	moveq	r0, #0
10022346:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
1002234a:	bf88      	it	hi
1002234c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
10022350:	f63f aeaf 	bhi.w	100220b2 <__aeabi_dmul+0xde>
10022354:	ebb5 0c03 	subs.w	ip, r5, r3
10022358:	bf04      	itt	eq
1002235a:	ebb6 0c02 	subseq.w	ip, r6, r2
1002235e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10022362:	f150 0000 	adcs.w	r0, r0, #0
10022366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1002236a:	bd70      	pop	{r4, r5, r6, pc}
1002236c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
10022370:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
10022374:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
10022378:	bfc2      	ittt	gt
1002237a:	ebd4 050c 	rsbsgt	r5, r4, ip
1002237e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
10022382:	bd70      	popgt	{r4, r5, r6, pc}
10022384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
10022388:	f04f 0e00 	mov.w	lr, #0
1002238c:	3c01      	subs	r4, #1
1002238e:	e690      	b.n	100220b2 <__aeabi_dmul+0xde>
10022390:	ea45 0e06 	orr.w	lr, r5, r6
10022394:	e68d      	b.n	100220b2 <__aeabi_dmul+0xde>
10022396:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1002239a:	ea94 0f0c 	teq	r4, ip
1002239e:	bf08      	it	eq
100223a0:	ea95 0f0c 	teqeq	r5, ip
100223a4:	f43f af3b 	beq.w	1002221e <__aeabi_dmul+0x24a>
100223a8:	ea94 0f0c 	teq	r4, ip
100223ac:	d10a      	bne.n	100223c4 <__aeabi_ddiv+0x19c>
100223ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
100223b2:	f47f af34 	bne.w	1002221e <__aeabi_dmul+0x24a>
100223b6:	ea95 0f0c 	teq	r5, ip
100223ba:	f47f af25 	bne.w	10022208 <__aeabi_dmul+0x234>
100223be:	4610      	mov	r0, r2
100223c0:	4619      	mov	r1, r3
100223c2:	e72c      	b.n	1002221e <__aeabi_dmul+0x24a>
100223c4:	ea95 0f0c 	teq	r5, ip
100223c8:	d106      	bne.n	100223d8 <__aeabi_ddiv+0x1b0>
100223ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
100223ce:	f43f aefd 	beq.w	100221cc <__aeabi_dmul+0x1f8>
100223d2:	4610      	mov	r0, r2
100223d4:	4619      	mov	r1, r3
100223d6:	e722      	b.n	1002221e <__aeabi_dmul+0x24a>
100223d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
100223dc:	bf18      	it	ne
100223de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
100223e2:	f47f aec5 	bne.w	10022170 <__aeabi_dmul+0x19c>
100223e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
100223ea:	f47f af0d 	bne.w	10022208 <__aeabi_dmul+0x234>
100223ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
100223f2:	f47f aeeb 	bne.w	100221cc <__aeabi_dmul+0x1f8>
100223f6:	e712      	b.n	1002221e <__aeabi_dmul+0x24a>

100223f8 <__gedf2>:
100223f8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
100223fc:	e006      	b.n	1002240c <__cmpdf2+0x4>
100223fe:	bf00      	nop

10022400 <__ledf2>:
10022400:	f04f 0c01 	mov.w	ip, #1
10022404:	e002      	b.n	1002240c <__cmpdf2+0x4>
10022406:	bf00      	nop

10022408 <__cmpdf2>:
10022408:	f04f 0c01 	mov.w	ip, #1
1002240c:	f84d cd04 	str.w	ip, [sp, #-4]!
10022410:	ea4f 0c41 	mov.w	ip, r1, lsl #1
10022414:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10022418:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1002241c:	bf18      	it	ne
1002241e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
10022422:	d01b      	beq.n	1002245c <__cmpdf2+0x54>
10022424:	b001      	add	sp, #4
10022426:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1002242a:	bf0c      	ite	eq
1002242c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
10022430:	ea91 0f03 	teqne	r1, r3
10022434:	bf02      	ittt	eq
10022436:	ea90 0f02 	teqeq	r0, r2
1002243a:	2000      	moveq	r0, #0
1002243c:	4770      	bxeq	lr
1002243e:	f110 0f00 	cmn.w	r0, #0
10022442:	ea91 0f03 	teq	r1, r3
10022446:	bf58      	it	pl
10022448:	4299      	cmppl	r1, r3
1002244a:	bf08      	it	eq
1002244c:	4290      	cmpeq	r0, r2
1002244e:	bf2c      	ite	cs
10022450:	17d8      	asrcs	r0, r3, #31
10022452:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
10022456:	f040 0001 	orr.w	r0, r0, #1
1002245a:	4770      	bx	lr
1002245c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
10022460:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10022464:	d102      	bne.n	1002246c <__cmpdf2+0x64>
10022466:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1002246a:	d107      	bne.n	1002247c <__cmpdf2+0x74>
1002246c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
10022470:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10022474:	d1d6      	bne.n	10022424 <__cmpdf2+0x1c>
10022476:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1002247a:	d0d3      	beq.n	10022424 <__cmpdf2+0x1c>
1002247c:	f85d 0b04 	ldr.w	r0, [sp], #4
10022480:	4770      	bx	lr
10022482:	bf00      	nop

10022484 <__aeabi_cdrcmple>:
10022484:	4684      	mov	ip, r0
10022486:	4610      	mov	r0, r2
10022488:	4662      	mov	r2, ip
1002248a:	468c      	mov	ip, r1
1002248c:	4619      	mov	r1, r3
1002248e:	4663      	mov	r3, ip
10022490:	e000      	b.n	10022494 <__aeabi_cdcmpeq>
10022492:	bf00      	nop

10022494 <__aeabi_cdcmpeq>:
10022494:	b501      	push	{r0, lr}
10022496:	f7ff ffb7 	bl	10022408 <__cmpdf2>
1002249a:	2800      	cmp	r0, #0
1002249c:	bf48      	it	mi
1002249e:	f110 0f00 	cmnmi.w	r0, #0
100224a2:	bd01      	pop	{r0, pc}

100224a4 <__aeabi_dcmpeq>:
100224a4:	f84d ed08 	str.w	lr, [sp, #-8]!
100224a8:	f7ff fff4 	bl	10022494 <__aeabi_cdcmpeq>
100224ac:	bf0c      	ite	eq
100224ae:	2001      	moveq	r0, #1
100224b0:	2000      	movne	r0, #0
100224b2:	f85d fb08 	ldr.w	pc, [sp], #8
100224b6:	bf00      	nop

100224b8 <__aeabi_dcmplt>:
100224b8:	f84d ed08 	str.w	lr, [sp, #-8]!
100224bc:	f7ff ffea 	bl	10022494 <__aeabi_cdcmpeq>
100224c0:	bf34      	ite	cc
100224c2:	2001      	movcc	r0, #1
100224c4:	2000      	movcs	r0, #0
100224c6:	f85d fb08 	ldr.w	pc, [sp], #8
100224ca:	bf00      	nop

100224cc <__aeabi_dcmple>:
100224cc:	f84d ed08 	str.w	lr, [sp, #-8]!
100224d0:	f7ff ffe0 	bl	10022494 <__aeabi_cdcmpeq>
100224d4:	bf94      	ite	ls
100224d6:	2001      	movls	r0, #1
100224d8:	2000      	movhi	r0, #0
100224da:	f85d fb08 	ldr.w	pc, [sp], #8
100224de:	bf00      	nop

100224e0 <__aeabi_dcmpge>:
100224e0:	f84d ed08 	str.w	lr, [sp, #-8]!
100224e4:	f7ff ffce 	bl	10022484 <__aeabi_cdrcmple>
100224e8:	bf94      	ite	ls
100224ea:	2001      	movls	r0, #1
100224ec:	2000      	movhi	r0, #0
100224ee:	f85d fb08 	ldr.w	pc, [sp], #8
100224f2:	bf00      	nop

100224f4 <__aeabi_dcmpgt>:
100224f4:	f84d ed08 	str.w	lr, [sp, #-8]!
100224f8:	f7ff ffc4 	bl	10022484 <__aeabi_cdrcmple>
100224fc:	bf34      	ite	cc
100224fe:	2001      	movcc	r0, #1
10022500:	2000      	movcs	r0, #0
10022502:	f85d fb08 	ldr.w	pc, [sp], #8
10022506:	bf00      	nop

10022508 <__aeabi_dcmpun>:
10022508:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1002250c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10022510:	d102      	bne.n	10022518 <__aeabi_dcmpun+0x10>
10022512:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
10022516:	d10a      	bne.n	1002252e <__aeabi_dcmpun+0x26>
10022518:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1002251c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10022520:	d102      	bne.n	10022528 <__aeabi_dcmpun+0x20>
10022522:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
10022526:	d102      	bne.n	1002252e <__aeabi_dcmpun+0x26>
10022528:	f04f 0000 	mov.w	r0, #0
1002252c:	4770      	bx	lr
1002252e:	f04f 0001 	mov.w	r0, #1
10022532:	4770      	bx	lr

10022534 <__aeabi_d2iz>:
10022534:	ea4f 0241 	mov.w	r2, r1, lsl #1
10022538:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
1002253c:	d215      	bcs.n	1002256a <__aeabi_d2iz+0x36>
1002253e:	d511      	bpl.n	10022564 <__aeabi_d2iz+0x30>
10022540:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
10022544:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
10022548:	d912      	bls.n	10022570 <__aeabi_d2iz+0x3c>
1002254a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1002254e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
10022552:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
10022556:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
1002255a:	fa23 f002 	lsr.w	r0, r3, r2
1002255e:	bf18      	it	ne
10022560:	4240      	negne	r0, r0
10022562:	4770      	bx	lr
10022564:	f04f 0000 	mov.w	r0, #0
10022568:	4770      	bx	lr
1002256a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1002256e:	d105      	bne.n	1002257c <__aeabi_d2iz+0x48>
10022570:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
10022574:	bf08      	it	eq
10022576:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
1002257a:	4770      	bx	lr
1002257c:	f04f 0000 	mov.w	r0, #0
10022580:	4770      	bx	lr
10022582:	bf00      	nop

10022584 <__aeabi_d2uiz>:
10022584:	004a      	lsls	r2, r1, #1
10022586:	d211      	bcs.n	100225ac <__aeabi_d2uiz+0x28>
10022588:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
1002258c:	d211      	bcs.n	100225b2 <__aeabi_d2uiz+0x2e>
1002258e:	d50d      	bpl.n	100225ac <__aeabi_d2uiz+0x28>
10022590:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
10022594:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
10022598:	d40e      	bmi.n	100225b8 <__aeabi_d2uiz+0x34>
1002259a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1002259e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
100225a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
100225a6:	fa23 f002 	lsr.w	r0, r3, r2
100225aa:	4770      	bx	lr
100225ac:	f04f 0000 	mov.w	r0, #0
100225b0:	4770      	bx	lr
100225b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
100225b6:	d102      	bne.n	100225be <__aeabi_d2uiz+0x3a>
100225b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100225bc:	4770      	bx	lr
100225be:	f04f 0000 	mov.w	r0, #0
100225c2:	4770      	bx	lr

100225c4 <__aeabi_d2f>:
100225c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
100225c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
100225cc:	bf24      	itt	cs
100225ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
100225d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
100225d6:	d90d      	bls.n	100225f4 <__aeabi_d2f+0x30>
100225d8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
100225dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
100225e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
100225e4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
100225e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
100225ec:	bf08      	it	eq
100225ee:	f020 0001 	biceq.w	r0, r0, #1
100225f2:	4770      	bx	lr
100225f4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
100225f8:	d121      	bne.n	1002263e <__aeabi_d2f+0x7a>
100225fa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
100225fe:	bfbc      	itt	lt
10022600:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
10022604:	4770      	bxlt	lr
10022606:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
1002260a:	ea4f 5252 	mov.w	r2, r2, lsr #21
1002260e:	f1c2 0218 	rsb	r2, r2, #24
10022612:	f1c2 0c20 	rsb	ip, r2, #32
10022616:	fa10 f30c 	lsls.w	r3, r0, ip
1002261a:	fa20 f002 	lsr.w	r0, r0, r2
1002261e:	bf18      	it	ne
10022620:	f040 0001 	orrne.w	r0, r0, #1
10022624:	ea4f 23c1 	mov.w	r3, r1, lsl #11
10022628:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1002262c:	fa03 fc0c 	lsl.w	ip, r3, ip
10022630:	ea40 000c 	orr.w	r0, r0, ip
10022634:	fa23 f302 	lsr.w	r3, r3, r2
10022638:	ea4f 0343 	mov.w	r3, r3, lsl #1
1002263c:	e7cc      	b.n	100225d8 <__aeabi_d2f+0x14>
1002263e:	ea7f 5362 	mvns.w	r3, r2, asr #21
10022642:	d107      	bne.n	10022654 <__aeabi_d2f+0x90>
10022644:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
10022648:	bf1e      	ittt	ne
1002264a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
1002264e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
10022652:	4770      	bxne	lr
10022654:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
10022658:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
1002265c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
10022660:	4770      	bx	lr
10022662:	bf00      	nop

10022664 <__aeabi_uldivmod>:
10022664:	b953      	cbnz	r3, 1002267c <__aeabi_uldivmod+0x18>
10022666:	b94a      	cbnz	r2, 1002267c <__aeabi_uldivmod+0x18>
10022668:	2900      	cmp	r1, #0
1002266a:	bf08      	it	eq
1002266c:	2800      	cmpeq	r0, #0
1002266e:	bf1c      	itt	ne
10022670:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
10022674:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
10022678:	f000 b9a0 	b.w	100229bc <__aeabi_idiv0>
1002267c:	f1ad 0c08 	sub.w	ip, sp, #8
10022680:	e96d ce04 	strd	ip, lr, [sp, #-16]!
10022684:	f000 f83c 	bl	10022700 <__udivmoddi4>
10022688:	f8dd e004 	ldr.w	lr, [sp, #4]
1002268c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
10022690:	b004      	add	sp, #16
10022692:	4770      	bx	lr

10022694 <__aeabi_d2lz>:
10022694:	b538      	push	{r3, r4, r5, lr}
10022696:	2200      	movs	r2, #0
10022698:	2300      	movs	r3, #0
1002269a:	4604      	mov	r4, r0
1002269c:	460d      	mov	r5, r1
1002269e:	f7ff ff0b 	bl	100224b8 <__aeabi_dcmplt>
100226a2:	b928      	cbnz	r0, 100226b0 <__aeabi_d2lz+0x1c>
100226a4:	4620      	mov	r0, r4
100226a6:	4629      	mov	r1, r5
100226a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
100226ac:	f000 b80a 	b.w	100226c4 <__aeabi_d2ulz>
100226b0:	4620      	mov	r0, r4
100226b2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
100226b6:	f000 f805 	bl	100226c4 <__aeabi_d2ulz>
100226ba:	4240      	negs	r0, r0
100226bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
100226c0:	bd38      	pop	{r3, r4, r5, pc}
100226c2:	bf00      	nop

100226c4 <__aeabi_d2ulz>:
100226c4:	b5d0      	push	{r4, r6, r7, lr}
100226c6:	4b0c      	ldr	r3, [pc, #48]	@ (100226f8 <__aeabi_d2ulz+0x34>)
100226c8:	2200      	movs	r2, #0
100226ca:	4606      	mov	r6, r0
100226cc:	460f      	mov	r7, r1
100226ce:	f7ff fc81 	bl	10021fd4 <__aeabi_dmul>
100226d2:	f7ff ff57 	bl	10022584 <__aeabi_d2uiz>
100226d6:	4604      	mov	r4, r0
100226d8:	f7ff fc02 	bl	10021ee0 <__aeabi_ui2d>
100226dc:	4b07      	ldr	r3, [pc, #28]	@ (100226fc <__aeabi_d2ulz+0x38>)
100226de:	2200      	movs	r2, #0
100226e0:	f7ff fc78 	bl	10021fd4 <__aeabi_dmul>
100226e4:	4602      	mov	r2, r0
100226e6:	460b      	mov	r3, r1
100226e8:	4630      	mov	r0, r6
100226ea:	4639      	mov	r1, r7
100226ec:	f7ff faba 	bl	10021c64 <__aeabi_dsub>
100226f0:	f7ff ff48 	bl	10022584 <__aeabi_d2uiz>
100226f4:	4621      	mov	r1, r4
100226f6:	bdd0      	pop	{r4, r6, r7, pc}
100226f8:	3df00000 	.word	0x3df00000
100226fc:	41f00000 	.word	0x41f00000

10022700 <__udivmoddi4>:
10022700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10022704:	9d08      	ldr	r5, [sp, #32]
10022706:	460c      	mov	r4, r1
10022708:	2b00      	cmp	r3, #0
1002270a:	d14e      	bne.n	100227aa <__udivmoddi4+0xaa>
1002270c:	4694      	mov	ip, r2
1002270e:	458c      	cmp	ip, r1
10022710:	4686      	mov	lr, r0
10022712:	fab2 f282 	clz	r2, r2
10022716:	d962      	bls.n	100227de <__udivmoddi4+0xde>
10022718:	b14a      	cbz	r2, 1002272e <__udivmoddi4+0x2e>
1002271a:	f1c2 0320 	rsb	r3, r2, #32
1002271e:	4091      	lsls	r1, r2
10022720:	fa20 f303 	lsr.w	r3, r0, r3
10022724:	fa0c fc02 	lsl.w	ip, ip, r2
10022728:	4319      	orrs	r1, r3
1002272a:	fa00 fe02 	lsl.w	lr, r0, r2
1002272e:	ea4f 471c 	mov.w	r7, ip, lsr #16
10022732:	fa1f f68c 	uxth.w	r6, ip
10022736:	fbb1 f4f7 	udiv	r4, r1, r7
1002273a:	ea4f 431e 	mov.w	r3, lr, lsr #16
1002273e:	fb07 1114 	mls	r1, r7, r4, r1
10022742:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
10022746:	fb04 f106 	mul.w	r1, r4, r6
1002274a:	4299      	cmp	r1, r3
1002274c:	d90a      	bls.n	10022764 <__udivmoddi4+0x64>
1002274e:	eb1c 0303 	adds.w	r3, ip, r3
10022752:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
10022756:	f080 8112 	bcs.w	1002297e <__udivmoddi4+0x27e>
1002275a:	4299      	cmp	r1, r3
1002275c:	f240 810f 	bls.w	1002297e <__udivmoddi4+0x27e>
10022760:	3c02      	subs	r4, #2
10022762:	4463      	add	r3, ip
10022764:	1a59      	subs	r1, r3, r1
10022766:	fa1f f38e 	uxth.w	r3, lr
1002276a:	fbb1 f0f7 	udiv	r0, r1, r7
1002276e:	fb07 1110 	mls	r1, r7, r0, r1
10022772:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
10022776:	fb00 f606 	mul.w	r6, r0, r6
1002277a:	429e      	cmp	r6, r3
1002277c:	d90a      	bls.n	10022794 <__udivmoddi4+0x94>
1002277e:	eb1c 0303 	adds.w	r3, ip, r3
10022782:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
10022786:	f080 80fc 	bcs.w	10022982 <__udivmoddi4+0x282>
1002278a:	429e      	cmp	r6, r3
1002278c:	f240 80f9 	bls.w	10022982 <__udivmoddi4+0x282>
10022790:	4463      	add	r3, ip
10022792:	3802      	subs	r0, #2
10022794:	1b9b      	subs	r3, r3, r6
10022796:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
1002279a:	2100      	movs	r1, #0
1002279c:	b11d      	cbz	r5, 100227a6 <__udivmoddi4+0xa6>
1002279e:	40d3      	lsrs	r3, r2
100227a0:	2200      	movs	r2, #0
100227a2:	e9c5 3200 	strd	r3, r2, [r5]
100227a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100227aa:	428b      	cmp	r3, r1
100227ac:	d905      	bls.n	100227ba <__udivmoddi4+0xba>
100227ae:	b10d      	cbz	r5, 100227b4 <__udivmoddi4+0xb4>
100227b0:	e9c5 0100 	strd	r0, r1, [r5]
100227b4:	2100      	movs	r1, #0
100227b6:	4608      	mov	r0, r1
100227b8:	e7f5      	b.n	100227a6 <__udivmoddi4+0xa6>
100227ba:	fab3 f183 	clz	r1, r3
100227be:	2900      	cmp	r1, #0
100227c0:	d146      	bne.n	10022850 <__udivmoddi4+0x150>
100227c2:	42a3      	cmp	r3, r4
100227c4:	d302      	bcc.n	100227cc <__udivmoddi4+0xcc>
100227c6:	4290      	cmp	r0, r2
100227c8:	f0c0 80f0 	bcc.w	100229ac <__udivmoddi4+0x2ac>
100227cc:	1a86      	subs	r6, r0, r2
100227ce:	eb64 0303 	sbc.w	r3, r4, r3
100227d2:	2001      	movs	r0, #1
100227d4:	2d00      	cmp	r5, #0
100227d6:	d0e6      	beq.n	100227a6 <__udivmoddi4+0xa6>
100227d8:	e9c5 6300 	strd	r6, r3, [r5]
100227dc:	e7e3      	b.n	100227a6 <__udivmoddi4+0xa6>
100227de:	2a00      	cmp	r2, #0
100227e0:	f040 8090 	bne.w	10022904 <__udivmoddi4+0x204>
100227e4:	eba1 040c 	sub.w	r4, r1, ip
100227e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
100227ec:	fa1f f78c 	uxth.w	r7, ip
100227f0:	2101      	movs	r1, #1
100227f2:	fbb4 f6f8 	udiv	r6, r4, r8
100227f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
100227fa:	fb08 4416 	mls	r4, r8, r6, r4
100227fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
10022802:	fb07 f006 	mul.w	r0, r7, r6
10022806:	4298      	cmp	r0, r3
10022808:	d908      	bls.n	1002281c <__udivmoddi4+0x11c>
1002280a:	eb1c 0303 	adds.w	r3, ip, r3
1002280e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
10022812:	d202      	bcs.n	1002281a <__udivmoddi4+0x11a>
10022814:	4298      	cmp	r0, r3
10022816:	f200 80cd 	bhi.w	100229b4 <__udivmoddi4+0x2b4>
1002281a:	4626      	mov	r6, r4
1002281c:	1a1c      	subs	r4, r3, r0
1002281e:	fa1f f38e 	uxth.w	r3, lr
10022822:	fbb4 f0f8 	udiv	r0, r4, r8
10022826:	fb08 4410 	mls	r4, r8, r0, r4
1002282a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
1002282e:	fb00 f707 	mul.w	r7, r0, r7
10022832:	429f      	cmp	r7, r3
10022834:	d908      	bls.n	10022848 <__udivmoddi4+0x148>
10022836:	eb1c 0303 	adds.w	r3, ip, r3
1002283a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
1002283e:	d202      	bcs.n	10022846 <__udivmoddi4+0x146>
10022840:	429f      	cmp	r7, r3
10022842:	f200 80b0 	bhi.w	100229a6 <__udivmoddi4+0x2a6>
10022846:	4620      	mov	r0, r4
10022848:	1bdb      	subs	r3, r3, r7
1002284a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
1002284e:	e7a5      	b.n	1002279c <__udivmoddi4+0x9c>
10022850:	f1c1 0620 	rsb	r6, r1, #32
10022854:	408b      	lsls	r3, r1
10022856:	fa22 f706 	lsr.w	r7, r2, r6
1002285a:	431f      	orrs	r7, r3
1002285c:	fa20 fc06 	lsr.w	ip, r0, r6
10022860:	fa04 f301 	lsl.w	r3, r4, r1
10022864:	ea43 030c 	orr.w	r3, r3, ip
10022868:	40f4      	lsrs	r4, r6
1002286a:	fa00 f801 	lsl.w	r8, r0, r1
1002286e:	0c38      	lsrs	r0, r7, #16
10022870:	ea4f 4913 	mov.w	r9, r3, lsr #16
10022874:	fbb4 fef0 	udiv	lr, r4, r0
10022878:	fa1f fc87 	uxth.w	ip, r7
1002287c:	fb00 441e 	mls	r4, r0, lr, r4
10022880:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
10022884:	fb0e f90c 	mul.w	r9, lr, ip
10022888:	45a1      	cmp	r9, r4
1002288a:	fa02 f201 	lsl.w	r2, r2, r1
1002288e:	d90a      	bls.n	100228a6 <__udivmoddi4+0x1a6>
10022890:	193c      	adds	r4, r7, r4
10022892:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
10022896:	f080 8084 	bcs.w	100229a2 <__udivmoddi4+0x2a2>
1002289a:	45a1      	cmp	r9, r4
1002289c:	f240 8081 	bls.w	100229a2 <__udivmoddi4+0x2a2>
100228a0:	f1ae 0e02 	sub.w	lr, lr, #2
100228a4:	443c      	add	r4, r7
100228a6:	eba4 0409 	sub.w	r4, r4, r9
100228aa:	fa1f f983 	uxth.w	r9, r3
100228ae:	fbb4 f3f0 	udiv	r3, r4, r0
100228b2:	fb00 4413 	mls	r4, r0, r3, r4
100228b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
100228ba:	fb03 fc0c 	mul.w	ip, r3, ip
100228be:	45a4      	cmp	ip, r4
100228c0:	d907      	bls.n	100228d2 <__udivmoddi4+0x1d2>
100228c2:	193c      	adds	r4, r7, r4
100228c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
100228c8:	d267      	bcs.n	1002299a <__udivmoddi4+0x29a>
100228ca:	45a4      	cmp	ip, r4
100228cc:	d965      	bls.n	1002299a <__udivmoddi4+0x29a>
100228ce:	3b02      	subs	r3, #2
100228d0:	443c      	add	r4, r7
100228d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
100228d6:	fba0 9302 	umull	r9, r3, r0, r2
100228da:	eba4 040c 	sub.w	r4, r4, ip
100228de:	429c      	cmp	r4, r3
100228e0:	46ce      	mov	lr, r9
100228e2:	469c      	mov	ip, r3
100228e4:	d351      	bcc.n	1002298a <__udivmoddi4+0x28a>
100228e6:	d04e      	beq.n	10022986 <__udivmoddi4+0x286>
100228e8:	b155      	cbz	r5, 10022900 <__udivmoddi4+0x200>
100228ea:	ebb8 030e 	subs.w	r3, r8, lr
100228ee:	eb64 040c 	sbc.w	r4, r4, ip
100228f2:	fa04 f606 	lsl.w	r6, r4, r6
100228f6:	40cb      	lsrs	r3, r1
100228f8:	431e      	orrs	r6, r3
100228fa:	40cc      	lsrs	r4, r1
100228fc:	e9c5 6400 	strd	r6, r4, [r5]
10022900:	2100      	movs	r1, #0
10022902:	e750      	b.n	100227a6 <__udivmoddi4+0xa6>
10022904:	f1c2 0320 	rsb	r3, r2, #32
10022908:	fa20 f103 	lsr.w	r1, r0, r3
1002290c:	fa0c fc02 	lsl.w	ip, ip, r2
10022910:	fa24 f303 	lsr.w	r3, r4, r3
10022914:	4094      	lsls	r4, r2
10022916:	430c      	orrs	r4, r1
10022918:	ea4f 481c 	mov.w	r8, ip, lsr #16
1002291c:	fa00 fe02 	lsl.w	lr, r0, r2
10022920:	fa1f f78c 	uxth.w	r7, ip
10022924:	fbb3 f0f8 	udiv	r0, r3, r8
10022928:	fb08 3110 	mls	r1, r8, r0, r3
1002292c:	0c23      	lsrs	r3, r4, #16
1002292e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
10022932:	fb00 f107 	mul.w	r1, r0, r7
10022936:	4299      	cmp	r1, r3
10022938:	d908      	bls.n	1002294c <__udivmoddi4+0x24c>
1002293a:	eb1c 0303 	adds.w	r3, ip, r3
1002293e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
10022942:	d22c      	bcs.n	1002299e <__udivmoddi4+0x29e>
10022944:	4299      	cmp	r1, r3
10022946:	d92a      	bls.n	1002299e <__udivmoddi4+0x29e>
10022948:	3802      	subs	r0, #2
1002294a:	4463      	add	r3, ip
1002294c:	1a5b      	subs	r3, r3, r1
1002294e:	b2a4      	uxth	r4, r4
10022950:	fbb3 f1f8 	udiv	r1, r3, r8
10022954:	fb08 3311 	mls	r3, r8, r1, r3
10022958:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1002295c:	fb01 f307 	mul.w	r3, r1, r7
10022960:	42a3      	cmp	r3, r4
10022962:	d908      	bls.n	10022976 <__udivmoddi4+0x276>
10022964:	eb1c 0404 	adds.w	r4, ip, r4
10022968:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
1002296c:	d213      	bcs.n	10022996 <__udivmoddi4+0x296>
1002296e:	42a3      	cmp	r3, r4
10022970:	d911      	bls.n	10022996 <__udivmoddi4+0x296>
10022972:	3902      	subs	r1, #2
10022974:	4464      	add	r4, ip
10022976:	1ae4      	subs	r4, r4, r3
10022978:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
1002297c:	e739      	b.n	100227f2 <__udivmoddi4+0xf2>
1002297e:	4604      	mov	r4, r0
10022980:	e6f0      	b.n	10022764 <__udivmoddi4+0x64>
10022982:	4608      	mov	r0, r1
10022984:	e706      	b.n	10022794 <__udivmoddi4+0x94>
10022986:	45c8      	cmp	r8, r9
10022988:	d2ae      	bcs.n	100228e8 <__udivmoddi4+0x1e8>
1002298a:	ebb9 0e02 	subs.w	lr, r9, r2
1002298e:	eb63 0c07 	sbc.w	ip, r3, r7
10022992:	3801      	subs	r0, #1
10022994:	e7a8      	b.n	100228e8 <__udivmoddi4+0x1e8>
10022996:	4631      	mov	r1, r6
10022998:	e7ed      	b.n	10022976 <__udivmoddi4+0x276>
1002299a:	4603      	mov	r3, r0
1002299c:	e799      	b.n	100228d2 <__udivmoddi4+0x1d2>
1002299e:	4630      	mov	r0, r6
100229a0:	e7d4      	b.n	1002294c <__udivmoddi4+0x24c>
100229a2:	46d6      	mov	lr, sl
100229a4:	e77f      	b.n	100228a6 <__udivmoddi4+0x1a6>
100229a6:	4463      	add	r3, ip
100229a8:	3802      	subs	r0, #2
100229aa:	e74d      	b.n	10022848 <__udivmoddi4+0x148>
100229ac:	4606      	mov	r6, r0
100229ae:	4623      	mov	r3, r4
100229b0:	4608      	mov	r0, r1
100229b2:	e70f      	b.n	100227d4 <__udivmoddi4+0xd4>
100229b4:	3e02      	subs	r6, #2
100229b6:	4463      	add	r3, ip
100229b8:	e730      	b.n	1002281c <__udivmoddi4+0x11c>
100229ba:	bf00      	nop

100229bc <__aeabi_idiv0>:
100229bc:	4770      	bx	lr
100229be:	bf00      	nop
100229c0:	65642525 	.word	0x65642525
100229c4:	3a677562 	.word	0x3a677562
100229c8:	00000020 	.word	0x00000020
100229cc:	73726946 	.word	0x73726946
100229d0:	6f622074 	.word	0x6f622074
100229d4:	202c746f 	.word	0x202c746f
100229d8:	74746573 	.word	0x74746573
100229dc:	20676e69 	.word	0x20676e69
100229e0:	73616c66 	.word	0x73616c66
100229e4:	00002168 	.word	0x00002168
100229e8:	00002525 	.word	0x00002525
100229ec:	6e692525 	.word	0x6e692525
100229f0:	203a6f66 	.word	0x203a6f66
100229f4:	00000000 	.word	0x00000000
100229f8:	78303e50 	.word	0x78303e50
100229fc:	78383025 	.word	0x78383025
10022a00:	0000000a 	.word	0x0000000a
10022a04:	78303e46 	.word	0x78303e46
10022a08:	78383025 	.word	0x78383025
10022a0c:	0000000a 	.word	0x0000000a
10022a10:	75732525 	.word	0x75732525
10022a14:	73656363 	.word	0x73656363
10022a18:	00203a73 	.word	0x00203a73
10022a1c:	7473694c 	.word	0x7473694c
10022a20:	00000000 	.word	0x00000000
10022a24:	72652525 	.word	0x72652525
10022a28:	3a726f72 	.word	0x3a726f72
10022a2c:	00000020 	.word	0x00000020
10022a30:	6c756f43 	.word	0x6c756f43
10022a34:	6f6e2064 	.word	0x6f6e2064
10022a38:	61762074 	.word	0x61762074
10022a3c:	6164696c 	.word	0x6164696c
10022a40:	63206574 	.word	0x63206574
10022a44:	6f706d6f 	.word	0x6f706d6f
10022a48:	746e656e 	.word	0x746e656e
10022a4c:	00000000 	.word	0x00000000
10022a50:	706d6f43 	.word	0x706d6f43
10022a54:	6e656e6f 	.word	0x6e656e6f
10022a58:	44492074 	.word	0x44492074
10022a5c:	7830203a 	.word	0x7830203a
10022a60:	78383025 	.word	0x78383025
10022a64:	766e6920 	.word	0x766e6920
10022a68:	64696c61 	.word	0x64696c61
10022a6c:	0000000a 	.word	0x0000000a
10022a70:	30257830 	.word	0x30257830
10022a74:	253e7838 	.word	0x253e7838
10022a78:	00000a73 	.word	0x00000a73
10022a7c:	6c756f43 	.word	0x6c756f43
10022a80:	6f6e2064 	.word	0x6f6e2064
10022a84:	6f622074 	.word	0x6f622074
10022a88:	6320746f 	.word	0x6320746f
10022a8c:	6f706d6f 	.word	0x6f706d6f
10022a90:	746e656e 	.word	0x746e656e
10022a94:	00000000 	.word	0x00000000
10022a98:	78303e43 	.word	0x78303e43
10022a9c:	78383025 	.word	0x78383025
10022aa0:	0000000a 	.word	0x0000000a
10022aa4:	00007325 	.word	0x00007325
10022aa8:	6c756f43 	.word	0x6c756f43
10022aac:	6f6e2064 	.word	0x6f6e2064
10022ab0:	74612074 	.word	0x74612074
10022ab4:	74736574 	.word	0x74736574
10022ab8:	6d6f6320 	.word	0x6d6f6320
10022abc:	656e6f70 	.word	0x656e6f70
10022ac0:	0000746e 	.word	0x0000746e
10022ac4:	70797243 	.word	0x70797243
10022ac8:	45206f74 	.word	0x45206f74
10022acc:	706d6178 	.word	0x706d6178
10022ad0:	0021656c 	.word	0x0021656c
10022ad4:	72636e45 	.word	0x72636e45
10022ad8:	65747079 	.word	0x65747079
10022adc:	61642064 	.word	0x61642064
10022ae0:	203a6174 	.word	0x203a6174
10022ae4:	00000000 	.word	0x00000000
10022ae8:	68736148 	.word	0x68736148
10022aec:	73657220 	.word	0x73657220
10022af0:	3a746c75 	.word	0x3a746c75
10022af4:	00000020 	.word	0x00000020
10022af8:	72636544 	.word	0x72636544
10022afc:	65747079 	.word	0x65747079
10022b00:	656d2064 	.word	0x656d2064
10022b04:	67617373 	.word	0x67617373
10022b08:	25203a65 	.word	0x25203a65
10022b0c:	000a0d73 	.word	0x000a0d73
10022b10:	65746e45 	.word	0x65746e45
10022b14:	69702072 	.word	0x69702072
10022b18:	00203a6e 	.word	0x00203a6e
10022b1c:	32343935 	.word	0x32343935
10022b20:	00003333 	.word	0x00003333
10022b24:	206e6950 	.word	0x206e6950
10022b28:	65636341 	.word	0x65636341
10022b2c:	64657470 	.word	0x64657470
10022b30:	00000021 	.word	0x00000021
10022b34:	61766e49 	.word	0x61766e49
10022b38:	2064696c 	.word	0x2064696c
10022b3c:	214e4950 	.word	0x214e4950
10022b40:	00000000 	.word	0x00000000
10022b44:	65746e45 	.word	0x65746e45
10022b48:	6f742072 	.word	0x6f742072
10022b4c:	3a6e656b 	.word	0x3a6e656b
10022b50:	00000020 	.word	0x00000020
10022b54:	37353331 	.word	0x37353331
10022b58:	36383039 	.word	0x36383039
10022b5c:	61633234 	.word	0x61633234
10022b60:	66656462 	.word	0x66656462
10022b64:	00000000 	.word	0x00000000
10022b68:	656b6f54 	.word	0x656b6f54
10022b6c:	6341206e 	.word	0x6341206e
10022b70:	74706563 	.word	0x74706563
10022b74:	00216465 	.word	0x00216465
10022b78:	61766e49 	.word	0x61766e49
10022b7c:	2064696c 	.word	0x2064696c
10022b80:	656b6f54 	.word	0x656b6f54
10022b84:	0000216e 	.word	0x0000216e
10022b88:	706d6f43 	.word	0x706d6f43
10022b8c:	6e656e6f 	.word	0x6e656e6f
10022b90:	63207374 	.word	0x63207374
10022b94:	646c756f 	.word	0x646c756f
10022b98:	746f6e20 	.word	0x746f6e20
10022b9c:	20656220 	.word	0x20656220
10022ba0:	696c6176 	.word	0x696c6176
10022ba4:	65746164 	.word	0x65746164
10022ba8:	00000064 	.word	0x00000064
10022bac:	206c6c41 	.word	0x206c6c41
10022bb0:	706d6f43 	.word	0x706d6f43
10022bb4:	6e656e6f 	.word	0x6e656e6f
10022bb8:	76207374 	.word	0x76207374
10022bbc:	64696c61 	.word	0x64696c61
10022bc0:	64657461 	.word	0x64657461
10022bc4:	00000000 	.word	0x00000000
10022bc8:	6c696146 	.word	0x6c696146
10022bcc:	74206465 	.word	0x74206465
10022bd0:	6f62206f 	.word	0x6f62206f
10022bd4:	6120746f 	.word	0x6120746f
10022bd8:	63206c6c 	.word	0x63206c6c
10022bdc:	6f706d6f 	.word	0x6f706d6f
10022be0:	746e656e 	.word	0x746e656e
10022be4:	00000073 	.word	0x00000073
10022be8:	66746365 	.word	0x66746365
10022bec:	43415020 	.word	0x43415020
10022bf0:	654e2045 	.word	0x654e2045
10022bf4:	6f592077 	.word	0x6f592077
10022bf8:	00006b72 	.word	0x00006b72
10022bfc:	253e5041 	.word	0x253e5041
10022c00:	00000a73 	.word	0x00000a73
10022c04:	746f6f42 	.word	0x746f6f42
10022c08:	00000000 	.word	0x00000000
10022c0c:	706d6f43 	.word	0x706d6f43
10022c10:	6e656e6f 	.word	0x6e656e6f
10022c14:	44492074 	.word	0x44492074
10022c18:	3a6e4920 	.word	0x3a6e4920
10022c1c:	00000020 	.word	0x00000020
10022c20:	00007825 	.word	0x00007825
10022c24:	706d6f43 	.word	0x706d6f43
10022c28:	6e656e6f 	.word	0x6e656e6f
10022c2c:	44492074 	.word	0x44492074
10022c30:	74754f20 	.word	0x74754f20
10022c34:	0000203a 	.word	0x0000203a
10022c38:	6c706552 	.word	0x6c706552
10022c3c:	64656361 	.word	0x64656361
10022c40:	25783020 	.word	0x25783020
10022c44:	20783830 	.word	0x20783830
10022c48:	68746977 	.word	0x68746977
10022c4c:	25783020 	.word	0x25783020
10022c50:	0a783830 	.word	0x0a783830
10022c54:	00000000 	.word	0x00000000
10022c58:	6c706552 	.word	0x6c706552
10022c5c:	00656361 	.word	0x00656361
10022c60:	706d6f43 	.word	0x706d6f43
10022c64:	6e656e6f 	.word	0x6e656e6f
10022c68:	78302074 	.word	0x78302074
10022c6c:	78383025 	.word	0x78383025
10022c70:	20736920 	.word	0x20736920
10022c74:	20746f6e 	.word	0x20746f6e
10022c78:	766f7270 	.word	0x766f7270
10022c7c:	6f697369 	.word	0x6f697369
10022c80:	2064656e 	.word	0x2064656e
10022c84:	20726f66 	.word	0x20726f66
10022c88:	20656874 	.word	0x20656874
10022c8c:	74737973 	.word	0x74737973
10022c90:	0a0d6d65 	.word	0x0a0d6d65
10022c94:	00000000 	.word	0x00000000
10022c98:	706d6f43 	.word	0x706d6f43
10022c9c:	6e656e6f 	.word	0x6e656e6f
10022ca0:	44492074 	.word	0x44492074
10022ca4:	0000203a 	.word	0x0000203a
10022ca8:	65747441 	.word	0x65747441
10022cac:	00007473 	.word	0x00007473
10022cb0:	00006272 	.word	0x00006272
10022cb4:	6f727245 	.word	0x6f727245
10022cb8:	55203a72 	.word	0x55203a72
10022cbc:	6c62616e 	.word	0x6c62616e
10022cc0:	6f742065 	.word	0x6f742065
10022cc4:	65706f20 	.word	0x65706f20
10022cc8:	6e69206e 	.word	0x6e69206e
10022ccc:	20747570 	.word	0x20747570
10022cd0:	656c6966 	.word	0x656c6966
10022cd4:	0000000a 	.word	0x0000000a
10022cd8:	00006277 	.word	0x00006277
10022cdc:	6f727245 	.word	0x6f727245
10022ce0:	55203a72 	.word	0x55203a72
10022ce4:	6c62616e 	.word	0x6c62616e
10022ce8:	6f742065 	.word	0x6f742065
10022cec:	65706f20 	.word	0x65706f20
10022cf0:	756f206e 	.word	0x756f206e
10022cf4:	74757074 	.word	0x74757074
10022cf8:	6c696620 	.word	0x6c696620
10022cfc:	00000a65 	.word	0x00000a65
10022d00:	6c707041 	.word	0x6c707041
10022d04:	74616369 	.word	0x74616369
10022d08:	206e6f69 	.word	0x206e6f69
10022d0c:	636f7250 	.word	0x636f7250
10022d10:	6f737365 	.word	0x6f737365
10022d14:	74532072 	.word	0x74532072
10022d18:	65747261 	.word	0x65747261
10022d1c:	00000064 	.word	0x00000064
10022d20:	65746e45 	.word	0x65746e45
10022d24:	6f432072 	.word	0x6f432072
10022d28:	6e616d6d 	.word	0x6e616d6d
10022d2c:	00203a64 	.word	0x00203a64
10022d30:	7473696c 	.word	0x7473696c
10022d34:	00000000 	.word	0x00000000
10022d38:	746f6f62 	.word	0x746f6f62
10022d3c:	00000000 	.word	0x00000000
10022d40:	6c706572 	.word	0x6c706572
10022d44:	00656361 	.word	0x00656361
10022d48:	65747461 	.word	0x65747461
10022d4c:	00007473 	.word	0x00007473
10022d50:	65726e55 	.word	0x65726e55
10022d54:	6e676f63 	.word	0x6e676f63
10022d58:	64657a69 	.word	0x64657a69
10022d5c:	6d6f6320 	.word	0x6d6f6320
10022d60:	646e616d 	.word	0x646e616d
10022d64:	73252720 	.word	0x73252720
10022d68:	00000a27 	.word	0x00000a27
10022d6c:	6573552f 	.word	0x6573552f
10022d70:	642f7372 	.word	0x642f7372
10022d74:	7369726f 	.word	0x7369726f
10022d78:	73796c75 	.word	0x73796c75
10022d7c:	442f6573 	.word	0x442f6573
10022d80:	746b7365 	.word	0x746b7365
10022d84:	6d2f706f 	.word	0x6d2f706f
10022d88:	65727469 	.word	0x65727469
10022d8c:	7070612f 	.word	0x7070612f
10022d90:	6163696c 	.word	0x6163696c
10022d94:	6e6f6974 	.word	0x6e6f6974
10022d98:	6f72705f 	.word	0x6f72705f
10022d9c:	73736563 	.word	0x73736563
10022da0:	652f726f 	.word	0x652f726f
10022da4:	7972636e 	.word	0x7972636e
10022da8:	64657470 	.word	0x64657470
10022dac:	7261705f 	.word	0x7261705f
10022db0:	2e736d61 	.word	0x2e736d61
10022db4:	00636e65 	.word	0x00636e65
10022db8:	6573552f 	.word	0x6573552f
10022dbc:	642f7372 	.word	0x642f7372
10022dc0:	7369726f 	.word	0x7369726f
10022dc4:	73796c75 	.word	0x73796c75
10022dc8:	442f6573 	.word	0x442f6573
10022dcc:	746b7365 	.word	0x746b7365
10022dd0:	6d2f706f 	.word	0x6d2f706f
10022dd4:	65727469 	.word	0x65727469
10022dd8:	7070612f 	.word	0x7070612f
10022ddc:	6163696c 	.word	0x6163696c
10022de0:	6e6f6974 	.word	0x6e6f6974
10022de4:	6f72705f 	.word	0x6f72705f
10022de8:	73736563 	.word	0x73736563
10022dec:	692f726f 	.word	0x692f726f
10022df0:	652f636e 	.word	0x652f636e
10022df4:	5f667463 	.word	0x5f667463
10022df8:	61726150 	.word	0x61726150
10022dfc:	682e736d 	.word	0x682e736d
10022e00:	00000000 	.word	0x00000000
10022e04:	656c6946 	.word	0x656c6946
10022e08:	636e6520 	.word	0x636e6520
10022e0c:	74707972 	.word	0x74707972
10022e10:	73206465 	.word	0x73206465
10022e14:	65636375 	.word	0x65636375
10022e18:	75667373 	.word	0x75667373
10022e1c:	00796c6c 	.word	0x00796c6c
10022e20:	6c696146 	.word	0x6c696146
10022e24:	74206465 	.word	0x74206465
10022e28:	6e65206f 	.word	0x6e65206f
10022e2c:	70797263 	.word	0x70797263
10022e30:	69662074 	.word	0x69662074
10022e34:	0000656c 	.word	0x0000656c
10022e38:	34333231 	.word	0x34333231
10022e3c:	38373635 	.word	0x38373635
10022e40:	62613039 	.word	0x62613039
10022e44:	66656463 	.word	0x66656463
10022e48:	00000000 	.word	0x00000000
10022e4c:	63612525 	.word	0x63612525
10022e50:	0a25256b 	.word	0x0a25256b
10022e54:	00000000 	.word	0x00000000
10022e58:	78323025 	.word	0x78323025
10022e5c:	00000000 	.word	0x00000000
10022e60:	203e2d20 	.word	0x203e2d20
10022e64:	65746e49 	.word	0x65746e49
10022e68:	70757272 	.word	0x70757272
10022e6c:	28202174 	.word	0x28202174
10022e70:	73616c46 	.word	0x73616c46
10022e74:	63612068 	.word	0x63612068
10022e78:	73736563 	.word	0x73736563
10022e7c:	69616620 	.word	0x69616620
10022e80:	6572756c 	.word	0x6572756c
10022e84:	00000a29 	.word	0x00000a29
10022e88:	6c696146 	.word	0x6c696146
10022e8c:	74206465 	.word	0x74206465
10022e90:	6e69206f 	.word	0x6e69206f
10022e94:	61697469 	.word	0x61697469
10022e98:	657a696c 	.word	0x657a696c
10022e9c:	43324920 	.word	0x43324920
10022ea0:	0000002e 	.word	0x0000002e

10022ea4 <Td4>:
10022ea4:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
10022eb4:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
10022ec4:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
10022ed4:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
10022ee4:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
10022ef4:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
10022f04:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
10022f14:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
10022f24:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
10022f34:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
10022f44:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
10022f54:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
10022f64:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
10022f74:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
10022f84:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
10022f94:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

10022fa4 <Td>:
10022fa4:	51f4a750 7e416553 1a17a4c3 3a275e96     P..QSeA~.....^':
10022fb4:	3bab6bcb 1f9d45f1 acfa58ab 4be30393     .k.;.E...X.....K
10022fc4:	2030fa55 ad766df6 88cc7691 f5024c25     U.0 .mv..v..%L..
10022fd4:	4fe5d7fc c52acbd7 26354480 b562a38f     ...O..*..D5&..b.
10022fe4:	deb15a49 25ba1b67 45ea0e98 5dfec0e1     IZ..g..%...E...]
10022ff4:	c32f7502 814cf012 8d4697a3 6bd3f9c6     .u/...L...F....k
10023004:	038f5fe7 15929c95 bf6d7aeb 955259da     ._.......zm..YR.
10023014:	d4be832d 587421d3 49e06929 8ec9c844     -....!tX)i.ID...
10023024:	75c2896a f48e7978 99583e6b 27b971dd     j..uxy..k>X..q.'
10023034:	bee14fb6 f088ad17 c920ac66 7dce3ab4     .O......f. ..:.}
10023044:	63df4a18 e51a3182 97513360 62537f45     .J.c.1..`3Q.E.Sb
10023054:	b16477e0 bb6bae84 fe81a01c f9082b94     .wd...k......+..
10023064:	70486858 8f45fd19 94de6c87 527bf8b7     XhHp..E..l....{R
10023074:	ab73d323 724b02e2 e31f8f57 6655ab2a     #.s...KrW...*.Uf
10023084:	b2eb2807 2fb5c203 86c57b9a d33708a5     .(...../.{....7.
10023094:	302887f2 23bfa5b2 02036aba ed16825c     ..(0...#.j..\...
100230a4:	8acf1c2b a779b492 f307f2f0 4e69e2a1     +.....y.......iN
100230b4:	65daf4cd 0605bed5 d134621f c4a6fe8a     ...e.....b4.....
100230c4:	342e539d a2f355a0 058ae132 a4f6eb75     .S.4.U..2...u...
100230d4:	0b83ec39 4060efaa 5e719f06 bd6e1051     9.....`@..q^Q.n.
100230e4:	3e218af9 96dd063d dd3e05ae 4de6bd46     ..!>=.....>.F..M
100230f4:	91548db5 71c45d05 0406d46f 605015ff     ..T..].qo.....P`
10023104:	1998fb24 d6bde997 894043cc 67d99e77     $........C@.w..g
10023114:	b0e842bd 07898b88 e7195b38 79c8eedb     .B......8[.....y
10023124:	a17c0a47 7c420fe9 f8841ec9 00000000     G.|...B|........
10023134:	09808683 322bed48 1e1170ac 6c5a724e     ....H.+2.p..NrZl
10023144:	fd0efffb 0f853856 3daed51e 362d3927     ....V8.....='9-6
10023154:	0a0fd964 685ca621 9b5b54d1 24362e3a     d...!.\h.T[.:.6$
10023164:	0c0a67b1 9357e70f b4ee96d2 1b9b919e     .g....W.........
10023174:	80c0c54f 61dc20a2 5a774b69 1c121a16     O.... .aiKwZ....
10023184:	e293ba0a c0a02ae5 3c22e043 121b171d     .....*..C."<....
10023194:	0e090d0b f28bc7ad 2db6a8b9 141ea9c8     ...........-....
100231a4:	57f11985 af75074c ee99ddbb a37f60fd     ...WL.u......`..
100231b4:	f701269f 5c72f5bc 44663bc5 5bfb7e34     .&....r\.;fD4~.[
100231c4:	8b432976 cb23c6dc b6edfc68 b8e4f163     v)C...#.h...c...
100231d4:	d731dcca 42638510 13972240 84c61120     ..1...cB@".. ...
100231e4:	854a247d d2bb3df8 aef93211 c729a16d     }$J..=...2..m.).
100231f4:	1d9e2f4b dcb230f3 0d8652ec 77c1e3d0     K/...0...R.....w
10023204:	2bb3166c a970b999 119448fa 47e96422     l..+..p..H.."d.G
10023214:	a8fc8cc4 a0f03f1a 567d2cd8 223390ef     .....?...,}V..3"
10023224:	87494ec7 d938d1c1 8ccaa2fe 98d40b36     .NI...8.....6...
10023234:	a6f581cf a57ade28 dab78e26 3fadbfa4     ....(.z.&......?
10023244:	2c3a9de4 5078920d 6a5fcc9b 547e4662     ..:,..xP.._jbF~T
10023254:	f68d13c2 90d8b8e8 2e39f75e 82c3aff5     ........^.9.....
10023264:	9f5d80be 69d0937c 6fd52da9 cf2512b3     ..].|..i.-.o..%.
10023274:	c8ac993b 10187da7 e89c636e db3bbb7b     ;....}..nc..{.;.
10023284:	cd267809 6e5918f4 ec9ab701 834f9aa8     .x&...Yn......O.
10023294:	e6956e65 aaffe67e 21bccf08 ef15e8e6     en..~......!....
100232a4:	bae79bd9 4a6f36ce ea9f09d4 29b07cd6     .....6oJ.....|.)
100232b4:	31a4b2af 2a3f2331 c6a59430 35a266c0     ...11#?*0....f.5
100232c4:	744ebc37 fc82caa6 e090d0b0 33a7d815     7.Nt...........3
100232d4:	f104984a 41ecdaf7 7fcd500e 1791f62f     J......A.P../...
100232e4:	764dd68d 43efb04d ccaa4d54 e49604df     ..MvM..CTM......
100232f4:	9ed1b5e3 4c6a881b c12c1fb8 4665517f     ......jL..,..QeF
10023304:	9d5eea04 018c355d fa877473 fb0b412e     ..^.]5..st...A..
10023314:	b3671d5a 92dbd252 e9105633 6dd64713     Z.g.R...3V...G.m
10023324:	9ad7618c 37a10c7a 59f8148e eb133c89     .a..z..7...Y.<..
10023334:	cea927ee b761c935 e11ce5ed 7a47b13c     .'..5.a.....<.Gz
10023344:	9cd2df59 55f2733f 1814ce79 73c737bf     Y...?s.Uy....7.s
10023354:	53f7cdea 5ffdaa5b df3d6f14 7844db86     ...S[.._.o=...Dx
10023364:	caaff381 b968c43e 3824342c c2a3405f     ....>.h.,4$8_@..
10023374:	161dc372 bce2250c 283c498b ff0d9541     r....%...I<(A...
10023384:	39a80171 080cb3de d8b4e49c 6456c190     q..9..........Vd
10023394:	7bcb8461 d532b670 486c5c74 d0b85742     a..{p.2.t\lHBW..
100233a4:	5051f4a7 537e4165 c31a17a4 963a275e     ..QPeA~S....^':.
100233b4:	cb3bab6b f11f9d45 abacfa58 934be303     k.;.E...X.....K.
100233c4:	552030fa f6ad766d 9188cc76 25f5024c     .0 Umv..v...L..%
100233d4:	fc4fe5d7 d7c52acb 80263544 8fb562a3     ..O..*..D5&..b..
100233e4:	49deb15a 6725ba1b 9845ea0e e15dfec0     Z..I..%g..E...].
100233f4:	02c32f75 12814cf0 a38d4697 c66bd3f9     u/...L...F....k.
10023404:	e7038f5f 9515929c ebbf6d7a da955259     _.......zm..YR..
10023414:	2dd4be83 d3587421 2949e069 448ec9c8     ...-!tX.i.I)...D
10023424:	6a75c289 78f48e79 6b99583e dd27b971     ..ujy..x>X.kq.'.
10023434:	b6bee14f 17f088ad 66c920ac b47dce3a     O........ .f:.}.
10023444:	1863df4a 82e51a31 60975133 4562537f     J.c.1...3Q.`.SbE
10023454:	e0b16477 84bb6bae 1cfe81a0 94f9082b     wd...k......+...
10023464:	58704868 198f45fd 8794de6c b7527bf8     hHpX.E..l....{R.
10023474:	23ab73d3 e2724b02 57e31f8f 2a6655ab     .s.#.Kr....W.Uf*
10023484:	07b2eb28 032fb5c2 9a86c57b a5d33708     (...../.{....7..
10023494:	f2302887 b223bfa5 ba02036a 5ced1682     .(0...#.j......\
100234a4:	2b8acf1c 92a779b4 f0f307f2 a14e69e2     ...+.y.......iN.
100234b4:	cd65daf4 d50605be 1fd13462 8ac4a6fe     ..e.....b4......
100234c4:	9d342e53 a0a2f355 32058ae1 75a4f6eb     S.4.U......2...u
100234d4:	390b83ec aa4060ef 065e719f 51bd6e10     ...9.`@..q^..n.Q
100234e4:	f93e218a 3d96dd06 aedd3e05 464de6bd     .!>....=.>....MF
100234f4:	b591548d 0571c45d 6f0406d4 ff605015     .T..].q....o.P`.
10023504:	241998fb 97d6bde9 cc894043 7767d99e     ...$....C@....gw
10023514:	bdb0e842 8807898b 38e7195b db79c8ee     B.......[..8..y.
10023524:	47a17c0a e97c420f c9f8841e 00000000     .|.G.B|.........
10023534:	83098086 48322bed ac1e1170 4e6c5a72     .....+2Hp...rZlN
10023544:	fbfd0eff 560f8538 1e3daed5 27362d39     ....8..V..=.9-6'
10023554:	640a0fd9 21685ca6 d19b5b54 3a24362e     ...d.\h!T[...6$:
10023564:	b10c0a67 0f9357e7 d2b4ee96 9e1b9b91     g....W..........
10023574:	4f80c0c5 a261dc20 695a774b 161c121a     ...O .a.KwZi....
10023584:	0ae293ba e5c0a02a 433c22e0 1d121b17     ....*...."<C....
10023594:	0b0e090d adf28bc7 b92db6a8 c8141ea9     ..........-.....
100235a4:	8557f119 4caf7507 bbee99dd fda37f60     ..W..u.L....`...
100235b4:	9ff70126 bc5c72f5 c544663b 345bfb7e     &....r\.;fD.~.[4
100235c4:	768b4329 dccb23c6 68b6edfc 63b8e4f1     )C.v.#.....h...c
100235d4:	cad731dc 10426385 40139722 2084c611     .1...cB."..@... 
100235e4:	7d854a24 f8d2bb3d 11aef932 6dc729a1     $J.}=...2....).m
100235f4:	4b1d9e2f f3dcb230 ec0d8652 d077c1e3     /..K0...R.....w.
10023604:	6c2bb316 99a970b9 fa119448 2247e964     ..+l.p..H...d.G"
10023614:	c4a8fc8c 1aa0f03f d8567d2c ef223390     ....?...,}V..3".
10023624:	c787494e c1d938d1 fe8ccaa2 3698d40b     NI...8.........6
10023634:	cfa6f581 28a57ade 26dab78e a43fadbf     .....z.(...&..?.
10023644:	e42c3a9d 0d507892 9b6a5fcc 62547e46     .:,..xP.._j.F~Tb
10023654:	c2f68d13 e890d8b8 5e2e39f7 f582c3af     .........9.^....
10023664:	be9f5d80 7c69d093 a96fd52d b3cf2512     .]....i|-.o..%..
10023674:	3bc8ac99 a710187d 6ee89c63 7bdb3bbb     ...;}...c..n.;.{
10023684:	09cd2678 f46e5918 01ec9ab7 a8834f9a     x&...Yn......O..
10023694:	65e6956e 7eaaffe6 0821bccf e6ef15e8     n..e...~..!.....
100236a4:	d9bae79b ce4a6f36 d4ea9f09 d629b07c     ....6oJ.....|.).
100236b4:	af31a4b2 312a3f23 30c6a594 c035a266     ..1.#?*1...0f.5.
100236c4:	37744ebc a6fc82ca b0e090d0 1533a7d8     .Nt7..........3.
100236d4:	4af10498 f741ecda 0e7fcd50 2f1791f6     ...J..A.P....../
100236e4:	8d764dd6 4d43efb0 54ccaa4d dfe49604     .Mv...CMM..T....
100236f4:	e39ed1b5 1b4c6a88 b8c12c1f 7f466551     .....jL..,..QeF.
10023704:	049d5eea 5d018c35 73fa8774 2efb0b41     .^..5..]t..sA...
10023714:	5ab3671d 5292dbd2 33e91056 136dd647     .g.Z...RV..3G.m.
10023724:	8c9ad761 7a37a10c 8e59f814 89eb133c     a.....7z..Y.<...
10023734:	eecea927 35b761c9 ede11ce5 3c7a47b1     '....a.5.....Gz<
10023744:	599cd2df 3f55f273 791814ce bf73c737     ...Ys.U?...y7.s.
10023754:	ea53f7cd 5b5ffdaa 14df3d6f 867844db     ..S..._[o=...Dx.
10023764:	81caaff3 3eb968c4 2c382434 5fc2a340     .....h.>4$8,@.._
10023774:	72161dc3 0cbce225 8b283c49 41ff0d95     ...r%...I<(....A
10023784:	7139a801 de080cb3 9cd8b4e4 906456c1     ..9q.........Vd.
10023794:	617bcb84 70d532b6 74486c5c 42d0b857     ..{a.2.p\lHtW..B
100237a4:	a75051f4 65537e41 a4c31a17 5e963a27     .QP.A~Se....':.^
100237b4:	6bcb3bab 45f11f9d 58abacfa 03934be3     .;.k...E...X.K..
100237c4:	fa552030 6df6ad76 769188cc 4c25f502     0 U.v..m...v..%L
100237d4:	d7fc4fe5 cbd7c52a 44802635 a38fb562     .O..*...5&.Db...
100237e4:	5a49deb1 1b6725ba 0e9845ea c0e15dfe     ..IZ.%g..E...]..
100237f4:	7502c32f f012814c 97a38d46 f9c66bd3     /..uL...F....k..
10023804:	5fe7038f 9c951592 7aebbf6d 59da9552     ..._....m..zR..Y
10023814:	832dd4be 21d35874 692949e0 c8448ec9     ..-.tX.!.I)i..D.
10023824:	896a75c2 7978f48e 3e6b9958 71dd27b9     .uj...xyX.k>.'.q
10023834:	4fb6bee1 ad17f088 ac66c920 3ab47dce     ...O.... .f..}.:
10023844:	4a1863df 3182e51a 33609751 7f456253     .c.J...1Q.`3SbE.
10023854:	77e0b164 ae84bb6b a01cfe81 2b94f908     d..wk..........+
10023864:	68587048 fd198f45 6c8794de f8b7527b     HpXhE......l{R..
10023874:	d323ab73 02e2724b 8f57e31f ab2a6655     s.#.Kr....W.Uf*.
10023884:	2807b2eb c2032fb5 7b9a86c5 08a5d337     ...(./.....{7...
10023894:	87f23028 a5b223bf 6aba0203 825ced16     (0...#.....j..\.
100238a4:	1c2b8acf b492a779 f2f0f307 e2a14e69     ..+.y.......iN..
100238b4:	f4cd65da bed50605 621fd134 fe8ac4a6     .e......4..b....
100238c4:	539d342e 55a0a2f3 e132058a eb75a4f6     .4.S...U..2...u.
100238d4:	ec390b83 efaa4060 9f065e71 1051bd6e     ..9.`@..q^..n.Q.
100238e4:	8af93e21 063d96dd 05aedd3e bd464de6     !>....=.>....MF.
100238f4:	8db59154 5d0571c4 d46f0406 15ff6050     T....q.]..o.P`..
10023904:	fb241998 e997d6bd 43cc8940 9e7767d9     ..$.....@..C.gw.
10023914:	42bdb0e8 8b880789 5b38e719 eedb79c8     ...B......8[.y..
10023924:	0a47a17c 0fe97c42 1ec9f884 00000000     |.G.B|..........
10023934:	86830980 ed48322b 70ac1e11 724e6c5a     ....+2H....pZlNr
10023944:	fffbfd0e 38560f85 d51e3dae 3927362d     ......V8.=..-6'9
10023954:	d9640a0f a621685c 54d19b5b 2e3a2436     ..d.\h!.[..T6$:.
10023964:	67b10c0a e70f9357 96d2b4ee 919e1b9b     ...gW...........
10023974:	c54f80c0 20a261dc 4b695a77 1a161c12     ..O..a. wZiK....
10023984:	ba0ae293 2ae5c0a0 e0433c22 171d121b     .......*"<C.....
10023994:	0d0b0e09 c7adf28b a8b92db6 a9c8141e     .........-......
100239a4:	198557f1 074caf75 ddbbee99 60fda37f     .W..u.L........`
100239b4:	269ff701 f5bc5c72 3bc54466 7e345bfb     ...&r\..fD.;.[4~
100239c4:	29768b43 c6dccb23 fc68b6ed f163b8e4     C.v)#.....h...c.
100239d4:	dccad731 85104263 22401397 112084c6     1...cB....@".. .
100239e4:	247d854a 3df8d2bb 3211aef9 a16dc729     J.}$...=...2).m.
100239f4:	2f4b1d9e 30f3dcb2 52ec0d86 e3d077c1     ..K/...0...R.w..
10023a04:	166c2bb3 b999a970 48fa1194 642247e9     .+l.p......H.G"d
10023a14:	8cc4a8fc 3f1aa0f0 2cd8567d 90ef2233     .......?}V.,3"..
10023a24:	4ec78749 d1c1d938 a2fe8cca 0b3698d4     I..N8.........6.
10023a34:	81cfa6f5 de28a57a 8e26dab7 bfa43fad     ....z.(...&..?..
10023a44:	9de42c3a 920d5078 cc9b6a5f 4662547e     :,..xP.._j..~TbF
10023a54:	13c2f68d b8e890d8 f75e2e39 aff582c3     ........9.^.....
10023a64:	80be9f5d 937c69d0 2da96fd5 12b3cf25     ]....i|..o.-%...
10023a74:	993bc8ac 7da71018 636ee89c bb7bdb3b     ..;....}..nc;.{.
10023a84:	7809cd26 18f46e59 b701ec9a 9aa8834f     &..xYn......O...
10023a94:	6e65e695 e67eaaff cf0821bc e8e6ef15     ..en..~..!......
10023aa4:	9bd9bae7 36ce4a6f 09d4ea9f 7cd629b0     ....oJ.6.....).|
10023ab4:	b2af31a4 23312a3f 9430c6a5 66c035a2     .1..?*1#..0..5.f
10023ac4:	bc37744e caa6fc82 d0b0e090 d81533a7     Nt7..........3..
10023ad4:	984af104 daf741ec 500e7fcd f62f1791     ..J..A.....P../.
10023ae4:	d68d764d b04d43ef 4d54ccaa 04dfe496     Mv...CM...TM....
10023af4:	b5e39ed1 881b4c6a 1fb8c12c 517f4665     ....jL..,...eF.Q
10023b04:	ea049d5e 355d018c 7473fa87 412efb0b     ^.....]5..st...A
10023b14:	1d5ab367 d25292db 5633e910 47136dd6     g.Z...R...3V.m.G
10023b24:	618c9ad7 0c7a37a1 148e59f8 3c89eb13     ...a.7z..Y.....<
10023b34:	27eecea9 c935b761 e5ede11c b13c7a47     ...'a.5.....Gz<.
10023b44:	df599cd2 733f55f2 ce791814 37bf73c7     ..Y..U?s..y..s.7
10023b54:	cdea53f7 aa5b5ffd 6f14df3d db867844     .S..._[.=..oDx..
10023b64:	f381caaf c43eb968 342c3824 405fc2a3     ....h.>.$8,4.._@
10023b74:	c372161d 250cbce2 498b283c 9541ff0d     ..r....%<(.I..A.
10023b84:	017139a8 b3de080c e49cd8b4 c1906456     .9q.........Vd..
10023b94:	84617bcb b670d532 5c74486c 5742d0b8     .{a.2.p.lHt\..BW
10023ba4:	f4a75051 4165537e 17a4c31a 275e963a     QP..~SeA....:.^'
10023bb4:	ab6bcb3b 9d45f11f fa58abac e303934b     ;.k...E...X.K...
10023bc4:	30fa5520 766df6ad cc769188 024c25f5      U.0..mv..v..%L.
10023bd4:	e5d7fc4f 2acbd7c5 35448026 62a38fb5     O......*&.D5...b
10023be4:	b15a49de ba1b6725 ea0e9845 fec0e15d     .IZ.%g..E...]...
10023bf4:	2f7502c3 4cf01281 4697a38d d3f9c66b     ..u/...L...Fk...
10023c04:	8f5fe703 929c9515 6d7aebbf 5259da95     .._.......zm..YR
10023c14:	be832dd4 7421d358 e0692949 c9c8448e     .-..X.!tI)i..D..
10023c24:	c2896a75 8e7978f4 583e6b99 b971dd27     uj...xy..k>X'.q.
10023c34:	e14fb6be 88ad17f0 20ac66c9 ce3ab47d     ..O......f. }.:.
10023c44:	df4a1863 1a3182e5 51336097 537f4562     c.J...1..`3QbE.S
10023c54:	6477e0b1 6bae84bb 81a01cfe 082b94f9     ..wd...k......+.
10023c64:	48685870 45fd198f de6c8794 7bf8b752     pXhH...E..l.R..{
10023c74:	73d323ab 4b02e272 1f8f57e3 55ab2a66     .#.sr..K.W..f*.U
10023c84:	eb2807b2 b5c2032f c57b9a86 3708a5d3     ..(./.....{....7
10023c94:	2887f230 bfa5b223 036aba02 16825ced     0..(#.....j..\..
10023ca4:	cf1c2b8a 79b492a7 07f2f0f3 69e2a14e     .+.....y....N..i
10023cb4:	daf4cd65 05bed506 34621fd1 a6fe8ac4     e.........b4....
10023cc4:	2e539d34 f355a0a2 8ae13205 f6eb75a4     4.S...U..2...u..
10023cd4:	83ec390b 60efaa40 719f065e 6e1051bd     .9..@..`^..q.Q.n
10023ce4:	218af93e dd063d96 3e05aedd e6bd464d     >..!.=.....>MF..
10023cf4:	548db591 c45d0571 06d46f04 5015ff60     ...Tq.]..o..`..P
10023d04:	98fb2419 bde997d6 4043cc89 d99e7767     .$........C@gw..
10023d14:	e842bdb0 898b8807 195b38e7 c8eedb79     ..B......8[.y...
10023d24:	7c0a47a1 420fe97c 841ec9f8 00000000     .G.||..B........
10023d34:	80868309 2bed4832 1170ac1e 5a724e6c     ....2H.+..p.lNrZ
10023d44:	0efffbfd 8538560f aed51e3d 2d392736     .....V8.=...6'9-
10023d54:	0fd9640a 5ca62168 5b54d19b 362e3a24     .d..h!.\..T[$:.6
10023d64:	0a67b10c 57e70f93 ee96d2b4 9b919e1b     ..g....W........
10023d74:	c0c54f80 dc20a261 774b695a 121a161c     .O..a. .ZiKw....
10023d84:	93ba0ae2 a02ae5c0 22e0433c 1b171d12     ......*.<C."....
10023d94:	090d0b0e 8bc7adf2 b6a8b92d 1ea9c814     ........-.......
10023da4:	f1198557 75074caf 99ddbbee 7f60fda3     W....L.u......`.
10023db4:	01269ff7 72f5bc5c 663bc544 fb7e345b     ..&.\..rD.;f[4~.
10023dc4:	4329768b 23c6dccb edfc68b6 e4f163b8     .v)C...#.h...c..
10023dd4:	31dccad7 63851042 97224013 c6112084     ...1B..c.@".. ..
10023de4:	4a247d85 bb3df8d2 f93211ae 29a16dc7     .}$J..=...2..m.)
10023df4:	9e2f4b1d b230f3dc 8652ec0d c1e3d077     .K/...0...R.w...
10023e04:	b3166c2b 70b999a9 9448fa11 e9642247     +l.....p..H.G"d.
10023e14:	fc8cc4a8 f03f1aa0 7d2cd856 3390ef22     ......?.V.,}"..3
10023e24:	494ec787 38d1c1d9 caa2fe8c d40b3698     ..NI...8.....6..
10023e34:	f581cfa6 7ade28a5 b78e26da adbfa43f     .....(.z.&..?...
10023e44:	3a9de42c 78920d50 5fcc9b6a 7e466254     ,..:P..xj.._TbF~
10023e54:	8d13c2f6 d8b8e890 39f75e2e c3aff582     .........^.9....
10023e64:	5d80be9f d0937c69 d52da96f 2512b3cf     ...]i|..o.-....%
10023e74:	ac993bc8 187da710 9c636ee8 3bbb7bdb     .;....}..nc..{.;
10023e84:	267809cd 5918f46e 9ab701ec 4f9aa883     ..x&n..Y.......O
10023e94:	956e65e6 ffe67eaa bccf0821 15e8e6ef     .en..~..!.......
10023ea4:	e79bd9ba 6f36ce4a 9f09d4ea b07cd629     ....J.6o....).|.
10023eb4:	a4b2af31 3f23312a a59430c6 a266c035     1...*1#?.0..5.f.
10023ec4:	4ebc3774 82caa6fc 90d0b0e0 a7d81533     t7.N........3...
10023ed4:	04984af1 ecdaf741 cd500e7f 91f62f17     .J..A.....P../..
10023ee4:	4dd68d76 efb04d43 aa4d54cc 9604dfe4     v..MCM...TM.....
10023ef4:	d1b5e39e 6a881b4c 2c1fb8c1 65517f46     ....L..j...,F.Qe
10023f04:	5eea049d 8c355d01 877473fa 0b412efb     ...^.]5..st...A.
10023f14:	671d5ab3 dbd25292 105633e9 d647136d     .Z.g.R...3V.m.G.
10023f24:	d7618c9a a10c7a37 f8148e59 133c89eb     ..a.7z..Y.....<.
10023f34:	a927eece 61c935b7 1ce5ede1 47b13c7a     ..'..5.a....z<.G
10023f44:	d2df599c f2733f55 14ce7918 c737bf73     .Y..U?s..y..s.7.
10023f54:	f7cdea53 fdaa5b5f 3d6f14df 44db8678     S..._[....o=x..D
10023f64:	aff381ca 68c43eb9 24342c38 a3405fc2     .....>.h8,4$._@.
10023f74:	1dc37216 e2250cbc 3c498b28 0d9541ff     .r....%.(.I<.A..
10023f84:	a8017139 0cb3de08 b4e49cd8 56c19064     9q..........d..V
10023f94:	cb84617b 32b670d5 6c5c7448 b85742d0     {a...p.2Ht\l.BW.

10023fa4 <Te>:
10023fa4:	c66363a5 f87c7c84 ee777799 f67b7b8d     .cc..||..ww..{{.
10023fb4:	fff2f20d d66b6bbd de6f6fb1 91c5c554     .....kk..oo.T...
10023fc4:	60303050 02010103 ce6767a9 562b2b7d     P00`.....gg.}++V
10023fd4:	e7fefe19 b5d7d762 4dababe6 ec76769a     ....b......M.vv.
10023fe4:	8fcaca45 1f82829d 89c9c940 fa7d7d87     E.......@....}}.
10023ff4:	effafa15 b25959eb 8e4747c9 fbf0f00b     .....YY..GG.....
10024004:	41adadec b3d4d467 5fa2a2fd 45afafea     ...Ag......_...E
10024014:	239c9cbf 53a4a4f7 e4727296 9bc0c05b     ...#...S.rr.[...
10024024:	75b7b7c2 e1fdfd1c 3d9393ae 4c26266a     ...u.......=j&&L
10024034:	6c36365a 7e3f3f41 f5f7f702 83cccc4f     Z66lA??~....O...
10024044:	6834345c 51a5a5f4 d1e5e534 f9f1f108     \44h...Q4.......
10024054:	e2717193 abd8d873 62313153 2a15153f     .qq.s...S11b?..*
10024064:	0804040c 95c7c752 46232365 9dc3c35e     ....R...e##F^...
10024074:	30181828 379696a1 0a05050f 2f9a9ab5     (..0...7......./
10024084:	0e070709 24121236 1b80809b dfe2e23d     ....6..$....=...
10024094:	cdebeb26 4e272769 7fb2b2cd ea75759f     &...i''N.....uu.
100240a4:	1209091b 1d83839e 582c2c74 341a1a2e     ........t,,X...4
100240b4:	361b1b2d dc6e6eb2 b45a5aee 5ba0a0fb     -..6.nn..ZZ....[
100240c4:	a45252f6 763b3b4d b7d6d661 7db3b3ce     .RR.M;;va......}
100240d4:	5229297b dde3e33e 5e2f2f71 13848497     {))R>...q//^....
100240e4:	a65353f5 b9d1d168 00000000 c1eded2c     .SS.h.......,...
100240f4:	40202060 e3fcfc1f 79b1b1c8 b65b5bed     `  @.......y.[[.
10024104:	d46a6abe 8dcbcb46 67bebed9 7239394b     .jj.F......gK99r
10024114:	944a4ade 984c4cd4 b05858e8 85cfcf4a     .JJ..LL..XX.J...
10024124:	bbd0d06b c5efef2a 4faaaae5 edfbfb16     k...*......O....
10024134:	864343c5 9a4d4dd7 66333355 11858594     .CC..MM.U33f....
10024144:	8a4545cf e9f9f910 04020206 fe7f7f81     .EE.............
10024154:	a05050f0 783c3c44 259f9fba 4ba8a8e3     .PP.D<<x...%...K
10024164:	a25151f3 5da3a3fe 804040c0 058f8f8a     .QQ....].@@.....
10024174:	3f9292ad 219d9dbc 70383848 f1f5f504     ...?...!H88p....
10024184:	63bcbcdf 77b6b6c1 afdada75 42212163     ...c...wu...c!!B
10024194:	20101030 e5ffff1a fdf3f30e bfd2d26d     0.. ........m...
100241a4:	81cdcd4c 180c0c14 26131335 c3ecec2f     L.......5..&/...
100241b4:	be5f5fe1 359797a2 884444cc 2e171739     .__....5.DD.9...
100241c4:	93c4c457 55a7a7f2 fc7e7e82 7a3d3d47     W......U.~~.G==z
100241d4:	c86464ac ba5d5de7 3219192b e6737395     .dd..]].+..2.ss.
100241e4:	c06060a0 19818198 9e4f4fd1 a3dcdc7f     .``......OO.....
100241f4:	44222266 542a2a7e 3b9090ab 0b888883     f""D~**T...;....
10024204:	8c4646ca c7eeee29 6bb8b8d3 2814143c     .FF.)......k<..(
10024214:	a7dede79 bc5e5ee2 160b0b1d addbdb76     y....^^.....v...
10024224:	dbe0e03b 64323256 743a3a4e 140a0a1e     ;...V22dN::t....
10024234:	924949db 0c06060a 4824246c b85c5ce4     .II.....l$$H.\\.
10024244:	9fc2c25d bdd3d36e 43acacef c46262a6     ]...n......C.bb.
10024254:	399191a8 319595a4 d3e4e437 f279798b     ...9...17....yy.
10024264:	d5e7e732 8bc8c843 6e373759 da6d6db7     2...C...Y77n.mm.
10024274:	018d8d8c b1d5d564 9c4e4ed2 49a9a9e0     ....d....NN....I
10024284:	d86c6cb4 ac5656fa f3f4f407 cfeaea25     .ll..VV.....%...
10024294:	ca6565af f47a7a8e 47aeaee9 10080818     .ee..zz....G....
100242a4:	6fbabad5 f0787888 4a25256f 5c2e2e72     ...o.xx.o%%Jr..\
100242b4:	381c1c24 57a6a6f1 73b4b4c7 97c6c651     $..8...W...sQ...
100242c4:	cbe8e823 a1dddd7c e874749c 3e1f1f21     #...|....tt.!..>
100242d4:	964b4bdd 61bdbddc 0d8b8b86 0f8a8a85     .KK....a........
100242e4:	e0707090 7c3e3e42 71b5b5c4 cc6666aa     .pp.B>>|...q.ff.
100242f4:	904848d8 06030305 f7f6f601 1c0e0e12     .HH.............
10024304:	c26161a3 6a35355f ae5757f9 69b9b9d0     .aa._55j.WW....i
10024314:	17868691 99c1c158 3a1d1d27 279e9eb9     ....X...'..:...'
10024324:	d9e1e138 ebf8f813 2b9898b3 22111133     8..........+3.."
10024334:	d26969bb a9d9d970 078e8e89 339494a7     .ii.p..........3
10024344:	2d9b9bb6 3c1e1e22 15878792 c9e9e920     ...-"..<.... ...
10024354:	87cece49 aa5555ff 50282878 a5dfdf7a     I....UU.x((Pz...
10024364:	038c8c8f 59a1a1f8 09898980 1a0d0d17     .......Y........
10024374:	65bfbfda d7e6e631 844242c6 d06868b8     ...e1....BB..hh.
10024384:	824141c3 299999b0 5a2d2d77 1e0f0f11     .AA....)w--Z....
10024394:	7bb0b0cb a85454fc 6dbbbbd6 2c16163a     ...{.TT....m:..,
100243a4:	a5c66363 84f87c7c 99ee7777 8df67b7b     cc..||..ww..{{..
100243b4:	0dfff2f2 bdd66b6b b1de6f6f 5491c5c5     ....kk..oo.....T
100243c4:	50603030 03020101 a9ce6767 7d562b2b     00`P....gg..++V}
100243d4:	19e7fefe 62b5d7d7 e64dabab 9aec7676     .......b..M.vv..
100243e4:	458fcaca 9d1f8282 4089c9c9 87fa7d7d     ...E.......@}}..
100243f4:	15effafa ebb25959 c98e4747 0bfbf0f0     ....YY..GG......
10024404:	ec41adad 67b3d4d4 fd5fa2a2 ea45afaf     ..A....g.._...E.
10024414:	bf239c9c f753a4a4 96e47272 5b9bc0c0     ..#...S.rr.....[
10024424:	c275b7b7 1ce1fdfd ae3d9393 6a4c2626     ..u.......=.&&Lj
10024434:	5a6c3636 417e3f3f 02f5f7f7 4f83cccc     66lZ??~A.......O
10024444:	5c683434 f451a5a5 34d1e5e5 08f9f1f1     44h\..Q....4....
10024454:	93e27171 73abd8d8 53623131 3f2a1515     qq.....s11bS..*?
10024464:	0c080404 5295c7c7 65462323 5e9dc3c3     .......R##Fe...^
10024474:	28301818 a1379696 0f0a0505 b52f9a9a     ..0(..7......./.
10024484:	090e0707 36241212 9b1b8080 3ddfe2e2     ......$6.......=
10024494:	26cdebeb 694e2727 cd7fb2b2 9fea7575     ...&''Ni....uu..
100244a4:	1b120909 9e1d8383 74582c2c 2e341a1a     ........,,Xt..4.
100244b4:	2d361b1b b2dc6e6e eeb45a5a fb5ba0a0     ..6-nn..ZZ....[.
100244c4:	f6a45252 4d763b3b 61b7d6d6 ce7db3b3     RR..;;vM...a..}.
100244d4:	7b522929 3edde3e3 715e2f2f 97138484     ))R{...>//^q....
100244e4:	f5a65353 68b9d1d1 00000000 2cc1eded     SS.....h.......,
100244f4:	60402020 1fe3fcfc c879b1b1 edb65b5b       @`......y.[[..
10024504:	bed46a6a 468dcbcb d967bebe 4b723939     jj.....F..g.99rK
10024514:	de944a4a d4984c4c e8b05858 4a85cfcf     JJ..LL..XX.....J
10024524:	6bbbd0d0 2ac5efef e54faaaa 16edfbfb     ...k...*..O.....
10024534:	c5864343 d79a4d4d 55663333 94118585     CC..MM..33fU....
10024544:	cf8a4545 10e9f9f9 06040202 81fe7f7f     EE..............
10024554:	f0a05050 44783c3c ba259f9f e34ba8a8     PP..<<xD..%...K.
10024564:	f3a25151 fe5da3a3 c0804040 8a058f8f     QQ....].@@......
10024574:	ad3f9292 bc219d9d 48703838 04f1f5f5     ..?...!.88pH....
10024584:	df63bcbc c177b6b6 75afdada 63422121     ..c...w....u!!Bc
10024594:	30201010 1ae5ffff 0efdf3f3 6dbfd2d2     .. 0...........m
100245a4:	4c81cdcd 14180c0c 35261313 2fc3ecec     ...L......&5.../
100245b4:	e1be5f5f a2359797 cc884444 392e1717     __....5.DD.....9
100245c4:	5793c4c4 f255a7a7 82fc7e7e 477a3d3d     ...W..U.~~..==zG
100245d4:	acc86464 e7ba5d5d 2b321919 95e67373     dd..]]....2+ss..
100245e4:	a0c06060 98198181 d19e4f4f 7fa3dcdc     ``......OO......
100245f4:	66442222 7e542a2a ab3b9090 830b8888     ""Df**T~..;.....
10024604:	ca8c4646 29c7eeee d36bb8b8 3c281414     FF.....)..k...(<
10024614:	79a7dede e2bc5e5e 1d160b0b 76addbdb     ...y^^.........v
10024624:	3bdbe0e0 56643232 4e743a3a 1e140a0a     ...;22dV::tN....
10024634:	db924949 0a0c0606 6c482424 e4b85c5c     II......$$Hl\\..
10024644:	5d9fc2c2 6ebdd3d3 ef43acac a6c46262     ...]...n..C.bb..
10024654:	a8399191 a4319595 37d3e4e4 8bf27979     ..9...1....7yy..
10024664:	32d5e7e7 438bc8c8 596e3737 b7da6d6d     ...2...C77nYmm..
10024674:	8c018d8d 64b1d5d5 d29c4e4e e049a9a9     .......dNN....I.
10024684:	b4d86c6c faac5656 07f3f4f4 25cfeaea     ll..VV.........%
10024694:	afca6565 8ef47a7a e947aeae 18100808     ee..zz....G.....
100246a4:	d56fbaba 88f07878 6f4a2525 725c2e2e     ..o.xx..%%Jo..\r
100246b4:	24381c1c f157a6a6 c773b4b4 5197c6c6     ..8$..W...s....Q
100246c4:	23cbe8e8 7ca1dddd 9ce87474 213e1f1f     ...#...|tt....>!
100246d4:	dd964b4b dc61bdbd 860d8b8b 850f8a8a     KK....a.........
100246e4:	90e07070 427c3e3e c471b5b5 aacc6666     pp..>>|B..q.ff..
100246f4:	d8904848 05060303 01f7f6f6 121c0e0e     HH..............
10024704:	a3c26161 5f6a3535 f9ae5757 d069b9b9     aa..55j_WW....i.
10024714:	91178686 5899c1c1 273a1d1d b9279e9e     .......X..:'..'.
10024724:	38d9e1e1 13ebf8f8 b32b9898 33221111     ...8......+..."3
10024734:	bbd26969 70a9d9d9 89078e8e a7339494     ii.....p......3.
10024744:	b62d9b9b 223c1e1e 92158787 20c9e9e9     ..-...<"....... 
10024754:	4987cece ffaa5555 78502828 7aa5dfdf     ...IUU..((Px...z
10024764:	8f038c8c f859a1a1 80098989 171a0d0d     ......Y.........
10024774:	da65bfbf 31d7e6e6 c6844242 b8d06868     ..e....1BB..hh..
10024784:	c3824141 b0299999 775a2d2d 111e0f0f     AA....).--Zw....
10024794:	cb7bb0b0 fca85454 d66dbbbb 3a2c1616     ..{.TT....m...,:
100247a4:	63a5c663 7c84f87c 7799ee77 7b8df67b     c..c|..|w..w{..{
100247b4:	f20dfff2 6bbdd66b 6fb1de6f c55491c5     ....k..ko..o..T.
100247c4:	30506030 01030201 67a9ce67 2b7d562b     0`P0....g..g+V}+
100247d4:	fe19e7fe d762b5d7 abe64dab 769aec76     ......b..M..v..v
100247e4:	ca458fca 829d1f82 c94089c9 7d87fa7d     ..E.......@.}..}
100247f4:	fa15effa 59ebb259 47c98e47 f00bfbf0     ....Y..YG..G....
10024804:	adec41ad d467b3d4 a2fd5fa2 afea45af     .A....g.._...E..
10024814:	9cbf239c a4f753a4 7296e472 c05b9bc0     .#...S..r..r..[.
10024824:	b7c275b7 fd1ce1fd 93ae3d93 266a4c26     .u.......=..&Lj&
10024834:	365a6c36 3f417e3f f702f5f7 cc4f83cc     6lZ6?~A?......O.
10024844:	345c6834 a5f451a5 e534d1e5 f108f9f1     4h\4.Q....4.....
10024854:	7193e271 d873abd8 31536231 153f2a15     q..q..s.1bS1.*?.
10024864:	040c0804 c75295c7 23654623 c35e9dc3     ......R.#Fe#..^.
10024874:	18283018 96a13796 050f0a05 9ab52f9a     .0(..7......./..
10024884:	07090e07 12362412 809b1b80 e23ddfe2     .....$6.......=.
10024894:	eb26cdeb 27694e27 b2cd7fb2 759fea75     ..&.'Ni'....u..u
100248a4:	091b1209 839e1d83 2c74582c 1a2e341a     ........,Xt,.4..
100248b4:	1b2d361b 6eb2dc6e 5aeeb45a a0fb5ba0     .6-.n..nZ..Z.[..
100248c4:	52f6a452 3b4d763b d661b7d6 b3ce7db3     R..R;vM;..a..}..
100248d4:	297b5229 e33edde3 2f715e2f 84971384     )R{)..>./^q/....
100248e4:	53f5a653 d168b9d1 00000000 ed2cc1ed     S..S..h.......,.
100248f4:	20604020 fc1fe3fc b1c879b1 5bedb65b      @` .....y..[..[
10024904:	6abed46a cb468dcb bed967be 394b7239     j..j..F..g..9rK9
10024914:	4ade944a 4cd4984c 58e8b058 cf4a85cf     J..JL..LX..X..J.
10024924:	d06bbbd0 ef2ac5ef aae54faa fb16edfb     ..k...*..O......
10024934:	43c58643 4dd79a4d 33556633 85941185     C..CM..M3fU3....
10024944:	45cf8a45 f910e9f9 02060402 7f81fe7f     E..E............
10024954:	50f0a050 3c44783c 9fba259f a8e34ba8     P..P<xD<.%...K..
10024964:	51f3a251 a3fe5da3 40c08040 8f8a058f     Q..Q.]..@..@....
10024974:	92ad3f92 9dbc219d 38487038 f504f1f5     .?...!..8pH8....
10024984:	bcdf63bc b6c177b6 da75afda 21634221     .c...w....u.!Bc!
10024994:	10302010 ff1ae5ff f30efdf3 d26dbfd2     . 0...........m.
100249a4:	cd4c81cd 0c14180c 13352613 ec2fc3ec     ..L......&5.../.
100249b4:	5fe1be5f 97a23597 44cc8844 17392e17     _.._.5..D..D..9.
100249c4:	c45793c4 a7f255a7 7e82fc7e 3d477a3d     ..W..U..~..~=zG=
100249d4:	64acc864 5de7ba5d 192b3219 7395e673     d..d]..].2+.s..s
100249e4:	60a0c060 81981981 4fd19e4f dc7fa3dc     `..`....O..O....
100249f4:	22664422 2a7e542a 90ab3b90 88830b88     "Df"*T~*.;......
10024a04:	46ca8c46 ee29c7ee b8d36bb8 143c2814     F..F..)..k...(<.
10024a14:	de79a7de 5ee2bc5e 0b1d160b db76addb     ..y.^..^......v.
10024a24:	e03bdbe0 32566432 3a4e743a 0a1e140a     ..;.2dV2:tN:....
10024a34:	49db9249 060a0c06 246c4824 5ce4b85c     I..I....$Hl$\..\
10024a44:	c25d9fc2 d36ebdd3 acef43ac 62a6c462     ..]...n..C..b..b
10024a54:	91a83991 95a43195 e437d3e4 798bf279     .9...1....7.y..y
10024a64:	e732d5e7 c8438bc8 37596e37 6db7da6d     ..2...C.7nY7m..m
10024a74:	8d8c018d d564b1d5 4ed29c4e a9e049a9     ......d.N..N.I..
10024a84:	6cb4d86c 56faac56 f407f3f4 ea25cfea     l..lV..V......%.
10024a94:	65afca65 7a8ef47a aee947ae 08181008     e..ez..z.G......
10024aa4:	bad56fba 7888f078 256f4a25 2e725c2e     .o..x..x%Jo%.\r.
10024ab4:	1c24381c a6f157a6 b4c773b4 c65197c6     .8$..W...s....Q.
10024ac4:	e823cbe8 dd7ca1dd 749ce874 1f213e1f     ..#...|.t..t.>!.
10024ad4:	4bdd964b bddc61bd 8b860d8b 8a850f8a     K..K.a..........
10024ae4:	7090e070 3e427c3e b5c471b5 66aacc66     p..p>|B>.q..f..f
10024af4:	48d89048 03050603 f601f7f6 0e121c0e     H..H............
10024b04:	61a3c261 355f6a35 57f9ae57 b9d069b9     a..a5j_5W..W.i..
10024b14:	86911786 c15899c1 1d273a1d 9eb9279e     ......X..:'..'..
10024b24:	e138d9e1 f813ebf8 98b32b98 11332211     ..8......+..."3.
10024b34:	69bbd269 d970a9d9 8e89078e 94a73394     i..i..p......3..
10024b44:	9bb62d9b 1e223c1e 87921587 e920c9e9     .-...<"....... .
10024b54:	ce4987ce 55ffaa55 28785028 df7aa5df     ..I.U..U(Px(..z.
10024b64:	8c8f038c a1f859a1 89800989 0d171a0d     .....Y..........
10024b74:	bfda65bf e631d7e6 42c68442 68b8d068     .e....1.B..Bh..h
10024b84:	41c38241 99b02999 2d775a2d 0f111e0f     A..A.)..-Zw-....
10024b94:	b0cb7bb0 54fca854 bbd66dbb 163a2c16     .{..T..T.m...,:.
10024ba4:	6363a5c6 7c7c84f8 777799ee 7b7b8df6     ..cc..||..ww..{{
10024bb4:	f2f20dff 6b6bbdd6 6f6fb1de c5c55491     ......kk..oo.T..
10024bc4:	30305060 01010302 6767a9ce 2b2b7d56     `P00......ggV}++
10024bd4:	fefe19e7 d7d762b5 ababe64d 76769aec     .....b..M.....vv
10024be4:	caca458f 82829d1f c9c94089 7d7d87fa     .E.......@....}}
10024bf4:	fafa15ef 5959ebb2 4747c98e f0f00bfb     ......YY..GG....
10024c04:	adadec41 d4d467b3 a2a2fd5f afafea45     A....g.._...E...
10024c14:	9c9cbf23 a4a4f753 727296e4 c0c05b9b     #...S.....rr.[..
10024c24:	b7b7c275 fdfd1ce1 9393ae3d 26266a4c     u.......=...Lj&&
10024c34:	36365a6c 3f3f417e f7f702f5 cccc4f83     lZ66~A??.....O..
10024c44:	34345c68 a5a5f451 e5e534d1 f1f108f9     h\44Q....4......
10024c54:	717193e2 d8d873ab 31315362 15153f2a     ..qq.s..bS11*?..
10024c64:	04040c08 c7c75295 23236546 c3c35e9d     .....R..Fe##.^..
10024c74:	18182830 9696a137 05050f0a 9a9ab52f     0(..7......./...
10024c84:	0707090e 12123624 80809b1b e2e23ddf     ....$6.......=..
10024c94:	ebeb26cd 2727694e b2b2cd7f 75759fea     .&..Ni''......uu
10024ca4:	09091b12 83839e1d 2c2c7458 1a1a2e34     ........Xt,,4...
10024cb4:	1b1b2d36 6e6eb2dc 5a5aeeb4 a0a0fb5b     6-....nn..ZZ[...
10024cc4:	5252f6a4 3b3b4d76 d6d661b7 b3b3ce7d     ..RRvM;;.a..}...
10024cd4:	29297b52 e3e33edd 2f2f715e 84849713     R{)).>..^q//....
10024ce4:	5353f5a6 d1d168b9 00000000 eded2cc1     ..SS.h.......,..
10024cf4:	20206040 fcfc1fe3 b1b1c879 5b5bedb6     @`  ....y.....[[
10024d04:	6a6abed4 cbcb468d bebed967 39394b72     ..jj.F..g...rK99
10024d14:	4a4ade94 4c4cd498 5858e8b0 cfcf4a85     ..JJ..LL..XX.J..
10024d24:	d0d06bbb efef2ac5 aaaae54f fbfb16ed     .k...*..O.......
10024d34:	4343c586 4d4dd79a 33335566 85859411     ..CC..MMfU33....
10024d44:	4545cf8a f9f910e9 02020604 7f7f81fe     ..EE............
10024d54:	5050f0a0 3c3c4478 9f9fba25 a8a8e34b     ..PPxD<<%...K...
10024d64:	5151f3a2 a3a3fe5d 4040c080 8f8f8a05     ..QQ].....@@....
10024d74:	9292ad3f 9d9dbc21 38384870 f5f504f1     ?...!...pH88....
10024d84:	bcbcdf63 b6b6c177 dada75af 21216342     c...w....u..Bc!!
10024d94:	10103020 ffff1ae5 f3f30efd d2d26dbf      0...........m..
10024da4:	cdcd4c81 0c0c1418 13133526 ecec2fc3     .L......&5.../..
10024db4:	5f5fe1be 9797a235 4444cc88 1717392e     ..__5.....DD.9..
10024dc4:	c4c45793 a7a7f255 7e7e82fc 3d3d477a     .W..U.....~~zG==
10024dd4:	6464acc8 5d5de7ba 19192b32 737395e6     ..dd..]]2+....ss
10024de4:	6060a0c0 81819819 4f4fd19e dcdc7fa3     ..``......OO....
10024df4:	22226644 2a2a7e54 9090ab3b 8888830b     Df""T~**;.......
10024e04:	4646ca8c eeee29c7 b8b8d36b 14143c28     ..FF.)..k...(<..
10024e14:	dede79a7 5e5ee2bc 0b0b1d16 dbdb76ad     .y....^^.....v..
10024e24:	e0e03bdb 32325664 3a3a4e74 0a0a1e14     .;..dV22tN::....
10024e34:	4949db92 06060a0c 24246c48 5c5ce4b8     ..II....Hl$$..\\
10024e44:	c2c25d9f d3d36ebd acacef43 6262a6c4     .]...n..C.....bb
10024e54:	9191a839 9595a431 e4e437d3 79798bf2     9...1....7....yy
10024e64:	e7e732d5 c8c8438b 3737596e 6d6db7da     .2...C..nY77..mm
10024e74:	8d8d8c01 d5d564b1 4e4ed29c a9a9e049     .....d....NNI...
10024e84:	6c6cb4d8 5656faac f4f407f3 eaea25cf     ..ll..VV.....%..
10024e94:	6565afca 7a7a8ef4 aeaee947 08081810     ..ee..zzG.......
10024ea4:	babad56f 787888f0 25256f4a 2e2e725c     o.....xxJo%%\r..
10024eb4:	1c1c2438 a6a6f157 b4b4c773 c6c65197     8$..W...s....Q..
10024ec4:	e8e823cb dddd7ca1 74749ce8 1f1f213e     .#...|....tt>!..
10024ed4:	4b4bdd96 bdbddc61 8b8b860d 8a8a850f     ..KKa...........
10024ee4:	707090e0 3e3e427c b5b5c471 6666aacc     ..pp|B>>q.....ff
10024ef4:	4848d890 03030506 f6f601f7 0e0e121c     ..HH............
10024f04:	6161a3c2 35355f6a 5757f9ae b9b9d069     ..aaj_55..WWi...
10024f14:	86869117 c1c15899 1d1d273a 9e9eb927     .....X..:'..'...
10024f24:	e1e138d9 f8f813eb 9898b32b 11113322     .8......+..."3..
10024f34:	6969bbd2 d9d970a9 8e8e8907 9494a733     ..ii.p......3...
10024f44:	9b9bb62d 1e1e223c 87879215 e9e920c9     -...<"....... ..
10024f54:	cece4987 5555ffaa 28287850 dfdf7aa5     .I....UUPx((.z..
10024f64:	8c8c8f03 a1a1f859 89898009 0d0d171a     ....Y...........
10024f74:	bfbfda65 e6e631d7 4242c684 6868b8d0     e....1....BB..hh
10024f84:	4141c382 9999b029 2d2d775a 0f0f111e     ..AA)...Zw--....
10024f94:	b0b0cb7b 5454fca8 bbbbd66d 16163a2c     {.....TTm...,:..

10024fa4 <rcon>:
10024fa4:	01000000 02000000 04000000 08000000     ................
10024fb4:	10000000 20000000 40000000 80000000     ....... ...@....
10024fc4:	1b000000 36000000 7665642f 6172752f     .......6/dev/ura
10024fd4:	6d6f646e 00000000 7665642f 6e61722f     ndom..../dev/ran
10024fe4:	006d6f64                                dom.

10024fe8 <outputB_data>:
10024fe8:	c360e1d3 40f3995b 648262b2 601075d1     ..`.[..@.b.d.u.`
10024ff8:	a35d04e0 a557ff83 73a6737d 0dd8b8d2     ..]...W.}s.s....
10025008:	c3a6f6aa 45bb915a d03fd779 11d1fec8     ....Z..Ey.?.....
10025018:	061339b0 eddf8a82 81018f52 bdfeb321     .9......R...!...
10025028:	97e743c3 63bb7db8 de3313db e1ecd1d9     .C...}.c..3.....
10025038:	b7a6cf77 1dabe81f ed2466a4 1ce51564     w........f$.d...
10025048:	cac7e2cd 9983e286 91ebea0e 52150412     ...............R
10025058:	9195228b 2db08102 c9f431d4 df2704f7     .".....-.1....'.

10025068 <seedB_data>:
10025068:	f3d05aa6 0e4edb45 c375e8ff 421fe7a2     .Z..E.N...u....B
10025078:	629d12c7 19c1f50f f055efa9 fbe08551     ...b......U.Q...
10025088:	31f98185 6e271775 7d60e906 2ecccbdb     ...1u.'n..`}....

10025098 <outputA_data>:
10025098:	3bc6ee04 2cdf31b2 fb1a0a63 9d9424e7     ...;.1.,c....$..
100250a8:	78585a00 79aae151 4773475e 6256b0c8     .ZXxQ..y^GsG..Vb
100250b8:	dcbd181c fc998ddd 20b9c25f accfd853     ........_.. S...
100250c8:	83b80bfb d1fa0512 71c0d6dd 18608a31     ...........q1.`.
100250d8:	f5733bf0 d0d4e4ed 03def971 10ea7afd     .;s.....q....z..
100250e8:	b899925d 07aa99af b94ddb5b 8dc128aa     ].......[.M..(..
100250f8:	ee564b17 094d012a 22ff9688 a855c982     .KV.*.M...."..U.
10025108:	69e06919 07e08cfa 3a1880a1 17aedf07     .i.i.......:....

10025118 <reseedSeedA_data>:
10025118:	8e8a2be6 b641f1e8 e3660598 49c0e3bf     .+....A...f....I
10025128:	acd4da03 229fdf2c 670a0180 d383bc39     ....,.."...g9...

10025138 <seedA_data>:
10025138:	77333663 46861ee4 b40aeb8d 3f68eda8     c63w...F......h?
10025148:	474e136a 00c714e0 e9814e45 69a55853     j.NG....EN..SX.i
10025158:	8fa38a80 23a6722a 9f5a9159 68ca048a     ....*r.#Y.Z....h

10025168 <K>:
10025168:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
10025178:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
10025188:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
10025198:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
100251a8:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
100251b8:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
100251c8:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
100251d8:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
100251e8:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
100251f8:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
10025208:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
10025218:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
10025228:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
10025238:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
10025248:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
10025258:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
10025268:	5f43584d 45535341 25205452 25232073     MXC_ASSERT %s #%
10025278:	28203a64 0a297325 00000000 6573552f     d: (%s)...../Use
10025288:	642f7372 7369726f 73796c75 442f6573     rs/dorisulysse/D
10025298:	746b7365 6d2f706f 65727469 64736d2f     esktop/mitre/msd
100252a8:	694c2f6b 72617262 2f736569 72616f42     k/Libraries/Boar
100252b8:	4d2f7364 38375841 2f303030 52485446     ds/MAX78000/FTHR
100252c8:	7665525f 6f532f41 65637275 616f622f     _RevA/Source/boa
100252d8:	632e6472 00000000 4c494146 00000000     rd.c....FAIL....

100252e8 <num_leds>:
100252e8:	00000003                                ....

100252ec <led_pin>:
100252ec:	40080400 00000001 00010001 40080400     ...@...........@
100252fc:	00000002 00010001 40080400 00000004     ...........@....
1002530c:	00010001                                ....

10025310 <num_pbs>:
10025310:	00000002                                ....

10025314 <pb_pin>:
10025314:	40008000 00000004 00010100 40009000     ...@...........@
10025324:	00000080 00010100 6573552f 642f7372     ......../Users/d
10025334:	7369726f 73796c75 442f6573 746b7365     orisulysse/Deskt
10025344:	6d2f706f 65727469 64736d2f 694c2f6b     op/mitre/msdk/Li
10025354:	72617262 2f736569 6373694d 76697244     braries/MiscDriv
10025364:	2f737265 2f44454c 2e64656c 00000063     ers/LED/led.c...
10025374:	20786469 756e203c 656c5f6d 00007364     idx < num_leds..

10025384 <gpio_cfg_uart3>:
10025384:	40080400 000000c0 00000003              ...@........

10025390 <gpio_cfg_uart2>:
10025390:	40009000 00000003 00000002              ...@........

1002539c <gpio_cfg_uart1>:
1002539c:	40008000 00003000 00000002              ...@.0......

100253a8 <gpio_cfg_uart0>:
100253a8:	40008000 00000003 00000002              ...@........

100253b4 <gpio_cfg_i2c2>:
100253b4:	40008000 c0000000 00000002              ...@........

100253c0 <gpio_cfg_i2c1>:
100253c0:	40008000 00030000 00000002              ...@........

100253cc <gpio_cfg_i2c0>:
100253cc:	40008000 00000c00 00000002              ...@........

100253d8 <gpio_cfg_extclk>:
100253d8:	40008000 00000008 00000002 6573552f     ...@......../Use
100253e8:	642f7372 7369726f 73796c75 442f6573     rs/dorisulysse/D
100253f8:	746b7365 6d2f706f 65727469 64736d2f     esktop/mitre/msd
10025408:	694c2f6b 72617262 2f736569 49534d43     k/Libraries/CMSI
10025418:	2e2e2f53 7265502f 44687069 65766972     S/../PeriphDrive
10025428:	532f7372 6372756f 50472f65 672f4f49     rs/Source/GPIO/g
10025438:	5f6f6970 6d6d6f63 632e6e6f 00000000     pio_common.c....
10025448:	74726f70 4d203c20 435f4358 475f4746     port < MXC_CFG_G
10025458:	5f4f4950 54534e49 45434e41 00000053     PIO_INSTANCES...

10025468 <CSWTCH.16>:
10025468:	40009000 40080400 40080600 00464e49     ...@...@...@INF.
10025478:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
10025488:	37363534 62613938 66656463 00000000     456789abcdef....
10025498:	33323130 37363534 42413938 46454443     0123456789ABCDEF
100254a8:	00000000 6c756e28 0000296c 00000030     ....(null)..0...

100254b8 <zeroes.0>:
100254b8:	30303030 30303030 30303030 30303030     0000000000000000

100254c8 <blanks.1>:
100254c8:	20202020 20202020 20202020 20202020                     

100254d8 <zeroes.0>:
100254d8:	30303030 30303030 30303030 30303030     0000000000000000

100254e8 <blanks.1>:
100254e8:	20202020 20202020 20202020 20202020                     
100254f8:	435f434c 414c4c4f 00004554 435f434c     LC_COLLATE..LC_C
10025508:	45505954 00000000 4d5f434c 54454e4f     TYPE....LC_MONET
10025518:	00595241 4e5f434c 52454d55 00004349     ARY.LC_NUMERIC..
10025528:	545f434c 00454d49 4d5f434c 41535345     LC_TIME.LC_MESSA
10025538:	00534547                                GES.

1002553c <_ctype_>:
1002553c:	20202000 20202020 28282020 20282828     .         ((((( 
1002554c:	20202020 20202020 20202020 20202020                     
1002555c:	10108820 10101010 10101010 10101010      ...............
1002556c:	04040410 04040404 10040404 10101010     ................
1002557c:	41411010 41414141 01010101 01010101     ..AAAAAA........
1002558c:	01010101 01010101 01010101 10101010     ................
1002559c:	42421010 42424242 02020202 02020202     ..BBBBBB........
100255ac:	02020202 02020202 02020202 10101010     ................
100255bc:	00000020 00000000 00000000 00000000      ...............
	...
10025640:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
10025650:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
10025660:	00000000 6c6f562f 73656d75 7461642f     ..../Volumes/dat
10025670:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
10025680:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
10025690:	72612f6e 32312d6d 6372732f 77656e2f     n/arm-12/src/new
100256a0:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
100256b0:	696c2f62 732f6362 696c6474 74642f62     b/libc/stdlib/dt
100256c0:	632e616f 00000000                       oa.c....

100256c8 <zeroes.0>:
100256c8:	30303030 30303030 30303030 30303030     0000000000000000

100256d8 <blanks.1>:
100256d8:	20202020 20202020 20202020 20202020                     
100256e8:	646c2565 00000000                       e%ld....

100256f0 <basefix.0>:
100256f0:	0001000a 00030002 00050004 00070006     ................
10025700:	00090008 000b000a 000d000c 000f000e     ................
10025710:	00000010 6c6f562f 73656d75 7461642f     ..../Volumes/dat
10025720:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
10025730:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
10025740:	72612f6e 32312d6d 6372732f 77656e2f     n/arm-12/src/new
10025750:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
10025760:	696c2f62 732f6362 696c6474 706d2f62     b/libc/stdlib/mp
10025770:	2e636572 00000063                       rec.c...

10025778 <p05.0>:
10025778:	00000005 00000019 0000007d 00000000     ........}.......

10025788 <__mprec_bigtens>:
10025788:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
10025798:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
100257a8:	7f73bf3c 75154fdd                       <.s..O.u

100257b0 <__mprec_tens>:
100257b0:	00000000 3ff00000 00000000 40240000     .......?......$@
100257c0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
100257d0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
100257e0:	00000000 412e8480 00000000 416312d0     .......A......cA
100257f0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
10025800:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
10025810:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
10025820:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
10025830:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
10025840:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
10025850:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
10025860:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
10025870:	79d99db4 44ea7843 0000666e 74696e69     ...yCx.Dnf..init
10025880:	00000079 00006e61                       y...an..

10025888 <fpinan.0>:
10025888:	00000034 fffffbce 000003cb 00000001     4...............
10025898:	00000000                                ....

1002589c <fpi.1>:
1002589c:	00000035 fffffbce 000003cb 00000001     5...............
100258ac:	00000000                                ....

100258b0 <tinytens>:
100258b0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
100258c0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
100258d0:	64ac6f43 11680628 7566202c 6974636e     Co.d(.h., functi
100258e0:	203a6e6f 00000000 65737361 6f697472     on: ....assertio
100258f0:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
10025900:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
10025910:	25732564 00000a73 0053494a 53494a53     d%s%s...JIS.SJIS
10025920:	00000000 4a435545 00000050              ....EUCJP...

1002592c <d02f4>:
1002592c:	4e105f0c 4e2a4e15 4e364e31 4e3f4e3c     ._.N.N*N1N6N<N?N
1002593c:	4e564e42 4e824e58 8c6b4e85 82124e8a     BNVNXN.N.Nk..N..
1002594c:	4e8e5f0d 4e9f4e9e 4ea24ea0 4eb34eb0     ._.N.N.N.N.N.N.N
1002595c:	4ece4eb6 4ec44ecd 4ec24ec6 4ede4ed7     .N.N.N.N.N.N.N.N
1002596c:	4edf4eed 4f094ef7 4f304f5a 4f5d4f5b     .N.N.N.OZO0O[O]O
1002597c:	4f474f57 4f884f76 4f984f8f 4f694f7b     WOGOvO.O.O.O{OiO
1002598c:	4f914f70 4f864f6f 51184f96 4fdf4fd4     pO.OoO.O.O.Q.O.O
1002599c:	4fd84fce 4fd14fdb 4fd04fda 4fe54fe4     .O.O.O.O.O.O.O.O
100259ac:	5028501a 502a5014 50055025 4ff64f1c     .P(P.P*P%P.P.O.O
100259bc:	50295021 4ffe502c 50114fef 50435006     !P)P,P.O.O.P.PCP
100259cc:	67035047 50505055 505a5048 506c5056     GP.gUPPPHPZPVPlP
100259dc:	50805078 5085509a 50b250b4 50ca50c9     xP.P.P.P.P.P.P.P
100259ec:	50c250b3 50de50d6 50ed50e5 50ee50e3     .P.P.P.P.P.P.P.P
100259fc:	50f550f9 51015109 51165102 51145115     .P.P.Q.Q.Q.Q.Q.Q
10025a0c:	5121511a 5137513a 513b513c 5140513f     .Q!Q:Q7Q<Q;Q?Q@Q
10025a1c:	514c5152 51625154 51697af8 516e516a     RQLQTQbQ.ziQjQnQ
10025a2c:	51825180 518c56d8 518f5189 51935191     .Q.Q.V.Q.Q.Q.Q.Q
10025a3c:	51965195 51a651a4 51a951a2 51ab51aa     .Q.Q.Q.Q.Q.Q.Q.Q
10025a4c:	51b151b3 51b051b2 51bd51b5 51c951c5     .Q.Q.Q.Q.Q.Q.Q.Q
10025a5c:	51e051db 51e98655 51f051ed 51fe51f5     .Q.QU..Q.Q.Q.Q.Q
10025a6c:	520b5204 520e5214 522a5227 5233522e     .R.R.R.R'R*R.R3R
10025a7c:	524f5239 524b5244 525e524c 526a5254     9RORDRKRLR^RTRjR
10025a8c:	52695274 527f5273 528d527d 52925294     tRiRsR.R}R.R.R.R
10025a9c:	52885271 8fa85291 52ac8fa7 52bc52ad     qR.R.R.....R.R.R
10025aac:	52c152b5 52d752cd 52e352de 98ed52e6     .R.R.R.R.R.R.R..
10025abc:	52f352e0 52f852f5 530652f9 75385308     .R.R.R.R.R.S.S8u
10025acc:	5310530d 5315530f 5323531a 5331532f     .S.S.S.S.S#S/S1S
10025adc:	53385333 53465340 4e175345 534d5349     3S8S@SFSES.NISMS
10025aec:	535e51d6 536e5369 537b5918 53825377     .Q^SiSnS.Y{SwS.S
10025afc:	53a05396 53a553a6 53b053ae 53c353b6     .S.S.S.S.S.S.S.S
10025b0c:	96d97c12 66fc53df 53ee71ee 53ed53e8     .|...S.f.q.S.S.S
10025b1c:	540153fa 5440543d 542d542c 542e543c     .S.T=T@T,T-T<T.T
10025b2c:	54295436 544e541d 5475548f 545f548e     6T)T.TNT.TuT.T_T
10025b3c:	54775471 54925470 5480547b 54845476     qTwTpT.T{T.TvT.T
10025b4c:	54865490 54a254c7 54a554b8 54c454ac     .T.T.T.T.T.T.T.T
10025b5c:	54a854c8 54c254ab 54be54a4 54d854bc     .T.T.T.T.T.T.T.T
10025b6c:	54e654e5 5514550f 54ee54fd 54fa54ed     .T.T.U.U.T.T.T.T
10025b7c:	553954e2 55635540 552e554c 5545555c     .T9U@UcULU.U\UEU
10025b8c:	55575556 55335538 5599555d 54af5580     VUWU8U3U]U.U.U.T
10025b9c:	559f558a 557e557b 559e5598 557c55ae     .U.U{U~U.U.U.U|U
10025bac:	55a95583 55a85587 55c555da 55c455df     .U.U.U.U.U.U.U.U
10025bbc:	55e455dc 561455d4 561655f7 55fd55fe     .U.U.U.V.U.V.U.U
10025bcc:	55f9561b 5650564e 563471df 56325636     .V.UNVPV.q4V6V2V
10025bdc:	566b5638 562f5664 566a566c 56805686     8VkVdV/VlVjV.V.V
10025bec:	56a0568a 568f5694 56ae56a5 56b456b6     .V.V.V.V.V.V.V.V
10025bfc:	56bc56c2 56c356c1 56c856c0 56d156ce     .V.V.V.V.V.V.V.V
10025c0c:	56d756d3 56f956ee 56ff5700 57095704     .V.V.V.V.W.V.W.W
10025c1c:	570b5708 5713570d 57165718 571c55c7     .W.W.W.W.W.W.U.W
10025c2c:	57375726 574e5738 5740573b 5769574f     &W7W8WNW;W@WOWiW
10025c3c:	578857c0 577f5761 57935789 57b357a0     .W.WaW.W.W.W.W.W
10025c4c:	57aa57a4 57c357b0 57d457c6 57d357d2     .W.W.W.W.W.W.W.W
10025c5c:	57d6580a 580b57e3 581d5819 58215872     .X.W.W.X.X.XrX!X
10025c6c:	584b5862 6bc05870 583d5852 58855879     bXKXpX.kRX=XyX.X
10025c7c:	589f58b9 58ba58ab 58bb58de 58ae58b8     .X.X.X.X.X.X.X.X
10025c8c:	58d358c5 58d758d1 58d858d9 58dc58e5     .X.X.X.X.X.X.X.X
10025c9c:	58df58e4 58fa58ef 58fb58f9 58fd58fc     .X.X.X.X.X.X.X.X
10025cac:	590a5902 591b5910 592568a6 592d592c     .Y.Y.Y.Y.h%Y,Y-Y
10025cbc:	59385932 7ad2593e 59505955 595a594e     2Y8Y>Y.zUYPYNYZY
10025ccc:	59625958 59675960 5969596c 59815978     XYbY`YgYlYiYxY.Y
10025cdc:	4f5e599d 59a34fab 59c659b2 59dc59e8     .Y^O.O.Y.Y.Y.Y.Y
10025cec:	59d9598d 5a2559da 5a115a1f 5a095a1c     .Y.Y.Y%Z.Z.Z.Z.Z
10025cfc:	5a405a1a 5a495a6c 5a365a35 5a6a5a62     .Z@ZlZIZ5Z6ZbZjZ
10025d0c:	5abc5a9a 5acb5abe 5abd5ac2 5ad75ae3     .Z.Z.Z.Z.Z.Z.Z.Z
10025d1c:	5ae95ae6 5afa5ad6 5b0c5afb 5b165b0b     .Z.Z.Z.Z.Z.[.[.[
10025d2c:	5ad05b32 5b365b2a 5b435b3e 5b405b45     2[.Z*[6[>[C[E[@[
10025d3c:	5b555b51 5b5b5b5a 5b695b65 5b735b70     Q[U[Z[[[e[i[p[s[
10025d4c:	5b785b75 5b7a6588 5b835b80 5bb85ba6     u[x[.ez[.[.[.[.[
10025d5c:	5bc75bc3 5bd45bc9 5be45bd0 5be25be6     .[.[.[.[.[.[.[.[
10025d6c:	5be55bde 5bf05beb 5bf35bf6 5c075c05     .[.[.[.[.[.[.\.\
10025d7c:	5c0d5c08 5c205c13 5c285c22 5c395c38     .\.\.\ \"\(\8\9\
10025d8c:	5c465c41 5c535c4e 5c4f5c50 5c6c5b71     A\F\N\S\P\O\q[l\
10025d9c:	4e625c6e 5c795c76 5c915c8c 599b5c94     n\bNv\y\.\.\.\.Y
10025dac:	5cbb5cab 5cbc5cb6 5cc55cb7 5cc75cbe     .\.\.\.\.\.\.\.\
10025dbc:	5ce95cd9 5cfa5cfd 5d8c5ced 5d0b5cea     .\.\.\.\.\.].\.]
10025dcc:	5d175d15 5d1f5d5c 5d115d1b 5d225d14     .].]\].].].].]"]
10025ddc:	5d195d1a 5d4c5d18 5d4e5d52 5d6c5d4b     .].].]L]R]N]K]l]
10025dec:	5d765d73 5d845d87 5da25d82 5dac5d9d     s]v].].].].].].]
10025dfc:	5dbd5dae 5db75d90 5dc95dbc 5dd35dcd     .].].].].].].].]
10025e0c:	5dd65dd2 5deb5ddb 5df55df2 5e1a5e0b     .].].].].].].^.^
10025e1c:	5e115e19 5e365e1b 5e445e37 5e405e43     .^.^.^6^7^D^C^@^
10025e2c:	5e575e4e 5e5f5e54 5e645e62 5e755e47     N^W^T^_^b^d^G^u^
10025e3c:	5e7a5e76 5e7f9ebc 5ec15ea0 5ec85ec2     v^z^...^.^.^.^.^
10025e4c:	5ecf5ed0 5ee35ed6 5eda5edd 5ee25edb     .^.^.^.^.^.^.^.^
10025e5c:	5ee85ee1 5eec5ee9 5ef35ef1 5ef45ef0     .^.^.^.^.^.^.^.^
10025e6c:	5efe5ef8 5f095f03 5f5c5f5d 5f115f0b     .^.^._._]_\_._._
10025e7c:	5f295f16 5f385f2d 5f485f41 5f4e5f4c     ._)_-_8_A_H_L_N_
10025e8c:	5f515f2f 5f575f56 5f615f59 5f735f6d     /_Q_V_W_Y_a_m_s_
10025e9c:	5f835f77 5f7f5f82 5f885f8a 5f875f91     w_._._._._._._._
10025eac:	5f995f9e 5fa05f98 5fad5fa8 5fd65fbc     ._._._._._._._._
10025ebc:	5fe45ffb 5ff15ff8 60b35fdd 60215fff     ._._._._._.`._!`
10025ecc:	60196060 60296010 6031600e 6015601b     ``.`.`)`.`1`.`.`
10025edc:	6026602b 603a600f 6041605a 6077606a     +`&`.`:`Z`A`j`w`
10025eec:	604a605f 604d6046 60436063 60426064     _`J`F`M`c`C`d`B`
10025efc:	606b606c 60816059 60e7608d 609a6083     l`k`Y`.`.`.`.`.`
10025f0c:	609b6084 60976096 60a76092 60e1608b     .`.`.`.`.`.`.`.`
10025f1c:	60e060b8 60b460d3 60bd5ff0 60b560c6     .`.`.`.`._.`.`.`
10025f2c:	614d60d8 61066115 60f760f6 60f46100     .`Ma.a.a.`.`.a.`
10025f3c:	610360fa 60fb6121 610d60f1 6147610e     .`.a!a.`.`.a.aGa
10025f4c:	6128613e 614a6127 613c613f 6134612c     >a(a'aJa?a<a,a4a
10025f5c:	6142613d 61736144 61586177 615a6159     =aBaDasawaXaYaZa
10025f6c:	6174616b 6165616f 615f6171 6153615d     kataoaeaqa_a]aSa
10025f7c:	61996175 61876196 619461ac 618a619a     ua.a.a.a.a.a.a.a
10025f8c:	61ab6191 61cc61ae 61c961ca 61c861f7     .a.a.a.a.a.a.a.a
10025f9c:	61c661c3 61cb61ba 61cd7f79 61e361e6     .a.a.a.ay..a.a.a
10025fac:	61fa61f6 61ff61f4 61fc61fd 620061fe     .a.a.a.a.a.a.a.b
10025fbc:	62096208 620c620d 621b6214 6221621e     .b.b.b.b.b.b.b!b
10025fcc:	622e622a 62326230 62416233 625e624e     *b.b0b2b3bAbNb^b
10025fdc:	625b6263 62686260 6282627c 627e6289     cb[b`bhb|b.b.b~b
10025fec:	62936292 62d46296 62946283 62d162d7     .b.b.b.b.b.b.b.b
10025ffc:	62cf62bb 62c662ff 62c864d4 62cc62dc     .b.b.b.b.d.b.b.b
1002600c:	62c262ca 629b62c7 630c62c9 62f162ee     .b.b.b.b.b.c.b.b
1002601c:	63026327 62ef6308 635062f5 634d633e     'c.c.c.b.bPc>cMc
1002602c:	634f641c 638e6396 63ab6380 63a36376     .dOc.c.c.c.cvc.c
1002603c:	6389638f 63b5639f 6369636b 63e963be     .c.c.c.ckcic.c.c
1002604c:	63c663c0 63c963e3 63f663d2 641663c4     .c.c.c.c.c.c.c.d
1002605c:	64066434 64266413 651d6436 64286417     4d.d.d&d6d.e.d(d
1002606c:	6467640f 6476646f 652a644e 64936495     .dgdodvdNd*e.d.d
1002607c:	64a964a5 64bc6488 64d264da 64c764c5     .d.d.d.d.d.d.d.d
1002608c:	64d864bb 64f164c2 820964e7 64e164e0     .d.d.d.d.d...d.d
1002609c:	64e362ac 652c64ef 64f464f6 64fa64f2     .b.d.d,e.d.d.d.d
100260ac:	64fd6500 651c6518 65246505 652b6523     .e.d.e.e.e$e#e+e
100260bc:	65356534 65366537 754b6538 65566548     4e5e7e6e8eKuHeVe
100260cc:	654d6555 655e6558 6572655d 65826578     UeMeXe^e]erexe.e
100260dc:	8b8a6583 659f659b 65b765ab 65c665c3     .e...e.e.e.e.e.e
100260ec:	65c465c1 65d265cc 65d965db 65e165e0     .e.e.e.e.e.e.e.e
100260fc:	677265f1 6603660a 677365fb 66366635     .erg.f.f.esg5f6f
1002610c:	661c6634 6644664f 66416649 665d665e     4f.fOfDfIfAf^f]f
1002611c:	66676664 665f6668 66706662 66886683     dfgfhf_fbfpf.f.f
1002612c:	6689668e 66986684 66c1669d 66c966b9     .f.f.f.f.f.f.f.f
1002613c:	66bc66be 66b866c4 66da66d6 663f66e0     .f.f.f.f.f.f.f?f
1002614c:	66e966e6 66f566f0 670f66f7 671e6716     .f.f.f.f.f.g.g.g
1002615c:	67276726 672e9738 6736673f 67386741     &g'g8..g?g6gAg8g
1002616c:	67466737 6760675e 67636759 67896764     7gFg^g`gYgcgdg.g
1002617c:	67a96770 676a677c 678b678c 67a167a6     pg.g|gjg.g.g.g.g
1002618c:	67b76785 67b467ef 67b367ec 67b867e9     .g.g.g.g.g.g.g.g
1002619c:	67de67e4 67e267dd 67b967ee 67c667ce     .g.g.g.g.g.g.g.g
100261ac:	6a9c67e7 6846681e 68406829 6832684d     .g.j.hFh)h@hMh2h
100261bc:	68b3684e 6859682b 68776863 689f687f     Nh.h+hYhchwh.h.h
100261cc:	68ad688f 689d6894 6883689b 68b96aae     .h.h.h.h.h.h.j.h
100261dc:	68b56874 68ba68a0 688d690f 6901687e     th.h.h.h.i.h~h.i
100261ec:	690868ca 692268d8 68e16926 68cd690c     .h.i.h"i&i.h.i.h
100261fc:	68e768d4 693668d5 69046912 68e368d7     .h.h.h6i.i.i.h.h
1002620c:	68f96925 68ef68e0 692a6928 6923691a     %i.h.h.h(i*i.i#i
1002621c:	68c66921 69776979 6978695c 6954696b     !i.hyiwi\ixikiTi
1002622c:	696e697e 69746939 6959693d 69616930     ~ini9iti=iYi0iai
1002623c:	695d695e 696a6981 69ae69b2 69bf69d0     ^i]i.iji.i.i.i.i
1002624c:	69d369c1 69ce69be 69ca5be8 69bb69dd     .i.i.i.i.[.i.i.i
1002625c:	69a769c3 69916a2e 699c69a0 69b46995     .i.i.j.i.i.i.i.i
1002626c:	69e869de 6a1b6a02 6b0a69ff 69f269f9     .i.i.j.j.i.k.i.i
1002627c:	6a0569e7 6a1e69b1 6a1469ed 6a0a69eb     .i.j.i.j.i.j.i.j
1002628c:	6ac16a12 6a136a23 6a0c6a44 6a366a72     .j.j#j.jDj.jrj6j
1002629c:	6a476a78 6a596a62 6a486a66 6a226a38     xjGjbjYjfjHj8j"j
100262ac:	6a8d6a90 6a846aa0 6aa36aa2 86176a97     .j.j.j.j.j.j.j..
100262bc:	6ac36abb 6ab86ac2 6aac6ab3 6ad16ade     .j.j.j.j.j.j.j.j
100262cc:	6aaa6adf 6aea6ada 6b056afb 6afa8616     .j.j.j.j.j.k...j
100262dc:	6b166b12 6b1f9b31 6b376b38 6b3976dc     .k.k1..k8k7k.v9k
100262ec:	6b4798ee 6b496b43 6b596b50 6b5b6b54     ..GkCkIkPkYkTk[k
100262fc:	6b616b5f 6b796b78 6b806b7f 6b836b84     _kakxkyk.k.k.k.k
1002630c:	6b986b8d 6b9e6b95 6baa6ba4 6baf6bab     .k.k.k.k.k.k.k.k
1002631c:	6bb16bb2 6bb76bb3 6bc66bbc 6bd36bcb     .k.k.k.k.k.k.k.k
1002632c:	6bec6bdf 6bf36beb 9ebe6bef 6c136c08     .k.k.k.k.k...l.l
1002633c:	6c1b6c14 6c236c24 6c556c5e 6c6a6c62     .l.l$l#l^lUlbljl
1002634c:	6c8d6c82 6c816c9a 6c7e6c9b 6c736c68     .l.l.l.l.l~lhlsl
1002635c:	6c906c92 6cf16cc4 6cbd6cd3 6cc56cd7     .l.l.l.l.l.l.l.l
1002636c:	6cae6cdd 6cbe6cb1 6cdb6cba 6cd96cef     .l.l.l.l.l.l.l.l
1002637c:	6d1f6cea 6d36884d 6d3d6d2b 6d196d38     .l.mM.6m+m=m8m.m
1002638c:	6d336d35 6d0c6d12 6d936d63 6d5a6d64     5m3m.m.mcm.mdmZm
1002639c:	6d596d79 6d956d8e 6d856fe4 6e156df9     ymYm.m.m.o.m.m.n
100263ac:	6db56e0a 6de66dc7 6dc66db8 6dde6dec     .n.m.m.m.m.m.m.m
100263bc:	6de86dcc 6dc56dd2 6dd96dfa 6dd56de4     .m.m.m.m.m.m.m.m
100263cc:	6dee6dea 6e6e6e2d 6e196e2e 6e5f6e72     .m.m-nnn.n.nrn_n
100263dc:	6e236e3e 6e2b6e6b 6e4d6e76 6e436e1f     >n#nkn+nvnMn.nCn
100263ec:	6e4e6e3a 6eff6e24 6e386e1d 6eaa6e82     :nNn$n.n.n8n.n.n
100263fc:	6ec96e98 6ed36eb7 6eaf6ebd 6eb26ec4     .n.n.n.n.n.n.n.n
1002640c:	6ed56ed4 6ea56e8f 6e9f6ec2 6f116f41     .n.n.n.n.n.nAo.o
1002641c:	6eec704c 6efe6ef8 6ef26f3f 6eef6f31     Lp.n.n.n?o.n1o.n
1002642c:	6ecc6f32 6f136f3e 6f866ef7 6f786f7a     2o.n>o.o.n.ozoxo
1002643c:	6f806f81 6f5b6f6f 6f6d6ff3 6f7c6f82     .o.ooo[o.omo.o|o
1002644c:	6f8e6f58 6fc26f91 6fb36f66 6fa16fa3     Xo.o.o.ofo.o.o.o
1002645c:	6fb96fa4 6faa6fc6 6fd56fdf 6fd46fec     .o.o.o.o.o.o.o.o
1002646c:	6ff16fd8 6fdb6fee 700b7009 70116ffa     .o.o.o.o.p.p.o.p
1002647c:	700f7001 701b6ffe 6f74701a 7018701d     .p.p.o.p.pto.p.p
1002648c:	7030701f 7032703e 70637051 70927099     .p0p>p2pQpcp.p.p
1002649c:	70f170af 70b870ac 70ae70b3 70cb70df     .p.p.p.p.p.p.p.p
100264ac:	70d970dd 70fd7109 7119711c 71557165     .p.p.q.p.q.qeqUq
100264bc:	71667188 714c7162 716c7156 71fb718f     .qfqbqLqVqlq.q.q
100264cc:	71957184 71ac71a8 71b971d7 71d271be     .q.q.q.q.q.q.q.q
100264dc:	71d471c9 71e071ce 71e771ec 71fc71f5     .q.q.q.q.q.q.q.q
100264ec:	71ff71f9 7210720d 7228721b 722c722d     .q.q.r.r.r(r-r,r
100264fc:	72327230 723c723b 7240723f 724b7246     0r2r;r<r?r@rFrKr
1002650c:	72747258 7282727e 72877281 72967292     Xrtr~r.r.r.r.r.r
1002651c:	72a772a2 72b272b9 72c672c3 72ce72c4     .r.r.r.r.r.r.r.r
1002652c:	72e272d2 72e172e0 72f772f9 7317500f     .r.r.r.r.r.r.P.s
1002653c:	731c730a 731d7316 732f7334 73257329     .s.s.s.s4s/s)s%s
1002654c:	734e733e 9ed8734f 736a7357 73707368     >sNsOs..Wsjshsps
1002655c:	73757378 737a737b 73b373c8 73bb73ce     xsus{szs.s.s.s.s
1002656c:	73e573c0 73de73ee 740574a2 7425746f     .s.s.s.s.t.tot%t
1002657c:	743273f8 7455743a 745f743f 74417459     .s2t:tUt?t_tYtAt
1002658c:	7469745c 74637470 7476746a 748b747e     \titptctjtvt~t.t
1002659c:	74a7749e 74cf74ca 73f174d4 74e374e0     .t.t.t.t.t.s.t.t
100265ac:	74e974e7 74f274ee 74f174f0 74f774f8     .t.t.t.t.t.t.t.t
100265bc:	75037504 750c7505 750d750e 75137515     .u.u.u.u.u.u.u.u
100265cc:	7526751e 753c752c 754d7544 7549754a     .u&u,u<uDuMuJuIu
100265dc:	7546755b 7569755a 75677564 756d756b     [uFuZuiudugukumu
100265ec:	75767578 75877586 758a7574 75827589     xuvu.u.utu.u.u.u
100265fc:	759a7594 75a5759d 75c275a3 75c375b3     .u.u.u.u.u.u.u.u
1002660c:	75bd75b5 75bc75b8 75cd75b1 75d275ca     .u.u.u.u.u.u.u.u
1002661c:	75e375d9 75fe75de 75fc75ff 75f07601     .u.u.u.u.u.u.v.u
1002662c:	75f275fa 760b75f3 7609760d 7627761f     .u.u.u.v.v.v.v'v
1002663c:	76217620 76247622 76307634 7647763b      v!v"v$v4v0v;vGv
1002664c:	76467648 7658765c 76627661 76697668     HvFv\vXvavbvhviv
1002665c:	7667766a 7670766c 76767672 767c7678     jvgvlvpvrvvvxv|v
1002666c:	76837680 768b7688 7696768e 76997693     .v.v.v.v.v.v.v.v
1002667c:	76b0769a 76b876b4 76ba76b9 76cd76c2     .v.v.v.v.v.v.v.v
1002668c:	76d276d6 76e176de 76e776e5 862f76ea     .v.v.v.v.v.v.v/.
1002669c:	770876fb 77047707 77247729 7725771e     .v.w.w.w)w$w.w%w
100266ac:	771b7726 77387737 775a7747 776b7768     &w.w7w8wGwZwhwkw
100266bc:	7765775b 777e777f 778e7779 7791778b     [wew.w~wyw.w.w.w
100266cc:	779e77a0 77b677b0 77bf77b9 77bd77bc     .w.w.w.w.w.w.w.w
100266dc:	77c777bb 77d777cd 77dc77da 77ee77e3     .w.w.w.w.w.w.w.w
100266ec:	780c77fc 79267812 792a7820 788e7845     .w.x.x&y x*yEx.x
100266fc:	78867874 789a787c 78a3788c 78aa78b5     tx.x|x.x.x.x.x.x
1002670c:	78d178af 78cb78c6 78be78d4 78c578bc     .x.x.x.x.x.x.x.x
1002671c:	78ec78ca 78da78e7 78f478fd 79127907     .x.x.x.x.x.x.y.y
1002672c:	79197911 792b792c 79607940 795f7957     .y.y,y+y@y`yWy_y
1002673c:	7955795a 797a7953 798a797f 79a7799d     ZyUySyzy.y.y.y.y
1002674c:	79aa9f4b 79b379ae 79ba79b9 79d579c9     K..y.y.y.y.y.y.y
1002675c:	79ec79e7 79e379e1 7a0d7a08 7a197a18     .y.y.y.y.z.z.z.z
1002676c:	7a1f7a20 7a317980 7a3e7a3b 7a437a37      z.z.y1z;z>z7zCz
1002677c:	7a497a57 7a627a61 9f9d7a69 7a797a70     WzIzazbziz..pzyz
1002678c:	7a887a7d 7a957a97 7a967a98 7ac87aa9     }z.z.z.z.z.z.z.z
1002679c:	7ab67ab0 7ac47ac5 90837abf 7aca7ac7     .z.z.z.z.z...z.z
100267ac:	7acf7acd 7ad37ad5 7ada7ad9 7ae17add     .z.z.z.z.z.z.z.z
100267bc:	7ae67ae2 7af07aed 7b0f7b02 7b067b0a     .z.z.z.z.{.{.{.{
100267cc:	7b187b33 7b1e7b19 7b287b35 7b507b36     3{.{.{.{5{({6{P{
100267dc:	7b047b7a 7b0b7b4d 7b457b4c 7b657b75     z{.{M{.{L{E{u{e{
100267ec:	7b677b74 7b717b70 7b6e7b6c 7b987b9d     t{g{p{q{l{n{.{.{
100267fc:	7b8d7b9f 7b9a7b9c 7b927b8b 7b5d7b8f     .{.{.{.{.{.{.{]{
1002680c:	7bcb7b99 7bcc7bc1 7bb47bcf 7bdd7bc6     .{.{.{.{.{.{.{.{
1002681c:	7c117be9 7be67c14 7c607be5 7c077c00     .{.|.|.{.{`|.|.|
1002682c:	7bf37c13 7c177bf7 7bf67c0d 7c277c23     .|.{.{.|.|.{#|'|
1002683c:	7c1f7c2a 7c2b7c37 7c4c7c3d 7c547c43     *|.|7|+|=|L|C|T|
1002684c:	7c407c4f 7c587c50 7c647c5f 7c657c56     O|@|P|X|_|d|V|e|
1002685c:	7c757c6c 7c907c83 7cad7ca4 7cab7ca2     l|u|.|.|.|.|.|.|
1002686c:	7ca87ca1 7cb27cb3 7cae7cb1 7cbd7cb9     .|.|.|.|.|.|.|.|
1002687c:	7cc57cc0 7cd87cc2 7cdc7cd2 9b3b7ce2     .|.|.|.|.|.|.|;.
1002688c:	7cf27cef 7cf67cf4 7d067cfa 7d1c7d02     .|.|.|.|.|.}.}.}
1002689c:	7d0a7d15 7d4b7d45 7d327d2e 7d357d3f     .}.}E}K}.}2}?}5}
100268ac:	7d737d46 7d4e7d56 7d687d72 7d4f7d6e     F}s}V}N}r}h}n}O}
100268bc:	7d937d63 7d5b7d89 7d7d7d8f 7dba7d9b     c}.}.}[}.}}}.}.}
100268cc:	7da37dae 7dc77db5 7dab7dbd 7da27e3d     .}.}.}.}.}.}=~.}
100268dc:	7ddc7daf 7d9f7db8 7dd87db0 7de47ddd     .}.}.}.}.}.}.}.}
100268ec:	7dfb7dde 7de17df2 7e0a7e05 7e217e23     .}.}.}.}.~.~#~!~
100268fc:	7e317e12 7e097e1f 7e227e0b 7e667e46     .~1~.~.~.~"~F~f~
1002690c:	7e357e3b 7e437e39 7e327e37 7e677e3a     ;~5~9~C~7~2~:~g~
1002691c:	7e567e5d 7e597e5e 7e797e5a 7e697e6a     ]~V~^~Y~Z~y~j~i~
1002692c:	7e7b7e7c 7dd57e83 8fae7e7d 7e887e7f     |~{~.~.}}~...~.~
1002693c:	7e8c7e89 7e907e92 7e947e93 7e8e7e96     .~.~.~.~.~.~.~.~
1002694c:	7e9c7e9b 7f3a7f38 7f4c7f45 7f4e7f4d     .~.~8.:.E.L.M.N.
1002695c:	7f517f50 7f547f55 7f5f7f58 7f687f60     P.Q.U.T.X._.`.h.
1002696c:	7f677f69 7f827f78 7f837f86 7f877f88     i.g.x...........
1002697c:	7f947f8c 7f9d7f9e 7fa37f9a 7fb27faf     ................
1002698c:	7fae7fb9 7fb87fb6 7fc58b71 7fca7fc6     ........q.......
1002699c:	7fd47fd5 7fe67fe1 7ff37fe9 98dc7ff9     ................
100269ac:	80048006 8012800b 80198018 8021801c     ..............!.
100269bc:	803f8028 804a803b 80528046 805a8058     (.?.;.J.F.R.X.Z.
100269cc:	8062805f 80738068 80708072 80798076     _.b.h.s.r.p.v.y.
100269dc:	807f807d 80868084 809b8085 809a8093     }...............
100269ec:	519080ad 80db80ac 80d980e5 80c480dd     ...Q............
100269fc:	80d680da 80ef8109 811b80f1 81238129     ............).#.
10026a0c:	814b812f 8146968b 8153813e 80fc8151     /.K...F.>.S.Q...
10026a1c:	816e8171 81668165 81838174 818a8188     q.n.e.f.t.......
10026a2c:	81828180 819581a0 81a381a4 8193815f     ............_...
10026a3c:	81b081a9 81be81b5 81bd81b8 81c281c0     ................
10026a4c:	81c981ba 81d181cd 81d881d9 81da81c8     ................
10026a5c:	81e081df 81fa81e7 81fe81fb 82028201     ................
10026a6c:	82078205 820d820a 82168210 822b8229     ............).+.
10026a7c:	82338238 82598240 825d8258 825f825a     8.3.@.Y.X.].Z._.
10026a8c:	82628264 826a8268 822e826b 82778271     d.b.h.j.k...q.w.
10026a9c:	827e8278 8292828d 829f82ab 82ac82bb     x.~.............
10026aac:	82e382e1 82d282df 82f382f4 839382fa     ................
10026abc:	82fb8303 82de82f9 82dc8306 82d98309     ................
10026acc:	83348335 83328316 83408331 83508339     5.4...2.1.@.9.P.
10026adc:	832f8345 8317832b 83858318 83aa839a     E./.+...........
10026aec:	83a2839f 83238396 8387838e 837c838a     ......#.......|.
10026afc:	837383b5 83a08375 83a88389 841383f4     ..s.u...........
10026b0c:	83ce83eb 840383fd 840b83d8 83f783c1     ................
10026b1c:	83e08407 840d83f2 84208422 843883bd     ........". ...8.
10026b2c:	83fb8506 842a846d 855a843c 84778484     ....m.*.<.Z...w.
10026b3c:	84ad846b 8482846e 84468469 846f842c     k...n...i.F.,.o.
10026b4c:	84358479 846284ca 84bf84b9 84d9849f     y.5...b.........
10026b5c:	84bb84cd 84d084da 84c684c1 84a184d6     ................
10026b6c:	84ff8521 851784f4 852c8518 8515851f     !.........,.....
10026b7c:	84fc8514 85638540 85488558 86028541     ....@.c.X.H.A...
10026b8c:	8555854b 85a48580 85918588 85a8858a     K.U.............
10026b9c:	8594856d 85ea859b 859c8587 857e8577     m...........w.~.
10026bac:	85c98590 85cf85ba 85d085b9 85dd85d5     ................
10026bbc:	85dc85e5 860a85f9 860b8613 85fa85fe     ................
10026bcc:	86228606 8630861a 864d863f 86544e55     .."...0.?.M.UNT.
10026bdc:	8667865f 86938671 86a986a3 868b86aa     _.g.q...........
10026bec:	86b6868c 86c486af 86b086c6 882386c9     ..............#.
10026bfc:	86d486ab 86e986de 86df86ec 86ef86db     ................
10026c0c:	87068712 87008708 86fb8703 87098711     ................
10026c1c:	86f9870d 8734870a 8737873f 8725873b     ......4.?.7.;.%.
10026c2c:	871a8729 875f8760 874c8778 8774874e     )...`._.x.L.N.t.
10026c3c:	87688757 8759876e 87638753 8805876a     W.h.n.Y.S.c.j...
10026c4c:	879f87a2 87af8782 87bd87cb 87d087c0     ................
10026c5c:	87ab96d6 87b387c4 87c687c7 87ef87bb     ................
10026c6c:	87e087f2 880d880f 87f687fe 880e87f7     ................
10026c7c:	881187d2 88158816 88218822 88368831     ........".!.1.6.
10026c8c:	88278839 8844883b 88528842 885e8859     9.'.;.D.B.R.Y.^.
10026c9c:	886b8862 887e8881 8875889e 88b5887d     b.k...~...u.}...
10026cac:	88828872 88928897 889988ae 888d88a2     r...............
10026cbc:	88b088a4 88b188bf 88c488c3 88d888d4     ................
10026ccc:	88dd88d9 890288f9 88f488fc 88f288e8     ................
10026cdc:	890c8904 8913890a 891e8943 892a8925     ........C...%.*.
10026cec:	8941892b 893b8944 89388936 891d894c     +.A.D.;.6.8.L...
10026cfc:	895e8960 89648966 896a896d 8974896f     `.^.f.d.m.j.o.t.
10026d0c:	897e8977 89888983 8993898a 89a18998     w.~.............
10026d1c:	89a689a9 89af89ac 89ba89b2 89bf89bd     ................
10026d2c:	89da89c0 89dd89dc 89f489e7 8a0389f8     ................
10026d3c:	8a108a16 8a1b8a0c 8a258a1d 8a418a36     ..........%.6.A.
10026d4c:	8a528a5b 8a488a46 8a6d8a7c 8a628a6c     [.R.F.H.|.m.l.b.
10026d5c:	8a828a85 8aa88a84 8a918aa1 8aa68aa5     ................
10026d6c:	8aa38a9a 8acd8ac4 8ada8ac2 8af38aeb     ................
10026d7c:	8ae48ae7 8b148af1 8ae28ae0 8ade8af7     ................
10026d8c:	8b0c8adb 8b1a8b07 8b168ae1 8b178b10     ................
10026d9c:	8b338b20 8b2697ab 8b3e8b2b 8b418b28      .3...&.+.>.(.A.
10026dac:	8b4f8b4c 8b498b4e 8b5b8b56 8b6b8b5a     L.O.N.I.V.[.Z.k.
10026dbc:	8b6c8b5f 8b748b6f 8b808b7d 8b8e8b8c     _.l.o.t.}.......
10026dcc:	8b938b92 8b998b96 8c3a8b9a 8c3f8c41     ..........:.A.?.
10026ddc:	8c4c8c48 8c508c4e 8c628c55 8c788c6c     H.L.N.P.U.b.l.x.
10026dec:	8c828c7a 8c858c89 8c8d8c8a 8c948c8e     z...............
10026dfc:	8c988c7c 8cad621d 8cbd8caa 8cb38cb2     |....b..........
10026e0c:	8cb68cae 8cc18cc8 8ce38ce4 8cfd8cda     ................
10026e1c:	8cfb8cfa 8d058d04 8d078d0a 8d0d8d0f     ................
10026e2c:	9f4e8d10 8ccd8d13 8d168d14 8d6d8d67     ..N.........g.m.
10026e3c:	8d738d71 8d998d81 8dbe8dc2 8dcf8dba     q.s.............
10026e4c:	8dd68dda 8ddb8dcc 8dea8dcb 8ddf8deb     ................
10026e5c:	8dfc8de3 8e098e08 8e1d8dff 8e108e1e     ................
10026e6c:	8e428e1f 8e308e35 8e4a8e34 8e498e47     ..B.5.0.4.J.G.I.
10026e7c:	8e508e4c 8e598e48 8e608e64 8e638e2a     L.P.H.Y.d.`.*.c.
10026e8c:	8e768e55 8e7c8e72 8e878e81 8e848e85     U.v.r.|.........
10026e9c:	8e8a8e8b 8e918e93 8e998e94 8ea18eaa     ................
10026eac:	8eb08eac 8eb18ec6 8ec58ebe 8ecb8ec8     ................
10026ebc:	8ee38edb 8efb8efc 8efe8eeb 8f058f0a     ................
10026ecc:	8f128f15 8f138f19 8f1f8f1c 8f0c8f1b     ................
10026edc:	8f338f26 8f398f3b 8f428f45 8f4c8f3e     &.3.;.9.E.B.>.L.
10026eec:	8f468f49 8f578f4e 8f628f5c 8f648f63     I.F.N.W.\.b.c.d.
10026efc:	8f9f8f9c 8fad8fa3 8fb78faf 8fe58fda     ................
10026f0c:	8fea8fe2 90878fef 90058ff4 8ffa8ff9     ................
10026f1c:	90159011 900d9021 9016901e 9027900b     ....!.........'.
10026f2c:	90359036 8ff89039 9050904f 90529051     6.5.9...O.P.Q.R.
10026f3c:	9049900e 9056903e 905e9058 906f9068     ..I.>.V.X.^.h.o.
10026f4c:	96a89076 90829072 9081907d 908a9080     v...r...}.......
10026f5c:	908f9089 90af90a8 90b590b1 90e490e2     ................
10026f6c:	90db6248 91129102 91329119 914a9130     Hb........2.0.J.
10026f7c:	91589156 91659163 91739169 918b9172     V.X.c.e.i.s.r...
10026f8c:	91829189 91ab91a2 91aa91af 91b491b5     ................
10026f9c:	91c091ba 91c991c1 91d091cb 91df91d6     ................
10026fac:	91db91e1 91f591fc 921e91f6 921491ff     ................
10026fbc:	9215922c 925e9211 92459257 92649249     ,.....^.W.E.I.d.
10026fcc:	92959248 924b923f 929c9250 92939296     H...?.K.P.......
10026fdc:	925a929b 92b992cf 92e992b7 92fa930f     ..Z.............
10026fec:	932e9344 93229319 9323931a 9335933a     D....."...#.:.5.
10026ffc:	935c933b 937c9360 9356936e 93ac93b0     ;.\.`.|.n.V.....
1002700c:	939493ad 93d693b9 93e893d7 93d893e5     ................
1002701c:	93dd93c3 93c893d0 941a93e4 94139414     ................
1002702c:	94079403 94369410 9435942b 943a9421     ......6.+.5.!.:.
1002703c:	94529441 945b9444 94629460 946a945e     A.R.D.[.`.b.^.j.
1002704c:	94709229 94779475 945a947d 947e947c     ).p.u.w.}.Z.|.~.
1002705c:	947f9481 95879582 9594958a 95989596     ................
1002706c:	95a09599 95a795a8 95bc95ad 95b995bb     ................
1002707c:	95ca95be 95c36ff6 95cc95cd 95d495d5     .....o..........
1002708c:	95dc95d6 95e595e1 962195e2 962e9628     ..........!.(...
1002709c:	9642962f 964f964c 9677964b 965e965c     /.B.L.O.K.w.\.^.
100270ac:	965f965d 96729666 968d966c 96959698     ]._.f.r.l.......
100270bc:	96aa9697 96b196a7 96b096b2 96b696b4     ................
100270cc:	96b996b8 96cb96ce 96cd96c9 96dc894d     ............M...
100270dc:	96d5970d 970496f9 97089706 970e9713     ................
100270ec:	970f9711 97199716 972a9724 97399730     ........$.*.0.9.
100270fc:	973e973d 97469744 97429748 975c9749     =.>.D.F.H.B.I.\.
1002710c:	97649760 97689766 976b52d2 97799771     `.d.f.h..Rk.q.y.
1002711c:	977c9785 977a9781 978b9786 9790978f     ..|...z.........
1002712c:	97a8979c 97a397a6 97b497b3 97c697c3     ................
1002713c:	97cb97c8 97ed97dc 97f29f4f 97f67adf     ........O....z..
1002714c:	980f97f5 9838980c 98219824 983d9837     ......8.$.!.7.=.
1002715c:	984f9846 986b984b 9870986f 98749871     F.O.K.k.o.p.q.t.
1002716c:	98aa9873 98b198af 98c498b6 98c698c3     s...............
1002717c:	98eb98e9 99099903 99149912 99219918     ..............!.
1002718c:	991e991d 99209924 992e992c 993e993d     ....$. .,...=.>.
1002719c:	99499942 99509945 9951994b 994c9952     B.I.E.P.K.Q.R.L.
100271ac:	99979955 99a59998 99ae99ad 99df99bc     U...............
100271bc:	99dd99db 99d199d8 99ee99ed 99f299f1     ................
100271cc:	99f899fb 9a0f9a01 99e29a05 9a2b9a19     ..............+.
100271dc:	9a459a37 9a409a42 9a3e9a43 9a4d9a55     7.E.B.@.C.>.U.M.
100271ec:	9a579a5b 9a629a5f 9a649a65 9a6b9a69     [.W._.b.e.d.i.k.
100271fc:	9aad9a6a 9abc9ab0 9acf9ac0 9ad39ad1     j...............
1002720c:	9ade9ad4 9ae29adf 9ae69ae3 9aeb9aef     ................
1002721c:	9af49aee 9af79af1 9b069afb 9b1a9b18     ................
1002722c:	9b229b1f 9b259b23 9b289b27 9b2a9b29     ..".#.%.'.(.).*.
1002723c:	9b2f9b2e 9b449b32 9b4f9b43 9b4e9b4d     ../.2.D.C.O.M.N.
1002724c:	9b589b51 9b939b74 9b919b83 9b979b96     Q.X.t...........
1002725c:	9ba09b9f 9bb49ba8 9bca9bc0 9bc69bb9     ................
1002726c:	9bd19bcf 9be39bd2 9be49be2 9be19bd4     ................
1002727c:	9bf29c3a 9bf09bf1 9c149c15 9c139c09     :...............
1002728c:	9c069c0c 9c129c08 9c049c0a 9c1b9c2e     ................
1002729c:	9c249c25 9c309c21 9c329c47 9c3e9c46     %.$.!.0.G.2.F.>.
100272ac:	9c609c5a 9c769c67 9ce79c78 9cf09cec     Z.`.g.v.x.......
100272bc:	9d089d09 9d039ceb 9d2a9d06 9daf9d26     ..........*.&...
100272cc:	9d1f9d23 9d159d44 9d419d12 9d3e9d3f     #...D.....A.?.>.
100272dc:	9d489d46 9d5e9d5d 9d519d64 9d599d50     F.H.].^.d.Q.P.Y.
100272ec:	9d899d72 9dab9d87 9d7a9d6f 9da49d9a     r.......o.z.....
100272fc:	9db29da9 9dc19dc4 9db89dbb 9dc69dba     ................
1002730c:	9dc29dcf 9dd39dd9 9de69df8 9def9ded     ................
1002731c:	9e1a9dfd 9e1e9e1b 9e799e75 9e819e7d     ........u.y.}...
1002732c:	9e8b9e88 9e929e8c 9e919e95 9ea59e9d     ................
1002733c:	9eb89ea9 9ead9eaa 9ecc9761 9ecf9ece     ........a.......
1002734c:	9ed49ed0 9ede9edc 9ee09edd 9ee89ee5     ................
1002735c:	9ef49eef 9ef79ef6 9efb9ef9 9efd9efc     ................
1002736c:	9f089f07 9f1576b7 9f2c9f21 9f4a9f3e     .....v..!.,.>.J.
1002737c:	9f549f52 9f5f9f63 9f619f60 9f679f66     R.T.c._.`.a.f.g.
1002738c:	9f6a9f6c 9f729f77 9f959f76 9fa09f9c     l.j.w.r.v.......
1002739c:	69c7582f 74649059 719951dc              /X.iY.dt.Q.q

100273a8 <b02cf>:
100273a8:	55164e9c 963f5a03 611b54c0 59f66328     .N.U.Z?..T.a(c.Y
100273b8:	84759022 7a50831c 63e160aa 65ed6e25     ".u...Pz.`.c%n.e
100273c8:	82a68466 68939bf5 65a15727 5b9b6271     f......h'W.eqb.[
100273d8:	867b59d0 7d6298f4 9b8e7dbe 7c9f6216     .Y{...b}.}...b.|
100273e8:	5b8988b7 63095eb5 68486697 978d95c7     ...[.^.c.fHh....
100273f8:	4ee5674f 4f4d4f0a 50494f9d 593756f2     Og.N.OMO.OIP.V7Y
10027408:	5a0159d4 60df5c09 6170610f 69056613     .Y.Z.\.`.apa.f.i
10027418:	754f70ba 79fb7570 7def7dad 840e80c3     .pOupu.y.}.}....
10027428:	8b028863 907a9055 4e95533b 57df4ea5     c...U.z.;S.N.N.W
10027438:	90c180b2 4e0078ef 6ea258f1 7a329038     .....x.N.X.n8.2z
10027448:	828b8328 51419c2f 54bd5370 56e054e1     (.../.AQpS.T.T.V
10027458:	5f1559fb 6deb98f2 852d80e4 96709662     .Y._...m..-.b.p.
10027468:	97fb96a0 53f3540b 70cf5b87 8fc27fbd     .....T.S.[.p....
10027478:	536f96e8 7aba9d5c 78934e11 6e2681fc     ..oS\..z.N.x..&n
10027488:	55045618 851a6b1d 59e59c3b 6d6653a9     .V.U.k..;..Y.Sfm
10027498:	958f74dc 4e915642 96f2904b 990c834f     .t..BV.NK...O...
100274a8:	55b653e1 5f715b30 66f36620 6c386804     .S.U0[q_ f.f.h8l
100274b8:	6d296cf3 76c8745b 98347a4e 885b82f1     .l)m[t.vNz4...[.
100274c8:	92ed8a60 75ab6db2 99c576ca 8b0160a6     `....m.u.v...`..
100274d8:	95b28d8a 53ad698e 57125186 59445830     .....i.S.Q.W0XDY
100274e8:	5ef65bb4 63a96028 6cbf63f4 708e6f14     .[.^(`.c.c.l.o.p
100274f8:	71597114 733f71d5 82767e01 859782d1     .qYq.q?s.~v.....
10027508:	925b9060 58699d1b 6c5a65bc 51f97525     `.[...iX.eZl%u.Q
10027518:	5965592e 5fdc5f80 65fa62bc 6b276a2a     .YeY._._.b.e*j'k
10027528:	738b6bb4 89567fc1 9d0e9d2c 5ca19ec4     .k.s..V.,......\
10027538:	837b6c96 5c4b5104 81c661b6 72616876     .l{..QK\.a..vhar
10027548:	4ffa4e59 60695378 7a4f6e29 4e0b97f3     YN.OxSi`)nOz...N
10027558:	4eee5316 4f3d4f55 4f734fa1 53ef52a0     .S.NUO=O.OsO.R.S
10027568:	590f5609 5bb65ac1 79d15be1 679c6687     .V.Y.Z.[.[.y.f.g
10027578:	6b4c67b6 706b6cb3 798d73c2 7a3c79be     .gLk.lkp.s.y.y<z
10027588:	82b17b87 830482db 83ef8377 876683d3     .{......w.....f.
10027598:	56298ab2 8fe68ca8 971e904e 4fc4868a     ..)V....N......O
100275a8:	62115ce8 753b7259 82bd81e5 8cc086fe     .\.bYr;u........
100275b8:	991396c5 4ecb99d5 89e34f1a 584a56de     .......N.O...VJX
100275c8:	5efb58ca 602a5feb 60626094 621261d0     .X.^._*`.`b`.a.b
100275d8:	653962d0 66669b41 6d7768b0 754c7070     .b9eA.ff.hwmppLu
100275e8:	7d757686 87f982a5 968e958b 51f18c9d     .vu}...........Q
100275f8:	591652be 5bb354b3 61685d16 6daf6982     .R.Y.T.[.]ha.i.m
10027608:	84cb788d 8a728857 9ab893a7 99a86d6c     .x..W.r.....lm..
10027618:	57a386d9 86ce67ff 5283920e 54045687     ...W.g.....R.V.T
10027628:	62e15ed3 683c64b9 6bbb6838 78ba7372     .^.b.d<h8h.krs.x
10027638:	899a7a6b 8d6b89d2 90ed8f03 969495a3     kz....k.........
10027648:	5b669769 697d5cb3 984e984d 7b20639b     i.f[.\}iM.N..c {
10027658:	6a7f6a2b 9c0d68b6 52726f5f 6070559d     +j.j.h.._orR.Up`
10027668:	6d3b62ec 6ed16e07 8910845b 4e148f44     .b;m.n.n[...D..N
10027678:	53f69c39 6a3a691b 682a9784 7ac3515c     9..S.i:j..*h\Q.z
10027688:	91dc84b2 565b938c 68229d28 84318305     ......[V(."h..1.
10027698:	52087ca5 74e682c5 4f834e7e 5bd251a0     .|.R...t~N.O.Q.[
100276a8:	52d8520a 5dfb52e7 582a559a 5b8c59e6     .R.R.R.].U*X.Y.[
100276b8:	5bdb5b98 5e795e72 611f60a3 61be6163     .[.[r^y^.`.aca.a
100276c8:	656263db 685367d1 6b3e68fa 6c576b53     .cbe.gSh.h>kSkWl
100276d8:	6f976f22 74b06f45 76e37518 7aff770b     "o.oEo.t.u.v.w.z
100276e8:	7c217ba1 7f367de9 809d7ff0 839e8266     .{!|.}6.....f...
100276f8:	8acc89b3 90848cab 95939451 95a29591     ........Q.......
10027708:	97d39665 82189928 542b4e38 5dcc5cb8     e...(...8N+T.\.]
10027718:	764c73a9 5ca9773c 8d0b7feb 981196c1     .sLv<w.\........
10027728:	98589854 4f0e4f01 559c5371 57fa5668     T.X..O.OqS.UhV.W
10027738:	5b095947 5c905bc4 5e7e5e0c 63ee5fcc     GY.[.[.\.^~^._.c
10027748:	65d7673a 671f65e2 68c468cb 5e306a5f     :g.e.e.g.h.h_j0^
10027758:	6c176bc5 757f6c7d 5b637948 7d007a00     .k.l}l.uHyc[.z.}
10027768:	898f5fbd 8cb48a18 8ecc8d77 98e28f1d     ._......w.......
10027778:	9b3c9a0e 507d4e80 59935100 622f5b9c     ..<..N}P.Q.Y.[/b
10027788:	64ec6280 72a06b3a 79477591 87fb7fa9     .b.d:k.r.uGy....
10027798:	8b708abc 83ca63ac 540997a0 55ab5403     ..p..c.....T.T.U
100277a8:	6a586854 78278a70 9ecd6775 5ba25374     ThXjp.'xug..tS.[
100277b8:	8650811a 4e189006 4ec74e45 53ca4f11     ..P....NEN.N.O.S
100277c8:	5bae5438 60255f13 673d6551 6c726c42     8T.[._%`Qe=gBlrl
100277d8:	70786ce3 7a767403 7b087aae 7cfe7d1a     .lxp.tvz.z.{.}.|
100277e8:	65e77d66 53bb725b 5de85c45 62e062d2     f}.e[r.SE\.].b.b
100277f8:	6e206319 8a31865a 92f88ddd 79a66f01     .c nZ.1......o.y
10027808:	4ea89b5a 4eac4eab 4fa04f9b 514750d1     Z..N.N.N.O.O.PGQ
10027818:	51717af6 535451f6 537f5321 55ac53eb     .zqQ.QTS!S.S.S.U
10027828:	5ce15883 5f4a5f37 6050602f 631f606d     .X.\7_J_/`P`m`.c
10027838:	6a4b6559 72c26cc1 77ef72ed 810580f8     YeKj.l.r.r.w....
10027848:	854e8208 93e190f7 995797ff 4ef09a5a     ..N.......W.Z..N
10027858:	5c2d51dd 696d6681 66f25c40 73896975     .Q-\.fmi@\.fui.s
10027868:	7c816850 52e450c5 5dfe5747 65a49326     Ph.|.P.RGW.]&..e
10027878:	6b3d6b23 79817434 7b4b79bd 82b97dca     #k=k4t.y.yK{.}..
10027888:	887f83cc 8b39895f 91d18fd1 9280541f     ...._.9......T..
10027898:	50364e5d 533a53e5 739672d7 82e677e9     ]N6P.S:S.r.s.w..
100278a8:	99c68eaf 99d299c8 611a5177 55b0865e     ........wQ.a^..U
100278b8:	50767a7a 90475bd3 4e329685 91e76adb     zzvP.[G...2N.j..
100278c8:	5c485c51 7a9f6398 97746c93 7aaa8f61     Q\H\.c.z.lt.a..z
100278d8:	9688718a 68177c82 68517e70 52f2936c     .q...|.hp~Qhl..R
100278e8:	85ab541b 7fa48a13 90e18ecd 88885366     .T..........fS..
100278f8:	4fc27941 521150be 55535144 73ea572d     Ay.O.P.RDQSU-W.s
10027908:	5951578b 5f845f62 61766075 61a96167     .WQYb_._u`vaga.a
10027918:	643a63b2 666f656c 6e136842 7a3d7566     .c:dleofBh.nfu=z
10027928:	7d4c7cfb 7e4b7d99 830e7f6b 86cd834a     .|L}.}K~k...J...
10027938:	8a638a08 8efd8b66 9d8f981a 8fce82b8     ..c.f...........
10027948:	52879be8 6483621f 96996fc0 50916841     ...R.b.d.o..Ah.P
10027958:	6c7a6b20 7a746f54 88407d50 67088a23      kzlTotzP}@.#..g
10027968:	50394ef6 50655026 5238517c 55a75263     .N9P&PeP|Q8RcR.U
10027978:	5805570f 5efa5acc 61f861b2 637262f3     .W.X.Z.^.a.a.brc
10027988:	6a29691c 72ac727d 7814732e 7d79786f     .i)j}r.r.s.xoxy}
10027998:	80a9770c 8b19898b 8ed28ce2 93759063     .w..........c.u.
100279a8:	9855967a 9e789a13 539f5143 5e7b53b3     z.U...x.CQ.S.S{^
100279b8:	6e1b5f26 73846e90 7d4373fe 8a008237     &_.n.n.s.sC}7...
100279c8:	96508afa 500b4e4e 547c53e4 59d156fa     ..P.NN.P.S|T.V.Y
100279d8:	5df15b64 5f275eab 65456238 6e5667af     d[.].^'_8bEe.gVn
100279e8:	7cca72d0 80a188b4 83f080e1 8a87864e     .r.|........N...
100279f8:	92378de8 986796c7 4e949f13 4f0d4e92     ..7...g....N.N.O
10027a08:	54495348 5a2f543e 5fa15f8c 68a7609f     HSIT>T/Z._._.`.h
10027a18:	745a6a8e 8a9e7881 8b778aa4 4e5e9190     .jZt.x....w...^N
10027a28:	4ea49bc9 4faf4f7c 50165019 516c5149     ...N|O.O.P.PIQlQ
10027a38:	52b9529f 539a52fe 541153e3 5589540e     .R.R.R.S.S.T.T.U
10027a48:	57a25751 5b54597d 5b8f5b5d 5de75de5     QW.W}YT[][.[.].]
10027a58:	5e785df7 5e9a5e83 5f185eb7 614c6052     .]x^.^.^.^._R`La
10027a68:	62d86297 653b63a7 66436602 676d66f4     .b.b.c;e.fCf.fmg
10027a78:	68976821 6c5f69cb 6d696d2a 6e9d6e2f     !h.h.i_l*mim/n.n
10027a88:	76877532 7a3f786c 7d057ce0 7d5e7d18     2u.vlx?z.|.}.}^}
10027a98:	80157db1 80af8003 815480b1 822a818f     .}........T...*.
10027aa8:	884c8352 8b1b8861 8cfc8ca2 917590ca     R.L.a.........u.
10027ab8:	783f9271 95a492fc 9805964d 9ad89999     q.?x....M.......
10027ac8:	525b9d3b 53f752ab 58d55408 6fe062f7     ;.[R.R.S.T.X.b.o
10027ad8:	8f5f8c6a 514b9eb9 544a523b 7a4056fd     j._...KQ;RJT.V@z
10027ae8:	9d609177 73449ed2 81706f09 5ffd7511     w.`...Ds.op..u._
10027af8:	9aa860da 8fbc72db 98036b64 56f04eca     .`...r..dk...N.V
10027b08:	58be5764 60685a5a 660f61c7 68396606     dW.XZZh`.a.f.f9h
10027b18:	6df768b1 7d3a75d5 9b42826e 4f504e9b     .h.m.u:}n.B..NPO
10027b28:	550653c9 5de65d6f 67fb5dee 74736c99     .S.Uo].].].g.lst
10027b38:	8a507802 88df9396 5ea75750 50b5632b     .xP.....PW.^+c.P
10027b48:	518d50ac 54c96700 59bb585e 5f695bb0     .P.Q.g.T^X.Y.[i_
10027b58:	63a1624d 6b73683d 707d6e08 728091c7     Mb.c=hsk.n}p...r
10027b68:	78267815 658e796d 83dc7d30 8f0988c1     .x&xmy.e0}......
10027b78:	5264969b 67505728 8ca17f6a 574251b4     ..dR(WPgj....QBW
10027b88:	583a962a 80b4698a 5d0e54b2 789557fc     *.:X.i...T.].W.x
10027b98:	4f5c9dfa 548b524a 6628643e 67f56714     ..\OJR.T>d(f.g.g
10027ba8:	7b567a84 932f7d22 9bad685c 53197b39     .zV{"}/.\h..9{.S
10027bb8:	5237518a 62f65bdf 64e664ae 6bba672d     .Q7R.[.b.d.d-g.k
10027bc8:	96d185a9 9bd67690 9306634c 76bf9bab     .....v..Lc.....v
10027bd8:	4e096652 53c25098 60e85c71 65636492     Rf.N.P.Sq\.`.dce
10027be8:	71e6685f 752373ca 7e827b97 8b838695     _h.q.s#u.{.~....
10027bf8:	91788cdb 65ac9910 6b8b66ab 4ed44ed5     ..x....e.f.k.N.N
10027c08:	4f7f4f3a 53f8523a 55e353f2 58eb56db     :O.O:R.S.S.U.V.X
10027c18:	59c959cb 5b5059ff 5e025c4d 5fd75e2b     .Y.Y.YP[M\.^+^._
10027c28:	6307601d 5b5c652f 65bd65af 679d65e8     .`.c/e\[.e.e.e.g
10027c38:	6b7b6b62 73456c0f 79c17949 7d197cf8     bk{k.lEsIy.y.|.}
10027c48:	80a27d2b 81f38102 8a5e8996 8a668a69     +}........^.i.f.
10027c58:	8aee8a8c 8cdc8cc7 98fc96cc 4e8b6b6f     ............ok.N
10027c68:	4f8d4f3c 5b575150 61485bfa 66426301     <O.OPQW[.[Ha.cBf
10027c78:	6ecb6b21 723e6cbb 75d474bd 793a78c1     !k.n.l>r.t.u.x:y
10027c88:	8033800c 849481ea 6c508f9e 5f0f9e7f     ..3.......Pl..._
10027c98:	9d2b8b58 8ef87afa 96eb5b8d 53f14e03     X.+..z...[...N.S
10027ca8:	593157f7 5ba45ac9 6e7f6089 75be6f06     .W1Y.Z.[.`.n.o.u
10027cb8:	5b9f8cea 7be08500 67f45072 5c61829d     ...[...{rP.g..a\
10027cc8:	7e1e854a 5199820e 63685c04 659c8d66     J..~...Q.\hcf..e
10027cd8:	793e716e 80057d17 8eca8b1d 86c7906e     nq>y.}......n...
10027ce8:	501f90aa 5c3a52fa 707c6753 914c7235     ...P.R:\Sg|p5rL.
10027cf8:	932b91c8 5bc282e5 60f95f31 53d64e3b     ..+....[1_.`;N.S
10027d08:	624b5b88 6b8a6731 73e072e9 816b7a2e     .[Kb1g.k.r.s.zk.
10027d18:	91528da3 51129996 546a53d7 63885bff     ..R....Q.SjT.[.c
10027d28:	7dac6a39 56da9700 546853ce 5c315b97     9j.}...V.ShT.[1\
10027d38:	4fee5dde 62fe6101 79c06d32 7d4279cb     .].O.a.b2m.y.yB}
10027d48:	7fd27e4d 821f81ed 88468490 8b908972     M~........F.r...
10027d58:	8f2f8e74 914b9031 96c6916c 4ec0919c     t./.1.K.l......N
10027d68:	51454f4f 5f935341 67d4620e 6e0b6c41     OOEQAS._.b.gAl.n
10027d78:	7e267363 928391cd 591953d4 6dd15bbf     cs&~.....S.Y.[.m
10027d88:	7e2e795d 587e7c9b 51fa719f 8ff08853     ]y.~.|~X.q.QS...
10027d98:	5cfb4fca 77ac6625 821c7ae3 51c699ff     .O.\%f.w.z.....Q
10027da8:	65ec5faa 6b89696f 6e966df3 76fe6f64     ._.eoi.k.m.ndo.v
10027db8:	5de17d14 91879075 51e69806 6240521d     .}.]u......Q.R@b
10027dc8:	66d96691 5eb66e1a 7f727dd2 85af66f8     .f.f.n.^.}r..f..
10027dd8:	8af885f7 53d952a9 5e8f5973 60555f90     .....R.SsY.^._U`
10027de8:	966492e4 511f50b7 532052dd 53ec5347     ..d..P.Q.R SGS.S
10027df8:	554654e8 56175531 59be5968 5bb55a3c     .TFU1U.VhY.Y<Z.[
10027e08:	5c0f5c06 5c1a5c11 5e8a5e84 5f705ee0     .\.\.\.\.^.^.^p_
10027e18:	6284627f 638c62db 66076377 662d660c     .b.b.b.cwc.f.f-f
10027e28:	677e6676 6a1f68a2 6cbc6a35 6e096d88     vf~g.h.j5j.l.m.n
10027e38:	713c6e58 71677126 770175c7 7901785d     Xn<q&qgq.u.w]x.y
10027e48:	79f07965 7b117ae0 7d397ca7 83d68096     ey.y.z.{.|9}....
10027e58:	8549848b 88f3885d 8a3c8a1f 8a738a54     ..I.].....<.T.s.
10027e68:	8cde8c61 926691a4 9418937e 9798969c     a.....f.~.......
10027e78:	4e084e0a 4e574e1e 52705197 583457ce     .N.N.NWN.QpR.W4X
10027e88:	5b2258cc 60c55e38 676164fe 6d446756     .X"[8^.`.dagVgDm
10027e98:	757372b6 84b87a63 91b88b72 56319320     .rsucz..r... .1V
10027ea8:	98fe57f4 690d62ed 71ed6b96 80777e54     .W...b.i.k.qT~w.
10027eb8:	89e68272 875598df 5c3b8fb1 4fe14f38     r.....U...;\8O.O
10027ec8:	55074fb5 5bdd5a20 5fc35be9 632f614e     .O.U Z.[.[._Na/c
10027ed8:	664b65b0 699b68ee 6df16d78 75b97533     .eKf.h.ixm.m3u.u
10027ee8:	795e771f 7d3379e6 82af81e3 89aa85aa     .w^y.y3}........
10027ef8:	8eab8a3a 90328f9b 970791dd 4ec14eba     :.....2......N.N
10027f08:	58755203 5c0b58ec 5c3d751a 8a0a814e     .RuX.X.\.u=\N...
10027f18:	96638fc5 7b25976d 98088acf 56f39162     ..c.m.%{....b..V
10027f28:	901753a8 57825439 63a85e25 708a6c34     .S..9T.W%^.c4l.p
10027f38:	7c8b7761 88707fe0 91549042 93189310     aw.|..p.B.T.....
10027f48:	745e968f 5d079ac4 65705d69 8da867a2     ..^t...]i]pe.g..
10027f58:	636e96db 69196749 981783c5 88fe96c0     ..ncIg.i........
10027f68:	647a6f84 4e165bf8 755d702c 51c4662f     .ozd.[.N,p]u/f.Q
10027f78:	52e25236 5f8159d3 62106027 6574653f     6R.R.Y._'`.b?ete
10027f88:	6674661f 681668f2 6e056b63 751f7272     .ftf.h.hck.nrr.u
10027f98:	7cbe76db 58f08056 897f88fd 8a938aa0     .v.|V..X........
10027fa8:	901d8acb 97529192 65899759 81067a0e     ......R.Y..e.z..
10027fb8:	5e2d96bb 621a60dc 661465a5 77f36790     ..-^.`.b.e.f.g.w
10027fc8:	7c4d7a4d 810a7e3e 8d648cac 8e5f8de1     MzM|>~....d..._.
10027fd8:	520778a9 63a562d9 62986442 7a838a2d     .x.R.b.cBd.b-..z
10027fe8:	8aac7bc0 7d7696ea 8749820c 51484ed9     .{....v}..I..NHQ
10027ff8:	53605343 5c025ba3 5ddd5c16 62476226     CS`S.[.\.\.]&bGb
10028008:	681364b0 6cc96834 6d176d45 6f5c67d3     .d.h4h.lEm.m.g\o
10028018:	717d714e 7a7f65cb 7dda7bad 7fa87e4a     Nq}q.e.z.{.}J~..
10028028:	821b817a 85a68239 8cce8a6e 90788df5     z...9...n.....x.
10028038:	92ad9077 95839291 524d9bae 6f385584     w.........MR.U8o
10028048:	51687136 7e557985 7cce81b3 5851564c     6qhQ.yU~...|LVQX
10028058:	63aa5ca8 66fd66fe 72d9695a 758e758f     .\.c.f.fZi.r.u.u
10028068:	7956790e 7c9779df 7d447d20 8a348607     .yVy.y.| }D}..4.
10028078:	9061963b 50e79f20 53cc5275 500953e2     ;.a. ..PuR.S.S.P
10028088:	58ee55aa 723d594f 5c645b8b 60e3531d     .U.XOY=r.[d\.S.`
10028098:	635c60f3 633f6383 64cd63bb 66f965e9     .`\c.c?c.c.d.e.f
100280a8:	69cd5de3 6f1569fd 4e8971e5 76f875e9     .].i.i.o.q.N.u.v
100280b8:	7cdf7a93 7d9c7dcf 83498061 846c8358     .z.|.}.}a.I.X.l.
100280c8:	85fb84bc 8d7088c5 906d9001 971c9397     ......p...m.....
100280d8:	50cf9a12 618e5897 853581d3 90208d08     ...P.X.a..5... .
100280e8:	50744fc3 53735247 6349606f 6e2c675f     .OtPGRsSo`Ic_g,n
100280f8:	901f8db3 5c5e4fd7 65cf8cca 53527d9a     .....O^\...e.}RS
10028108:	51768896 5b5863c3 5c0a5b6b 6751640d     ..vQ.cX[k[.\.dQg
10028118:	4ed6905c 592a591a 8a516c70 5815553e     \..N.Y*YplQ.>U.X
10028128:	60f059a5 67c16253 69558235 99c49640     .Y.`Sb.g5.Ui@...
10028138:	4f539a28 5bfe5806 5cb18010 5f855e2f     (.SO.X.[...\/^._
10028148:	614b6020 66ff6234 6ede6cf0 817f80ce      `Ka4b.f.l.n....
10028158:	888b82d4 90008cb8 968a902e 9bdb9edb     ................
10028168:	53f04ee3 7b2c5927 984c918d 6edd9df9     .N.S'Y,{..L....n
10028178:	53537027 5b855544 629e6258 6ca262d3     'pSSDU.[Xb.b.b.l
10028188:	74226fef 94388a17 8afe6fc1 51e78338     .o"t..8..o..8..Q
10028198:	53ea86f8 4f4653e9 8fb09054 8131596a     ...S.SFOT...jY1.
100281a8:	7aea5dfd 68da8fbf 72f88c37 6a3d9c48     .].z...h7..rH.=j
100281b8:	4e398ab0 56065358 62c55766 65e663a2     ..9NXS.VfW.b.c.e
100281c8:	6de16b4e 70ad6e5b 7aef77ed 7dbb7baa     Nk.m[n.p.w.z.{.}
100281d8:	80c6803d 8a9586cb 56e3935b 5f3e58c7     =.......[..V.X>_
100281e8:	669665ad 6bb56a80 8ac77537 77e55024     .e.f.j.k7u..$P.w
100281f8:	5f1b5730 667a6065 75f46c60 7f6e7a1a     0W._e`zf`l.u.zn.
10028208:	871881f4 99b39045 755c7bc9 7b517af9     ....E....{\u.zQ{
10028218:	901084c4 7a9279e9 5ae18336 4e2d7740     .....y.z6..Z@w-N
10028228:	5b994ef2 62bd5fe0 67f1663c 866b6ce8     .N.[._.b<f.g.lk.
10028238:	8a3b8877 92f3914e 6a1799d0 732a7026     w.;.N......j&p*s
10028248:	845782e7 4e018caf 51cb5146 5bf5558b     ..W....NFQ.Q.U.[
10028258:	5e335e16 5f145e81 5f6b5f35 61f25fb4     .^3^.^._5_k_._.a
10028268:	66a26311 6f6e671d 753a7252 8074773a     .c.f.gnoRr:u:wt.
10028278:	81788139 8abf8776 8d858adc 929a8df3     9.x.v...........
10028288:	98029577 52c59ce5 76f46357 6c886715     w......RWc.v.g.l
10028298:	8cc373cd 967393ae 589c6d25 69cc690e     .s....s.%m.X.i.i
100282a8:	939a8ffd 901a75db 6802585a 69fb63b4     .....u..ZX.h.c.i
100282b8:	6f2c4f43 8fbb67d8 7db48526 693f9354     CO,o.g..&..}T.?i
100282c8:	576a6f70 5b2c58f7 722a7d2c 91e3540a     pojW.X,[,}*r.T..
100282d8:	4ead9db4 505c4f4e 52435075 54488c9e     ...NNO\PuPCR..HT
100282e8:	5b9a5824 5e955e1d 5ef75ead 608c5f1f     $X.[.^.^.^.^._.`
100282f8:	633a62b5 68af63d0 78876c40 7a0b798e     .b:c.c.h@l.x.y.z
10028308:	82477de0 8ae68a02 90138e44 912d90b8     .}G.....D.....-.
10028318:	9f0e91d8 64586ce5 657564e2 76846ef4     .....lXd.due.n.v
10028328:	90697b1b 6eba93d1 5fb954f2 8f4d64a4     .{i....n.T._.dM.
10028338:	92448fed 586b5178 5c555929 6dfb5e97     ..D.xQkX)YU\.^.m
10028348:	751c7e8f 8ee28cbc 70b9985b 6bbf4f1d     .~.u....[..p.O.k
10028358:	75306fb1 514e96fb 58355410 59ac5857     .o0u..NQ.T5XWX.Y
10028368:	5f925c60 675c6597 767b6e21 8ced83df     `\._.e\g!n{v....
10028378:	90fd9014 7825934d 52aa783a 571f5ea6     ....M.%x:x.R.^.W
10028388:	60125974 515a5012 51cd51ac 55105200     tY.`.PZQ.Q.Q.R.U
10028398:	58585854 5b955957 5d8b5cf6 629560bc     TXXXWY.[.\.].`.b
100283a8:	6771642d 68bc6843 76d768df 6e6f6dd8     -dqgCh.h.h.v.mon
100283b8:	706f6d9b 5f5371c8 797775d8 7b547b49     .mop.qS_.uwyI{T{
100283c8:	7cd67b52 52307d71 85698463 8a0e85e4     R{.|q}0Rc.i.....
100283d8:	8c468b04 90038e0f 9419900f 982d9676     ..F.........v.-.
100283e8:	95d89a30 52d550cd 5802540c 61a75c0e     0....P.R.T.X.\.a
100283f8:	6d1e649e 7ae577b3 840480f4 92859053     .d.m.w.z....S...
10028408:	9d075ce0 5f97533f 6d9c5fb3 77637279     .\..?S._._.myrcw
10028418:	7be479bf 72ec6bd2 68038aad 51f86a61     .y.{.k.r...haj.Q
10028428:	69347a81 9cf65c4a 5bc582eb 701e9149     .z4iJ\.....[I..p
10028438:	5c6f5678 656660c7 8c5a6c8c 98139041     xVo\.`fe.lZ.A...
10028448:	66c75451 5948920d 518590a3 51ea4e4d     QT.f..HY...QMN.Q
10028458:	8b0e8599 637a7058 6962934b 7e0499b4     ....XpzcK.bi...~
10028468:	53577577 8edf6960 6c5d96e3 5c3c4e8c     wuWS`i....]l.N<\
10028478:	8fe95f10 8cd15302 86798089 65e55eff     ._...S....y..^.e
10028488:	51654e73 5c3f5982 4efb97ee 5fcd598a     sNeQ.Y?\...N.Y._
10028498:	6fe18a8d 796279b0 84715be7 71b1732b     ...o.yby.[q.+s.q
100284a8:	5ff55e74 649a637b 7c9871c3 5efc4e43     t^._{c.d.q.|CN.^
100284b8:	57dc4e4b 60a956a2 7d0d6fc3 813380fd     KN.W.V.`.o.}..3.
100284c8:	8fb281bf 86a48997 628a5df4 898764ad     .........].b.d..
100284d8:	6ce26777 74366d3e 5a467834 82ad7f75     wg.l>m6t4xFZu...
100284e8:	4ff399ac 62dd5ec3 65576392 76c3676f     ...O.^.b.cWeog.v
100284f8:	80cc724c 8f2980ba 500d914d 5a9257f9     Lr....).M..P.W.Z
10028508:	69736885 72fd7164 58f28cb7 966a8ce0     .hsidq.r...X..j.
10028518:	877f9019 77e779e4 4f2f8429 535a5265     .....y.w)./OeRZS
10028528:	67cf62cd 767d6cca 7c957b94 85848236     .b.g.l}v.{.|6...
10028538:	66dd8feb 72066f20 83ab7e1b 9ea699c1     ...f o.r.~......
10028548:	7bb151fd 7bb87872 7b488087 5e616ae8     .Q.{rx.{..H{.ja^
10028558:	7551808c 516b7560 6e8c9262 9197767a     ..Qu`ukQb..nzv..
10028568:	4f109aea 629c7f70 95a57b4f 567a9ce9     ...Op..bO{....zV
10028578:	86e45859 4f3496bc 534a5224 53db53cd     YX....4O$RJS.S.S
10028588:	642c5e06 677f6591 6c4e6c3e 72af7248     .^,d.e.g>lNlHr.r
10028598:	755473ed 822c7e41 8ca985e9 91c67bc4     .sTuA~,......{..
100285a8:	98127169 633d98ef 756a6669 78d076e4     iq....=cifju.v.x
100285b8:	86ee8543 5351532a 59835426 5f7c5e87     C...*SQS&T.Y.^|_
100285c8:	624960b2 62ab6279 6bd46590 75b26ccc     .`Ibyb.b.e.k.l.u
100285d8:	789176ae 7dcb79d8 80a57f77 8ab988ab     .v.x.y.}w.......
100285e8:	907f8cbb 98db975e 7c386a0b 5c3e5099     ....^....j8|.P>\
100285f8:	67875fae 74356bd8 7f8e7709 67ca9f3b     ._.g.k5t.w..;..g
10028608:	53397a17 9aed758b 819d5f66 809883f1     .z9S.u..f_......
10028618:	5fc55f3c 7b467562 6867903c 5a9b59eb     <_._buF{<.gh.Y.Z
10028628:	767e7d10 4ff58b2c 6a195f6a 6f026c37     .}~v,..Oj_.j7l.o
10028638:	796874e2 8a558868 5edf8c79 75c563cf     .thyh.U.y..^.c.u
10028648:	82d779d2 92f29328 86ed849c 54c19c2d     .y..(.......-..T
10028658:	658c5f6c 70156d5c 8cd38ca7 654f983b     l_.e\m.p....;.Oe
10028668:	4e0d74f6 57e04ed8 5a66592b 51a85bcc     .t.N.N.W+YfZ.[.Q
10028678:	5e9c5e03 62766016 65a76577 6d6e666e     .^.^.`vbwe.enfnm
10028688:	7b267236 819a8150 8b5c8299 8ce68ca0     6r&{P.....\.....
10028698:	961c8d74 4fae9644 6b6664ab 8461821e     t...D..O.dfk..a.
100286a8:	90e8856a 69535c01 847a98a8 4f0f8557     j....\Si..z.W..O
100286b8:	5fa9526f 670d5e45 8179798f 89868907     oR._E^.g.yy.....
100286c8:	5f176df5 6cb86255 72694ecf 52069b92     .m._Ub.l.Nir...R
100286d8:	5674543b 61a458b3 711a626e 7c89596e     ;TtV.X.anb.qnY.|
100286e8:	7d1b7cde 658796f0 4e19805e 51754f75     .|.}...e^..NuOuQ
100286f8:	5e635840 5f0a5e73 4e2667c4 9589853d     @Xc^s^._.g&N=...
10028708:	7c73965b 50fb9801 765658c1 522578a7     [.s|...P.XVv.x%R
10028718:	851177a5 504f7b86 72475909 7de87bc7     .w...{OP.YGr.{.}
10028728:	8fd48fba 4fbf904d 5a2952c9 97ad5f01     ....M..O.R)Z._..
10028738:	82174fdd 570392ea 6b696355 88dc752b     .O.....WUcik+u..
10028748:	7a428f14 589352df 620a6155 6bcd66ae     ..Bz.R.XUa.b.f.k
10028758:	83e97c3f 4ff85023 54465305 59495831     ?|..#P.O.SFT1XIY
10028768:	5cf05b9d 5d295cef 62b15e96 653e6367     .[.\.\)].^.bgc>e
10028778:	670b65b9 6ce16cd5 783270f9 80de7e2b     .e.g.l.l.p2x+~..
10028788:	840c82b3 870284ec 8a2a8912 90a68c4a     ..........*.J...
10028798:	98fd92d2 9d6c9cf3 4ea14e4f 5256508d     ......l.ON.N.PVR
100287a8:	59a8574a 5fd85e3d 623f5fd9 671b66b4     JW.Y=^._._?b.f.g
100287b8:	68d267d0 7d215192 81a880aa 8c8c8b00     .g.h.Q!}........
100287c8:	927e8cbf 54209632 5317982c 535c50d5     ..~.2. T,..S.P\S
100287d8:	64b258a8 72676734 7a467766 52c391e6     .X.d4ggrfwFz...R
100287e8:	6b866ca1 5e4c5800 672c5954 51e17ffb     .l.k.XL^TY,g...Q
100287f8:	646976c6 9b5478e8 57cb9ebb 662759b9     .vid.xT....W.Y'f
10028808:	6bce679a 69d954e9 819c5e55 9baa6795     .g.k.T.iU^...g..
10028818:	9c5267fe 4ea6685d 53c84fe3 672b62b9     .gR.]h.N.O.S.b+g
10028828:	8fc46cab 7e6d4fad 4e079ebf 6e806162     .l...Om~...Nba.n
10028838:	85136f2b 672a5473 5df39b45 5cac7b95     +o..sT*gE..].{.\
10028848:	871c5bc6 84d16e4a 81087a14 7c8d5999     .[..Jn...z...Y.|
10028858:	77206c11 592252d9 725f7121 972777db     .l w.R"Y!q_r.w'.
10028868:	690b9d61 5a185a7f 540d51a5 660e547d     a..i.Z.Z.Q.T}T.f
10028878:	8ff776df 9cf49298 725d59ea 514d6ec5     .v.......Y]r.nMQ
10028888:	7dbf68c9 97627dec 64789eba 83026a21     .h.}.}b...xd!j..
10028898:	5b5f5984 731b6bdb 7db276f2 84998017     .Y_[.k.s.v.}....
100288a8:	67285132 76ee9ed9 52ff6762 5c249905     2Q(g...vbg.R..$\
100288b8:	7c7e623b 554f8cb0 7d0b60b6 53019580     ;b~|..OU.`.}...S
100288c8:	51b64e5f 723a591c 91ce8036 77e25f25     _N.Q.Y:r6...%_.w
100288d8:	5f795384 85ac7d04 8e8d8a33 67f39756     .Sy_.}..3...V..g
100288e8:	945385ae 61086109 76526cb9 8f388aed     ..S..a.a.lRv..8.
100288f8:	4f51552f 52c7512a 5ba553cb 60a05e7d     /UQO*Q.R.S.[}^.`
10028908:	63d66182 67da6709 6d8c6e67 73377336     .a.c.g.ggn.m6s7s
10028918:	79507531 8a9888d5 9091904a 96c490f5     1uPy....J.......
10028928:	5915878d 4f594e88 8a894e0e 98108f3f     ...Y.NYO.N..?...
10028938:	5e7c50ad 5bb95996 63da5eb8 64c163fa     .P|^.Y.[.^.c.c.d
10028948:	694a66dc 6d0b69d8 71946eb6 7aaf7528     .fJi.i.m.n.q(u.z
10028958:	80007f8a 84c98449 8b218981 90658e0a     ....I.....!...e.
10028968:	990a967d 6291617e 6c836b32 7fcc6d74     }...~a.b2k.ltm..
10028978:	6dc07ffc 87ba7f85 676588f8 983c83b1     ...m......eg..<.
10028988:	6d1b96f7 843d7d61 4e71916a 5d505375     ...ma}=.j.qNuSP]
10028998:	6feb6b04 862d85cd 522989a7 5c65540f     .k.o..-...)R.Te\
100289a8:	68a8674e 74837406 88cf75e2 91cc88e1     Ng.h.t.t.u......
100289b8:	967896e2 73875f8b 844e7acb 756563a0     ..x.._.s.zN..ceu
100289c8:	6d415289 74096e9c 786b7559 96867c92     .RAm.n.tYukx.|..
100289d8:	9f8d7adc 616e4fb6 865c65c5 4eae4e86     .z...Ona.e\..N.N
100289e8:	4e2150da 5bee51cc 68816599 731f6dbc     .P!N.Q.[.e.h.m.s
100289f8:	77ad7642 7ce77a1c 8ad2826f 91cf907c     Bv.w.z.|o...|...
10028a08:	98189675 7dd1529b 5398502b 6dcb6797     u....R.}+P.S.g.m
10028a18:	743371d0 8f2a81e8 9c5796a3 74609e9f     .q3t..*...W...`t
10028a28:	6d995841 985e7d2f 4f364ee4 51b74f8b     AX.m/}^..N6O.O.Q
10028a38:	5dba52b1 73b2601c 82d3793c 96b79234     .R.].`.s<y..4...
10028a48:	970a96f6 9f629e97 6b7466a6 52a35217     ......b..ftk.R.R
10028a58:	88c270c8 604b5ec9 6f236190 7c3e7149     .p...^K`.a#oIq>|
10028a68:	806f7df4 902384ee 5442932c 6ad39b6f     .}o...#.,.BTo..j
10028a78:	8cc27089 97328def 5a4152b4 5f045eca     .p....2..RAZ.^._
10028a88:	697c6717 6d6a6994 72626f0f 7bed72fc     .g|i.ijm.obr.r.{
10028a98:	807e8001 90ce874b 9e93516d 808b7984     ..~.K...mQ...y..
10028aa8:	8ad69332 548c502d 6b6a8a71 81078cc4     2...-P.Tq.jk....
10028ab8:	67a060d1 4e999df2 9c104e98 85c18a6b     .`.g...N.N..k...
10028ac8:	69008568 78976e7e 00008155              h..i~n.xU...

10028ad4 <a8>:
10028ad4:	25022500 2510250c 25142518 252c251c     .%.%.%.%.%.%.%,%
10028ae4:	25342524 2501253c 250f2503 251b2513     $%4%<%.%.%.%.%.%
10028af4:	25232517 252b2533 254b253b 252f2520     .%#%3%+%;%K% %/%
10028b04:	25372528 251d253f 25252530 25422538     (%7%?%.%0%%%8%B%

10028b14 <a7>:
10028b14:	04110410 04130412 04150414 04160401     ................
10028b24:	04180417 041a0419 041c041b 041e041d     ................
10028b34:	0420041f 04220421 04240423 04260425     .. .!.".#.$.%.&.
10028b44:	04280427 042a0429 042c042b 042e042d     '.(.).*.+.,.-...
10028b54:	0000042f 00000000 00000000 00000000     /...............
	...
10028b74:	04310430 04330432 04350434 04360451     0.1.2.3.4.5.Q.6.
10028b84:	04380437 043a0439 043c043b 043e043d     7.8.9.:.;.<.=.>.
10028b94:	0440043f 04420441 04440443 04460445     ?.@.A.B.C.D.E.F.
10028ba4:	04480447 044a0449 044c044b 044e044d     G.H.I.J.K.L.M.N.
10028bb4:	0000044f                                O...

10028bb8 <a6>:
10028bb8:	03920391 03940393 03960395 03980397     ................
10028bc8:	039a0399 039c039b 039e039d 03a0039f     ................
10028bd8:	03a303a1 03a503a4 03a703a6 03a903a8     ................
	...
10028bf8:	03b203b1 03b403b3 03b603b5 03b803b7     ................
10028c08:	03ba03b9 03bc03bb 03be03bd 03c003bf     ................
10028c18:	03c303c1 03c503c4 03c703c6 03c903c8     ................

10028c28 <a3>:
	...
10028c34:	01000000 01010101 01010101 00000001     ................
10028c44:	00000000 01010101 01010101 01010101     ................
10028c54:	01010101 01010101 01010101 00000101     ................
10028c64:	00000000 01010100 01010101 01010101     ................
10028c74:	01010101 01010101 01010101 00010101     ................

10028c84 <a2>:
10028c84:	25a125c6 25b325a0 25bd25b2 203b25bc     .%.%.%.%.%.%.%; 
10028c94:	21923012 21912190 30132193 00000000     .0.!.!.!.!.0....
	...
10028cb4:	22080000 2286220b 22822287 222a2283     ..."."."."."."*"
10028cc4:	00002229 00000000 00000000 00000000     )"..............
10028cd4:	22270000 00ac2228 21d421d2 22032200     ..'"("...!.!."."
10028ce4:	00002229 00000000 00000000 00000000     )"..............
10028cf4:	00000000 22200000 231222a5 22072202     ...... ".".#."."
10028d04:	22522261 226b226a 223d221a 2235221d     a"R"j"k"."="."5"
10028d14:	222c222b 00000000 00000000 00000000     +","............
10028d24:	212b0000 266f2030 266a266d 20212020     ..+!0 o&m&j&  ! 
10028d34:	222c00b6 00000000 25ef0000              ..,".......%

10028d40 <a1>:
10028d40:	30013000 ff0c3002 30fbff0e ff1bff1a     .0.0.0.....0....
10028d50:	ff01ff1f 309c309b ff4000b4 ff3e00a8     .....0.0..@...>.
10028d60:	ff3f203e 30fe30fd 309e309d 4edd3003     > ?..0.0.0.0.0.N
10028d70:	30063005 30fc3007 20102014 ff3cff0f     .0.0.0.0. . ..<.
10028d80:	2016301c 2026ff5c 20182025 201c2019     .0. \.& % . . . 
10028d90:	ff08201d 3014ff09 ff3b3015 ff5bff3d     . .....0.0;.=.[.
10028da0:	3008ff5d 300a3009 300c300b 300e300d     ]..0.0.0.0.0.0.0
10028db0:	3010300f ff0b3011 00b12212 00f700d7     .0.0.0..."......
10028dc0:	2260ff1d ff1eff1c 22672266 2234221e     ..`"....f"g"."4"
10028dd0:	26402642 203200b0 21032033 ff0400a5     B&@&..2 3 .!....
10028de0:	00a300a2 ff03ff05 ff0aff06 00a7ff20     ............ ...
10028df0:	26052606 25cf25cb 25c725ce              .&.&.%.%.%.%

10028dfc <categories>:
10028dfc:	00000000 201c001f 00000000 00002114     ....... .....!..
10028e0c:	24160002 00000000 00002514 28150002     ...$.....%.....(
10028e1c:	00000000 00002911 2a140000 00000000     .....).....*....
10028e2c:	00002b18 2c140000 00000000 00002d10     .+.....,.....-..
10028e3c:	2e140000 00010000 0000300c 3a140009     .........0.....:
10028e4c:	00010000 00003c18 3f140002 00010000     .....<.....?....
10028e5c:	00004103 5b150019 00000000 00005c14     .A.....[.....\..
10028e6c:	5d110000 00000000 00005e17 5f0f0000     ...].....^....._
10028e7c:	00000000 00006017 61030000 00190000     .....`.....a....
10028e8c:	00007b15 7c180000 00000000 00007d11     .{.....|.....}..
10028e9c:	7e180000 00000000 00007f00 a01c0020     ...~........ ...
10028eac:	00000000 0000a114 a2160000 00030000     ................
10028ebc:	0000a619 a7140000 00000000 0000a817     ................
10028ecc:	a9190000 00000000 0000aa06 ab130000     ................
10028edc:	00000000 0000ac18 ad010000 00000000     ................
10028eec:	0000ae19 af170000 00000000 0000b019     ................
10028efc:	b1180000 00000000 0000b20e b4170001     ................
10028f0c:	00000000 0000b503 b6140000 00010000     ................
10028f1c:	0000b817 b90e0000 00000000 0000ba06     ................
10028f2c:	bb120000 00000000 0000bc0e bf140002     ................
10028f3c:	00000000 0000c003 d7180016 00000000     ................
10028f4c:	0000d803 df040006 00000000 0000e003     ................
10028f5c:	f7180016 00000000 0000f803 3804003f     ............?..8
10028f6c:	00000001 00013903 4904000f 00000001     .....9.....I....
10028f7c:	00014a03 8d040042 00000001 00018e03     .J..B...........
10028f8c:	9b04000c 00000001 00019c03 aa04000d     ................
10028f9c:	00010001 0001ac03 ba04000d 00000001     ................
10028fac:	0001bb06 bc030000 00010001 0001be04     ................
10028fbc:	bf030000 00000001 0001c006 c4030003     ................
10028fcc:	00000001 0001c507 c6030000 00010001     ................
10028fdc:	0001c807 c9030000 00010001 0001cb07     ................
10028fec:	cc030000 00230001 0001f004 f1030000     ......#.........
10028ffc:	00000001 0001f207 f3030000 002d0001     ..............-.
1002900c:	00022104 22030000 00110002 00023404     .!.....".....4..
1002901c:	3a030005 001a0002 00025504 56030000     ...:.....U.....V
1002902c:	00010002 00025804 59030000 00000002     .....X.....Y....
1002903c:	00025a04 5b030000 00010002 00025d04     .Z.....[.....]..
1002904c:	60030002 00010002 00026204 63030000     ...`.....b.....c
1002905c:	00000002 00026404 65030000 00010002     .....d.....e....
1002906c:	00026704 68030000 00040002 00026d04     .g.....h.....m..
1002907c:	6f030001 00000002 00027004 71030000     ...o.....p.....q
1002908c:	00010002 00027304 75030001 00000002     .....s.....u....
1002909c:	00027604 7d030006 00000002 00027e04     .v.....}.....~..
100290ac:	80030001 00000002 00028104 82030000     ................
100290bc:	00010002 00028404 87030002 00050002     ................
100290cc:	00028d04 92030004 00000002 00029304     ................
100290dc:	94060000 00000002 00029504 9d030007     ................
100290ec:	00010002 00029f04 b0050010 00110002     ................
100290fc:	0002c217 c6050003 000b0002 0002d217     ................
1002910c:	e005000d 00040002 0002e517 ec050006     ................
1002911c:	00000002 0002ed17 ee050000 00000002     ................
1002912c:	0002ef17 000b0010 006f0003 00037003     ..........o..p..
1002913c:	74050003 00000003 00037517 76030000     ...t.....u.....v
1002914c:	00010003 00037a05 7b030000 00020003     .....z.....{....
1002915c:	00037e14 7f030000 00000003 00038417     .~..............
1002916c:	86030001 00000003 00038714 88030000     ................
1002917c:	00020003 00038c03 8e030000 00010003     ................
1002918c:	00039004 91030000 00100003 0003a303     ................
1002919c:	b004000c 00000003 0003b103 d2080020     ............ ...
100291ac:	00020003 0003d503 f6180020 00000003     ........ .......
100291bc:	0003f703 fc040004 00000003 0003fd03     ................
100291cc:	82190084 00000004 0004830b 880a0004     ................
100291dc:	00010004 00048a03 310300a5 00250005     ...........1..%.
100291ec:	00055905 5a140000 00050005 00056004     .Y.....Z.....`..
100291fc:	61030000 00250005 00058704 89140001     ...a..%.........
1002920c:	00000005 00058a10 8d190000 00010005     ................
1002921c:	00058f16 910b0000 002c0005 0005be10     ..........,.....
1002922c:	bf0b0000 00000005 0005c014 c10b0000     ................
1002923c:	00010005 0005c314 c40b0000 00010005     ................
1002924c:	0005c614 c70b0000 00000005 0005d006     ................
1002925c:	ef06001a 00030005 0005f314 00010001     ................
1002926c:	00050006 00060618 09140002 00010006     ................
1002927c:	00060b16 0c140000 00010006 00060e19     ................
1002928c:	100b0001 000a0006 00061b14 1c010000     ................
1002929c:	00000006 00061d14 20060002 001f0006     ........... ....
100292ac:	00064005 41060000 00090006 00064b0b     .@.....A.....K..
100292bc:	600c0014 00090006 00066a14 6e060003     ...`.....j.....n
100292cc:	00010006 0006700b 71060000 00620006     .....p.....q..b.
100292dc:	0006d414 d5060000 00000006 0006d60b     ................
100292ec:	dd010006 00000006 0006de19 df0b0000     ................
100292fc:	00050006 0006e505 e70b0001 00010006     ................
1002930c:	0006e919 ea0b0000 00030006 0006ee06     ................
1002931c:	f00c0001 00090006 0006fa06 fd190002     ................
1002932c:	00010006 0006ff06 00140000 000d0007     ................
1002933c:	00070f01 10060000 00000007 0007110b     ................
1002934c:	12060000 001d0007 0007300b 4d06001a     .........0.....M
1002935c:	00580007 0007a60b b106000a 00000007     ..X.............
1002936c:	0007c00c ca060009 00200007 0007eb0b     .......... .....
1002937c:	f4050008 00010007 0007f619 f7140000     ................
1002938c:	00020007 0007fa05 fd0b0000 00000007     ................
1002939c:	0007fe16 00060001 00150008 0008160b     ................
100293ac:	1a050003 00000008 00081b0b 24050008     ...............$
100293bc:	00000008 0008250b 28050002 00000008     .....%.....(....
100293cc:	0008290b 30140004 000e0008 00084006     .).....0.....@..
100293dc:	590b0018 00020008 00085e14 60060000     ...Y.....^.....`
100293ec:	000a0008 00087006 88170017 00000008     .....p..........
100293fc:	00088906 90010005 00010008 0008980b     ................
1002940c:	a0060007 00280008 0008c905 ca0b0000     ......(.........
1002941c:	00170008 0008e201 e30b0000 001f0008     ................
1002942c:	00090309 04060000 00350009 00093a0b     ..........5..:..
1002943c:	3b090000 00000009 00093c0b 3d060000     ...;.....<.....=
1002944c:	00000009 00093e09 410b0002 00070009     .....>.....A....
1002945c:	00094909 4d0b0003 00000009 00094e09     .I.....M.....N..
1002946c:	50060001 00000009 0009510b 58060006     ...P.....Q.....X
1002947c:	00090009 0009620b 64140001 00010009     .....b.....d....
1002948c:	0009660c 70140009 00000009 00097105     .f.....p.....q..
1002949c:	72060000 000e0009 0009810b 82090000     ...r............
100294ac:	00010009 00098506 8f060007 00010009     ................
100294bc:	00099306 aa060015 00060009 0009b206     ................
100294cc:	b6060000 00030009 0009bc0b bd060000     ................
100294dc:	00000009 0009be09 c10b0002 00030009     ................
100294ec:	0009c709 cb090001 00010009 0009cd0b     ................
100294fc:	ce060000 00000009 0009d709 dc060000     ................
1002950c:	00010009 0009df06 e20b0002 00010009     ................
1002951c:	0009e60c f0060009 00010009 0009f216     ................
1002952c:	f40e0001 00050009 0009fa19 fb160000     ................
1002953c:	00000009 0009fc06 fd140000 00000009     ................
1002954c:	0009fe0b 010b0000 0001000a 000a0309     ................
1002955c:	05060000 0005000a 000a0f06 13060001     ................
1002956c:	0015000a 000a2a06 32060006 0001000a     .....*.....2....
1002957c:	000a3506 38060001 0001000a 000a3c0b     .5.....8.....<..
1002958c:	3e090000 0002000a 000a410b 470b0001     ...>.....A.....G
1002959c:	0001000a 000a4b0b 510b0002 0000000a     .....K.....Q....
100295ac:	000a5906 5e060003 0000000a 000a660c     .Y.....^.....f..
100295bc:	700b0009 0001000a 000a7206 750b0002     ...p.....r.....u
100295cc:	0000000a 000a7614 810b0000 0001000a     .....v..........
100295dc:	000a8309 85060000 0008000a 000a8f06     ................
100295ec:	93060002 0015000a 000aaa06 b2060006     ................
100295fc:	0001000a 000ab506 bc0b0004 0000000a     ................
1002960c:	000abd06 be090000 0002000a 000ac10b     ................
1002961c:	c70b0004 0001000a 000ac909 cb090000     ................
1002962c:	0001000a 000acd0b d0060000 0000000a     ................
1002963c:	000ae006 e20b0001 0001000a 000ae60c     ................
1002964c:	f0140009 0000000a 000af116 f9060000     ................
1002965c:	0000000a 000afa0b 010b0005 0000000b     ................
1002966c:	000b0209 05060001 0007000b 000b0f06     ................
1002967c:	13060001 0015000b 000b2a06 32060006     .........*.....2
1002968c:	0001000b 000b3506 3c0b0004 0000000b     .....5.....<....
1002969c:	000b3d06 3e090000 0000000b 000b3f0b     .=.....>.....?..
100296ac:	40090000 0000000b 000b410b 47090003     ...@.....A.....G
100296bc:	0001000b 000b4b09 4d0b0001 0000000b     .....K.....M....
100296cc:	000b550b 57090001 0000000b 000b5c06     .U.....W.....\..
100296dc:	5f060001 0002000b 000b620b 660c0001     ..._.....b.....f
100296ec:	0009000b 000b7019 71060000 0000000b     .....p.....q....
100296fc:	000b720e 820b0005 0000000b 000b8306     .r..............
1002970c:	85060000 0005000b 000b8e06 92060002     ................
1002971c:	0003000b 000b9906 9c060001 0000000b     ................
1002972c:	000b9e06 a3060001 0001000b 000ba806     ................
1002973c:	ae060002 000b000b 000bbe09 c00b0001     ................
1002974c:	0000000b 000bc109 c6090001 0002000b     ................
1002975c:	000bca09 cd0b0002 0000000b 000bd006     ................
1002976c:	d7090000 0000000b 000be60c f00e0009     ................
1002977c:	0002000b 000bf319 f9160005 0000000b     ................
1002978c:	000bfa19 000b0000 0000000c 000c0109     ................
1002979c:	040b0002 0000000c 000c0506 0e060007     ................
100297ac:	0002000c 000c1206 2a060016 000f000c     ...........*....
100297bc:	000c3c0b 3d060000 0000000c 000c3e0b     .<.....=.....>..
100297cc:	41090002 0003000c 000c460b 4a0b0002     ...A.....F.....J
100297dc:	0003000c 000c550b 58060001 0002000c     .....U.....X....
100297ec:	000c5d06 60060000 0001000c 000c620b     .].....`.....b..
100297fc:	660c0001 0009000c 000c7714 780e0000     ...f.....w.....x
1002980c:	0006000c 000c7f19 80060000 0000000c     ................
1002981c:	000c810b 82090000 0001000c 000c8414     ................
1002982c:	85060000 0007000c 000c8e06 92060002     ................
1002983c:	0016000c 000caa06 b5060009 0004000c     ................
1002984c:	000cbc0b bd060000 0000000c 000cbe09     ................
1002985c:	bf0b0000 0000000c 000cc009 c60b0004     ................
1002986c:	0000000c 000cc709 ca090001 0001000c     ................
1002987c:	000ccc0b d5090001 0001000c 000cdd06     ................
1002988c:	e0060001 0001000c 000ce20b e60c0001     ................
1002989c:	0009000c 000cf106 f3090001 0000000c     ................
100298ac:	000d000b 02090001 0001000d 000d0406     ................
100298bc:	0e060008 0002000d 000d1206 3b0b0028     ............(..;
100298cc:	0001000d 000d3d06 3e090000 0002000d     .....=.....>....
100298dc:	000d410b 46090003 0002000d 000d4a09     .A.....F.....J..
100298ec:	4d0b0002 0000000d 000d4e06 4f190000     ...M.....N.....O
100298fc:	0000000d 000d5406 57090002 0000000d     .....T.....W....
1002990c:	000d580e 5f060006 0002000d 000d620b     .X....._.....b..
1002991c:	660c0001 0009000d 000d700e 79190008     ...f.....p.....y
1002992c:	0000000d 000d7a06 810b0005 0000000d     .....z..........
1002993c:	000d8209 85060001 0011000d 000d9a06     ................
1002994c:	b3060017 0008000d 000dbd06 c0060000     ................
1002995c:	0006000d 000dca0b cf090000 0002000d     ................
1002996c:	000dd20b d60b0002 0000000d 000dd809     ................
1002997c:	e60c0007 0009000d 000df209 f4140001     ................
1002998c:	0000000d 000e0106 310b002f 0000000e     ......../..1....
1002999c:	000e3206 340b0001 0006000e 000e3f16     .2.....4.....?..
100299ac:	40060000 0005000e 000e4605 470b0000     ...@.....F.....G
100299bc:	0007000e 000e4f14 500c0000 0009000e     .....O.....P....
100299cc:	000e5a14 81060001 0001000e 000e8406     .Z..............
100299dc:	86060000 0004000e 000e8c06 a5060017     ................
100299ec:	0000000e 000ea706 b10b0009 0000000e     ................
100299fc:	000eb206 b40b0001 0008000e 000ebd06     ................
10029a0c:	c0060000 0004000e 000ec605 c80b0000     ................
10029a1c:	0006000e 000ed00c dc060009 0003000e     ................
10029a2c:	000f0006 01190000 0002000f 000f0414     ................
10029a3c:	1319000e 0000000f 000f1414 15190000     ................
10029a4c:	0002000f 000f180b 1a190001 0005000f     ................
10029a5c:	000f200c 2a0e0009 0009000f 000f3419     . .....*.....4..
10029a6c:	350b0000 0000000f 000f3619 370b0000     ...5.....6.....7
10029a7c:	0000000f 000f3819 390b0000 0000000f     .....8.....9....
10029a8c:	000f3a15 3b110000 0000000f 000f3c15     .:.....;.....<..
10029a9c:	3d110000 0000000f 000f3e09 40060001     ...=.....>.....@
10029aac:	0007000f 000f4906 710b0023 000d000f     .....I..#..q....
10029abc:	000f7f09 800b0000 0004000f 000f8514     ................
10029acc:	860b0000 0001000f 000f8806 8d0b0004     ................
10029adc:	000a000f 000f990b be190023 0007000f     ........#.......
10029aec:	000fc60b c7190000 0005000f 000fce19     ................
10029afc:	d0140001 0004000f 000fd519 d9140003     ................
10029b0c:	0001000f 00100006 2b09002a 00010010     ........*..+....
10029b1c:	00102d0b 31090003 00000010 0010320b     .-.....1.....2..
10029b2c:	38090005 00000010 0010390b 3b090001     ...8.....9.....;
10029b3c:	00010010 00103d0b 3f060001 00000010     .....=.....?....
10029b4c:	0010400c 4a140009 00050010 00105006     .@.....J.....P..
10029b5c:	56090005 00010010 0010580b 5a060001     ...V.....X.....Z
10029b6c:	00030010 00105e0b 61060002 00000010     .....^.....a....
10029b7c:	00106209 65060002 00010010 00106709     .b.....e.....g..
10029b8c:	6e060006 00020010 0010710b 75060003     ...n.....q.....u
10029b9c:	000c0010 0010820b 83090000 00010010     ................
10029bac:	0010850b 87090001 00050010 00108d0b     ................
10029bbc:	8e060000 00000010 00108f09 900c0000     ................
10029bcc:	00090010 00109a09 9d0b0002 00000010     ................
10029bdc:	00109e19 a0030001 00250010 0010c703     ..........%.....
10029bec:	cd030000 00000010 0010d003 fb14002a     ............*...
10029bfc:	00000010 0010fc05 fd030000 00020010     ................
10029c0c:	00110006 4a060148 00030012 00125006     ....H..J.....P..
10029c1c:	58060006 00000012 00125a06 60060003     ...X.....Z.....`
10029c2c:	00280012 00128a06 90060003 00200012     ..(........... .
10029c3c:	0012b206 b8060003 00060012 0012c006     ................
10029c4c:	c2060000 00030012 0012c806 d806000e     ................
10029c5c:	00380012 00131206 18060003 00420013     ..8...........B.
10029c6c:	00135d0b 60140002 00080013 0013690e     .].....`.....i..
10029c7c:	80060013 000f0013 00139019 a0030009     ................
10029c8c:	00550013 0013f803 00100005 00000014     ..U.............
10029c9c:	00140106 6d19026b 00000016 00166e14     ....k..m.....n..
10029cac:	6f060000 00100016 0016801c 81060000     ...o............
10029cbc:	00190016 00169b15 9c110000 00000016     ................
10029ccc:	0016a006 eb14004a 00020016 0016ee0d     ....J...........
10029cdc:	f1060002 00070016 00170006 120b0011     ................
10029cec:	00020017 00171509 1f060000 00120017     ................
10029cfc:	0017320b 34090001 00000017 00173514     .2.....4.....5..
10029d0c:	40060001 00110017 0017520b 60060001     ...@.....R.....`
10029d1c:	000c0017 00176e06 720b0002 00010017     .....n.....r....
10029d2c:	00178006 b40b0033 00010017 0017b609     ....3...........
10029d3c:	b70b0000 00060017 0017be09 c60b0007     ................
10029d4c:	00000017 0017c709 c90b0001 000a0017     ................
10029d5c:	0017d414 d7050002 00000017 0017d814     ................
10029d6c:	db160002 00000017 0017dc06 dd0b0000     ................
10029d7c:	00000017 0017e00c f00e0009 00090017     ................
10029d8c:	00180014 06100005 00000018 00180714     ................
10029d9c:	0b0b0003 00020018 00180e01 0f0b0000     ................
10029dac:	00000018 0018100c 20060009 00220018     ........... ..".
10029dbc:	00184305 44060000 00340018 00188006     .C.....D..4.....
10029dcc:	850b0004 00010018 00188706 a90b0021     ............!...
10029ddc:	00000018 0018aa06 b0060000 00450018     ..............E.
10029dec:	00190006 200b001e 00020019 00192309     ....... .....#..
10029dfc:	270b0003 00010019 00192909 30090002     ...'.....).....0
10029e0c:	00010019 0019320b 33090000 00050019     .....2.....3....
10029e1c:	0019390b 40190002 00000019 00194414     .9.....@.....D..
10029e2c:	460c0001 00090019 00195006 7006001d     ...F.....P.....p
10029e3c:	00040019 00198006 b006002b 00190019     ........+.......
10029e4c:	0019d00c da0e0009 00000019 0019de19     ................
10029e5c:	00060021 0016001a 001a170b 19090001     !...............
10029e6c:	0001001a 001a1b0b 1e140000 0001001a     ................
10029e7c:	001a2006 55090034 0000001a 001a560b     . ..4..U.....V..
10029e8c:	57090000 0000001a 001a580b 600b0006     ...W.....X.....`
10029e9c:	0000001a 001a6109 620b0000 0000001a     .....a.....b....
10029eac:	001a6309 650b0001 0007001a 001a6d09     .c.....e.....m..
10029ebc:	730b0005 0009001a 001a7f0b 800c0000     ...s............
10029ecc:	0009001a 001a900c a0140009 0006001a     ................
10029edc:	001aa705 a8140000 0005001a 001ab00b     ................
10029eec:	be0a000d 0000001a 001abf0b 000b000f     ................
10029efc:	0003001b 001b0409 05060000 002e001b     ................
10029f0c:	001b340b 35090000 0000001b 001b360b     .4.....5.....6..
10029f1c:	3b090004 0000001b 001b3c0b 3d090000     ...;.....<.....=
10029f2c:	0004001b 001b420b 43090000 0001001b     .....B.....C....
10029f3c:	001b4506 500c0007 0009001b 001b5a14     .E.....P.....Z..
10029f4c:	61190006 0009001b 001b6b0b 74190008     ...a.....k.....t
10029f5c:	0008001b 001b7d14 800b0001 0001001b     .....}..........
10029f6c:	001b8209 83060000 001d001b 001ba109     ................
10029f7c:	a20b0000 0003001b 001ba609 a80b0001     ................
10029f8c:	0001001b 001baa09 ab0b0000 0002001b     ................
10029f9c:	001bae06 b00c0001 0009001b 001bba06     ................
10029fac:	e60b002b 0000001b 001be709 e80b0000     +...............
10029fbc:	0001001b 001bea09 ed0b0002 0000001b     ................
10029fcc:	001bee09 ef0b0000 0002001b 001bf209     ................
10029fdc:	fc140001 0003001b 001c0006 24090023     ............#..$
10029fec:	0007001c 001c2c0b 34090007 0001001c     .....,.....4....
10029ffc:	001c360b 3b140001 0004001c 001c400c     .6.....;.....@..
1002a00c:	4d060009 0002001c 001c500c 5a060009     ...M.....P.....Z
1002a01c:	001d001c 001c7805 7e140005 0001001c     .....x.....~....
1002a02c:	001c8003 90030008 002a001c 001cbd03     ..........*.....
1002a03c:	c0140002 0007001c 001cd00b d3140002     ................
1002a04c:	0000001c 001cd40b e109000c 0000001c     ................
1002a05c:	001ce20b e9060006 0003001c 001ced0b     ................
1002a06c:	ee060000 0005001c 001cf40b f5060000     ................
1002a07c:	0001001c 001cf709 f80b0000 0001001c     ................
1002a08c:	001cfa06 00040000 002b001d 001d2c05     ..........+..,..
1002a09c:	6b04003e 000c001d 001d7805 79030000     >..k.....x.....y
1002a0ac:	0000001d 001d7a04 7d030002 0000001d     .....z.....}....
1002a0bc:	001d7e04 8e03000f 0000001d 001d8f04     .~..............
1002a0cc:	9b05000b 0024001d 001dc00b 0003003f     ......$.....?...
1002a0dc:	0095001e 001e9604 9b030004 0000001e     ................
1002a0ec:	001e9c04 9e030001 0000001e 001e9f04     ................
1002a0fc:	a0030000 0075001e 001f1803 20030005     ......u........ 
1002a10c:	0025001f 001f4803 50040005 0000001f     ..%..H.....P....
1002a11c:	001f5103 52040000 0000001f 001f5303     .Q.....R.....S..
1002a12c:	54040000 0000001f 001f5503 56040000     ...T.....U.....V
1002a13c:	0000001f 001f5703 59030000 0000001f     .....W.....Y....
1002a14c:	001f5b03 5d030000 0000001f 001f5f03     .[.....]....._..
1002a15c:	8003001e 0007001f 001f8807 90030007     ................
1002a16c:	0007001f 001f9807 a0030007 0007001f     ................
1002a17c:	001fa807 b0030007 0001001f 001fb204     ................
1002a18c:	b3030000 0000001f 001fb404 b6040000     ................
1002a19c:	0001001f 001fb803 bc070003 0000001f     ................
1002a1ac:	001fbd17 be030000 0000001f 001fbf17     ................
1002a1bc:	c2040002 0000001f 001fc303 c4040000     ................
1002a1cc:	0000001f 001fc604 c8030001 0003001f     ................
1002a1dc:	001fcc07 cd170000 0002001f 001fd003     ................
1002a1ec:	d2040001 0001001f 001fd604 d8030001     ................
1002a1fc:	0003001f 001fdd17 e0030002 0001001f     ................
1002a20c:	001fe204 e5030002 0000001f 001fe604     ................
1002a21c:	e8030001 0004001f 001fed17 f2040002     ................
1002a22c:	0000001f 001ff303 f4040000 0000001f     ................
1002a23c:	001ff604 f8030001 0003001f 001ffc07     ................
1002a24c:	fd170000 0001001f 0020001c 0b01000a     .......... .....
1002a25c:	00040020 00201010 16140005 00010020      ..... ..... ...
1002a26c:	00201813 19120000 00000020 00201a15     .. ..... ..... .
1002a27c:	1b130000 00010020 00201d12 1e150000     .... ..... .....
1002a28c:	00000020 00201f13 20140000 00070020      ..... ....  ...
1002a29c:	0020281a 291b0000 00000020 00202a01     .( ....) ....* .
1002a2ac:	2f1c0004 00000020 00203014 39130008     .../ ....0 ....9
1002a2bc:	00000020 00203a12 3b140000 00030020      ....: ....; ...
1002a2cc:	00203f0f 41140001 00020020 00204418     .? ....A ....D .
1002a2dc:	45150000 00000020 00204611 47140000     ...E ....F ....G
1002a2ec:	000a0020 00205218 53140000 00000020      ....R ....S ...
1002a2fc:	0020540f 55140000 00090020 00205f1c     .T ....U ...._ .
1002a30c:	60010000 00040020 00206601 700e0009     ...` ....f ....p
1002a31c:	00000020 00207105 740e0000 00050020      ....q ....t ...
1002a32c:	00207a18 7d150002 00000020 00207e11     .z ....} ....~ .
1002a33c:	7f050000 00000020 0020800e 8a180009     .... ..... .....
1002a34c:	00020020 00208d15 8e110000 00000020      ..... ..... ...
1002a35c:	00209005 a016000c 00200020 0020d00b     .. ..... . ... .
1002a36c:	dd0a000c 00030020 0020e10b e20a0000     .... ..... .....
1002a37c:	00020020 0020e50b 0019000b 00010021      ..... .....!...
1002a38c:	00210208 03190000 00030021 00210708     ..!.....!.....!.
1002a39c:	08190000 00010021 00210a04 0b080000     ....!.....!.....
1002a3ac:	00020021 00210e04 10080001 00020021     !.....!.....!...
1002a3bc:	00211304 14190000 00000021 00211508     ..!.....!.....!.
1002a3cc:	16190000 00010021 00211818 19080000     ....!.....!.....
1002a3dc:	00040021 00211e19 24080005 00000021     !.....!....$!...
1002a3ec:	00212519 26030000 00000021 00212719     .%!....&!....'!.
1002a3fc:	28080000 00000021 00212919 2a030000     ...(!....)!....*
1002a40c:	00010021 00212c08 2e190001 00000021     !....,!.....!...
1002a41c:	00212f04 30080000 00010021 00213203     ./!....0!....2!.
1002a42c:	33080000 00000021 00213404 35060000     ...3!....4!....5
1002a43c:	00030021 00213904 3a190000 00010021     !....9!....:!...
1002a44c:	00213c04 3e080001 00010021 00214018     .<!....>!....@!.
1002a45c:	45080004 00000021 00214604 4a190003     ...E!....F!....J
1002a46c:	00000021 00214b18 4c190000 00010021     !....K!....L!...
1002a47c:	00214e03 4f190000 00000021 0021500e     .N!....O!....P!.
1002a48c:	600d000f 00220021 00218303 850d0001     ...`!."...!.....
1002a49c:	00030021 0021890e 8a190000 00010021     !.....!.....!...
1002a4ac:	00219018 95190004 00040021 00219a18     ..!.....!.....!.
1002a4bc:	9c190001 00030021 0021a018 a1190000     ....!.....!.....
1002a4cc:	00010021 0021a318 a4190000 00010021     !.....!.....!...
1002a4dc:	0021a618 a7190000 00060021 0021ae18     ..!.....!.....!.
1002a4ec:	af190000 001e0021 0021ce18 d0190001     ....!.....!.....
1002a4fc:	00010021 0021d218 d3190000 00000021     !.....!.....!...
1002a50c:	0021d418 d5190000 001e0021 0021f418     ..!.....!.....!.
1002a51c:	0019010b 00070023 00230815 09110000     ....#.....#.....
1002a52c:	00000023 00230a15 0b110000 00000023     #.....#.....#...
1002a53c:	00230c19 20180013 00010023 00232219     ..#.... #...."#.
1002a54c:	29150006 00000023 00232a11 2b190000     ...)#....*#....+
1002a55c:	00500023 00237c18 7d190000 001d0023     #.P..|#....}#...
1002a56c:	00239b18 b4190018 00270023 0023dc18     ..#.....#.'...#.
1002a57c:	e2190005 00440023 00244019 600e000a     ....#.D..@$....`
1002a58c:	003b0024 00249c19 ea0e004d 00150024     $.;...$.M...$...
1002a59c:	00250019 b71800b6 00000025 0025b819     ..%.....%.....%.
1002a5ac:	c1180008 00000025 0025c219 f8180035     ....%.....%.5...
1002a5bc:	00070025 00260019 6f18006e 00000026     %.....&.n..o&...
1002a5cc:	00267019 681500f7 00000027 00276911     .p&....h'....i'.
1002a5dc:	6a150000 00000027 00276b11 6c150000     ...j'....k'....l
1002a5ec:	00000027 00276d11 6e150000 00000027     '....m'....n'...
1002a5fc:	00276f11 70150000 00000027 00277111     .o'....p'....q'.
1002a60c:	72150000 00000027 00277311 74150000     ...r'....s'....t
1002a61c:	00000027 00277511 760e0000 001d0027     '....u'....v'...
1002a62c:	00279419 c018002b 00040027 0027c515     ..'.+...'.....'.
1002a63c:	c6110000 00000027 0027c718 e615001e     ....'.....'.....
1002a64c:	00000027 0027e711 e8150000 00000027     '.....'.....'...
1002a65c:	0027e911 ea150000 00000027 0027eb11     ..'.....'.....'.
1002a66c:	ec150000 00000027 0027ed11 ee150000     ....'.....'.....
1002a67c:	00000027 0027ef11 f0180000 000f0027     '.....'.....'...
1002a68c:	00280019 001800ff 00820029 00298315     ..(.....).....).
1002a69c:	84110000 00000029 00298515 86110000     ....).....).....
1002a6ac:	00000029 00298715 88110000 00000029     ).....).....)...
1002a6bc:	00298915 8a110000 00000029 00298b15     ..).....).....).
1002a6cc:	8c110000 00000029 00298d15 8e110000     ....).....).....
1002a6dc:	00000029 00298f15 90110000 00000029     ).....).....)...
1002a6ec:	00299115 92110000 00000029 00299315     ..).....).....).
1002a6fc:	94110000 00000029 00299515 96110000     ....).....).....
1002a70c:	00000029 00299715 98110000 00000029     ).....).....)...
1002a71c:	00299918 d815003e 00000029 0029d911     ..).>...).....).
1002a72c:	da150000 00000029 0029db11 dc180000     ....).....).....
1002a73c:	001f0029 0029fc15 fd110000 00000029     ).....).....)...
1002a74c:	0029fe18 00190101 002f002b 002b3018     ..).....+./..0+.
1002a75c:	45190014 0001002b 002b4718 4d190005     ...E+....G+....M
1002a76c:	0026002b 002b7619 9719001f 0068002b     +.&..v+.....+.h.
1002a77c:	002c0003 71040070 0000002c 002c7203     ..,.p..q,....r,.
1002a78c:	74040001 0000002c 002c7503 77040001     ...t,....u,....w
1002a79c:	0004002c 002c7c05 7e030001 0065002c     ,....|,....~,.e.
1002a7ac:	002ce404 e5190000 0005002c 002ceb03     ..,.....,.....,.
1002a7bc:	ef0b0003 0002002c 002cf203 f9140001     ....,.....,.....
1002a7cc:	0003002c 002cfd0e fe140000 0001002c     ,.....,.....,...
1002a7dc:	002d0003 27030025 0000002d 002d2d03     ..-.%..'-....--.
1002a7ec:	30060000 0037002d 002d6f05 70140000     ...0-.7..o-....p
1002a7fc:	0000002d 002d7f0b 80060000 0016002d     -.....-.....-...
1002a80c:	002da006 a8060006 0006002d 002db006     ..-.....-.....-.
1002a81c:	b8060006 0006002d 002dc006 c8060006     ....-.....-.....
1002a82c:	0006002d 002dd006 d8060006 0006002d     -.....-.....-...
1002a83c:	002de00b 0014001f 0001002e 002e0213     ..-.............
1002a84c:	03120000 0000002e 002e0413 05120000     ................
1002a85c:	0000002e 002e0614 09130002 0000002e     ................
1002a86c:	002e0a12 0b140000 0000002e 002e0c13     ................
1002a87c:	0d120000 0000002e 002e0e14 17100008     ................
1002a88c:	0000002e 002e1814 1a100001 0000002e     ................
1002a89c:	002e1b14 1c130000 0000002e 002e1d12     ................
1002a8ac:	1e140000 0001002e 002e2013 21120000     ......... .....!
1002a8bc:	0000002e 002e2215 23110000 0000002e     .....".....#....
1002a8cc:	002e2415 25110000 0000002e 002e2615     .$.....%.....&..
1002a8dc:	27110000 0000002e 002e2815 29110000     ...'.....(.....)
1002a8ec:	0000002e 002e2a14 2f050004 0000002e     .....*...../....
1002a8fc:	002e3014 3a100009 0001002e 002e3c14     .0.....:.....<..
1002a90c:	40100003 0000002e 002e4114 42150000     ...@.....A.....B
1002a91c:	0000002e 002e4314 5019000c 0001002e     .....C.....P....
1002a92c:	002e5214 55150002 0000002e 002e5611     .R.....U.....V..
1002a93c:	57150000 0000002e 002e5811 59150000     ...W.....X.....Y
1002a94c:	0000002e 002e5a11 5b150000 0000002e     .....Z.....[....
1002a95c:	002e5c11 5d100000 0000002e 002e8019     .\.....]........
1002a96c:	9b190019 0058002e 002f0019 f01900d5     ......X.../.....
1002a97c:	000b002f 0030001c 01140000 00020030     /.....0.....0...
1002a98c:	00300419 05050000 00000030 00300606     ..0.....0.....0.
1002a99c:	070d0000 00000030 00300815 09110000     ....0.....0.....
1002a9ac:	00000030 00300a15 0b110000 00000030     0.....0.....0...
1002a9bc:	00300c15 0d110000 00000030 00300e15     ..0.....0.....0.
1002a9cc:	0f110000 00000030 00301015 11110000     ....0.....0.....
1002a9dc:	00000030 00301219 14150001 00000030     0.....0.....0...
1002a9ec:	00301511 16150000 00000030 00301711     ..0.....0.....0.
1002a9fc:	18150000 00000030 00301911 1a150000     ....0.....0.....
1002aa0c:	00000030 00301b11 1c100000 00000030     0.....0.....0...
1002aa1c:	00301d15 1e110000 00010030 00302019     ..0.....0.... 0.
1002aa2c:	210d0000 00080030 00302a0b 2e090003     ...!0....*0.....
1002aa3c:	00010030 00303010 31050000 00040030     0....00....10...
1002aa4c:	00303619 380d0001 00020030 00303b05     .60....80....;0.
1002aa5c:	3c060000 00000030 00303d14 3e190000     ...<0....=0....>
1002aa6c:	00010030 00304106 990b0055 00010030     0....A0.U...0...
1002aa7c:	00309b17 9d050001 00010030 00309f06     ..0.....0.....0.
1002aa8c:	a0100000 00000030 0030a106 fb140059     ....0.....0.Y...
1002aa9c:	00000030 0030fc05 ff060002 00000030     0.....0.....0...
1002aaac:	00310506 3106002a 005d0031 00319019     ..1.*..11.]...1.
1002aabc:	920e0001 00030031 00319619 a0060009     ....1.....1.....
1002aacc:	001f0031 0031c019 f0060023 000f0031     1.....1.#...1...
1002aadc:	00320019 200e001e 00090032 00322a19     ..2.... 2....*2.
1002aaec:	480e001d 00070032 00325019 510e0000     ...H2....P2....Q
1002aafc:	000e0032 00326019 800e001f 00090032     2....`2.....2...
1002ab0c:	00328a19 b10e0026 000e0032 0032c019     ..2.&...2.....2.
1002ab1c:	0006013f 19bf0034 004dc019 0006003f     ?...4.....M.?...
1002ab2c:	5214004e 00a01505 16060000 047600a0     N..R..........v.
1002ab3c:	00a49019 d0060036 002700a4 00a4f805     ....6.....'.....
1002ab4c:	fe140005 000100a4 00a50006 0c05010b     ................
1002ab5c:	000000a6 00a60d14 10060002 000f00a6     ................
1002ab6c:	00a6200c 2a060009 000100a6 00a64003     . .....*.....@..
1002ab7c:	6e06002d 000000a6 00a66f0b 700a0000     -..n.....o.....p
1002ab8c:	000200a6 00a67314 740b0000 000900a6     .....s.....t....
1002ab9c:	00a67e14 7f050000 000000a6 00a68003     .~..............
1002abac:	9c05001b 000100a6 00a69e0b a0060001     ................
1002abbc:	004500a6 00a6e60d f00b0009 000100a6     ..E.............
1002abcc:	00a6f214 00170005 001600a7 00a71705     ................
1002abdc:	20170008 000100a7 00a72203 3004000d     ... .....".....0
1002abec:	000100a7 00a73203 7005003d 000000a7     .....2..=..p....
1002abfc:	00a77104 79030007 000e00a7 00a78805     .q.....y........
1002ac0c:	89170000 000100a7 00a78b03 8e040002     ................
1002ac1c:	000000a7 00a78f06 90030000 000400a7     ................
1002ac2c:	00a79504 96030000 001800a7 00a7af04     ................
1002ac3c:	b0030000 001a00a7 00a7d003 d3040001     ................
1002ac4c:	000000a7 00a7d504 d6030000 000300a7     ................
1002ac5c:	00a7f205 f5030002 000100a7 00a7f706     ................
1002ac6c:	f8050000 000100a7 00a7fa04 fb060000     ................
1002ac7c:	000600a7 00a8020b 03060000 000200a8     ................
1002ac8c:	00a8060b 07060000 000300a8 00a80b0b     ................
1002ac9c:	0c060000 001600a8 00a82309 250b0001     .........#.....%
1002acac:	000100a8 00a82709 28190000 000300a8     .....'.....(....
1002acbc:	00a82c0b 300e0000 000500a8 00a83619     .,.....0.....6..
1002accc:	38160001 000000a8 00a83919 40060000     ...8.....9.....@
1002acdc:	003300a8 00a87414 80090003 000100a8     ..3..t..........
1002acec:	00a88206 b4090031 000f00a8 00a8c40b     ....1...........
1002acfc:	ce140001 000100a8 00a8d00c e00b0009     ................
1002ad0c:	001100a8 00a8f206 f8140005 000200a8     ................
1002ad1c:	00a8fb06 fc140000 000000a8 00a8fd06     ................
1002ad2c:	ff0b0001 000000a8 00a9000c 0a060009     ................
1002ad3c:	001b00a9 00a9260b 2e140007 000100a9     .....&..........
1002ad4c:	00a93006 470b0016 000a00a9 00a95209     .0.....G.....R..
1002ad5c:	5f140001 000000a9 00a96006 800b001c     ..._.....`......
1002ad6c:	000200a9 00a98309 84060000 002e00a9     ................
1002ad7c:	00a9b30b b4090000 000100a9 00a9b60b     ................
1002ad8c:	ba090003 000100a9 00a9bc0b be090001     ................
1002ad9c:	000200a9 00a9c114 cf05000c 000000a9     ................
1002adac:	00a9d00c de140009 000100a9 00a9e006     ................
1002adbc:	e50b0004 000000a9 00a9e605 e7060000     ................
1002adcc:	000800a9 00a9f00c fa060009 000400a9     ................
1002addc:	00aa0006 290b0028 000500aa 00aa2f09     ....(..)...../..
1002adec:	310b0001 000100aa 00aa3309 350b0001     ...1.....3.....5
1002adfc:	000100aa 00aa4006 430b0002 000000aa     .....@.....C....
1002ae0c:	00aa4406 4c0b0007 000000aa 00aa4d09     .D.....L.....M..
1002ae1c:	500c0000 000900aa 00aa5c14 60060003     ...P.....\.....`
1002ae2c:	000f00aa 00aa7005 71060000 000500aa     .....p.....q....
1002ae3c:	00aa7719 7a060002 000000aa 00aa7b09     .w.....z.....{..
1002ae4c:	7c0b0000 000000aa 00aa7d09 7e060000     ...|.....}.....~
1002ae5c:	003100aa 00aab00b b1060000 000000aa     ..1.............
1002ae6c:	00aab20b b5060002 000100aa 00aab70b     ................
1002ae7c:	b9060001 000400aa 00aabe0b c0060001     ................
1002ae8c:	000000aa 00aac10b c2060000 000000aa     ................
1002ae9c:	00aadb06 dd050001 000000aa 00aade14     ................
1002aeac:	e0060001 000a00aa 00aaeb09 ec0b0000     ................
1002aebc:	000100aa 00aaee09 f0140001 000100aa     ................
1002aecc:	00aaf206 f3050000 000100aa 00aaf509     ................
1002aedc:	f60b0000 000000aa 00ab0106 09060005     ................
1002aeec:	000500ab 00ab1106 20060005 000600ab     ........... ....
1002aefc:	00ab2806 30040006 002200ab 00ab5303     .(.....0.."..S..
1002af0c:	54040000 000600ab 00ab5b17 5c050000     ...T.....[.....\
1002af1c:	000300ab 00ab6004 69050008 000000ab     .....`.....i....
1002af2c:	00ab6a17 70030001 004f00ab 00abc006     .j.....p..O.....
1002af3c:	e3090022 000100ab 00abe50b e6090000     "...............
1002af4c:	000100ab 00abe80b e9090000 000100ab     ................
1002af5c:	00abeb14 ec090000 000000ab 00abed0b     ................
1002af6c:	f00c0000 000900ab 00ac0006 b0062ba3     .............+..
1002af7c:	001600d7 00d7cb06 00020030 07ff00d8     ........0.......
1002af8c:	00f90006 7006016d 006900fa 00fb0004     ....m..p..i.....
1002af9c:	13040006 000400fb 00fb1d06 1e0b0000     ................
1002afac:	000000fb 00fb1f06 29180009 000000fb     ...........)....
1002afbc:	00fb2a06 3806000c 000400fb 00fb3e06     .*.....8.....>..
1002afcc:	40060000 000100fb 00fb4306 46060001     ...@.....C.....F
1002afdc:	006b00fb 00fbb217 d3060010 016a00fb     ..k...........j.
1002afec:	00fd3e11 3f150000 000000fd 00fd4019     .>.....?.....@..
1002affc:	5006000f 003f00fd 00fd9206 cf190035     ...P..?.....5...
1002b00c:	000000fd 00fdf006 fc16000b 000000fd     ................
1002b01c:	00fdfd19 000b0002 000f00fe 00fe1014     ................
1002b02c:	17150006 000000fe 00fe1811 19140000     ................
1002b03c:	000000fe 00fe200b 3014000f 000000fe     ..... .....0....
1002b04c:	00fe3110 330f0001 000100fe 00fe3515     .1.....3.....5..
1002b05c:	36110000 000000fe 00fe3715 38110000     ...6.....7.....8
1002b06c:	000000fe 00fe3915 3a110000 000000fe     .....9.....:....
1002b07c:	00fe3b15 3c110000 000000fe 00fe3d15     .;.....<.....=..
1002b08c:	3e110000 000000fe 00fe3f15 40110000     ...>.....?.....@
1002b09c:	000000fe 00fe4115 42110000 000000fe     .....A.....B....
1002b0ac:	00fe4315 44110000 000000fe 00fe4514     .C.....D.....E..
1002b0bc:	47150001 000000fe 00fe4811 49140000     ...G.....H.....I
1002b0cc:	000300fe 00fe4d0f 50140002 000200fe     .....M.....P....
1002b0dc:	00fe5414 58100003 000000fe 00fe5915     .T.....X.....Y..
1002b0ec:	5a110000 000000fe 00fe5b15 5c110000     ...Z.....[.....\
1002b0fc:	000000fe 00fe5d15 5e110000 000000fe     .....].....^....
1002b10c:	00fe5f14 62180002 000000fe 00fe6310     ._.....b.....c..
1002b11c:	64180000 000200fe 00fe6814 69160000     ...d.....h.....i
1002b12c:	000000fe 00fe6a14 70060001 000400fe     .....j.....p....
1002b13c:	00fe7606 ff010086 000000fe 00ff0114     .v..............
1002b14c:	04160002 000000ff 00ff0514 08150002     ................
1002b15c:	000000ff 00ff0911 0a140000 000000ff     ................
1002b16c:	00ff0b18 0c140000 000000ff 00ff0d10     ................
1002b17c:	0e140000 000100ff 00ff100c 1a140009     ................
1002b18c:	000100ff 00ff1c18 1f140002 000100ff     ................
1002b19c:	00ff2103 3b150019 000000ff 00ff3c14     .!.....;.....<..
1002b1ac:	3d110000 000000ff 00ff3e17 3f0f0000     ...=.....>.....?
1002b1bc:	000000ff 00ff4017 41030000 001900ff     .....@.....A....
1002b1cc:	00ff5b15 5c180000 000000ff 00ff5d11     .[.....\.....]..
1002b1dc:	5e180000 000000ff 00ff5f15 60110000     ...^....._.....`
1002b1ec:	000000ff 00ff6114 62150000 000000ff     .....a.....b....
1002b1fc:	00ff6311 64140000 000100ff 00ff6606     .c.....d.....f..
1002b20c:	70050009 000000ff 00ff7106 9e05002c     ...p.....q..,...
1002b21c:	000100ff 00ffa006 c206001e 000500ff     ................
1002b22c:	00ffca06 d2060005 000500ff 00ffda06     ................
1002b23c:	e0160002 000100ff 00ffe218 e3170000     ................
1002b24c:	000000ff 00ffe419 e5160000 000100ff     ................
1002b25c:	00ffe819 e9180000 000300ff 00ffed19     ................
1002b26c:	f9010001 000200ff 00fffc19 00060001     ................
1002b27c:	000b0100 01000d06 28060019 00120100     ...........(....
1002b28c:	01003c06 3f060001 000e0100 01005006     .<.....?.....P..
1002b29c:	8006000d 007a0100 01010014 070e0002     ......z.........
1002b2ac:	002c0101 01013719 400d0008 00340101     ..,..7.....@..4.
1002b2bc:	0101750e 79190003 00100101 01018a0e     .u.....y........
1002b2cc:	8c190001 00020101 01019019 a019000c     ................
1002b2dc:	00000101 0101d019 fd0b002c 00000101     ........,.......
1002b2ec:	01028006 a006001c 00300102 0102e00b     ..........0.....
1002b2fc:	e10e0000 001a0102 01030006 200e001f     ............... 
1002b30c:	00030103 01032d06 410d0013 00000103     .....-.....A....
1002b31c:	01034206 4a0d0007 00000103 01035006     .B.....J.....P..
1002b32c:	760b0025 00040103 01038006 9f14001d     %..v............
1002b33c:	00000103 0103a006 c8060023 00070103     ........#.......
1002b34c:	0103d014 d10d0000 00040103 01040003     ................
1002b35c:	5006004f 004d0104 0104a00c b0030009     O..P..M.........
1002b36c:	00230104 0104d803 00060023 00270105     ..#.....#.....'.
1002b37c:	01053006 6f140033 00000105 01057003     .0..3..o.....p..
1002b38c:	7c03000a 000e0105 01058c03 94030006     ...|............
1002b39c:	00010105 01059703 a303000a 000e0105     ................
1002b3ac:	0105b303 bb030006 00010105 01060006     ................
1002b3bc:	40060136 00150107 01076006 80050007     6..@.....`......
1002b3cc:	00050107 01078705 b2050029 00080107     ........).......
1002b3dc:	01080006 08060005 00000108 01080a06     ................
1002b3ec:	3706002b 00010108 01083c06 3f060000     +..7.....<.....?
1002b3fc:	00160108 01085714 580e0000 00070108     .....W.....X....
1002b40c:	01086006 77190016 00010108 0108790e     .`.....w.....y..
1002b41c:	80060006 001e0108 0108a70e e0060008     ................
1002b42c:	00120108 0108f406 fb0e0001 00040108     ................
1002b43c:	01090006 160e0015 00050109 01091f14     ................
1002b44c:	20060000 00190109 01093f14 80060000     ... .....?......
1002b45c:	00370109 0109bc0e be060001 00010109     ..7.............
1002b46c:	0109c00e d20e000f 002d0109 010a0006     ..........-.....
1002b47c:	010b0000 0002010a 010a050b 0c0b0001     ................
1002b48c:	0003010a 010a1006 15060003 0002010a     ................
1002b49c:	010a1906 380b001c 0002010a 010a3f0b     .......8.....?..
1002b4ac:	400e0000 0008010a 010a5014 60060008     ...@.....P.....`
1002b4bc:	001c010a 010a7d0e 7f140001 0000010a     .....}..........
1002b4cc:	010a8006 9d0e001c 0002010a 010ac006     ................
1002b4dc:	c8190007 0000010a 010ac906 e50b001b     ................
1002b4ec:	0001010a 010aeb0e f0140004 0006010a     ................
1002b4fc:	010b0006 39140035 0006010b 010b4006     ....5..9.....@..
1002b50c:	580e0015 0007010b 010b6006 780e0012     ...X.....`.....x
1002b51c:	0007010b 010b8006 99140011 0003010b     ................
1002b52c:	010ba90e 00060006 0048010c 010c8003     ..........H.....
1002b53c:	c0030032 0032010c 010cfa0e 00060005     2.....2.........
1002b54c:	0023010d 010d240b 300c0003 0009010d     ..#..$.....0....
1002b55c:	010e600e 8006001e 0029010e 010eab0b     .`........).....
1002b56c:	ad100001 0000010e 010eb006 fd0b0001     ................
1002b57c:	0002010e 010f0006 1d0e001c 0009010f     ................
1002b58c:	010f2706 30060000 0015010f 010f460b     .'.....0.....F..
1002b59c:	510e000a 0003010f 010f5514 70060004     ...Q.....U.....p
1002b5ac:	0011010f 010f820b 86140003 0003010f     ................
1002b5bc:	010fb006 c50e0014 0006010f 010fe006     ................
1002b5cc:	00090016 00000110 0110010b 02090000     ................
1002b5dc:	00000110 01100306 380b0034 000e0110     ........4..8....
1002b5ec:	01104714 520e0006 00130110 0110660c     .G.....R.....f..
1002b5fc:	700b0009 00000110 01107106 730b0001     ...p.....q.....s
1002b60c:	00010110 01107506 7f0b0000 00020110     .....u..........
1002b61c:	01108209 83060000 002c0110 0110b009     ..........,.....
1002b62c:	b30b0002 00030110 0110b709 b90b0001     ................
1002b63c:	00010110 0110bb14 bd010001 00000110     ................
1002b64c:	0110be14 c20b0003 00000110 0110cd01     ................
1002b65c:	d0060000 00180110 0110f00c 000b0009     ................
1002b66c:	00020111 01110306 270b0023 00040111     ........#..'....
1002b67c:	01112c09 2d0b0000 00070111 0111360c     .,.....-.....6..
1002b68c:	40140009 00030111 01114406 45090000     ...@.....D.....E
1002b69c:	00010111 01114706 50060000 00220111     .....G.....P..".
1002b6ac:	0111730b 74140000 00010111 01117606     .s.....t.....v..
1002b6bc:	800b0000 00010111 01118209 83060000     ................
1002b6cc:	002f0111 0111b309 b60b0002 00080111     ../.............
1002b6dc:	0111bf09 c1060001 00030111 0111c514     ................
1002b6ec:	c90b0003 00030111 0111cd14 ce090000     ................
1002b6fc:	00000111 0111cf0b d00c0000 00090111     ................
1002b70c:	0111da06 db140000 00000111 0111dc06     ................
1002b71c:	dd140000 00020111 0111e10e 00060013     ................
1002b72c:	00110112 01121306 2c090018 00020112     ...........,....
1002b73c:	01122f0b 32090002 00010112 0112340b     ./.....2.....4..
1002b74c:	35090000 00000112 0112360b 38140001     ...5.....6.....8
1002b75c:	00050112 01123e0b 3f060000 00010112     .....>.....?....
1002b76c:	0112410b 80060000 00060112 01128806     .A..............
1002b77c:	8a060000 00030112 01128f06 9f06000e     ................
1002b78c:	00090112 0112a914 b0060000 002e0112     ................
1002b79c:	0112df0b e0090000 00020112 0112e30b     ................
1002b7ac:	f00c0007 00090112 0113000b 02090001     ................
1002b7bc:	00010113 01130506 0f060007 00010113     ................
1002b7cc:	01131306 2a060015 00060113 01133206     .......*.....2..
1002b7dc:	35060001 00040113 01133b0b 3d060001     ...5.....;.....=
1002b7ec:	00000113 01133e09 400b0001 00000113     .....>.....@....
1002b7fc:	01134109 47090003 00010113 01134b09     .A.....G.....K..
1002b80c:	50060002 00000113 01135709 5d060000     ...P.....W.....]
1002b81c:	00040113 01136209 660b0001 00060113     .....b.....f....
1002b82c:	0113700b 00060004 00340114 01143509     .p........4..5..
1002b83c:	380b0002 00070114 01144009 420b0001     ...8.....@.....B
1002b84c:	00020114 01144509 460b0000 00000114     .....E.....F....
1002b85c:	01144706 4b140003 00040114 0114500c     .G.....K.....P..
1002b86c:	5a140009 00010114 01145d14 5e0b0000     ...Z.....].....^
1002b87c:	00000114 01145f06 80060002 002f0114     ....._......../.
1002b88c:	0114b009 b30b0002 00050114 0114b909     ................
1002b89c:	ba0b0000 00000114 0114bb09 bf0b0003     ................
1002b8ac:	00010114 0114c109 c20b0000 00010114     ................
1002b8bc:	0114c406 c6140001 00000114 0114c706     ................
1002b8cc:	d00c0000 00090114 01158006 af09002e     ................
1002b8dc:	00020115 0115b20b b8090003 00030115     ................
1002b8ec:	0115bc0b be090001 00000115 0115bf0b     ................
1002b8fc:	c1140001 00160115 0115d806 dc0b0003     ................
1002b90c:	00010115 01160006 3009002f 00020116     ......../..0....
1002b91c:	0116330b 3b090007 00010116 01163d0b     .3.....;.....=..
1002b92c:	3e090000 00000116 01163f0b 41140001     ...>.....?.....A
1002b93c:	00020116 01164406 500c0000 00090116     .....D.....P....
1002b94c:	01166014 8006000c 002a0116 0116ab0b     .`........*.....
1002b95c:	ac090000 00000116 0116ad0b ae090000     ................
1002b96c:	00010116 0116b00b b6090005 00000116     ................
1002b97c:	0116b70b b8060000 00000116 0116b914     ................
1002b98c:	c00c0000 00090116 01170006 1d0b001a     ................
1002b99c:	00020117 01172009 220b0001 00030117     ..... ....."....
1002b9ac:	01172609 270b0000 00040117 0117300c     .&.....'.....0..
1002b9bc:	3a0e0009 00010117 01173c14 3f190002     ...:.....<.....?
1002b9cc:	00000117 01174006 00060006 002b0118     .....@........+.
1002b9dc:	01182c09 2f0b0002 00080118 01183809     .,...../.....8..
1002b9ec:	390b0000 00010118 01183b14 a0030000     ...9.....;......
1002b9fc:	003f0118 0118e00c ea0e0009 00080118     ..?.............
1002ba0c:	0118ff06 09060007 00000119 01190c06     ................
1002ba1c:	15060007 00010119 01191806 30090017     ...............0
1002ba2c:	00050119 01193709 3b0b0001 00010119     .....7.....;....
1002ba3c:	01193d09 3e0b0000 00000119 01193f06     .=.....>.....?..
1002ba4c:	40090000 00000119 01194106 42090000     ...@.....A.....B
1002ba5c:	00000119 0119430b 44140000 00020119     .....C.....D....
1002ba6c:	0119500c a0060009 00070119 0119aa06     .P..............
1002ba7c:	d1090026 00020119 0119d40b da0b0003     &...............
1002ba8c:	00010119 0119dc09 e00b0003 00000119     ................
1002ba9c:	0119e106 e2140000 00000119 0119e306     ................
1002baac:	e4090000 00000119 011a0006 010b0000     ................
1002babc:	0009011a 011a0b06 330b0027 0005011a     ........'..3....
1002bacc:	011a3909 3a060000 0000011a 011a3b0b     .9.....:.....;..
1002badc:	3f140003 0007011a 011a470b 50060000     ...?.....G.....P
1002baec:	0000011a 011a510b 57090005 0001011a     .....Q.....W....
1002bafc:	011a590b 5c060002 002d011a 011a8a0b     .Y.....\..-.....
1002bb0c:	9709000c 0000011a 011a980b 9a140001     ................
1002bb1c:	0002011a 011a9d06 9e140000 0004011a     ................
1002bb2c:	011ab006 00140048 0009011b 011c0006     ....H...........
1002bb3c:	0a060008 0024011c 011c2f09 300b0000     ......$../.....0
1002bb4c:	0006011c 011c380b 3e090005 0000011c     .....8.....>....
1002bb5c:	011c3f0b 40060000 0000011c 011c4114     .?.....@.....A..
1002bb6c:	500c0004 0009011c 011c5a0e 70140012     ...P.....Z.....p
1002bb7c:	0001011c 011c7206 920b001d 0015011c     .....r..........
1002bb8c:	011ca909 aa0b0000 0006011c 011cb109     ................
1002bb9c:	b20b0000 0001011c 011cb409 b50b0000     ................
1002bbac:	0001011c 011d0006 08060006 0001011d     ................
1002bbbc:	011d0b06 310b0025 0005011d 011d3a0b     ....%..1.....:..
1002bbcc:	3c0b0000 0001011d 011d3f0b 46060006     ...<.....?.....F
1002bbdc:	0000011d 011d470b 500c0000 0009011d     .....G.....P....
1002bbec:	011d6006 67060005 0001011d 011d6a06     .`.....g.....j..
1002bbfc:	8a09001f 0004011d 011d900b 93090001     ................
1002bc0c:	0001011d 011d950b 96090000 0000011d     ................
1002bc1c:	011d970b 98060000 0000011d 011da00c     ................
1002bc2c:	e0060009 0012011e 011ef30b f5090001     ................
1002bc3c:	0001011e 011ef714 000b0001 0001011f     ................
1002bc4c:	011f0206 03090000 0000011f 011f0406     ................
1002bc5c:	1206000c 0021011f 011f3409 360b0001     ......!..4.....6
1002bc6c:	0004011f 011f3e09 400b0001 0000011f     .....>.....@....
1002bc7c:	011f4109 420b0000 0000011f 011f4314     .A.....B.....C..
1002bc8c:	500c000c 0009011f 011fb006 c00e0000     ...P............
1002bc9c:	0014011f 011fd519 dd160007 0003011f     ................
1002bcac:	011fe119 ff140010 0000011f 01200006     .............. .
1002bcbc:	000d0399 006e0124 01247014 80060004     ....$.n..p$.....
1002bccc:	00c30124 012f9006 f1140060 0001012f     $...../.`.../...
1002bcdc:	01300006 3001042f 000f0134 0134400b     ..0./..04....@4.
1002bcec:	41060000 00050134 0134470b 0006000e     ...A4....G4.....
1002bcfc:	02460144 01680006 40060238 001e016a     D.F...h.8..@j...
1002bd0c:	016a600c 6e140009 0001016a 016a7006     .`j....nj....pj.
1002bd1c:	c00c004e 0009016a 016ad006 f00b001d     N...j.....j.....
1002bd2c:	0004016a 016af514 00060000 002f016b     j.....j.....k./.
1002bd3c:	016b300b 37140006 0004016b 016b3c19     .0k....7k....<k.
1002bd4c:	40050003 0003016b 016b4414 45190000     ...@k....Dk....E
1002bd5c:	0000016b 016b500c 5b0e0009 0006016b     k....Pk....[k...
1002bd6c:	016b6306 7d060014 0012016b 016e4003     .ck....}k....@n.
1002bd7c:	800e003f 0016016e 016e9714 00060003     ?...n.....n.....
1002bd8c:	004a016f 016f4f0b 50060000 0000016f     o.J..Oo....Po...
1002bd9c:	016f5109 8f0b0036 0003016f 016f9305     .Qo.6...o.....o.
1002bdac:	e005000c 0001016f 016fe214 e3050000     ....o.....o.....
1002bdbc:	0000016f 016fe40b f0090000 0001016f     o.....o.....o...
1002bdcc:	01700006 000617f7 04d50188 018d0006     ..p.............
1002bddc:	f0050008 000301af 01aff505 fd050006     ................
1002bdec:	000101af 01b00006 32060122 000001b1     ........"..2....
1002bdfc:	01b15006 55060002 000001b1 01b16406     .P.....U.....d..
1002be0c:	70060003 018b01b1 01bc0006 7006006a     ...p........j..p
1002be1c:	000c01bc 01bc8006 90060008 000901bc     ................
1002be2c:	01bc9c19 9d0b0000 000101bc 01bc9f14     ................
1002be3c:	a0010000 000301bc 01cf000b 300b002d     ............-..0
1002be4c:	001601cf 01cf5019 00190073 00f501d0     .....P..s.......
1002be5c:	01d10019 29190026 003b01d1 01d16509     ....&..)..;..e..
1002be6c:	670b0001 000201d1 01d16a19 6d090002     ...g.....j.....m
1002be7c:	000501d1 01d17301 7b0b0007 000701d1     .....s.....{....
1002be8c:	01d18319 850b0001 000601d1 01d18c19     ................
1002be9c:	aa0b001d 000301d1 01d1ae19 0019003c     ............<...
1002beac:	004101d2 01d2420b 45190002 000001d2     ..A..B.....E....
1002bebc:	01d2c00e e00e0013 001301d2 01d30019     ................
1002becc:	600e0056 001801d3 01d40008 1a040019     V..`............
1002bedc:	001901d4 01d43408 4e040019 000601d4     .....4.....N....
1002beec:	01d45604 68080011 001901d4 01d48204     .V.....h........
1002befc:	9c080019 000001d4 01d49e08 a2080001     ................
1002bf0c:	000001d4 01d4a508 a9080001 000301d4     ................
1002bf1c:	01d4ae08 b6040007 000301d4 01d4bb04     ................
1002bf2c:	bd040000 000601d4 01d4c504 d008000a     ................
1002bf3c:	001901d4 01d4ea04 04080019 000101d5     ................
1002bf4c:	01d50708 0d080003 000701d5 01d51608     ................
1002bf5c:	1e040006 001901d5 01d53808 3b080001     .........8.....;
1002bf6c:	000301d5 01d54008 46080004 000001d5     .....@.....F....
1002bf7c:	01d54a08 52040006 001901d5 01d56c08     .J.....R.....l..
1002bf8c:	86040019 001901d5 01d5a008 ba040019     ................
1002bf9c:	001901d5 01d5d408 ee040019 001901d5     ................
1002bfac:	01d60808 22040019 001901d6 01d63c08     .......".....<..
1002bfbc:	56040019 001901d6 01d67008 8a040019     ...V.....p......
1002bfcc:	001b01d6 01d6a808 c1180018 000001d6     ................
1002bfdc:	01d6c204 db180018 000001d6 01d6dc04     ................
1002bfec:	e2080005 001801d6 01d6fb18 fc040000     ................
1002bffc:	001801d6 01d71518 16040000 000501d7     ................
1002c00c:	01d71c08 35180018 000001d7 01d73604     .......5.....6..
1002c01c:	4f180018 000001d7 01d75004 56080005     ...O.....P.....V
1002c02c:	001801d7 01d76f18 70040000 001801d7     .....o.....p....
1002c03c:	01d78918 8a040000 000501d7 01d79008     ................
1002c04c:	a9180018 000001d7 01d7aa04 c3180018     ................
1002c05c:	000001d7 01d7c404 ca080005 000001d7     ................
1002c06c:	01d7cb04 ce0c0000 003101d7 01d80019     ..........1.....
1002c07c:	000b01ff 003601da 01da3719 3b0b0003     ......6..7.....;
1002c08c:	003101da 01da6d19 750b0007 000001da     ..1..m.....u....
1002c09c:	01da7619 840b000d 000001da 01da8519     .v..............
1002c0ac:	87140001 000401da 01da9b0b a10b0004     ................
1002c0bc:	000e01da 01df0004 0a060009 000001df     ................
1002c0cc:	01df0b04 25040013 000501df 01e0000b     .......%........
1002c0dc:	080b0006 001001e0 01e01b0b 230b0006     ...............#
1002c0ec:	000101e0 01e0260b 30050004 003d01e0     .....&.....0..=.
1002c0fc:	01e08f0b 00060000 002c01e1 01e1300b     ..........,..0..
1002c10c:	37050006 000601e1 01e1400c 4e060009     ...7.....@.....N
1002c11c:	000001e1 01e14f19 90060000 001d01e2     .....O..........
1002c12c:	01e2ae0b c0060000 002b01e2 01e2ec0b     ..........+.....
1002c13c:	f00c0003 000901e2 01e2ff16 d0060000     ................
1002c14c:	001a01e4 01e4eb05 ec0b0000 000301e4     ................
1002c15c:	01e4f00c e0060009 000601e7 01e7e806     ................
1002c16c:	ed060003 000101e7 01e7f006 0006000e     ................
1002c17c:	00c401e8 01e8c70e d00b0008 000601e8     ................
1002c18c:	01e90003 440b0043 000601e9 01e94b05     ....C..D.....K..
1002c19c:	500c0000 000901e9 01e95e14 710e0001     ...P.....^.....q
1002c1ac:	003a01ec 01ecac19 ad0e0000 000201ec     ..:.............
1002c1bc:	01ecb016 b10e0000 000301ec 01ed010e     ................
1002c1cc:	2e19002c 000001ed 01ed2f0e 0006000e     ,......../......
1002c1dc:	000301ee 01ee0506 2106001a 000101ee     ...........!....
1002c1ec:	01ee2406 27060000 000001ee 01ee2906     .$.....'.....)..
1002c1fc:	34060009 000301ee 01ee3906 3b060000     ...4.....9.....;
1002c20c:	000001ee 01ee4206 47060000 000001ee     .....B.....G....
1002c21c:	01ee4906 4b060000 000001ee 01ee4d06     .I.....K.....M..
1002c22c:	51060002 000101ee 01ee5406 57060000     ...Q.....T.....W
1002c23c:	000001ee 01ee5906 5b060000 000001ee     .....Y.....[....
1002c24c:	01ee5d06 5f060000 000001ee 01ee6106     .]....._.....a..
1002c25c:	64060001 000001ee 01ee6706 6c060003     ...d.....g.....l
1002c26c:	000601ee 01ee7406 79060003 000301ee     .....t.....y....
1002c27c:	01ee7e06 80060000 000901ee 01ee8b06     .~..............
1002c28c:	a1060010 000201ee 01eea506 ab060004     ................
1002c29c:	001001ee 01eef018 00190001 002b01f0     ..............+.
1002c2ac:	01f03019 a0190063 000e01f0 01f0b119     .0..c...........
1002c2bc:	c119000e 000e01f0 01f0d119 000e0024     ............$...
1002c2cc:	000c01f1 01f10d19 e61900a0 001c01f1     ................
1002c2dc:	01f21019 4019002b 000801f2 01f25019     ....+..@.....P..
1002c2ec:	60190001 000501f2 01f30019 fb1700fa     ...`............
1002c2fc:	000401f3 01f40019 dc1902d7 001001f6     ................
1002c30c:	01f6f019 0019000c 007601f7 01f77b19     ..........v..{..
1002c31c:	e019005e 000b01f7 01f7f019 00190000     ^...............
1002c32c:	000b01f8 01f81019 50190037 000901f8     ........7..P....
1002c33c:	01f86019 90190027 001d01f8 01f8b019     .`..'...........
1002c34c:	00190001 015301f9 01fa6019 7019000d     ......S..`.....p
1002c35c:	000c01fa 01fa8019 90190008 002d01fa     ..............-.
1002c36c:	01fabf19 ce190006 000d01fa 01fae019     ................
1002c37c:	f0190008 000801fa 01fb0019 94190092     ................
1002c38c:	003601fb 01fbf00c 00060009 a6df0200     ..6.............
1002c39c:	02a70006 40061039 00dd02b7 02b82006     ....9..@..... ..
1002c3ac:	b0061681 1d3002ce 02f80006 0006021d     ......0.........
1002c3bc:	134a0300 03135006 0101105f 00000e00     ..J..P.._.......
1002c3cc:	0e002001 000b005f 00ef0e01 6c6f562f     . .._......./Vol
1002c3dc:	73656d75 7461642f 656a2f61 6e696b6e     umes/data/jenkin
1002c3ec:	6f772f73 70736b72 2f656361 2d554e47     s/workspace/GNU-
1002c3fc:	6c6f6f74 69616863 72612f6e 32312d6d     toolchain/arm-12
1002c40c:	6372732f 77656e2f 2d62696c 77677963     /src/newlib-cygw
1002c41c:	6e2f6e69 696c7765 696c2f62 732f6362     in/newlib/libc/s
1002c42c:	696c6474 64672f62 2d616f74 68746567     tdlib/gdtoa-geth
1002c43c:	632e7865 00000000                       ex.c....

1002c444 <__hexdig>:
	...
1002c474:	13121110 17161514 00001918 00000000     ................
1002c484:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
1002c4a4:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...

1002c544 <_init>:
1002c544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1002c546:	bf00      	nop
1002c548:	bcf8      	pop	{r3, r4, r5, r6, r7}
1002c54a:	bc08      	pop	{r3}
1002c54c:	469e      	mov	lr, r3
1002c54e:	4770      	bx	lr

1002c550 <_fini>:
1002c550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1002c552:	bf00      	nop
1002c554:	bcf8      	pop	{r3, r4, r5, r6, r7}
1002c556:	bc08      	pop	{r3}
1002c558:	469e      	mov	lr, r3
1002c55a:	4770      	bx	lr
1002c55c:	0000      	movs	r0, r0
	...

1002c560 <__MXC_FLC_Com_Write_veneer>:
1002c560:	f85f f000 	ldr.w	pc, [pc]	@ 1002c564 <__MXC_FLC_Com_Write_veneer+0x4>
1002c564:	20000ac9 	.word	0x20000ac9

1002c568 <__MXC_FLC_Com_Read_veneer>:
1002c568:	f85f f000 	ldr.w	pc, [pc]	@ 1002c56c <__MXC_FLC_Com_Read_veneer+0x4>
1002c56c:	20000ba1 	.word	0x20000ba1

1002c570 <__MXC_FLC_RevA_Write32Using128_veneer>:
1002c570:	f85f f000 	ldr.w	pc, [pc]	@ 1002c574 <__MXC_FLC_RevA_Write32Using128_veneer+0x4>
1002c574:	20000939 	.word	0x20000939

1002c578 <__MXC_FLC_PageErase_veneer>:
1002c578:	f85f f000 	ldr.w	pc, [pc]	@ 1002c57c <__MXC_FLC_PageErase_veneer+0x4>
1002c57c:	200006c9 	.word	0x200006c9

1002c580 <__EH_FRAME_BEGIN__>:
1002c580:	00000010 00000000 00527a01 010e7c02     .........zR..|..
1002c590:	000d0c1b 00000038 00000018 fffed5f4     ....8...........
1002c5a0:	0000009e 100e5100 03850484 01870286     .....Q..........
1002c5b0:	c5c6c75b 4c000ec4 0a0b420a 100e0b42     [......L.B..B...
1002c5c0:	03850484 01870286 c5c6c751 00000ec4     ........Q.......
1002c5d0:	00000010 00000000 00527a01 010e7c02     .........zR..|..
1002c5e0:	000d0c1b 00000014 00000018 fffed644     ............D...
1002c5f0:	00000134 0a710200 00000b43 00000010     4.....q.C.......
1002c600:	00000000 00527a01 010e7c02 000d0c1b     .....zR..|......
1002c610:	0000001c 00000018 fffed768 000000d8     ........h.......
1002c620:	080e4100 02840185 4a0a4902 0b41c4c5     .A.......I.J..A.

1002c630 <__FRAME_END__>:
1002c630:	00000000                                ....

Disassembly of section .data:

20000000 <ConsoleUart>:
20000000:	40042000                                . .@

20000004 <overflows>:
20000004:	ffffffff                                ....

20000008 <flc_int>:
20000008:	40029000                                ...@

2000000c <interruptCheck>:
2000000c:	00001008                                ....

20000010 <__malloc_sbrk_base>:
20000010:	ffffffff                                ....

20000014 <__malloc_trim_threshold>:
20000014:	00020000                                ....

20000018 <__malloc_av_>:
	...
20000020:	20000018 20000018 20000020 20000020     ... ...  ..  .. 
20000030:	20000028 20000028 20000030 20000030     (.. (.. 0.. 0.. 
20000040:	20000038 20000038 20000040 20000040     8.. 8.. @.. @.. 
20000050:	20000048 20000048 20000050 20000050     H.. H.. P.. P.. 
20000060:	20000058 20000058 20000060 20000060     X.. X.. `.. `.. 
20000070:	20000068 20000068 20000070 20000070     h.. h.. p.. p.. 
20000080:	20000078 20000078 20000080 20000080     x.. x.. ... ... 
20000090:	20000088 20000088 20000090 20000090     ... ... ... ... 
200000a0:	20000098 20000098 200000a0 200000a0     ... ... ... ... 
200000b0:	200000a8 200000a8 200000b0 200000b0     ... ... ... ... 
200000c0:	200000b8 200000b8 200000c0 200000c0     ... ... ... ... 
200000d0:	200000c8 200000c8 200000d0 200000d0     ... ... ... ... 
200000e0:	200000d8 200000d8 200000e0 200000e0     ... ... ... ... 
200000f0:	200000e8 200000e8 200000f0 200000f0     ... ... ... ... 
20000100:	200000f8 200000f8 20000100 20000100     ... ... ... ... 
20000110:	20000108 20000108 20000110 20000110     ... ... ... ... 
20000120:	20000118 20000118 20000120 20000120     ... ...  ..  .. 
20000130:	20000128 20000128 20000130 20000130     (.. (.. 0.. 0.. 
20000140:	20000138 20000138 20000140 20000140     8.. 8.. @.. @.. 
20000150:	20000148 20000148 20000150 20000150     H.. H.. P.. P.. 
20000160:	20000158 20000158 20000160 20000160     X.. X.. `.. `.. 
20000170:	20000168 20000168 20000170 20000170     h.. h.. p.. p.. 
20000180:	20000178 20000178 20000180 20000180     x.. x.. ... ... 
20000190:	20000188 20000188 20000190 20000190     ... ... ... ... 
200001a0:	20000198 20000198 200001a0 200001a0     ... ... ... ... 
200001b0:	200001a8 200001a8 200001b0 200001b0     ... ... ... ... 
200001c0:	200001b8 200001b8 200001c0 200001c0     ... ... ... ... 
200001d0:	200001c8 200001c8 200001d0 200001d0     ... ... ... ... 
200001e0:	200001d8 200001d8 200001e0 200001e0     ... ... ... ... 
200001f0:	200001e8 200001e8 200001f0 200001f0     ... ... ... ... 
20000200:	200001f8 200001f8 20000200 20000200     ... ... ... ... 
20000210:	20000208 20000208 20000210 20000210     ... ... ... ... 
20000220:	20000218 20000218 20000220 20000220     ... ...  ..  .. 
20000230:	20000228 20000228 20000230 20000230     (.. (.. 0.. 0.. 
20000240:	20000238 20000238 20000240 20000240     8.. 8.. @.. @.. 
20000250:	20000248 20000248 20000250 20000250     H.. H.. P.. P.. 
20000260:	20000258 20000258 20000260 20000260     X.. X.. `.. `.. 
20000270:	20000268 20000268 20000270 20000270     h.. h.. p.. p.. 
20000280:	20000278 20000278 20000280 20000280     x.. x.. ... ... 
20000290:	20000288 20000288 20000290 20000290     ... ... ... ... 
200002a0:	20000298 20000298 200002a0 200002a0     ... ... ... ... 
200002b0:	200002a8 200002a8 200002b0 200002b0     ... ... ... ... 
200002c0:	200002b8 200002b8 200002c0 200002c0     ... ... ... ... 
200002d0:	200002c8 200002c8 200002d0 200002d0     ... ... ... ... 
200002e0:	200002d8 200002d8 200002e0 200002e0     ... ... ... ... 
200002f0:	200002e8 200002e8 200002f0 200002f0     ... ... ... ... 
20000300:	200002f8 200002f8 20000300 20000300     ... ... ... ... 
20000310:	20000308 20000308 20000310 20000310     ... ... ... ... 
20000320:	20000318 20000318 20000320 20000320     ... ...  ..  .. 
20000330:	20000328 20000328 20000330 20000330     (.. (.. 0.. 0.. 
20000340:	20000338 20000338 20000340 20000340     8.. 8.. @.. @.. 
20000350:	20000348 20000348 20000350 20000350     H.. H.. P.. P.. 
20000360:	20000358 20000358 20000360 20000360     X.. X.. `.. `.. 
20000370:	20000368 20000368 20000370 20000370     h.. h.. p.. p.. 
20000380:	20000378 20000378 20000380 20000380     x.. x.. ... ... 
20000390:	20000388 20000388 20000390 20000390     ... ... ... ... 
200003a0:	20000398 20000398 200003a0 200003a0     ... ... ... ... 
200003b0:	200003a8 200003a8 200003b0 200003b0     ... ... ... ... 
200003c0:	200003b8 200003b8 200003c0 200003c0     ... ... ... ... 
200003d0:	200003c8 200003c8 200003d0 200003d0     ... ... ... ... 
200003e0:	200003d8 200003d8 200003e0 200003e0     ... ... ... ... 
200003f0:	200003e8 200003e8 200003f0 200003f0     ... ... ... ... 
20000400:	200003f8 200003f8 20000400 20000400     ... ... ... ... 
20000410:	20000408 20000408 20000410 20000410     ... ... ... ... 

20000420 <__sglue>:
20000420:	00000000 00000003 20001488              ........... 

2000042c <__global_locale>:
2000042c:	00000043 00000000 00000000 00000000     C...............
	...
2000044c:	00000043 00000000 00000000 00000000     C...............
	...
2000046c:	00000043 00000000 00000000 00000000     C...............
	...
2000048c:	00000043 00000000 00000000 00000000     C...............
	...
200004ac:	00000043 00000000 00000000 00000000     C...............
	...
200004cc:	00000043 00000000 00000000 00000000     C...............
	...
200004ec:	00000043 00000000 00000000 00000000     C...............
	...
2000050c:	10020689 1001b1bd 00000000 1002553c     ............<U..
2000051c:	10022ea0 10022c94 10022c94 10022c94     .....,...,...,..
2000052c:	10022c94 10022c94 10022c94 10022c94     .,...,...,...,..
2000053c:	10022c94 10022c94 ffffffff ffffffff     .,...,..........
2000054c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000574:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000598 <_impure_ptr>:
20000598:	200005a0 00000000                       ... ....

200005a0 <_impure_data>:
200005a0:	00000000 20001488 200014f0 20001558     ....... ... X.. 
	...
20000638:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000648:	0005deec 0000000b 00000000 00000000     ................
	...

200006c0 <__atexit_recursive_mutex>:
200006c0:	200015cc                                ... 

200006c4 <MXC_FLC_Busy>:
    return MXC_FLC_RevA_Busy();
200006c4:	f000 b864 	b.w	20000790 <MXC_FLC_RevA_Busy>

200006c8 <MXC_FLC_PageErase>:
    if ((addr >= MXC_FLASH_MEM_BASE) && (addr < (MXC_FLASH_MEM_BASE + MXC_FLASH_MEM_SIZE))) {
200006c8:	f100 4370 	add.w	r3, r0, #4026531840	@ 0xf0000000
200006cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
200006d0:	d320      	bcc.n	20000714 <MXC_FLC_PageErase+0x4c>
    } else if ((addr >= MXC_INFO_MEM_BASE) && (addr < (MXC_INFO_MEM_BASE + MXC_INFO_MEM_SIZE))) {
200006d2:	f1a0 5384 	sub.w	r3, r0, #276824064	@ 0x10800000
200006d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
200006da:	d21e      	bcs.n	2000071a <MXC_FLC_PageErase+0x52>
        *result = (addr & (MXC_INFO_MEM_SIZE - 1)) + MXC_FLASH_MEM_SIZE;
200006dc:	f3c0 000d 	ubfx	r0, r0, #0, #14
200006e0:	f500 2100 	add.w	r1, r0, #524288	@ 0x80000
{
200006e4:	b500      	push	{lr}
    err = MXC_FLC_RevA_PageErase((mxc_flc_reva_regs_t *)flc, addr);
200006e6:	480e      	ldr	r0, [pc, #56]	@ (20000720 <MXC_FLC_PageErase+0x58>)
{
200006e8:	b083      	sub	sp, #12
    err = MXC_FLC_RevA_PageErase((mxc_flc_reva_regs_t *)flc, addr);
200006ea:	f000 f897 	bl	2000081c <MXC_FLC_RevA_PageErase>
    MXC_GCR->sysctrl |= MXC_F_GCR_SYSCTRL_ICC0_FLUSH;
200006ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
200006f2:	6813      	ldr	r3, [r2, #0]
200006f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
200006f8:	6013      	str	r3, [r2, #0]
    while (MXC_GCR->sysctrl & MXC_F_GCR_SYSCTRL_ICC0_FLUSH) {}
200006fa:	6813      	ldr	r3, [r2, #0]
200006fc:	065b      	lsls	r3, r3, #25
200006fe:	d4fc      	bmi.n	200006fa <MXC_FLC_PageErase+0x32>
    line = *line_addr;
20000700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    line = *line_addr;
20000704:	4b07      	ldr	r3, [pc, #28]	@ (20000724 <MXC_FLC_PageErase+0x5c>)
    line = *line_addr;
20000706:	6812      	ldr	r2, [r2, #0]
20000708:	9201      	str	r2, [sp, #4]
    line = *line_addr;
2000070a:	681b      	ldr	r3, [r3, #0]
2000070c:	9301      	str	r3, [sp, #4]
}
2000070e:	b003      	add	sp, #12
20000710:	f85d fb04 	ldr.w	pc, [sp], #4
        *result = addr & (MXC_FLASH_MEM_SIZE - 1);
20000714:	f3c0 0112 	ubfx	r1, r0, #0, #19
20000718:	e7e4      	b.n	200006e4 <MXC_FLC_PageErase+0x1c>
        return E_BAD_PARAM;
2000071a:	f06f 0002 	mvn.w	r0, #2
}
2000071e:	4770      	bx	lr
20000720:	40029000 	.word	0x40029000
20000724:	10002000 	.word	0x10002000

20000728 <MXC_FLC_Write128>:
    if (address & 0xF) {
20000728:	0702      	lsls	r2, r0, #28
2000072a:	d129      	bne.n	20000780 <MXC_FLC_Write128+0x58>
    if ((addr >= MXC_FLASH_MEM_BASE) && (addr < (MXC_FLASH_MEM_BASE + MXC_FLASH_MEM_SIZE))) {
2000072c:	f100 4370 	add.w	r3, r0, #4026531840	@ 0xf0000000
20000730:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
20000734:	460a      	mov	r2, r1
20000736:	d320      	bcc.n	2000077a <MXC_FLC_Write128+0x52>
    } else if ((addr >= MXC_INFO_MEM_BASE) && (addr < (MXC_INFO_MEM_BASE + MXC_INFO_MEM_SIZE))) {
20000738:	f1a0 5384 	sub.w	r3, r0, #276824064	@ 0x10800000
2000073c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
20000740:	d21e      	bcs.n	20000780 <MXC_FLC_Write128+0x58>
        *result = (addr & (MXC_INFO_MEM_SIZE - 1)) + MXC_FLASH_MEM_SIZE;
20000742:	f3c0 000d 	ubfx	r0, r0, #0, #14
20000746:	f500 2100 	add.w	r1, r0, #524288	@ 0x80000
{
2000074a:	b500      	push	{lr}
    err = MXC_FLC_RevA_Write128((mxc_flc_reva_regs_t *)flc, addr, data);
2000074c:	480e      	ldr	r0, [pc, #56]	@ (20000788 <MXC_FLC_Write128+0x60>)
{
2000074e:	b083      	sub	sp, #12
    err = MXC_FLC_RevA_Write128((mxc_flc_reva_regs_t *)flc, addr, data);
20000750:	f000 f958 	bl	20000a04 <MXC_FLC_RevA_Write128>
    MXC_GCR->sysctrl |= MXC_F_GCR_SYSCTRL_ICC0_FLUSH;
20000754:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
20000758:	6813      	ldr	r3, [r2, #0]
2000075a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
2000075e:	6013      	str	r3, [r2, #0]
    while (MXC_GCR->sysctrl & MXC_F_GCR_SYSCTRL_ICC0_FLUSH) {}
20000760:	6813      	ldr	r3, [r2, #0]
20000762:	065b      	lsls	r3, r3, #25
20000764:	d4fc      	bmi.n	20000760 <MXC_FLC_Write128+0x38>
    line = *line_addr;
20000766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    line = *line_addr;
2000076a:	4b08      	ldr	r3, [pc, #32]	@ (2000078c <MXC_FLC_Write128+0x64>)
    line = *line_addr;
2000076c:	6812      	ldr	r2, [r2, #0]
2000076e:	9201      	str	r2, [sp, #4]
    line = *line_addr;
20000770:	681b      	ldr	r3, [r3, #0]
20000772:	9301      	str	r3, [sp, #4]
}
20000774:	b003      	add	sp, #12
20000776:	f85d fb04 	ldr.w	pc, [sp], #4
        *result = addr & (MXC_FLASH_MEM_SIZE - 1);
2000077a:	f3c0 0112 	ubfx	r1, r0, #0, #19
2000077e:	e7e4      	b.n	2000074a <MXC_FLC_Write128+0x22>
        return E_BAD_PARAM;
20000780:	f06f 0002 	mvn.w	r0, #2
}
20000784:	4770      	bx	lr
20000786:	bf00      	nop
20000788:	40029000 	.word	0x40029000
2000078c:	10002000 	.word	0x10002000

20000790 <MXC_FLC_RevA_Busy>:
    return (flc->ctrl &
20000790:	4b02      	ldr	r3, [pc, #8]	@ (2000079c <MXC_FLC_RevA_Busy+0xc>)
20000792:	6898      	ldr	r0, [r3, #8]
}
20000794:	f000 0007 	and.w	r0, r0, #7
20000798:	4770      	bx	lr
2000079a:	bf00      	nop
2000079c:	40029000 	.word	0x40029000

200007a0 <MXC_FLC_RevA_MassErase>:
    return (flc->ctrl &
200007a0:	6882      	ldr	r2, [r0, #8]
{
200007a2:	4603      	mov	r3, r0
    if (MXC_busy_flc(flc)) {
200007a4:	0750      	lsls	r0, r2, #29
200007a6:	d12a      	bne.n	200007fe <MXC_FLC_RevA_MassErase+0x5e>
    flc->clkdiv = SystemCoreClock / 1000000;
200007a8:	4a1a      	ldr	r2, [pc, #104]	@ (20000814 <MXC_FLC_RevA_MassErase+0x74>)
200007aa:	491b      	ldr	r1, [pc, #108]	@ (20000818 <MXC_FLC_RevA_MassErase+0x78>)
200007ac:	6812      	ldr	r2, [r2, #0]
200007ae:	fba1 1202 	umull	r1, r2, r1, r2
200007b2:	0c92      	lsrs	r2, r2, #18
200007b4:	605a      	str	r2, [r3, #4]
    if (flc->intr & MXC_F_FLC_REVA_INTR_AF) {
200007b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
200007b8:	0791      	lsls	r1, r2, #30
200007ba:	d41b      	bmi.n	200007f4 <MXC_FLC_RevA_MassErase+0x54>
    flc->ctrl = (flc->ctrl & ~MXC_F_FLC_REVA_CTRL_UNLOCK) | MXC_S_FLC_REVA_CTRL_UNLOCK_UNLOCKED;
200007bc:	689a      	ldr	r2, [r3, #8]
200007be:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
200007c2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
200007c6:	609a      	str	r2, [r3, #8]
    flc->ctrl = (flc->ctrl & ~MXC_F_FLC_REVA_CTRL_ERASE_CODE) |
200007c8:	689a      	ldr	r2, [r3, #8]
200007ca:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
200007ce:	f442 422a 	orr.w	r2, r2, #43520	@ 0xaa00
200007d2:	609a      	str	r2, [r3, #8]
    flc->ctrl |= MXC_F_FLC_REVA_CTRL_ME;
200007d4:	689a      	ldr	r2, [r3, #8]
200007d6:	f042 0202 	orr.w	r2, r2, #2
200007da:	609a      	str	r2, [r3, #8]
    return (flc->ctrl &
200007dc:	689a      	ldr	r2, [r3, #8]
    while (MXC_busy_flc(flc)) {}
200007de:	0752      	lsls	r2, r2, #29
200007e0:	d1fc      	bne.n	200007dc <MXC_FLC_RevA_MassErase+0x3c>
    flc->ctrl &= ~MXC_F_FLC_REVA_CTRL_UNLOCK;
200007e2:	689a      	ldr	r2, [r3, #8]
200007e4:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
200007e8:	609a      	str	r2, [r3, #8]
    if (flc->intr & MXC_F_FLC_REVA_INTR_AF) {
200007ea:	6a58      	ldr	r0, [r3, #36]	@ 0x24
200007ec:	f010 0002 	ands.w	r0, r0, #2
200007f0:	d108      	bne.n	20000804 <MXC_FLC_RevA_MassErase+0x64>
}
200007f2:	4770      	bx	lr
        flc->intr &= ~MXC_F_FLC_REVA_INTR_AF;
200007f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
200007f6:	f022 0202 	bic.w	r2, r2, #2
200007fa:	625a      	str	r2, [r3, #36]	@ 0x24
200007fc:	e7de      	b.n	200007bc <MXC_FLC_RevA_MassErase+0x1c>
        return E_BUSY;
200007fe:	f06f 0005 	mvn.w	r0, #5
20000802:	e7f6      	b.n	200007f2 <MXC_FLC_RevA_MassErase+0x52>
        flc->intr &= ~MXC_F_FLC_REVA_INTR_AF;
20000804:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
20000806:	f022 0202 	bic.w	r2, r2, #2
        return E_BAD_STATE;
2000080a:	f06f 0006 	mvn.w	r0, #6
        flc->intr &= ~MXC_F_FLC_REVA_INTR_AF;
2000080e:	625a      	str	r2, [r3, #36]	@ 0x24
        return E_BAD_STATE;
20000810:	4770      	bx	lr
20000812:	bf00      	nop
20000814:	20001768 	.word	0x20001768
20000818:	431bde83 	.word	0x431bde83

2000081c <MXC_FLC_RevA_PageErase>:
    return (flc->ctrl &
2000081c:	6882      	ldr	r2, [r0, #8]
    if (MXC_busy_flc(flc)) {
2000081e:	0752      	lsls	r2, r2, #29
{
20000820:	4603      	mov	r3, r0
    if (MXC_busy_flc(flc)) {
20000822:	d12b      	bne.n	2000087c <MXC_FLC_RevA_PageErase+0x60>
    flc->clkdiv = SystemCoreClock / 1000000;
20000824:	4a1a      	ldr	r2, [pc, #104]	@ (20000890 <MXC_FLC_RevA_PageErase+0x74>)
20000826:	481b      	ldr	r0, [pc, #108]	@ (20000894 <MXC_FLC_RevA_PageErase+0x78>)
20000828:	6812      	ldr	r2, [r2, #0]
2000082a:	fba0 0202 	umull	r0, r2, r0, r2
2000082e:	0c92      	lsrs	r2, r2, #18
20000830:	605a      	str	r2, [r3, #4]
    if (flc->intr & MXC_F_FLC_REVA_INTR_AF) {
20000832:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
20000834:	0790      	lsls	r0, r2, #30
20000836:	d41c      	bmi.n	20000872 <MXC_FLC_RevA_PageErase+0x56>
    flc->ctrl = (flc->ctrl & ~MXC_F_FLC_REVA_CTRL_UNLOCK) | MXC_S_FLC_REVA_CTRL_UNLOCK_UNLOCKED;
20000838:	689a      	ldr	r2, [r3, #8]
2000083a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
2000083e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
20000842:	609a      	str	r2, [r3, #8]
    flc->ctrl = (flc->ctrl & ~MXC_F_FLC_REVA_CTRL_ERASE_CODE) |
20000844:	689a      	ldr	r2, [r3, #8]
20000846:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
2000084a:	f442 42aa 	orr.w	r2, r2, #21760	@ 0x5500
2000084e:	609a      	str	r2, [r3, #8]
    flc->addr = addr;
20000850:	6019      	str	r1, [r3, #0]
    flc->ctrl |= MXC_F_FLC_REVA_CTRL_PGE;
20000852:	689a      	ldr	r2, [r3, #8]
20000854:	f042 0204 	orr.w	r2, r2, #4
20000858:	609a      	str	r2, [r3, #8]
    return (flc->ctrl &
2000085a:	689a      	ldr	r2, [r3, #8]
    while (MXC_busy_flc(flc)) {}
2000085c:	0752      	lsls	r2, r2, #29
2000085e:	d1fc      	bne.n	2000085a <MXC_FLC_RevA_PageErase+0x3e>
    flc->ctrl &= ~MXC_F_FLC_REVA_CTRL_UNLOCK;
20000860:	689a      	ldr	r2, [r3, #8]
20000862:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
20000866:	609a      	str	r2, [r3, #8]
    if (flc->intr & MXC_F_FLC_REVA_INTR_AF) {
20000868:	6a58      	ldr	r0, [r3, #36]	@ 0x24
2000086a:	f010 0002 	ands.w	r0, r0, #2
2000086e:	d108      	bne.n	20000882 <MXC_FLC_RevA_PageErase+0x66>
}
20000870:	4770      	bx	lr
        flc->intr &= ~MXC_F_FLC_REVA_INTR_AF;
20000872:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
20000874:	f022 0202 	bic.w	r2, r2, #2
20000878:	625a      	str	r2, [r3, #36]	@ 0x24
2000087a:	e7dd      	b.n	20000838 <MXC_FLC_RevA_PageErase+0x1c>
        return E_BUSY;
2000087c:	f06f 0005 	mvn.w	r0, #5
20000880:	e7f6      	b.n	20000870 <MXC_FLC_RevA_PageErase+0x54>
        flc->intr &= ~MXC_F_FLC_REVA_INTR_AF;
20000882:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
20000884:	f022 0202 	bic.w	r2, r2, #2
        return E_BAD_STATE;
20000888:	f06f 0006 	mvn.w	r0, #6
        flc->intr &= ~MXC_F_FLC_REVA_INTR_AF;
2000088c:	625a      	str	r2, [r3, #36]	@ 0x24
        return E_BAD_STATE;
2000088e:	4770      	bx	lr
20000890:	20001768 	.word	0x20001768
20000894:	431bde83 	.word	0x431bde83

20000898 <MXC_FLC_RevA_Write32>:
    if (logicAddr & 0x3) {
20000898:	078b      	lsls	r3, r1, #30
2000089a:	d139      	bne.n	20000910 <MXC_FLC_RevA_Write32+0x78>
    if ((*(uint32_t *)logicAddr & data) != data) {
2000089c:	4603      	mov	r3, r0
2000089e:	6808      	ldr	r0, [r1, #0]
200008a0:	ea32 0000 	bics.w	r0, r2, r0
200008a4:	d141      	bne.n	2000092a <MXC_FLC_RevA_Write32+0x92>
    return (flc->ctrl &
200008a6:	6898      	ldr	r0, [r3, #8]
    if (MXC_busy_flc(flc)) {
200008a8:	0740      	lsls	r0, r0, #29
    logicAddr = logicAddr & 0xfffffffc;
200008aa:	f021 0103 	bic.w	r1, r1, #3
    if (MXC_busy_flc(flc)) {
200008ae:	d132      	bne.n	20000916 <MXC_FLC_RevA_Write32+0x7e>
    flc->clkdiv = SystemCoreClock / 1000000;
200008b0:	481f      	ldr	r0, [pc, #124]	@ (20000930 <MXC_FLC_RevA_Write32+0x98>)
{
200008b2:	b410      	push	{r4}
    flc->clkdiv = SystemCoreClock / 1000000;
200008b4:	6800      	ldr	r0, [r0, #0]
200008b6:	4c1f      	ldr	r4, [pc, #124]	@ (20000934 <MXC_FLC_RevA_Write32+0x9c>)
200008b8:	fba4 4000 	umull	r4, r0, r4, r0
200008bc:	0c80      	lsrs	r0, r0, #18
200008be:	6058      	str	r0, [r3, #4]
    if (flc->intr & MXC_F_FLC_REVA_INTR_AF) {
200008c0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
200008c2:	0780      	lsls	r0, r0, #30
200008c4:	d41f      	bmi.n	20000906 <MXC_FLC_RevA_Write32+0x6e>
    flc->ctrl = (flc->ctrl & ~MXC_F_FLC_REVA_CTRL_UNLOCK) | MXC_S_FLC_REVA_CTRL_UNLOCK_UNLOCKED;
200008c6:	6898      	ldr	r0, [r3, #8]
200008c8:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
200008cc:	f040 5000 	orr.w	r0, r0, #536870912	@ 0x20000000
200008d0:	6098      	str	r0, [r3, #8]
    flc->ctrl |= MXC_F_FLC_REVA_CTRL_WDTH;
200008d2:	6898      	ldr	r0, [r3, #8]
200008d4:	f040 0010 	orr.w	r0, r0, #16
200008d8:	6098      	str	r0, [r3, #8]
    flc->addr = logicAddr;
200008da:	6019      	str	r1, [r3, #0]
    flc->data[0] = data;
200008dc:	631a      	str	r2, [r3, #48]	@ 0x30
    flc->ctrl |= MXC_F_FLC_REVA_CTRL_WR;
200008de:	689a      	ldr	r2, [r3, #8]
200008e0:	f042 0201 	orr.w	r2, r2, #1
200008e4:	609a      	str	r2, [r3, #8]
    while ((flc->ctrl & MXC_F_FLC_REVA_CTRL_PEND) != 0) {}
200008e6:	689a      	ldr	r2, [r3, #8]
200008e8:	01d1      	lsls	r1, r2, #7
200008ea:	d4fc      	bmi.n	200008e6 <MXC_FLC_RevA_Write32+0x4e>
    return (flc->ctrl &
200008ec:	689a      	ldr	r2, [r3, #8]
    while (MXC_busy_flc(flc)) {}
200008ee:	0752      	lsls	r2, r2, #29
200008f0:	d1fc      	bne.n	200008ec <MXC_FLC_RevA_Write32+0x54>
    flc->ctrl &= ~MXC_F_FLC_REVA_CTRL_UNLOCK;
200008f2:	689a      	ldr	r2, [r3, #8]
200008f4:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
200008f8:	609a      	str	r2, [r3, #8]
    if (flc->intr & MXC_F_FLC_REVA_INTR_AF) {
200008fa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
200008fc:	f010 0002 	ands.w	r0, r0, #2
20000900:	d10c      	bne.n	2000091c <MXC_FLC_RevA_Write32+0x84>
}
20000902:	bc10      	pop	{r4}
20000904:	4770      	bx	lr
        flc->intr &= ~MXC_F_FLC_REVA_INTR_AF;
20000906:	6a58      	ldr	r0, [r3, #36]	@ 0x24
20000908:	f020 0002 	bic.w	r0, r0, #2
2000090c:	6258      	str	r0, [r3, #36]	@ 0x24
2000090e:	e7da      	b.n	200008c6 <MXC_FLC_RevA_Write32+0x2e>
        return E_BAD_PARAM;
20000910:	f06f 0002 	mvn.w	r0, #2
20000914:	4770      	bx	lr
        return E_BUSY;
20000916:	f06f 0005 	mvn.w	r0, #5
2000091a:	4770      	bx	lr
        flc->intr &= ~MXC_F_FLC_REVA_INTR_AF;
2000091c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2000091e:	f022 0202 	bic.w	r2, r2, #2
20000922:	625a      	str	r2, [r3, #36]	@ 0x24
        return E_BAD_STATE;
20000924:	f06f 0006 	mvn.w	r0, #6
20000928:	e7eb      	b.n	20000902 <MXC_FLC_RevA_Write32+0x6a>
2000092a:	f06f 0006 	mvn.w	r0, #6
}
2000092e:	4770      	bx	lr
20000930:	20001768 	.word	0x20001768
20000934:	431bde83 	.word	0x431bde83

20000938 <MXC_FLC_RevA_Write32Using128>:
{
20000938:	b570      	push	{r4, r5, r6, lr}
2000093a:	4684      	mov	ip, r0
2000093c:	b084      	sub	sp, #16
    uint32_t current_data[4] = { 0, 0, 0, 0 };
2000093e:	2000      	movs	r0, #0
    if (logicAddr & 0x3) {
20000940:	078e      	lsls	r6, r1, #30
    uint32_t current_data[4] = { 0, 0, 0, 0 };
20000942:	e9cd 0000 	strd	r0, r0, [sp]
20000946:	e9cd 0002 	strd	r0, r0, [sp, #8]
    if (logicAddr & 0x3) {
2000094a:	d150      	bne.n	200009ee <MXC_FLC_RevA_Write32Using128+0xb6>
    if ((*(uint32_t *)logicAddr & data) != data) {
2000094c:	6808      	ldr	r0, [r1, #0]
2000094e:	ea32 0000 	bics.w	r0, r2, r0
20000952:	d149      	bne.n	200009e8 <MXC_FLC_RevA_Write32Using128+0xb0>
    return (flc->ctrl &
20000954:	f8dc 4008 	ldr.w	r4, [ip, #8]
    if (MXC_busy_flc(flc)) {
20000958:	0765      	lsls	r5, r4, #29
    logicAddr = logicAddr & 0xfffffff0;
2000095a:	f021 000f 	bic.w	r0, r1, #15
    if (MXC_busy_flc(flc)) {
2000095e:	d149      	bne.n	200009f4 <MXC_FLC_RevA_Write32Using128+0xbc>
    flc->clkdiv = SystemCoreClock / 1000000;
20000960:	4c26      	ldr	r4, [pc, #152]	@ (200009fc <MXC_FLC_RevA_Write32Using128+0xc4>)
20000962:	4d27      	ldr	r5, [pc, #156]	@ (20000a00 <MXC_FLC_RevA_Write32Using128+0xc8>)
20000964:	6824      	ldr	r4, [r4, #0]
20000966:	fba5 5404 	umull	r5, r4, r5, r4
2000096a:	0ca4      	lsrs	r4, r4, #18
2000096c:	f8cc 4004 	str.w	r4, [ip, #4]
    if (flc->intr & MXC_F_FLC_REVA_INTR_AF) {
20000970:	f8dc 4024 	ldr.w	r4, [ip, #36]	@ 0x24
20000974:	07a4      	lsls	r4, r4, #30
20000976:	d425      	bmi.n	200009c4 <MXC_FLC_RevA_Write32Using128+0x8c>
    flc->ctrl = (flc->ctrl & ~MXC_F_FLC_REVA_CTRL_UNLOCK) | MXC_S_FLC_REVA_CTRL_UNLOCK_UNLOCKED;
20000978:	f8dc 4008 	ldr.w	r4, [ip, #8]
2000097c:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
20000980:	f044 5400 	orr.w	r4, r4, #536870912	@ 0x20000000
20000984:	f8cc 4008 	str.w	r4, [ip, #8]
    for (ptr = (uint32_t *)logicAddr; ptr < (uint32_t *)(logicAddr + 16); ptr++, i++) {
20000988:	f100 0410 	add.w	r4, r0, #16
2000098c:	42a0      	cmp	r0, r4
2000098e:	4686      	mov	lr, r0
20000990:	d20d      	bcs.n	200009ae <MXC_FLC_RevA_Write32Using128+0x76>
20000992:	1d05      	adds	r5, r0, #4
20000994:	42ac      	cmp	r4, r5
20000996:	bf34      	ite	cc
20000998:	2401      	movcc	r4, #1
2000099a:	2404      	movcs	r4, #4
2000099c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
200009a0:	466d      	mov	r5, sp
        current_data[i] = *ptr;
200009a2:	f85e 6b04 	ldr.w	r6, [lr], #4
200009a6:	f845 6b04 	str.w	r6, [r5], #4
    for (ptr = (uint32_t *)logicAddr; ptr < (uint32_t *)(logicAddr + 16); ptr++, i++) {
200009aa:	45a6      	cmp	lr, r4
200009ac:	d1f9      	bne.n	200009a2 <MXC_FLC_RevA_Write32Using128+0x6a>
    if (byte < 4) {
200009ae:	f011 0f0c 	tst.w	r1, #12
    flc->addr = physicalAddr;
200009b2:	f8cc 3000 	str.w	r3, [ip]
    if (byte < 4) {
200009b6:	d10c      	bne.n	200009d2 <MXC_FLC_RevA_Write32Using128+0x9a>
        current_data[0] = data;
200009b8:	9200      	str	r2, [sp, #0]
    return MXC_FLC_Write128(logicAddr, current_data);
200009ba:	4669      	mov	r1, sp
200009bc:	f7ff feb4 	bl	20000728 <MXC_FLC_Write128>
}
200009c0:	b004      	add	sp, #16
200009c2:	bd70      	pop	{r4, r5, r6, pc}
        flc->intr &= ~MXC_F_FLC_REVA_INTR_AF;
200009c4:	f8dc 4024 	ldr.w	r4, [ip, #36]	@ 0x24
200009c8:	f024 0402 	bic.w	r4, r4, #2
200009cc:	f8cc 4024 	str.w	r4, [ip, #36]	@ 0x24
200009d0:	e7d2      	b.n	20000978 <MXC_FLC_RevA_Write32Using128+0x40>
    } else if (byte < 8) {
200009d2:	070b      	lsls	r3, r1, #28
200009d4:	d401      	bmi.n	200009da <MXC_FLC_RevA_Write32Using128+0xa2>
        current_data[1] = data;
200009d6:	9201      	str	r2, [sp, #4]
200009d8:	e7ef      	b.n	200009ba <MXC_FLC_RevA_Write32Using128+0x82>
    byte = (logicAddr & 0xf);
200009da:	f001 010f 	and.w	r1, r1, #15
    } else if (byte < 12) {
200009de:	290b      	cmp	r1, #11
        current_data[2] = data;
200009e0:	bf94      	ite	ls
200009e2:	9202      	strls	r2, [sp, #8]
        current_data[3] = data;
200009e4:	9203      	strhi	r2, [sp, #12]
200009e6:	e7e8      	b.n	200009ba <MXC_FLC_RevA_Write32Using128+0x82>
        return E_BAD_STATE;
200009e8:	f06f 0006 	mvn.w	r0, #6
200009ec:	e7e8      	b.n	200009c0 <MXC_FLC_RevA_Write32Using128+0x88>
        return E_BAD_PARAM;
200009ee:	f06f 0002 	mvn.w	r0, #2
200009f2:	e7e5      	b.n	200009c0 <MXC_FLC_RevA_Write32Using128+0x88>
        return E_BUSY;
200009f4:	f06f 0005 	mvn.w	r0, #5
200009f8:	e7e2      	b.n	200009c0 <MXC_FLC_RevA_Write32Using128+0x88>
200009fa:	bf00      	nop
200009fc:	20001768 	.word	0x20001768
20000a00:	431bde83 	.word	0x431bde83

20000a04 <MXC_FLC_RevA_Write128>:
    if (addr & 0xF) {
20000a04:	070b      	lsls	r3, r1, #28
20000a06:	d13a      	bne.n	20000a7e <MXC_FLC_RevA_Write128+0x7a>
    return (flc->ctrl &
20000a08:	4603      	mov	r3, r0
20000a0a:	6880      	ldr	r0, [r0, #8]
    if (MXC_busy_flc(flc)) {
20000a0c:	0740      	lsls	r0, r0, #29
20000a0e:	d139      	bne.n	20000a84 <MXC_FLC_RevA_Write128+0x80>
    flc->clkdiv = SystemCoreClock / 1000000;
20000a10:	4821      	ldr	r0, [pc, #132]	@ (20000a98 <MXC_FLC_RevA_Write128+0x94>)
{
20000a12:	b410      	push	{r4}
    flc->clkdiv = SystemCoreClock / 1000000;
20000a14:	6800      	ldr	r0, [r0, #0]
20000a16:	4c21      	ldr	r4, [pc, #132]	@ (20000a9c <MXC_FLC_RevA_Write128+0x98>)
20000a18:	fba4 4000 	umull	r4, r0, r4, r0
20000a1c:	0c80      	lsrs	r0, r0, #18
20000a1e:	6058      	str	r0, [r3, #4]
    if (flc->intr & MXC_F_FLC_REVA_INTR_AF) {
20000a20:	6a58      	ldr	r0, [r3, #36]	@ 0x24
20000a22:	0780      	lsls	r0, r0, #30
20000a24:	d426      	bmi.n	20000a74 <MXC_FLC_RevA_Write128+0x70>
    flc->ctrl = (flc->ctrl & ~MXC_F_FLC_REVA_CTRL_UNLOCK) | MXC_S_FLC_REVA_CTRL_UNLOCK_UNLOCKED;
20000a26:	6898      	ldr	r0, [r3, #8]
20000a28:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
20000a2c:	f040 5000 	orr.w	r0, r0, #536870912	@ 0x20000000
20000a30:	6098      	str	r0, [r3, #8]
    flc->ctrl &= ~MXC_F_FLC_REVA_CTRL_WDTH;
20000a32:	6898      	ldr	r0, [r3, #8]
20000a34:	f020 0010 	bic.w	r0, r0, #16
20000a38:	6098      	str	r0, [r3, #8]
    flc->addr = addr;
20000a3a:	6019      	str	r1, [r3, #0]
    flc->data[0] = data[0];
20000a3c:	6811      	ldr	r1, [r2, #0]
20000a3e:	6319      	str	r1, [r3, #48]	@ 0x30
    flc->data[1] = data[1];
20000a40:	6851      	ldr	r1, [r2, #4]
20000a42:	6359      	str	r1, [r3, #52]	@ 0x34
    flc->data[2] = data[2];
20000a44:	6891      	ldr	r1, [r2, #8]
20000a46:	6399      	str	r1, [r3, #56]	@ 0x38
    flc->data[3] = data[3];
20000a48:	68d2      	ldr	r2, [r2, #12]
20000a4a:	63da      	str	r2, [r3, #60]	@ 0x3c
    flc->ctrl |= MXC_F_FLC_REVA_CTRL_WR;
20000a4c:	689a      	ldr	r2, [r3, #8]
20000a4e:	f042 0201 	orr.w	r2, r2, #1
20000a52:	609a      	str	r2, [r3, #8]
    while ((flc->ctrl & MXC_F_FLC_REVA_CTRL_PEND) != 0) {}
20000a54:	689a      	ldr	r2, [r3, #8]
20000a56:	01d1      	lsls	r1, r2, #7
20000a58:	d4fc      	bmi.n	20000a54 <MXC_FLC_RevA_Write128+0x50>
    return (flc->ctrl &
20000a5a:	689a      	ldr	r2, [r3, #8]
    while (MXC_busy_flc(flc)) {}
20000a5c:	0752      	lsls	r2, r2, #29
20000a5e:	d1fc      	bne.n	20000a5a <MXC_FLC_RevA_Write128+0x56>
    flc->ctrl &= ~MXC_F_FLC_REVA_CTRL_UNLOCK;
20000a60:	689a      	ldr	r2, [r3, #8]
20000a62:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
20000a66:	609a      	str	r2, [r3, #8]
    if (flc->intr & MXC_F_FLC_REVA_INTR_AF) {
20000a68:	6a58      	ldr	r0, [r3, #36]	@ 0x24
20000a6a:	f010 0002 	ands.w	r0, r0, #2
20000a6e:	d10c      	bne.n	20000a8a <MXC_FLC_RevA_Write128+0x86>
}
20000a70:	bc10      	pop	{r4}
20000a72:	4770      	bx	lr
        flc->intr &= ~MXC_F_FLC_REVA_INTR_AF;
20000a74:	6a58      	ldr	r0, [r3, #36]	@ 0x24
20000a76:	f020 0002 	bic.w	r0, r0, #2
20000a7a:	6258      	str	r0, [r3, #36]	@ 0x24
20000a7c:	e7d3      	b.n	20000a26 <MXC_FLC_RevA_Write128+0x22>
        return E_BAD_PARAM;
20000a7e:	f06f 0002 	mvn.w	r0, #2
20000a82:	4770      	bx	lr
        return E_BUSY;
20000a84:	f06f 0005 	mvn.w	r0, #5
}
20000a88:	4770      	bx	lr
        flc->intr &= ~MXC_F_FLC_REVA_INTR_AF;
20000a8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
20000a8c:	f022 0202 	bic.w	r2, r2, #2
        return E_BAD_STATE;
20000a90:	f06f 0006 	mvn.w	r0, #6
        flc->intr &= ~MXC_F_FLC_REVA_INTR_AF;
20000a94:	625a      	str	r2, [r3, #36]	@ 0x24
        return E_BAD_STATE;
20000a96:	e7eb      	b.n	20000a70 <MXC_FLC_RevA_Write128+0x6c>
20000a98:	20001768 	.word	0x20001768
20000a9c:	431bde83 	.word	0x431bde83

20000aa0 <MXC_FLC_Com_VerifyData>:
// Length is number of 32-bit words
int MXC_FLC_Com_VerifyData(uint32_t address, uint32_t length, uint32_t *data)
{
    volatile uint32_t *ptr;

    for (ptr = (uint32_t *)address; ptr < (((uint32_t *)(address)) + length); ptr++, data++) {
20000aa0:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
20000aa4:	4560      	cmp	r0, ip
20000aa6:	d20d      	bcs.n	20000ac4 <MXC_FLC_Com_VerifyData+0x24>
20000aa8:	3a04      	subs	r2, #4
20000aaa:	e001      	b.n	20000ab0 <MXC_FLC_Com_VerifyData+0x10>
20000aac:	4560      	cmp	r0, ip
20000aae:	d209      	bcs.n	20000ac4 <MXC_FLC_Com_VerifyData+0x24>
        if (*ptr != *data) {
20000ab0:	6801      	ldr	r1, [r0, #0]
20000ab2:	f852 3f04 	ldr.w	r3, [r2, #4]!
20000ab6:	4299      	cmp	r1, r3
    for (ptr = (uint32_t *)address; ptr < (((uint32_t *)(address)) + length); ptr++, data++) {
20000ab8:	f100 0004 	add.w	r0, r0, #4
        if (*ptr != *data) {
20000abc:	d0f6      	beq.n	20000aac <MXC_FLC_Com_VerifyData+0xc>
            return E_BAD_STATE;
20000abe:	f06f 0006 	mvn.w	r0, #6
        }
    }

    return E_NO_ERROR;
}
20000ac2:	4770      	bx	lr
    return E_NO_ERROR;
20000ac4:	2000      	movs	r0, #0
20000ac6:	4770      	bx	lr

20000ac8 <MXC_FLC_Com_Write>:
#else
__attribute__((section(".flashprog")))
#endif
// make sure to disable ICC with ICC_Disable(); before Running this function
int MXC_FLC_Com_Write(uint32_t address, uint32_t length, uint32_t *buffer)
{
20000ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint32_t current_data_32;
    uint8_t *current_data = (uint8_t *)&current_data_32;
    uint8_t *buffer8 = (uint8_t *)buffer;

    // Align the address to a word boundary and read/write if we have to
    if (address & 0x3) {
20000acc:	f010 0703 	ands.w	r7, r0, #3
{
20000ad0:	b087      	sub	sp, #28
20000ad2:	4604      	mov	r4, r0
20000ad4:	460e      	mov	r6, r1
20000ad6:	4615      	mov	r5, r2
    if (address & 0x3) {
20000ad8:	d00b      	beq.n	20000af2 <MXC_FLC_Com_Write+0x2a>
20000ada:	e012      	b.n	20000b02 <MXC_FLC_Com_Write+0x3a>
        length -= bytes_written;
        buffer8 += bytes_written;
    }

    // Align the address to a 4-word (128bit) boundary
    while ((length >= 4) && ((address & 0xF) != 0)) {
20000adc:	0723      	lsls	r3, r4, #28
20000ade:	d028      	beq.n	20000b32 <MXC_FLC_Com_Write+0x6a>
        memcpy(current_data, buffer8, 4);
20000ae0:	6829      	ldr	r1, [r5, #0]
20000ae2:	9101      	str	r1, [sp, #4]
        if ((err = MXC_FLC_Write32(address, current_data_32)) != E_NO_ERROR) {
20000ae4:	4620      	mov	r0, r4
20000ae6:	f000 f867 	bl	20000bb8 <__MXC_FLC_Write32_veneer>
            return err;
        }

        address += 4;
        length -= 4;
20000aea:	3e04      	subs	r6, #4
        address += 4;
20000aec:	3404      	adds	r4, #4
        buffer8 += 4;
20000aee:	3504      	adds	r5, #4
        if ((err = MXC_FLC_Write32(address, current_data_32)) != E_NO_ERROR) {
20000af0:	b920      	cbnz	r0, 20000afc <MXC_FLC_Com_Write+0x34>
    while ((length >= 4) && ((address & 0xF) != 0)) {
20000af2:	2e03      	cmp	r6, #3
20000af4:	d8f2      	bhi.n	20000adc <MXC_FLC_Com_Write+0x14>
        address += 4;
        length -= 4;
        buffer8 += 4;
    }

    if (length > 0) {
20000af6:	2e00      	cmp	r6, #0
20000af8:	d143      	bne.n	20000b82 <MXC_FLC_Com_Write+0xba>
        if ((err = MXC_FLC_Write32(address, current_data_32)) != E_NO_ERROR) {
            return err;
        }
    }

    return E_NO_ERROR;
20000afa:	4630      	mov	r0, r6
}
20000afc:	b007      	add	sp, #28
20000afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memcpy(current_data, (void *)(address & (~0x3)), 4);
20000b02:	f020 0903 	bic.w	r9, r0, #3
        memcpy(&current_data[4 - bytes_written], buffer8, bytes_written);
20000b06:	ab01      	add	r3, sp, #4
        bytes_written = 4 - (address & 0x3);
20000b08:	f1c7 0804 	rsb	r8, r7, #4
        memcpy(&current_data[4 - bytes_written], buffer8, bytes_written);
20000b0c:	19d8      	adds	r0, r3, r7
20000b0e:	4629      	mov	r1, r5
        memcpy(current_data, (void *)(address & (~0x3)), 4);
20000b10:	f8d9 3000 	ldr.w	r3, [r9]
20000b14:	9301      	str	r3, [sp, #4]
        memcpy(&current_data[4 - bytes_written], buffer8, bytes_written);
20000b16:	4642      	mov	r2, r8
20000b18:	f000 f84a 	bl	20000bb0 <__memcpy_veneer>
        if ((err = MXC_FLC_Write32(address - (address % 4), current_data_32)) != E_NO_ERROR) {
20000b1c:	9901      	ldr	r1, [sp, #4]
20000b1e:	4648      	mov	r0, r9
20000b20:	f000 f84a 	bl	20000bb8 <__MXC_FLC_Write32_veneer>
20000b24:	2800      	cmp	r0, #0
20000b26:	d1e9      	bne.n	20000afc <MXC_FLC_Com_Write+0x34>
        address += bytes_written;
20000b28:	3e04      	subs	r6, #4
20000b2a:	4444      	add	r4, r8
        length -= bytes_written;
20000b2c:	443e      	add	r6, r7
        buffer8 += bytes_written;
20000b2e:	4445      	add	r5, r8
20000b30:	e7df      	b.n	20000af2 <MXC_FLC_Com_Write+0x2a>
    if (length >= 16) {
20000b32:	2e0f      	cmp	r6, #15
20000b34:	d902      	bls.n	20000b3c <MXC_FLC_Com_Write+0x74>
20000b36:	e010      	b.n	20000b5a <MXC_FLC_Com_Write+0x92>
    while (length >= 4) {
20000b38:	2e03      	cmp	r6, #3
20000b3a:	d9dc      	bls.n	20000af6 <MXC_FLC_Com_Write+0x2e>
        memcpy(current_data, buffer8, 4);
20000b3c:	6829      	ldr	r1, [r5, #0]
20000b3e:	9101      	str	r1, [sp, #4]
        if ((err = MXC_FLC_Write32(address, current_data_32)) != E_NO_ERROR) {
20000b40:	4620      	mov	r0, r4
20000b42:	f000 f839 	bl	20000bb8 <__MXC_FLC_Write32_veneer>
        length -= 4;
20000b46:	3e04      	subs	r6, #4
        address += 4;
20000b48:	3404      	adds	r4, #4
        buffer8 += 4;
20000b4a:	3504      	adds	r5, #4
        if ((err = MXC_FLC_Write32(address, current_data_32)) != E_NO_ERROR) {
20000b4c:	2800      	cmp	r0, #0
20000b4e:	d0f3      	beq.n	20000b38 <MXC_FLC_Com_Write+0x70>
}
20000b50:	b007      	add	sp, #28
20000b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        while (length >= 16) {
20000b56:	2e0f      	cmp	r6, #15
20000b58:	d9ee      	bls.n	20000b38 <MXC_FLC_Com_Write+0x70>
            memcpy(buff128, buffer8, 16);
20000b5a:	6828      	ldr	r0, [r5, #0]
20000b5c:	6869      	ldr	r1, [r5, #4]
20000b5e:	68aa      	ldr	r2, [r5, #8]
20000b60:	68eb      	ldr	r3, [r5, #12]
20000b62:	f10d 0c08 	add.w	ip, sp, #8
20000b66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
            if ((err = MXC_FLC_Write128(address, buff128)) != E_NO_ERROR) {
20000b6a:	4620      	mov	r0, r4
20000b6c:	a902      	add	r1, sp, #8
20000b6e:	f7ff fddb 	bl	20000728 <MXC_FLC_Write128>
            length -= 16;
20000b72:	3e10      	subs	r6, #16
            address += 16;
20000b74:	3410      	adds	r4, #16
            buffer8 += 16;
20000b76:	3510      	adds	r5, #16
            if ((err = MXC_FLC_Write128(address, buff128)) != E_NO_ERROR) {
20000b78:	2800      	cmp	r0, #0
20000b7a:	d0ec      	beq.n	20000b56 <MXC_FLC_Com_Write+0x8e>
}
20000b7c:	b007      	add	sp, #28
20000b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memcpy(current_data, (void *)(address), 4);
20000b82:	6823      	ldr	r3, [r4, #0]
20000b84:	9301      	str	r3, [sp, #4]
        memcpy(current_data, buffer8, length);
20000b86:	4629      	mov	r1, r5
20000b88:	4632      	mov	r2, r6
20000b8a:	a801      	add	r0, sp, #4
20000b8c:	f000 f810 	bl	20000bb0 <__memcpy_veneer>
        if ((err = MXC_FLC_Write32(address, current_data_32)) != E_NO_ERROR) {
20000b90:	9901      	ldr	r1, [sp, #4]
20000b92:	4620      	mov	r0, r4
}
20000b94:	b007      	add	sp, #28
20000b96:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if ((err = MXC_FLC_Write32(address, current_data_32)) != E_NO_ERROR) {
20000b9a:	f000 b80d 	b.w	20000bb8 <__MXC_FLC_Write32_veneer>
20000b9e:	bf00      	nop

20000ba0 <MXC_FLC_Com_Read>:
#pragma section = ".flashprog"
#else
__attribute__((section(".flashprog")))
#endif
void MXC_FLC_Com_Read(int address, void *buffer, int len)
{
20000ba0:	4603      	mov	r3, r0
    memcpy(buffer, (void *)address, len);
20000ba2:	4608      	mov	r0, r1
20000ba4:	4619      	mov	r1, r3
20000ba6:	f000 b803 	b.w	20000bb0 <__memcpy_veneer>
20000baa:	bf00      	nop
20000bac:	0000      	movs	r0, r0
	...

20000bb0 <__memcpy_veneer>:
20000bb0:	f85f f000 	ldr.w	pc, [pc]	@ 20000bb4 <__memcpy_veneer+0x4>
20000bb4:	10019c31 	.word	0x10019c31

20000bb8 <__MXC_FLC_Write32_veneer>:
20000bb8:	f85f f000 	ldr.w	pc, [pc]	@ 20000bbc <__MXC_FLC_Write32_veneer+0x4>
20000bbc:	100132a1 	.word	0x100132a1

20000bc0 <__init_array_start>:
20000bc0:	10019f71 	.word	0x10019f71

20000bc4 <__frame_dummy_init_array_entry>:
20000bc4:	1000e271                                q...

20000bc8 <__do_global_dtors_aux_fini_array_entry>:
20000bc8:	1000e249                                I...
